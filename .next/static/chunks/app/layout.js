/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/layout"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Falexlarcheveque%2FCoding%2Fcalculator%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%22path%22%3A%22src%2Fapp%2Flayout.tsx%22%2C%22import%22%3A%22Inter%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%2C%22display%22%3A%22swap%22%2C%22variable%22%3A%22--font-inter%22%7D%5D%2C%22variableName%22%3A%22inter%22%7D&modules=%2FUsers%2Falexlarcheveque%2FCoding%2Fcalculator%2Fsrc%2Fapp%2Fglobals.css&modules=%2FUsers%2Falexlarcheveque%2FCoding%2Fcalculator%2Fsrc%2Fcomponents%2FNavbar.tsx&modules=%2FUsers%2Falexlarcheveque%2FCoding%2Fcalculator%2Fsrc%2Fcomponents%2FPostHogProvider.tsx&server=false!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Falexlarcheveque%2FCoding%2Fcalculator%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%22path%22%3A%22src%2Fapp%2Flayout.tsx%22%2C%22import%22%3A%22Inter%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%2C%22display%22%3A%22swap%22%2C%22variable%22%3A%22--font-inter%22%7D%5D%2C%22variableName%22%3A%22inter%22%7D&modules=%2FUsers%2Falexlarcheveque%2FCoding%2Fcalculator%2Fsrc%2Fapp%2Fglobals.css&modules=%2FUsers%2Falexlarcheveque%2FCoding%2Fcalculator%2Fsrc%2Fcomponents%2FNavbar.tsx&modules=%2FUsers%2Falexlarcheveque%2FCoding%2Fcalculator%2Fsrc%2Fcomponents%2FPostHogProvider.tsx&server=false! ***!

/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/font/google/target.css?{\"path\":\"src/app/layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"],\"display\":\"swap\",\"variable\":\"--font-inter\"}],\"variableName\":\"inter\"} */ \"(app-pages-browser)/./node_modules/next/font/google/target.css?{\\\"path\\\":\\\"src/app/layout.tsx\\\",\\\"import\\\":\\\"Inter\\\",\\\"arguments\\\":[{\\\"subsets\\\":[\\\"latin\\\"],\\\"display\\\":\\\"swap\\\",\\\"variable\\\":\\\"--font-inter\\\"}],\\\"variableName\\\":\\\"inter\\\"}\", 23));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/globals.css */ \"(app-pages-browser)/./src/app/globals.css\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/components/Navbar.tsx */ \"(app-pages-browser)/./src/components/Navbar.tsx\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/components/PostHogProvider.tsx */ \"(app-pages-browser)/./src/components/PostHogProvider.tsx\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lMkZVc2VycyUyRmFsZXhsYXJjaGV2ZXF1ZSUyRkNvZGluZyUyRmNhbGN1bGF0b3IlMkZub2RlX21vZHVsZXMlMkZuZXh0JTJGZm9udCUyRmdvb2dsZSUyRnRhcmdldC5jc3MlM0YlN0IlMjJwYXRoJTIyJTNBJTIyc3JjJTJGYXBwJTJGbGF5b3V0LnRzeCUyMiUyQyUyMmltcG9ydCUyMiUzQSUyMkludGVyJTIyJTJDJTIyYXJndW1lbnRzJTIyJTNBJTVCJTdCJTIyc3Vic2V0cyUyMiUzQSU1QiUyMmxhdGluJTIyJTVEJTJDJTIyZGlzcGxheSUyMiUzQSUyMnN3YXAlMjIlMkMlMjJ2YXJpYWJsZSUyMiUzQSUyMi0tZm9udC1pbnRlciUyMiU3RCU1RCUyQyUyMnZhcmlhYmxlTmFtZSUyMiUzQSUyMmludGVyJTIyJTdEJm1vZHVsZXM9JTJGVXNlcnMlMkZhbGV4bGFyY2hldmVxdWUlMkZDb2RpbmclMkZjYWxjdWxhdG9yJTJGc3JjJTJGYXBwJTJGZ2xvYmFscy5jc3MmbW9kdWxlcz0lMkZVc2VycyUyRmFsZXhsYXJjaGV2ZXF1ZSUyRkNvZGluZyUyRmNhbGN1bGF0b3IlMkZzcmMlMkZjb21wb25lbnRzJTJGTmF2YmFyLnRzeCZtb2R1bGVzPSUyRlVzZXJzJTJGYWxleGxhcmNoZXZlcXVlJTJGQ29kaW5nJTJGY2FsY3VsYXRvciUyRnNyYyUyRmNvbXBvbmVudHMlMkZQb3N0SG9nUHJvdmlkZXIudHN4JnNlcnZlcj1mYWxzZSEiLCJtYXBwaW5ncyI6IkFBQUEsd2hCQUFxUztBQUNyUyxvS0FBaUc7QUFDakcsZ0xBQXVHO0FBQ3ZHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/NjQzZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy9hbGV4bGFyY2hldmVxdWUvQ29kaW5nL2NhbGN1bGF0b3Ivbm9kZV9tb2R1bGVzL25leHQvZm9udC9nb29nbGUvdGFyZ2V0LmNzcz97XFxcInBhdGhcXFwiOlxcXCJzcmMvYXBwL2xheW91dC50c3hcXFwiLFxcXCJpbXBvcnRcXFwiOlxcXCJJbnRlclxcXCIsXFxcImFyZ3VtZW50c1xcXCI6W3tcXFwic3Vic2V0c1xcXCI6W1xcXCJsYXRpblxcXCJdLFxcXCJkaXNwbGF5XFxcIjpcXFwic3dhcFxcXCIsXFxcInZhcmlhYmxlXFxcIjpcXFwiLS1mb250LWludGVyXFxcIn1dLFxcXCJ2YXJpYWJsZU5hbWVcXFwiOlxcXCJpbnRlclxcXCJ9XCIpO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvYWxleGxhcmNoZXZlcXVlL0NvZGluZy9jYWxjdWxhdG9yL3NyYy9hcHAvZ2xvYmFscy5jc3NcIik7XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy9hbGV4bGFyY2hldmVxdWUvQ29kaW5nL2NhbGN1bGF0b3Ivc3JjL2NvbXBvbmVudHMvTmF2YmFyLnRzeFwiKTtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL1VzZXJzL2FsZXhsYXJjaGV2ZXF1ZS9Db2RpbmcvY2FsY3VsYXRvci9zcmMvY29tcG9uZW50cy9Qb3N0SG9nUHJvdmlkZXIudHN4XCIpIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Falexlarcheveque%2FCoding%2Fcalculator%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%22path%22%3A%22src%2Fapp%2Flayout.tsx%22%2C%22import%22%3A%22Inter%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%2C%22display%22%3A%22swap%22%2C%22variable%22%3A%22--font-inter%22%7D%5D%2C%22variableName%22%3A%22inter%22%7D&modules=%2FUsers%2Falexlarcheveque%2FCoding%2Fcalculator%2Fsrc%2Fapp%2Fglobals.css&modules=%2FUsers%2Falexlarcheveque%2FCoding%2Fcalculator%2Fsrc%2Fcomponents%2FNavbar.tsx&modules=%2FUsers%2Falexlarcheveque%2FCoding%2Fcalculator%2Fsrc%2Fcomponents%2FPostHogProvider.tsx&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/api/link.js":
/*!********************************************!*\
  !*** ./node_modules/next/dist/api/link.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* reexport default from dynamic */ _client_link__WEBPACK_IMPORTED_MODULE_0___default.a; }\n/* harmony export */ });\n/* harmony import */ var _client_link__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client/link */ \"(app-pages-browser)/./node_modules/next/dist/client/link.js\");\n/* harmony import */ var _client_link__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_client_link__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _client_link__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _client_link__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n //# sourceMappingURL=link.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYXBpL2xpbmsuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXlDO0FBQ1YsQ0FFL0IsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYXBpL2xpbmsuanM/MTMwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIi4uL2NsaWVudC9saW5rXCI7XG5leHBvcnQgKiBmcm9tIFwiLi4vY2xpZW50L2xpbmtcIjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGluay5qcy5tYXAiXSwibmFtZXMiOlsiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/api/link.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/api/navigation.js":
/*!**************************************************!*\
  !*** ./node_modules/next/dist/api/navigation.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _client_components_navigation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client/components/navigation */ \"(app-pages-browser)/./node_modules/next/dist/client/components/navigation.js\");\n/* harmony import */ var _client_components_navigation__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_client_components_navigation__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _client_components_navigation__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _client_components_navigation__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n //# sourceMappingURL=navigation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYXBpL25hdmlnYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWdELENBRWhELHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2FwaS9uYXZpZ2F0aW9uLmpzPzFkMjgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4uL2NsaWVudC9jb21wb25lbnRzL25hdmlnYXRpb25cIjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmF2aWdhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/api/navigation.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js ***!
  \*********************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("var __dirname = \"/\";\n\n(()=>{\n    \"use strict\";\n    var e = {\n        686: (e, r, t)=>{\n            var n = t(808);\n            var i = Object.create(null);\n            var a = typeof document === \"undefined\";\n            var o = Array.prototype.forEach;\n            function debounce(e, r) {\n                var t = 0;\n                return function() {\n                    var n = this;\n                    var i = arguments;\n                    var a = function functionCall() {\n                        return e.apply(n, i);\n                    };\n                    clearTimeout(t);\n                    t = setTimeout(a, r);\n                };\n            }\n            function noop() {}\n            function getCurrentScriptUrl(e) {\n                var r = i[e];\n                if (!r) {\n                    if (document.currentScript) {\n                        r = document.currentScript.src;\n                    } else {\n                        var t = document.getElementsByTagName(\"script\");\n                        var a = t[t.length - 1];\n                        if (a) {\n                            r = a.src;\n                        }\n                    }\n                    i[e] = r;\n                }\n                return function(e) {\n                    if (!r) {\n                        return null;\n                    }\n                    var t = r.split(/([^\\\\/]+)\\.js$/);\n                    var i = t && t[1];\n                    if (!i) {\n                        return [\n                            r.replace(\".js\", \".css\")\n                        ];\n                    }\n                    if (!e) {\n                        return [\n                            r.replace(\".js\", \".css\")\n                        ];\n                    }\n                    return e.split(\",\").map(function(e) {\n                        var t = new RegExp(\"\".concat(i, \"\\\\.js$\"), \"g\");\n                        return n(r.replace(t, \"\".concat(e.replace(/{fileName}/g, i), \".css\")));\n                    });\n                };\n            }\n            function updateCss(e, r) {\n                if (!r) {\n                    if (!e.href) {\n                        return;\n                    }\n                    r = e.href.split(\"?\")[0];\n                }\n                if (!isUrlRequest(r)) {\n                    return;\n                }\n                if (e.isLoaded === false) {\n                    return;\n                }\n                if (!r || !(r.indexOf(\".css\") > -1)) {\n                    return;\n                }\n                e.visited = true;\n                var t = e.cloneNode();\n                t.isLoaded = false;\n                t.addEventListener(\"load\", function() {\n                    if (t.isLoaded) {\n                        return;\n                    }\n                    t.isLoaded = true;\n                    e.parentNode.removeChild(e);\n                });\n                t.addEventListener(\"error\", function() {\n                    if (t.isLoaded) {\n                        return;\n                    }\n                    t.isLoaded = true;\n                    e.parentNode.removeChild(e);\n                });\n                t.href = \"\".concat(r, \"?\").concat(Date.now());\n                if (e.nextSibling) {\n                    e.parentNode.insertBefore(t, e.nextSibling);\n                } else {\n                    e.parentNode.appendChild(t);\n                }\n            }\n            function getReloadUrl(e, r) {\n                var t;\n                e = n(e, {\n                    stripWWW: false\n                });\n                r.some(function(n) {\n                    if (e.indexOf(r) > -1) {\n                        t = n;\n                    }\n                });\n                return t;\n            }\n            function reloadStyle(e) {\n                if (!e) {\n                    return false;\n                }\n                var r = document.querySelectorAll(\"link\");\n                var t = false;\n                o.call(r, function(r) {\n                    if (!r.href) {\n                        return;\n                    }\n                    var n = getReloadUrl(r.href, e);\n                    if (!isUrlRequest(n)) {\n                        return;\n                    }\n                    if (r.visited === true) {\n                        return;\n                    }\n                    if (n) {\n                        updateCss(r, n);\n                        t = true;\n                    }\n                });\n                return t;\n            }\n            function reloadAll() {\n                var e = document.querySelectorAll(\"link\");\n                o.call(e, function(e) {\n                    if (e.visited === true) {\n                        return;\n                    }\n                    updateCss(e);\n                });\n            }\n            function isUrlRequest(e) {\n                if (!/^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.test(e)) {\n                    return false;\n                }\n                return true;\n            }\n            e.exports = function(e, r) {\n                if (a) {\n                    console.log(\"no window.document found, will not HMR CSS\");\n                    return noop;\n                }\n                var t = getCurrentScriptUrl(e);\n                function update() {\n                    var e = t(r.filename);\n                    var n = reloadStyle(e);\n                    if (r.locals) {\n                        console.log(\"[HMR] Detected local css modules. Reload all css\");\n                        reloadAll();\n                        return;\n                    }\n                    if (n) {\n                        console.log(\"[HMR] css reload %s\", e.join(\" \"));\n                    } else {\n                        console.log(\"[HMR] Reload all css\");\n                        reloadAll();\n                    }\n                }\n                return debounce(update, 50);\n            };\n        },\n        808: (e)=>{\n            function normalizeUrl(e) {\n                return e.reduce(function(e, r) {\n                    switch(r){\n                        case \"..\":\n                            e.pop();\n                            break;\n                        case \".\":\n                            break;\n                        default:\n                            e.push(r);\n                    }\n                    return e;\n                }, []).join(\"/\");\n            }\n            e.exports = function(e) {\n                e = e.trim();\n                if (/^data:/i.test(e)) {\n                    return e;\n                }\n                var r = e.indexOf(\"//\") !== -1 ? e.split(\"//\")[0] + \"//\" : \"\";\n                var t = e.replace(new RegExp(r, \"i\"), \"\").split(\"/\");\n                var n = t[0].toLowerCase().replace(/\\.$/, \"\");\n                t[0] = \"\";\n                var i = normalizeUrl(t);\n                return r + n + i;\n            };\n        }\n    };\n    var r = {};\n    function __nccwpck_require__(t) {\n        var n = r[t];\n        if (n !== undefined) {\n            return n.exports;\n        }\n        var i = r[t] = {\n            exports: {}\n        };\n        var a = true;\n        try {\n            e[t](i, i.exports, __nccwpck_require__);\n            a = false;\n        } finally{\n            if (a) delete r[t];\n        }\n        return i.exports;\n    }\n    if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n    var t = __nccwpck_require__(686);\n    module.exports = t;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        // -----------------------------------------------------------------------------\n        var enableScopeAPI = false; // Experimental Create Event Handle API.\n        var enableCacheElement = false;\n        var enableTransitionTracing = false; // No known bugs, but needs performance testing\n        var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n        // stuff. Intended to enable React core members to more easily debug scheduling\n        // issues in DEV builds.\n        var enableDebugTracing = false;\n        var REACT_CLIENT_REFERENCE$2 = Symbol.for(\"react.client.reference\");\n        function isValidElementType(type) {\n            if (typeof type === \"string\" || typeof type === \"function\") {\n                return true;\n            } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {\n                return true;\n            }\n            if (typeof type === \"object\" && type !== null) {\n                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n                // types supported by any Flight configuration anywhere since\n                // we don't know which Flight build this will end up being used\n                // with.\n                type.$$typeof === REACT_CLIENT_REFERENCE$2 || type.getModuleId !== undefined) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        }\n        var REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\"); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            if (typeof type === \"function\") {\n                if (type.$$typeof === REACT_CLIENT_REFERENCE$1) {\n                    // TODO: Create a convention for naming client references with debug info.\n                    return null;\n                }\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                {\n                    if (typeof type.tag === \"number\") {\n                        error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                    }\n                }\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                }\n            }\n            return null;\n        }\n        var assign = Object.assign;\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        /**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */ function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher.current = null;\n                disableLogs();\n            }\n            /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */ var RunInRootFrame = {\n                DetermineComponentFrameRoot: function() {\n                    var control;\n                    try {\n                        // This should throw.\n                        if (construct) {\n                            // Something should be setting the props in the constructor.\n                            var Fake = function() {\n                                throw Error();\n                            }; // $FlowFixMe[prop-missing]\n                            Object.defineProperty(Fake.prototype, \"props\", {\n                                set: function() {\n                                    // We use a throwing setter instead of frozen or non-writable props\n                                    // because that won't throw in a non-strict mode function.\n                                    throw Error();\n                                }\n                            });\n                            if (typeof Reflect === \"object\" && Reflect.construct) {\n                                // We construct a different control for this case to include any extra\n                                // frames added by the construct call.\n                                try {\n                                    Reflect.construct(Fake, []);\n                                } catch (x) {\n                                    control = x;\n                                }\n                                Reflect.construct(fn, [], Fake);\n                            } else {\n                                try {\n                                    Fake.call();\n                                } catch (x) {\n                                    control = x;\n                                } // $FlowFixMe[prop-missing] found when upgrading Flow\n                                fn.call(Fake.prototype);\n                            }\n                        } else {\n                            try {\n                                throw Error();\n                            } catch (x) {\n                                control = x;\n                            } // TODO(luna): This will currently only throw if the function component\n                            // tries to access React/ReactDOM/props. We should probably make this throw\n                            // in simple components too\n                            var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                            // component, which we don't yet support. Attach a noop catch handler to\n                            // silence the error.\n                            // TODO: Implement component stacks for async client components?\n                            if (maybePromise && typeof maybePromise.catch === \"function\") {\n                                maybePromise.catch(function() {});\n                            }\n                        }\n                    } catch (sample) {\n                        // This is inlined manually because closure doesn't do it for us.\n                        if (sample && control && typeof sample.stack === \"string\") {\n                            return [\n                                sample.stack,\n                                control.stack\n                            ];\n                        }\n                    }\n                    return [\n                        null,\n                        null\n                    ];\n                }\n            }; // $FlowFixMe[prop-missing]\n            RunInRootFrame.DetermineComponentFrameRoot.displayName = \"DetermineComponentFrameRoot\";\n            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, \"name\"); // Before ES6, the `name` property was not configurable.\n            if (namePropDescriptor && namePropDescriptor.configurable) {\n                // V8 utilizes a function's `name` property when generating a stack trace.\n                Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // is set to `false`.\n                // $FlowFixMe[cannot-write]\n                \"name\", {\n                    value: \"DetermineComponentFrameRoot\"\n                });\n            }\n            try {\n                var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];\n                if (sampleStack && controlStack) {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sampleStack.split(\"\\n\");\n                    var controlLines = controlStack.split(\"\\n\");\n                    var s = 0;\n                    var c = 0;\n                    while(s < sampleLines.length && !sampleLines[s].includes(\"DetermineComponentFrameRoot\")){\n                        s++;\n                    }\n                    while(c < controlLines.length && !controlLines[c].includes(\"DetermineComponentFrameRoot\")){\n                        c++;\n                    } // We couldn't find our intentionally injected common root frame, attempt\n                    // to find another common root frame by search from the bottom of the\n                    // control stack...\n                    if (s === sampleLines.length || c === controlLines.length) {\n                        s = sampleLines.length - 1;\n                        c = controlLines.length - 1;\n                        while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                            // We expect at least one stack frame to be shared.\n                            // Typically this will be the root most one. However, stack frames may be\n                            // cut off due to maximum stack limits. In this case, one maybe cut off\n                            // earlier than the other. We assume that the sample is longer or the same\n                            // and there for cut off earlier. So we should find the root most frame in\n                            // the sample somewhere in the control.\n                            c--;\n                        }\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        if (true) {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        } // Return the line we found.\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement$1(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                    }\n                }\n            }\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkKeyStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n        var RESERVED_PROPS = {\n            key: true,\n            ref: true,\n            __self: true,\n            __source: true\n        };\n        var specialPropKeyWarningShown;\n        var specialPropRefWarningShown;\n        var didWarnAboutStringRefs;\n        {\n            didWarnAboutStringRefs = {};\n        }\n        function hasValidRef(config) {\n            {\n                if (hasOwnProperty.call(config, \"ref\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"ref\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.ref !== undefined;\n        }\n        function hasValidKey(config) {\n            {\n                if (hasOwnProperty.call(config, \"key\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.key !== undefined;\n        }\n        function warnIfStringRefCannotBeAutoConverted(config, self) {\n            {\n                if (typeof config.ref === \"string\" && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n                    var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n                    if (!didWarnAboutStringRefs[componentName]) {\n                        error('Component \"%s\" contains the string ref \"%s\". ' + \"Support for string refs will be removed in a future major release. \" + \"This case cannot be automatically converted to an arrow function. \" + \"We ask you to manually fix this case by using useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\", getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n                        didWarnAboutStringRefs[componentName] = true;\n                    }\n                }\n            }\n        }\n        function defineKeyPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingKey = function() {\n                    if (!specialPropKeyWarningShown) {\n                        specialPropKeyWarningShown = true;\n                        error(\"%s: `key` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingKey.isReactWarning = true;\n                Object.defineProperty(props, \"key\", {\n                    get: warnAboutAccessingKey,\n                    configurable: true\n                });\n            }\n        }\n        function defineRefPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingRef = function() {\n                    if (!specialPropRefWarningShown) {\n                        specialPropRefWarningShown = true;\n                        error(\"%s: `ref` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingRef.isReactWarning = true;\n                Object.defineProperty(props, \"ref\", {\n                    get: warnAboutAccessingRef,\n                    configurable: true\n                });\n            }\n        }\n        /**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */ function ReactElement(type, key, ref, self, source, owner, props) {\n            var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: ref,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: owner\n            };\n            {\n                // The validation flag is currently mutative. We put it on\n                // an external backing store so that we can freeze the whole object.\n                // This can be replaced with a WeakMap once they are implemented in\n                // commonly used development environments.\n                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n                // the validation flag non-enumerable (where possible, which should\n                // include every environment we run tests in), so the test framework\n                // ignores it.\n                Object.defineProperty(element._store, \"validated\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: true,\n                    value: false\n                }); // self and source are DEV only properties.\n                Object.defineProperty(element, \"_self\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: self\n                }); // Two elements created in two different places should be considered\n                // equal for testing purposes and therefore we hide it from enumeration.\n                Object.defineProperty(element, \"_source\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: source\n                });\n                if (Object.freeze) {\n                    Object.freeze(element.props);\n                    Object.freeze(element);\n                }\n            }\n            return element;\n        }\n        /**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */ function jsxDEV$1(type, config, maybeKey, source, self) {\n            {\n                var propName; // Reserved names are extracted\n                var props = {};\n                var key = null;\n                var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n                // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n                // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n                // but as an intermediary step, we will use jsxDEV for everything except\n                // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n                // key is explicitly declared to be undefined or not.\n                if (maybeKey !== undefined) {\n                    {\n                        checkKeyStringCoercion(maybeKey);\n                    }\n                    key = \"\" + maybeKey;\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                }\n                if (hasValidRef(config)) {\n                    ref = config.ref;\n                    warnIfStringRefCannotBeAutoConverted(config, self);\n                } // Remaining properties are added to a new props object\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        props[propName] = config[propName];\n                    }\n                } // Resolve default props\n                if (type && type.defaultProps) {\n                    var defaultProps = type.defaultProps;\n                    for(propName in defaultProps){\n                        if (props[propName] === undefined) {\n                            props[propName] = defaultProps[propName];\n                        }\n                    }\n                }\n                if (key || ref) {\n                    var displayName = typeof type === \"function\" ? type.displayName || type.name || \"Unknown\" : type;\n                    if (key) {\n                        defineKeyPropWarningGetter(props, displayName);\n                    }\n                    if (ref) {\n                        defineRefPropWarningGetter(props, displayName);\n                    }\n                }\n                return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n            }\n        }\n        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame.setExtraStackFrame(null);\n                }\n            }\n        }\n        var propTypesMisspellWarningShown;\n        {\n            propTypesMisspellWarningShown = false;\n        }\n        /**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */ function isValidElement(object) {\n            {\n                return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n            }\n        }\n        function getDeclarationErrorAddendum() {\n            {\n                if (ReactCurrentOwner.current) {\n                    var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n                    if (name) {\n                        return \"\\n\\nCheck the render method of `\" + name + \"`.\";\n                    }\n                }\n                return \"\";\n            }\n        }\n        function getSourceInfoErrorAddendum(source) {\n            {\n                if (source !== undefined) {\n                    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, \"\");\n                    var lineNumber = source.lineNumber;\n                    return \"\\n\\nCheck your code at \" + fileName + \":\" + lineNumber + \".\";\n                }\n                return \"\";\n            }\n        }\n        /**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */ var ownerHasKeyUseWarning = {};\n        function getCurrentComponentErrorInfo(parentType) {\n            {\n                var info = getDeclarationErrorAddendum();\n                if (!info) {\n                    var parentName = getComponentNameFromType(parentType);\n                    if (parentName) {\n                        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n                    }\n                }\n                return info;\n            }\n        }\n        /**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */ function validateExplicitKey(element, parentType) {\n            {\n                if (!element._store || element._store.validated || element.key != null) {\n                    return;\n                }\n                element._store.validated = true;\n                var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n                    return;\n                }\n                ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n                // property, it may be the creator of the child that's responsible for\n                // assigning it a key.\n                var childOwner = \"\";\n                if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n                    // Give the component that originally created this child.\n                    childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n                }\n                setCurrentlyValidatingElement(element);\n                error('Each child in a list should have a unique \"key\" prop.' + \"%s%s See https://reactjs.org/link/warning-keys for more information.\", currentComponentErrorInfo, childOwner);\n                setCurrentlyValidatingElement(null);\n            }\n        }\n        /**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */ function validateChildKeys(node, parentType) {\n            {\n                if (typeof node !== \"object\" || !node) {\n                    return;\n                }\n                if (node.$$typeof === REACT_CLIENT_REFERENCE) ;\n                else if (isArray(node)) {\n                    for(var i = 0; i < node.length; i++){\n                        var child = node[i];\n                        if (isValidElement(child)) {\n                            validateExplicitKey(child, parentType);\n                        }\n                    }\n                } else if (isValidElement(node)) {\n                    // This element was passed in a valid location.\n                    if (node._store) {\n                        node._store.validated = true;\n                    }\n                } else {\n                    var iteratorFn = getIteratorFn(node);\n                    if (typeof iteratorFn === \"function\") {\n                        // Entry iterators used to provide implicit keys,\n                        // but now we print a separate warning for them later.\n                        if (iteratorFn !== node.entries) {\n                            var iterator = iteratorFn.call(node);\n                            var step;\n                            while(!(step = iterator.next()).done){\n                                if (isValidElement(step.value)) {\n                                    validateExplicitKey(step.value, parentType);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */ function validatePropTypes(element) {\n            {\n                var type = element.type;\n                if (type === null || type === undefined || typeof type === \"string\") {\n                    return;\n                }\n                if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n                    return;\n                }\n                var propTypes;\n                if (typeof type === \"function\") {\n                    propTypes = type.propTypes;\n                } else if (typeof type === \"object\" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                type.$$typeof === REACT_MEMO_TYPE)) {\n                    propTypes = type.propTypes;\n                } else {\n                    return;\n                }\n                if (propTypes) {\n                    // Intentionally inside to avoid triggering lazy initializers:\n                    var name = getComponentNameFromType(type);\n                    checkPropTypes(propTypes, element.props, \"prop\", name, element);\n                } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n                    propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n                    var _name = getComponentNameFromType(type);\n                    error(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", _name || \"Unknown\");\n                }\n                if (typeof type.getDefaultProps === \"function\" && !type.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps is only used on classic React.createClass \" + \"definitions. Use a static property named `defaultProps` instead.\");\n                }\n            }\n        }\n        /**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */ function validateFragmentProps(fragment) {\n            {\n                var keys = Object.keys(fragment.props);\n                for(var i = 0; i < keys.length; i++){\n                    var key = keys[i];\n                    if (key !== \"children\" && key !== \"key\") {\n                        setCurrentlyValidatingElement(fragment);\n                        error(\"Invalid prop `%s` supplied to `React.Fragment`. \" + \"React.Fragment can only have `key` and `children` props.\", key);\n                        setCurrentlyValidatingElement(null);\n                        break;\n                    }\n                }\n                if (fragment.ref !== null) {\n                    setCurrentlyValidatingElement(fragment);\n                    error(\"Invalid attribute `ref` supplied to `React.Fragment`.\");\n                    setCurrentlyValidatingElement(null);\n                }\n            }\n        }\n        var didWarnAboutKeySpread = {};\n        function jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n            {\n                var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n                // succeed and there will likely be errors in render.\n                if (!validType) {\n                    var info = \"\";\n                    if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                        info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and named imports.\";\n                    }\n                    var sourceInfo = getSourceInfoErrorAddendum(source);\n                    if (sourceInfo) {\n                        info += sourceInfo;\n                    } else {\n                        info += getDeclarationErrorAddendum();\n                    }\n                    var typeString;\n                    if (type === null) {\n                        typeString = \"null\";\n                    } else if (isArray(type)) {\n                        typeString = \"array\";\n                    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                        typeString = \"<\" + (getComponentNameFromType(type.type) || \"Unknown\") + \" />\";\n                        info = \" Did you accidentally export a JSX literal instead of a component?\";\n                    } else {\n                        typeString = typeof type;\n                    }\n                    error(\"React.jsx: type is invalid -- expected a string (for \" + \"built-in components) or a class/function (for composite \" + \"components) but got: %s.%s\", typeString, info);\n                }\n                var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n                // TODO: Drop this when these are no longer allowed as the type argument.\n                if (element == null) {\n                    return element;\n                } // Skip key warning if the type isn't valid since our key validation logic\n                // doesn't expect a non-string/function type and can throw confusing errors.\n                // We don't want exception behavior to differ between dev and prod.\n                // (Rendering will throw with a helpful message and as soon as the type is\n                // fixed, the key warnings will appear.)\n                if (validType) {\n                    var children = props.children;\n                    if (children !== undefined) {\n                        if (isStaticChildren) {\n                            if (isArray(children)) {\n                                for(var i = 0; i < children.length; i++){\n                                    validateChildKeys(children[i], type);\n                                }\n                                if (Object.freeze) {\n                                    Object.freeze(children);\n                                }\n                            } else {\n                                error(\"React.jsx: Static children should always be an array. \" + \"You are likely explicitly calling React.jsxs or React.jsxDEV. \" + \"Use the Babel transform instead.\");\n                            }\n                        } else {\n                            validateChildKeys(children, type);\n                        }\n                    }\n                }\n                if (hasOwnProperty.call(props, \"key\")) {\n                    var componentName = getComponentNameFromType(type);\n                    var keys = Object.keys(props).filter(function(k) {\n                        return k !== \"key\";\n                    });\n                    var beforeExample = keys.length > 0 ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n                    if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n                        var afterExample = keys.length > 0 ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\";\n                        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + \"  let props = %s;\\n\" + \"  <%s {...props} />\\n\" + \"React keys must be passed directly to JSX without using spread:\\n\" + \"  let props = %s;\\n\" + \"  <%s key={someKey} {...props} />\", beforeExample, componentName, afterExample, componentName);\n                        didWarnAboutKeySpread[componentName + beforeExample] = true;\n                    }\n                }\n                if (type === REACT_FRAGMENT_TYPE) {\n                    validateFragmentProps(element);\n                } else {\n                    validatePropTypes(element);\n                }\n                return element;\n            }\n        } // These two functions exist to still get child warnings in dev\n        var jsxDEV = jsxWithValidation;\n        exports.Fragment = REACT_FRAGMENT_TYPE;\n        exports.jsxDEV = jsxDEV;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLDhMQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz9jYTIwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/posthog-js/dist/module.js":
/*!************************************************!*\
  !*** ./node_modules/posthog-js/dist/module.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   COPY_AUTOCAPTURE_EVENT: function() { return /* binding */ f; },\n/* harmony export */   Compression: function() { return /* binding */ g; },\n/* harmony export */   PostHog: function() { return /* binding */ Yo; },\n/* harmony export */   SurveyPosition: function() { return /* binding */ Zo; },\n/* harmony export */   SurveyQuestionBranchingType: function() { return /* binding */ ea; },\n/* harmony export */   SurveyQuestionType: function() { return /* binding */ ia; },\n/* harmony export */   SurveySchedule: function() { return /* binding */ ra; },\n/* harmony export */   SurveyType: function() { return /* binding */ ta; },\n/* harmony export */   SurveyWidgetType: function() { return /* binding */ Qo; },\n/* harmony export */   \"default\": function() { return /* binding */ sa; },\n/* harmony export */   knownUnsafeEditableEvent: function() { return /* binding */ p; },\n/* harmony export */   posthog: function() { return /* binding */ sa; },\n/* harmony export */   severityLevels: function() { return /* binding */ _; }\n/* harmony export */ });\nvar t =  true ? window : 0, i = \"undefined\" != typeof globalThis ? globalThis : t, e = Array.prototype, r = e.forEach, s = e.indexOf, n = null == i ? void 0 : i.navigator, o = null == i ? void 0 : i.document, a = null == i ? void 0 : i.location, l = null == i ? void 0 : i.fetch, u = null != i && i.XMLHttpRequest && \"withCredentials\" in new i.XMLHttpRequest ? i.XMLHttpRequest : void 0, h = null == i ? void 0 : i.AbortController, d = null == n ? void 0 : n.userAgent, v = null != t ? t : {}, c = {\n    DEBUG: !1,\n    LIB_VERSION: \"1.246.0\"\n}, f = \"$copy_autocapture\", p = [\n    \"$snapshot\",\n    \"$pageview\",\n    \"$pageleave\",\n    \"$set\",\n    \"survey dismissed\",\n    \"survey sent\",\n    \"survey shown\",\n    \"$identify\",\n    \"$groupidentify\",\n    \"$create_alias\",\n    \"$$client_ingestion_warning\",\n    \"$web_experiment_applied\",\n    \"$feature_enrollment_update\",\n    \"$feature_flag_called\"\n], g = function(t) {\n    return t.GZipJS = \"gzip-js\", t.Base64 = \"base64\", t;\n}({}), _ = [\n    \"fatal\",\n    \"error\",\n    \"warning\",\n    \"log\",\n    \"info\",\n    \"debug\"\n];\nfunction m(t, i) {\n    return -1 !== t.indexOf(i);\n}\nvar b = function(t) {\n    return t.trim();\n}, w = function(t) {\n    return t.replace(/^\\$/, \"\");\n};\nvar y = Array.isArray, S = Object.prototype, $ = S.hasOwnProperty, k = S.toString, x = y || function(t) {\n    return \"[object Array]\" === k.call(t);\n}, E = (t)=>\"function\" == typeof t, I = (t)=>t === Object(t) && !x(t), P = (t)=>{\n    if (I(t)) {\n        for(var i in t)if ($.call(t, i)) return !1;\n        return !0;\n    }\n    return !1;\n}, R = (t)=>void 0 === t, T = (t)=>\"[object String]\" == k.call(t), M = (t)=>T(t) && 0 === t.trim().length, C = (t)=>null === t, O = (t)=>R(t) || C(t), F = (t)=>\"[object Number]\" == k.call(t), A = (t)=>\"[object Boolean]\" === k.call(t), D = (t)=>t instanceof FormData, L = (t)=>m(p, t), N = (i)=>{\n    var e = {\n        t: function(e) {\n            if (t && (c.DEBUG || v.POSTHOG_DEBUG) && !R(t.console) && t.console) {\n                for(var r = (\"__rrweb_original__\" in t.console[e]) ? t.console[e].__rrweb_original__ : t.console[e], s = arguments.length, n = new Array(s > 1 ? s - 1 : 0), o = 1; o < s; o++)n[o - 1] = arguments[o];\n                r(i, ...n);\n            }\n        },\n        info: function() {\n            for(var t = arguments.length, i = new Array(t), r = 0; r < t; r++)i[r] = arguments[r];\n            e.t(\"log\", ...i);\n        },\n        warn: function() {\n            for(var t = arguments.length, i = new Array(t), r = 0; r < t; r++)i[r] = arguments[r];\n            e.t(\"warn\", ...i);\n        },\n        error: function() {\n            for(var t = arguments.length, i = new Array(t), r = 0; r < t; r++)i[r] = arguments[r];\n            e.t(\"error\", ...i);\n        },\n        critical: function() {\n            for(var t = arguments.length, e = new Array(t), r = 0; r < t; r++)e[r] = arguments[r];\n            console.error(i, ...e);\n        },\n        uninitializedWarning: (t)=>{\n            e.error(\"You must initialize PostHog before calling \" + t);\n        },\n        createLogger: (t)=>N(i + \" \" + t)\n    };\n    return e;\n}, j = N(\"[PostHog.js]\"), z = j.createLogger, U = z(\"[ExternalScriptsLoader]\"), q = (t, i, e)=>{\n    if (t.config.disable_external_dependency_loading) return U.warn(i + \" was requested but loading of external scripts is disabled.\"), e(\"Loading of external scripts is disabled\");\n    var r = null == o ? void 0 : o.querySelectorAll(\"script\");\n    if (r) {\n        for(var s = 0; s < r.length; s++)if (r[s].src === i) return e();\n    }\n    var n = ()=>{\n        if (!o) return e(\"document not found\");\n        var r = o.createElement(\"script\");\n        if (r.type = \"text/javascript\", r.crossOrigin = \"anonymous\", r.src = i, r.onload = (t)=>e(void 0, t), r.onerror = (t)=>e(t), t.config.prepare_external_dependency_script && (r = t.config.prepare_external_dependency_script(r)), !r) return e(\"prepare_external_dependency_script returned null\");\n        var s, n = o.querySelectorAll(\"body > script\");\n        n.length > 0 ? null == (s = n[0].parentNode) || s.insertBefore(r, n[0]) : o.body.appendChild(r);\n    };\n    null != o && o.body ? n() : null == o || o.addEventListener(\"DOMContentLoaded\", n);\n};\nfunction B() {\n    return B = Object.assign ? Object.assign.bind() : function(t) {\n        for(var i = 1; i < arguments.length; i++){\n            var e = arguments[i];\n            for(var r in e)({}).hasOwnProperty.call(e, r) && (t[r] = e[r]);\n        }\n        return t;\n    }, B.apply(null, arguments);\n}\n_c = B;\nfunction H(t, i) {\n    if (null == t) return {};\n    var e = {};\n    for(var r in t)if (({}).hasOwnProperty.call(t, r)) {\n        if (-1 !== i.indexOf(r)) continue;\n        e[r] = t[r];\n    }\n    return e;\n}\n_c1 = H;\nv.__PosthogExtensions__ = v.__PosthogExtensions__ || {}, v.__PosthogExtensions__.loadExternalDependency = (t, i, e)=>{\n    var r = \"/static/\" + i + \".js?v=\" + t.version;\n    if (\"remote-config\" === i && (r = \"/array/\" + t.config.token + \"/config.js\"), \"toolbar\" === i) {\n        var s = 3e5;\n        r = r + \"&t=\" + Math.floor(Date.now() / s) * s;\n    }\n    var n = t.requestRouter.endpointFor(\"assets\", r);\n    q(t, n, e);\n}, v.__PosthogExtensions__.loadSiteApp = (t, i, e)=>{\n    var r = t.requestRouter.endpointFor(\"api\", i);\n    q(t, r, e);\n};\nvar W = {};\nfunction G(t, i, e) {\n    if (x(t)) {\n        if (r && t.forEach === r) t.forEach(i, e);\n        else if (\"length\" in t && t.length === +t.length) {\n            for(var s = 0, n = t.length; s < n; s++)if (s in t && i.call(e, t[s], s) === W) return;\n        }\n    }\n}\n_c2 = G;\nfunction J(t, i, e) {\n    if (!O(t)) {\n        if (x(t)) return G(t, i, e);\n        if (D(t)) {\n            for (var r of t.entries())if (i.call(e, r[1], r[0]) === W) return;\n        } else for(var s in t)if ($.call(t, s) && i.call(e, t[s], s) === W) return;\n    }\n}\n_c3 = J;\nvar V = function(t) {\n    for(var i = arguments.length, e = new Array(i > 1 ? i - 1 : 0), r = 1; r < i; r++)e[r - 1] = arguments[r];\n    return G(e, function(i) {\n        for(var e in i)void 0 !== i[e] && (t[e] = i[e]);\n    }), t;\n}, K = function(t) {\n    for(var i = arguments.length, e = new Array(i > 1 ? i - 1 : 0), r = 1; r < i; r++)e[r - 1] = arguments[r];\n    return G(e, function(i) {\n        G(i, function(i) {\n            t.push(i);\n        });\n    }), t;\n};\nfunction Y(t) {\n    for(var i = Object.keys(t), e = i.length, r = new Array(e); e--;)r[e] = [\n        i[e],\n        t[i[e]]\n    ];\n    return r;\n}\n_c4 = Y;\nvar X = function(t) {\n    try {\n        return t();\n    } catch (t) {\n        return;\n    }\n}, Q = function(t) {\n    return function() {\n        try {\n            for(var i = arguments.length, e = new Array(i), r = 0; r < i; r++)e[r] = arguments[r];\n            return t.apply(this, e);\n        } catch (t) {\n            j.critical(\"Implementation error. Please turn on debug mode and open a ticket on https://app.posthog.com/home#panel=support%3Asupport%3A.\"), j.critical(t);\n        }\n    };\n}, Z = function(t) {\n    var i = {};\n    return J(t, function(t, e) {\n        (T(t) && t.length > 0 || F(t)) && (i[e] = t);\n    }), i;\n};\nfunction tt(t, i) {\n    return e = t, r = (t)=>T(t) && !C(i) ? t.slice(0, i) : t, s = new Set, function t(i, e) {\n        return i !== Object(i) ? r ? r(i, e) : i : s.has(i) ? void 0 : (s.add(i), x(i) ? (n = [], G(i, (i)=>{\n            n.push(t(i));\n        })) : (n = {}, J(i, (i, e)=>{\n            s.has(i) || (n[e] = t(i, e));\n        })), n);\n        var n;\n    }(e);\n    var e, r, s;\n}\nvar it = [\n    \"herokuapp.com\",\n    \"vercel.app\",\n    \"netlify.app\"\n];\nfunction et(t) {\n    var i = null == t ? void 0 : t.hostname;\n    if (!T(i)) return !1;\n    var e = i.split(\".\").slice(-2).join(\".\");\n    for (var r of it)if (e === r) return !1;\n    return !0;\n}\nfunction rt(t, i) {\n    for(var e = 0; e < t.length; e++)if (i(t[e])) return t[e];\n}\nfunction st(t, i, e, r) {\n    var { capture: s = !1, passive: n = !0 } = null != r ? r : {};\n    null == t || t.addEventListener(i, e, {\n        capture: s,\n        passive: n\n    });\n}\nvar nt = \"$people_distinct_id\", ot = \"__alias\", at = \"__timers\", lt = \"$autocapture_disabled_server_side\", ut = \"$heatmaps_enabled_server_side\", ht = \"$exception_capture_enabled_server_side\", dt = \"$error_tracking_suppression_rules\", vt = \"$web_vitals_enabled_server_side\", ct = \"$dead_clicks_enabled_server_side\", ft = \"$web_vitals_allowed_metrics\", pt = \"$session_recording_enabled_server_side\", gt = \"$console_log_recording_enabled_server_side\", _t = \"$session_recording_network_payload_capture\", mt = \"$session_recording_masking\", bt = \"$session_recording_canvas_recording\", wt = \"$replay_sample_rate\", yt = \"$replay_minimum_duration\", St = \"$replay_script_config\", $t = \"$sesid\", kt = \"$session_is_sampled\", xt = \"$session_recording_url_trigger_activated_session\", Et = \"$session_recording_event_trigger_activated_session\", It = \"$enabled_feature_flags\", Pt = \"$early_access_features\", Rt = \"$feature_flag_details\", Tt = \"$stored_person_properties\", Mt = \"$stored_group_properties\", Ct = \"$surveys\", Ot = \"$surveys_activated\", Ft = \"$flag_call_reported\", At = \"$user_state\", Dt = \"$client_session_props\", Lt = \"$capture_rate_limit\", Nt = \"$initial_campaign_params\", jt = \"$initial_referrer_info\", zt = \"$initial_person_info\", Ut = \"$epp\", qt = \"__POSTHOG_TOOLBAR__\", Bt = \"$posthog_cookieless\", Ht = [\n    nt,\n    ot,\n    \"__cmpns\",\n    at,\n    pt,\n    ut,\n    $t,\n    It,\n    dt,\n    At,\n    Pt,\n    Rt,\n    Mt,\n    Tt,\n    Ct,\n    Ft,\n    Dt,\n    Lt,\n    Nt,\n    jt,\n    Ut,\n    zt\n];\nfunction Wt(t) {\n    return t instanceof Element && (t.id === qt || !(null == t.closest || !t.closest(\".toolbar-global-fade-container\")));\n}\n_c5 = Wt;\nfunction Gt(t) {\n    return !!t && 1 === t.nodeType;\n}\n_c6 = Gt;\nfunction Jt(t, i) {\n    return !!t && !!t.tagName && t.tagName.toLowerCase() === i.toLowerCase();\n}\n_c7 = Jt;\nfunction Vt(t) {\n    return !!t && 3 === t.nodeType;\n}\n_c8 = Vt;\nfunction Kt(t) {\n    return !!t && 11 === t.nodeType;\n}\n_c9 = Kt;\nfunction Yt(t) {\n    return t ? b(t).split(/\\s+/) : [];\n}\n_c10 = Yt;\nfunction Xt(i) {\n    var e = null == t ? void 0 : t.location.href;\n    return !!(e && i && i.some((t)=>e.match(t)));\n}\n_c11 = Xt;\nfunction Qt(t) {\n    var i = \"\";\n    switch(typeof t.className){\n        case \"string\":\n            i = t.className;\n            break;\n        case \"object\":\n            i = (t.className && \"baseVal\" in t.className ? t.className.baseVal : null) || t.getAttribute(\"class\") || \"\";\n            break;\n        default:\n            i = \"\";\n    }\n    return Yt(i);\n}\n_c12 = Qt;\nfunction Zt(t) {\n    return O(t) ? null : b(t).split(/(\\s+)/).filter((t)=>ci(t)).join(\"\").replace(/[\\r\\n]/g, \" \").replace(/[ ]+/g, \" \").substring(0, 255);\n}\n_c13 = Zt;\nfunction ti(t) {\n    var i = \"\";\n    return ni(t) && !oi(t) && t.childNodes && t.childNodes.length && J(t.childNodes, function(t) {\n        var e;\n        Vt(t) && t.textContent && (i += null !== (e = Zt(t.textContent)) && void 0 !== e ? e : \"\");\n    }), b(i);\n}\nfunction ii(t) {\n    return R(t.target) ? t.srcElement || null : null != (i = t.target) && i.shadowRoot ? t.composedPath()[0] || null : t.target || null;\n    var i;\n}\nvar ei = [\n    \"a\",\n    \"button\",\n    \"form\",\n    \"input\",\n    \"select\",\n    \"textarea\",\n    \"label\"\n];\nfunction ri(t) {\n    var i = t.parentNode;\n    return !(!i || !Gt(i)) && i;\n}\nfunction si(i, e, r, s, n) {\n    var o, a, l;\n    if (void 0 === r && (r = void 0), !t || !i || Jt(i, \"html\") || !Gt(i)) return !1;\n    if (null != (o = r) && o.url_allowlist && !Xt(r.url_allowlist)) return !1;\n    if (null != (a = r) && a.url_ignorelist && Xt(r.url_ignorelist)) return !1;\n    if (null != (l = r) && l.dom_event_allowlist) {\n        var u = r.dom_event_allowlist;\n        if (u && !u.some((t)=>e.type === t)) return !1;\n    }\n    for(var h = !1, d = [\n        i\n    ], v = !0, c = i; c.parentNode && !Jt(c, \"body\");)if (Kt(c.parentNode)) d.push(c.parentNode.host), c = c.parentNode.host;\n    else {\n        if (!(v = ri(c))) break;\n        if (s || ei.indexOf(v.tagName.toLowerCase()) > -1) h = !0;\n        else {\n            var f = t.getComputedStyle(v);\n            f && \"pointer\" === f.getPropertyValue(\"cursor\") && (h = !0);\n        }\n        d.push(v), c = v;\n    }\n    if (!function(t, i) {\n        var e = null == i ? void 0 : i.element_allowlist;\n        if (R(e)) return !0;\n        var r, s = function(t) {\n            if (e.some((i)=>t.tagName.toLowerCase() === i)) return {\n                v: !0\n            };\n        };\n        for (var n of t)if (r = s(n)) return r.v;\n        return !1;\n    }(d, r)) return !1;\n    if (!function(t, i) {\n        var e = null == i ? void 0 : i.css_selector_allowlist;\n        if (R(e)) return !0;\n        var r, s = function(t) {\n            if (e.some((i)=>t.matches(i))) return {\n                v: !0\n            };\n        };\n        for (var n of t)if (r = s(n)) return r.v;\n        return !1;\n    }(d, r)) return !1;\n    var p = t.getComputedStyle(i);\n    if (p && \"pointer\" === p.getPropertyValue(\"cursor\") && \"click\" === e.type) return !0;\n    var g = i.tagName.toLowerCase();\n    switch(g){\n        case \"html\":\n            return !1;\n        case \"form\":\n            return (n || [\n                \"submit\"\n            ]).indexOf(e.type) >= 0;\n        case \"input\":\n        case \"select\":\n        case \"textarea\":\n            return (n || [\n                \"change\",\n                \"click\"\n            ]).indexOf(e.type) >= 0;\n        default:\n            return h ? (n || [\n                \"click\"\n            ]).indexOf(e.type) >= 0 : (n || [\n                \"click\"\n            ]).indexOf(e.type) >= 0 && (ei.indexOf(g) > -1 || \"true\" === i.getAttribute(\"contenteditable\"));\n    }\n}\nfunction ni(t) {\n    for(var i = t; i.parentNode && !Jt(i, \"body\"); i = i.parentNode){\n        var e = Qt(i);\n        if (m(e, \"ph-sensitive\") || m(e, \"ph-no-capture\")) return !1;\n    }\n    if (m(Qt(t), \"ph-include\")) return !0;\n    var r = t.type || \"\";\n    if (T(r)) switch(r.toLowerCase()){\n        case \"hidden\":\n        case \"password\":\n            return !1;\n    }\n    var s = t.name || t.id || \"\";\n    if (T(s)) {\n        if (/^cc|cardnum|ccnum|creditcard|csc|cvc|cvv|exp|pass|pwd|routing|seccode|securitycode|securitynum|socialsec|socsec|ssn/i.test(s.replace(/[^a-zA-Z0-9]/g, \"\"))) return !1;\n    }\n    return !0;\n}\nfunction oi(t) {\n    return !!(Jt(t, \"input\") && ![\n        \"button\",\n        \"checkbox\",\n        \"submit\",\n        \"reset\"\n    ].includes(t.type) || Jt(t, \"select\") || Jt(t, \"textarea\") || \"true\" === t.getAttribute(\"contenteditable\"));\n}\nvar ai = \"(4[0-9]{12}(?:[0-9]{3})?)|(5[1-5][0-9]{14})|(6(?:011|5[0-9]{2})[0-9]{12})|(3[47][0-9]{13})|(3(?:0[0-5]|[68][0-9])[0-9]{11})|((?:2131|1800|35[0-9]{3})[0-9]{11})\", li = new RegExp(\"^(?:\" + ai + \")$\"), ui = new RegExp(ai), hi = \"\\\\d{3}-?\\\\d{2}-?\\\\d{4}\", di = new RegExp(\"^(\" + hi + \")$\"), vi = new RegExp(\"(\" + hi + \")\");\nfunction ci(t, i) {\n    if (void 0 === i && (i = !0), O(t)) return !1;\n    if (T(t)) {\n        if (t = b(t), (i ? li : ui).test((t || \"\").replace(/[- ]/g, \"\"))) return !1;\n        if ((i ? di : vi).test(t)) return !1;\n    }\n    return !0;\n}\nfunction fi(t) {\n    var i = ti(t);\n    return ci(i = (i + \" \" + pi(t)).trim()) ? i : \"\";\n}\nfunction pi(t) {\n    var i = \"\";\n    return t && t.childNodes && t.childNodes.length && J(t.childNodes, function(t) {\n        var e;\n        if (t && \"span\" === (null == (e = t.tagName) ? void 0 : e.toLowerCase())) try {\n            var r = ti(t);\n            i = (i + \" \" + r).trim(), t.childNodes && t.childNodes.length && (i = (i + \" \" + pi(t)).trim());\n        } catch (t) {\n            j.error(\"[AutoCapture]\", t);\n        }\n    }), i;\n}\nfunction gi(t) {\n    return function(t) {\n        var i = t.map((t)=>{\n            var i, e, r = \"\";\n            if (t.tag_name && (r += t.tag_name), t.attr_class) for (var s of (t.attr_class.sort(), t.attr_class))r += \".\" + s.replace(/\"/g, \"\");\n            var n = B({}, t.text ? {\n                text: t.text\n            } : {}, {\n                \"nth-child\": null !== (i = t.nth_child) && void 0 !== i ? i : 0,\n                \"nth-of-type\": null !== (e = t.nth_of_type) && void 0 !== e ? e : 0\n            }, t.href ? {\n                href: t.href\n            } : {}, t.attr_id ? {\n                attr_id: t.attr_id\n            } : {}, t.attributes), o = {};\n            return Y(n).sort((t, i)=>{\n                var [e] = t, [r] = i;\n                return e.localeCompare(r);\n            }).forEach((t)=>{\n                var [i, e] = t;\n                return o[_i(i.toString())] = _i(e.toString());\n            }), r += \":\", r += Y(o).map((t)=>{\n                var [i, e] = t;\n                return i + '=\"' + e + '\"';\n            }).join(\"\");\n        });\n        return i.join(\";\");\n    }(function(t) {\n        return t.map((t)=>{\n            var i, e, r = {\n                text: null == (i = t.$el_text) ? void 0 : i.slice(0, 400),\n                tag_name: t.tag_name,\n                href: null == (e = t.attr__href) ? void 0 : e.slice(0, 2048),\n                attr_class: mi(t),\n                attr_id: t.attr__id,\n                nth_child: t.nth_child,\n                nth_of_type: t.nth_of_type,\n                attributes: {}\n            };\n            return Y(t).filter((t)=>{\n                var [i] = t;\n                return 0 === i.indexOf(\"attr__\");\n            }).forEach((t)=>{\n                var [i, e] = t;\n                return r.attributes[i] = e;\n            }), r;\n        });\n    }(t));\n}\nfunction _i(t) {\n    return t.replace(/\"|\\\\\"/g, '\\\\\"');\n}\nfunction mi(t) {\n    var i = t.attr__class;\n    return i ? x(i) ? i : Yt(i) : void 0;\n}\nclass bi {\n    isRageClick(t, i, e) {\n        var r = this.clicks[this.clicks.length - 1];\n        if (r && Math.abs(t - r.x) + Math.abs(i - r.y) < 30 && e - r.timestamp < 1e3) {\n            if (this.clicks.push({\n                x: t,\n                y: i,\n                timestamp: e\n            }), 3 === this.clicks.length) return !0;\n        } else this.clicks = [\n            {\n                x: t,\n                y: i,\n                timestamp: e\n            }\n        ];\n        return !1;\n    }\n    constructor(){\n        this.clicks = [];\n    }\n}\nvar wi = [\n    \"localhost\",\n    \"127.0.0.1\"\n], yi = (t)=>{\n    var i = null == o ? void 0 : o.createElement(\"a\");\n    return R(i) ? null : (i.href = t, i);\n}, Si = function(t, i) {\n    var e, r;\n    void 0 === i && (i = \"&\");\n    var s = [];\n    return J(t, function(t, i) {\n        R(t) || R(i) || \"undefined\" === i || (e = encodeURIComponent(((t)=>t instanceof File)(t) ? t.name : t.toString()), r = encodeURIComponent(i), s[s.length] = r + \"=\" + e);\n    }), s.join(i);\n}, $i = function(t, i) {\n    for(var e, r = ((t.split(\"#\")[0] || \"\").split(/\\?(.*)/)[1] || \"\").replace(/^\\?+/g, \"\").split(\"&\"), s = 0; s < r.length; s++){\n        var n = r[s].split(\"=\");\n        if (n[0] === i) {\n            e = n;\n            break;\n        }\n    }\n    if (!x(e) || e.length < 2) return \"\";\n    var o = e[1];\n    try {\n        o = decodeURIComponent(o);\n    } catch (t) {\n        j.error(\"Skipping decoding for malformed query param: \" + o);\n    }\n    return o.replace(/\\+/g, \" \");\n}, ki = function(t, i, e) {\n    if (!t || !i || !i.length) return t;\n    for(var r = t.split(\"#\"), s = r[0] || \"\", n = r[1], o = s.split(\"?\"), a = o[1], l = o[0], u = (a || \"\").split(\"&\"), h = [], d = 0; d < u.length; d++){\n        var v = u[d].split(\"=\");\n        x(v) && (i.includes(v[0]) ? h.push(v[0] + \"=\" + e) : h.push(u[d]));\n    }\n    var c = l;\n    return null != a && (c += \"?\" + h.join(\"&\")), null != n && (c += \"#\" + n), c;\n}, xi = function(t, i) {\n    var e = t.match(new RegExp(i + \"=([^&]*)\"));\n    return e ? e[1] : null;\n}, Ei = z(\"[AutoCapture]\");\nfunction Ii(t, i) {\n    return i.length > t ? i.slice(0, t) + \"...\" : i;\n}\n_c14 = Ii;\nfunction Pi(t) {\n    if (t.previousElementSibling) return t.previousElementSibling;\n    var i = t;\n    do {\n        i = i.previousSibling;\n    }while (i && !Gt(i));\n    return i;\n}\n_c15 = Pi;\nfunction Ri(t, i, e, r) {\n    var s = t.tagName.toLowerCase(), n = {\n        tag_name: s\n    };\n    ei.indexOf(s) > -1 && !e && (\"a\" === s.toLowerCase() || \"button\" === s.toLowerCase() ? n.$el_text = Ii(1024, fi(t)) : n.$el_text = Ii(1024, ti(t)));\n    var o = Qt(t);\n    o.length > 0 && (n.classes = o.filter(function(t) {\n        return \"\" !== t;\n    })), J(t.attributes, function(e) {\n        var s;\n        if ((!oi(t) || -1 !== [\n            \"name\",\n            \"id\",\n            \"class\",\n            \"aria-label\"\n        ].indexOf(e.name)) && (null == r || !r.includes(e.name)) && !i && ci(e.value) && (s = e.name, !T(s) || \"_ngcontent\" !== s.substring(0, 10) && \"_nghost\" !== s.substring(0, 7))) {\n            var o = e.value;\n            \"class\" === e.name && (o = Yt(o).join(\" \")), n[\"attr__\" + e.name] = Ii(1024, o);\n        }\n    });\n    for(var a = 1, l = 1, u = t; u = Pi(u);)a++, u.tagName === t.tagName && l++;\n    return n.nth_child = a, n.nth_of_type = l, n;\n}\n_c16 = Ri;\nfunction Ti(i, e) {\n    for(var r, s, { e: n, maskAllElementAttributes: o, maskAllText: a, elementAttributeIgnoreList: l, elementsChainAsString: u } = e, h = [\n        i\n    ], d = i; d.parentNode && !Jt(d, \"body\");)Kt(d.parentNode) ? (h.push(d.parentNode.host), d = d.parentNode.host) : (h.push(d.parentNode), d = d.parentNode);\n    var v, c = [], f = {}, p = !1, g = !1;\n    if (J(h, (t)=>{\n        var i = ni(t);\n        \"a\" === t.tagName.toLowerCase() && (p = t.getAttribute(\"href\"), p = i && p && ci(p) && p), m(Qt(t), \"ph-no-capture\") && (g = !0), c.push(Ri(t, o, a, l));\n        var e = function(t) {\n            if (!ni(t)) return {};\n            var i = {};\n            return J(t.attributes, function(t) {\n                if (t.name && 0 === t.name.indexOf(\"data-ph-capture-attribute\")) {\n                    var e = t.name.replace(\"data-ph-capture-attribute-\", \"\"), r = t.value;\n                    e && r && ci(r) && (i[e] = r);\n                }\n            }), i;\n        }(t);\n        V(f, e);\n    }), g) return {\n        props: {},\n        explicitNoCapture: g\n    };\n    if (a || (\"a\" === i.tagName.toLowerCase() || \"button\" === i.tagName.toLowerCase() ? c[0].$el_text = fi(i) : c[0].$el_text = ti(i)), p) {\n        var _, b;\n        c[0].attr__href = p;\n        var w = null == (_ = yi(p)) ? void 0 : _.host, y = null == t || null == (b = t.location) ? void 0 : b.host;\n        w && y && w !== y && (v = p);\n    }\n    return {\n        props: V({\n            $event_type: n.type,\n            $ce_version: 1\n        }, u ? {} : {\n            $elements: c\n        }, {\n            $elements_chain: gi(c)\n        }, null != (r = c[0]) && r.$el_text ? {\n            $el_text: null == (s = c[0]) ? void 0 : s.$el_text\n        } : {}, v && \"click\" === n.type ? {\n            $external_click_url: v\n        } : {}, f)\n    };\n}\n_c17 = Ti;\nclass Mi {\n    get S() {\n        var t, i, e = I(this.instance.config.autocapture) ? this.instance.config.autocapture : {};\n        return e.url_allowlist = null == (t = e.url_allowlist) ? void 0 : t.map((t)=>new RegExp(t)), e.url_ignorelist = null == (i = e.url_ignorelist) ? void 0 : i.map((t)=>new RegExp(t)), e;\n    }\n    $() {\n        if (this.isBrowserSupported()) {\n            if (t && o) {\n                var i = (i)=>{\n                    i = i || (null == t ? void 0 : t.event);\n                    try {\n                        this.k(i);\n                    } catch (t) {\n                        Ei.error(\"Failed to capture event\", t);\n                    }\n                };\n                if (st(o, \"submit\", i, {\n                    capture: !0\n                }), st(o, \"change\", i, {\n                    capture: !0\n                }), st(o, \"click\", i, {\n                    capture: !0\n                }), this.S.capture_copied_text) {\n                    var e = (i)=>{\n                        i = i || (null == t ? void 0 : t.event), this.k(i, f);\n                    };\n                    st(o, \"copy\", e, {\n                        capture: !0\n                    }), st(o, \"cut\", e, {\n                        capture: !0\n                    });\n                }\n            }\n        } else Ei.info(\"Disabling Automatic Event Collection because this browser is not supported\");\n    }\n    startIfEnabled() {\n        this.isEnabled && !this.i && (this.$(), this.i = !0);\n    }\n    onRemoteConfig(t) {\n        t.elementsChainAsString && (this.h = t.elementsChainAsString), this.instance.persistence && this.instance.persistence.register({\n            [lt]: !!t.autocapture_opt_out\n        }), this.o = !!t.autocapture_opt_out, this.startIfEnabled();\n    }\n    setElementSelectors(t) {\n        this.m = t;\n    }\n    getElementSelectors(t) {\n        var i, e = [];\n        return null == (i = this.m) || i.forEach((i)=>{\n            var r = null == o ? void 0 : o.querySelectorAll(i);\n            null == r || r.forEach((r)=>{\n                t === r && e.push(i);\n            });\n        }), e;\n    }\n    get isEnabled() {\n        var t, i, e = null == (t = this.instance.persistence) ? void 0 : t.props[lt], r = this.o;\n        if (C(r) && !A(e) && !this.instance.config.advanced_disable_decide) return !1;\n        var s = null !== (i = this.o) && void 0 !== i ? i : !!e;\n        return !!this.instance.config.autocapture && !s;\n    }\n    k(i, e) {\n        if (void 0 === e && (e = \"$autocapture\"), this.isEnabled) {\n            var r, s = ii(i);\n            if (Vt(s) && (s = s.parentNode || null), \"$autocapture\" === e && \"click\" === i.type && i instanceof MouseEvent) this.instance.config.rageclick && null != (r = this.rageclicks) && r.isRageClick(i.clientX, i.clientY, (new Date).getTime()) && this.k(i, \"$rageclick\");\n            var n = e === f;\n            if (s && si(s, i, this.S, n, n ? [\n                \"copy\",\n                \"cut\"\n            ] : void 0)) {\n                var { props: o, explicitNoCapture: a } = Ti(s, {\n                    e: i,\n                    maskAllElementAttributes: this.instance.config.mask_all_element_attributes,\n                    maskAllText: this.instance.config.mask_all_text,\n                    elementAttributeIgnoreList: this.S.element_attribute_ignorelist,\n                    elementsChainAsString: this.h\n                });\n                if (a) return !1;\n                var l = this.getElementSelectors(s);\n                if (l && l.length > 0 && (o.$element_selectors = l), e === f) {\n                    var u, h = Zt(null == t || null == (u = t.getSelection()) ? void 0 : u.toString()), d = i.type || \"clipboard\";\n                    if (!h) return !1;\n                    o.$selected_content = h, o.$copy_type = d;\n                }\n                return this.instance.capture(e, o), !0;\n            }\n        }\n    }\n    isBrowserSupported() {\n        return E(null == o ? void 0 : o.querySelectorAll);\n    }\n    constructor(t){\n        this.i = !1, this.o = null, this.rageclicks = new bi, this.h = !1, this.instance = t, this.m = null;\n    }\n}\nMath.trunc || (Math.trunc = function(t) {\n    return t < 0 ? Math.ceil(t) : Math.floor(t);\n}), Number.isInteger || (Number.isInteger = function(t) {\n    return F(t) && isFinite(t) && Math.floor(t) === t;\n});\nvar Ci = \"0123456789abcdef\";\nclass Oi {\n    static fromFieldsV7(t, i, e, r) {\n        if (!Number.isInteger(t) || !Number.isInteger(i) || !Number.isInteger(e) || !Number.isInteger(r) || t < 0 || i < 0 || e < 0 || r < 0 || t > 0xffffffffffff || i > 4095 || e > 1073741823 || r > 4294967295) throw new RangeError(\"invalid field value\");\n        var s = new Uint8Array(16);\n        return s[0] = t / Math.pow(2, 40), s[1] = t / Math.pow(2, 32), s[2] = t / Math.pow(2, 24), s[3] = t / Math.pow(2, 16), s[4] = t / Math.pow(2, 8), s[5] = t, s[6] = 112 | i >>> 8, s[7] = i, s[8] = 128 | e >>> 24, s[9] = e >>> 16, s[10] = e >>> 8, s[11] = e, s[12] = r >>> 24, s[13] = r >>> 16, s[14] = r >>> 8, s[15] = r, new Oi(s);\n    }\n    toString() {\n        for(var t = \"\", i = 0; i < this.bytes.length; i++)t = t + Ci.charAt(this.bytes[i] >>> 4) + Ci.charAt(15 & this.bytes[i]), 3 !== i && 5 !== i && 7 !== i && 9 !== i || (t += \"-\");\n        if (36 !== t.length) throw new Error(\"Invalid UUIDv7 was generated\");\n        return t;\n    }\n    clone() {\n        return new Oi(this.bytes.slice(0));\n    }\n    equals(t) {\n        return 0 === this.compareTo(t);\n    }\n    compareTo(t) {\n        for(var i = 0; i < 16; i++){\n            var e = this.bytes[i] - t.bytes[i];\n            if (0 !== e) return Math.sign(e);\n        }\n        return 0;\n    }\n    constructor(t){\n        if (this.bytes = t, 16 !== t.length) throw new TypeError(\"not 128-bit length\");\n    }\n}\nclass Fi {\n    generate() {\n        var t = this.generateOrAbort();\n        if (R(t)) {\n            this.I = 0;\n            var i = this.generateOrAbort();\n            if (R(i)) throw new Error(\"Could not generate UUID after timestamp reset\");\n            return i;\n        }\n        return t;\n    }\n    generateOrAbort() {\n        var t = Date.now();\n        if (t > this.I) this.I = t, this.T();\n        else {\n            if (!(t + 1e4 > this.I)) return;\n            this.P++, this.P > 4398046511103 && (this.I++, this.T());\n        }\n        return Oi.fromFieldsV7(this.I, Math.trunc(this.P / Math.pow(2, 30)), this.P & Math.pow(2, 30) - 1, this.R.nextUint32());\n    }\n    T() {\n        this.P = 1024 * this.R.nextUint32() + (1023 & this.R.nextUint32());\n    }\n    constructor(){\n        this.I = 0, this.P = 0, this.R = new Li;\n    }\n}\nvar Ai, Di = (t)=>{\n    if (\"undefined\" != typeof UUIDV7_DENY_WEAK_RNG && UUIDV7_DENY_WEAK_RNG) throw new Error(\"no cryptographically strong RNG available\");\n    for(var i = 0; i < t.length; i++)t[i] = 65536 * Math.trunc(65536 * Math.random()) + Math.trunc(65536 * Math.random());\n    return t;\n};\nt && !R(t.crypto) && crypto.getRandomValues && (Di = (t)=>crypto.getRandomValues(t));\nclass Li {\n    nextUint32() {\n        return this.C >= this.M.length && (Di(this.M), this.C = 0), this.M[this.C++];\n    }\n    constructor(){\n        this.M = new Uint32Array(8), this.C = 1 / 0;\n    }\n}\nvar Ni = ()=>ji().toString(), ji = ()=>(Ai || (Ai = new Fi)).generate(), zi = \"\";\nvar Ui = /[a-z0-9][a-z0-9-]+\\.[a-z]{2,}$/i;\nfunction qi(t, i) {\n    if (i) {\n        var e = function(t, i) {\n            if (void 0 === i && (i = o), zi) return zi;\n            if (!i) return \"\";\n            if ([\n                \"localhost\",\n                \"127.0.0.1\"\n            ].includes(t)) return \"\";\n            for(var e = t.split(\".\"), r = Math.min(e.length, 8), s = \"dmn_chk_\" + Ni(); !zi && r--;){\n                var n = e.slice(r).join(\".\"), a = s + \"=1;domain=.\" + n + \";path=/\";\n                i.cookie = a + \";max-age=3\", i.cookie.includes(s) && (i.cookie = a + \";max-age=0\", zi = n);\n            }\n            return zi;\n        }(t);\n        if (!e) {\n            var r = ((t)=>{\n                var i = t.match(Ui);\n                return i ? i[0] : \"\";\n            })(t);\n            r !== e && j.info(\"Warning: cookie subdomain discovery mismatch\", r, e), e = r;\n        }\n        return e ? \"; domain=.\" + e : \"\";\n    }\n    return \"\";\n}\nvar Bi = {\n    O: ()=>!!o,\n    F: function(t) {\n        j.error(\"cookieStore error: \" + t);\n    },\n    A: function(t) {\n        if (o) {\n            try {\n                for(var i = t + \"=\", e = o.cookie.split(\";\").filter((t)=>t.length), r = 0; r < e.length; r++){\n                    for(var s = e[r]; \" \" == s.charAt(0);)s = s.substring(1, s.length);\n                    if (0 === s.indexOf(i)) return decodeURIComponent(s.substring(i.length, s.length));\n                }\n            } catch (t) {}\n            return null;\n        }\n    },\n    D: function(t) {\n        var i;\n        try {\n            i = JSON.parse(Bi.A(t)) || {};\n        } catch (t) {}\n        return i;\n    },\n    L: function(t, i, e, r, s) {\n        if (o) try {\n            var n = \"\", a = \"\", l = qi(o.location.hostname, r);\n            if (e) {\n                var u = new Date;\n                u.setTime(u.getTime() + 24 * e * 60 * 60 * 1e3), n = \"; expires=\" + u.toUTCString();\n            }\n            s && (a = \"; secure\");\n            var h = t + \"=\" + encodeURIComponent(JSON.stringify(i)) + n + \"; SameSite=Lax; path=/\" + l + a;\n            return h.length > 3686.4 && j.warn(\"cookieStore warning: large cookie, len=\" + h.length), o.cookie = h, h;\n        } catch (t) {\n            return;\n        }\n    },\n    N: function(t, i) {\n        try {\n            Bi.L(t, \"\", -1, i);\n        } catch (t) {\n            return;\n        }\n    }\n}, Hi = null, Wi = {\n    O: function() {\n        if (!C(Hi)) return Hi;\n        var i = !0;\n        if (R(t)) i = !1;\n        else try {\n            var e = \"__mplssupport__\";\n            Wi.L(e, \"xyz\"), '\"xyz\"' !== Wi.A(e) && (i = !1), Wi.N(e);\n        } catch (t) {\n            i = !1;\n        }\n        return i || j.error(\"localStorage unsupported; falling back to cookie store\"), Hi = i, i;\n    },\n    F: function(t) {\n        j.error(\"localStorage error: \" + t);\n    },\n    A: function(i) {\n        try {\n            return null == t ? void 0 : t.localStorage.getItem(i);\n        } catch (t) {\n            Wi.F(t);\n        }\n        return null;\n    },\n    D: function(t) {\n        try {\n            return JSON.parse(Wi.A(t)) || {};\n        } catch (t) {}\n        return null;\n    },\n    L: function(i, e) {\n        try {\n            null == t || t.localStorage.setItem(i, JSON.stringify(e));\n        } catch (t) {\n            Wi.F(t);\n        }\n    },\n    N: function(i) {\n        try {\n            null == t || t.localStorage.removeItem(i);\n        } catch (t) {\n            Wi.F(t);\n        }\n    }\n}, Gi = [\n    \"distinct_id\",\n    $t,\n    kt,\n    Ut,\n    zt\n], Ji = B({}, Wi, {\n    D: function(t) {\n        try {\n            var i = {};\n            try {\n                i = Bi.D(t) || {};\n            } catch (t) {}\n            var e = V(i, JSON.parse(Wi.A(t) || \"{}\"));\n            return Wi.L(t, e), e;\n        } catch (t) {}\n        return null;\n    },\n    L: function(t, i, e, r, s, n) {\n        try {\n            Wi.L(t, i, void 0, void 0, n);\n            var o = {};\n            Gi.forEach((t)=>{\n                i[t] && (o[t] = i[t]);\n            }), Object.keys(o).length && Bi.L(t, o, e, r, s, n);\n        } catch (t) {\n            Wi.F(t);\n        }\n    },\n    N: function(i, e) {\n        try {\n            null == t || t.localStorage.removeItem(i), Bi.N(i, e);\n        } catch (t) {\n            Wi.F(t);\n        }\n    }\n}), Vi = {}, Ki = {\n    O: function() {\n        return !0;\n    },\n    F: function(t) {\n        j.error(\"memoryStorage error: \" + t);\n    },\n    A: function(t) {\n        return Vi[t] || null;\n    },\n    D: function(t) {\n        return Vi[t] || null;\n    },\n    L: function(t, i) {\n        Vi[t] = i;\n    },\n    N: function(t) {\n        delete Vi[t];\n    }\n}, Yi = null, Xi = {\n    O: function() {\n        if (!C(Yi)) return Yi;\n        if (Yi = !0, R(t)) Yi = !1;\n        else try {\n            var i = \"__support__\";\n            Xi.L(i, \"xyz\"), '\"xyz\"' !== Xi.A(i) && (Yi = !1), Xi.N(i);\n        } catch (t) {\n            Yi = !1;\n        }\n        return Yi;\n    },\n    F: function(t) {\n        j.error(\"sessionStorage error: \", t);\n    },\n    A: function(i) {\n        try {\n            return null == t ? void 0 : t.sessionStorage.getItem(i);\n        } catch (t) {\n            Xi.F(t);\n        }\n        return null;\n    },\n    D: function(t) {\n        try {\n            return JSON.parse(Xi.A(t)) || null;\n        } catch (t) {}\n        return null;\n    },\n    L: function(i, e) {\n        try {\n            null == t || t.sessionStorage.setItem(i, JSON.stringify(e));\n        } catch (t) {\n            Xi.F(t);\n        }\n    },\n    N: function(i) {\n        try {\n            null == t || t.sessionStorage.removeItem(i);\n        } catch (t) {\n            Xi.F(t);\n        }\n    }\n}, Qi = function(t) {\n    return t[t.PENDING = -1] = \"PENDING\", t[t.DENIED = 0] = \"DENIED\", t[t.GRANTED = 1] = \"GRANTED\", t;\n}({});\nclass Zi {\n    get S() {\n        return this._instance.config;\n    }\n    get consent() {\n        return this.j() ? Qi.DENIED : this.U;\n    }\n    isOptedOut() {\n        return this.consent === Qi.DENIED || this.consent === Qi.PENDING && this.S.opt_out_capturing_by_default;\n    }\n    isOptedIn() {\n        return !this.isOptedOut();\n    }\n    optInOut(t) {\n        this.q.L(this.B, t ? 1 : 0, this.S.cookie_expiration, this.S.cross_subdomain_cookie, this.S.secure_cookie);\n    }\n    reset() {\n        this.q.N(this.B, this.S.cross_subdomain_cookie);\n    }\n    get B() {\n        var { token: t, opt_out_capturing_cookie_prefix: i } = this._instance.config;\n        return (i || \"__ph_opt_in_out_\") + t;\n    }\n    get U() {\n        var t = this.q.A(this.B);\n        return \"1\" === t ? Qi.GRANTED : \"0\" === t ? Qi.DENIED : Qi.PENDING;\n    }\n    get q() {\n        if (!this.H) {\n            var t = this.S.opt_out_capturing_persistence_type;\n            this.H = \"localStorage\" === t ? Wi : Bi;\n            var i = \"localStorage\" === t ? Bi : Wi;\n            i.A(this.B) && (this.H.A(this.B) || this.optInOut(\"1\" === i.A(this.B)), i.N(this.B, this.S.cross_subdomain_cookie));\n        }\n        return this.H;\n    }\n    j() {\n        return !!this.S.respect_dnt && !!rt([\n            null == n ? void 0 : n.doNotTrack,\n            null == n ? void 0 : n.msDoNotTrack,\n            v.doNotTrack\n        ], (t)=>m([\n                !0,\n                1,\n                \"1\",\n                \"yes\"\n            ], t));\n    }\n    constructor(t){\n        this._instance = t;\n    }\n}\nvar te = z(\"[Dead Clicks]\"), ie = ()=>!0, ee = (t)=>{\n    var i, e = !(null == (i = t.instance.persistence) || !i.get_property(ct)), r = t.instance.config.capture_dead_clicks;\n    return A(r) ? r : e;\n};\nclass re {\n    get lazyLoadedDeadClicksAutocapture() {\n        return this.W;\n    }\n    onRemoteConfig(t) {\n        this.instance.persistence && this.instance.persistence.register({\n            [ct]: null == t ? void 0 : t.captureDeadClicks\n        }), this.startIfEnabled();\n    }\n    startIfEnabled() {\n        this.isEnabled(this) && this.G(()=>{\n            this.J();\n        });\n    }\n    G(t) {\n        var i, e;\n        null != (i = v.__PosthogExtensions__) && i.initDeadClicksAutocapture && t(), null == (e = v.__PosthogExtensions__) || null == e.loadExternalDependency || e.loadExternalDependency(this.instance, \"dead-clicks-autocapture\", (i)=>{\n            i ? te.error(\"failed to load script\", i) : t();\n        });\n    }\n    J() {\n        var t;\n        if (o) {\n            if (!this.W && null != (t = v.__PosthogExtensions__) && t.initDeadClicksAutocapture) {\n                var i = I(this.instance.config.capture_dead_clicks) ? this.instance.config.capture_dead_clicks : {};\n                i.__onCapture = this.onCapture, this.W = v.__PosthogExtensions__.initDeadClicksAutocapture(this.instance, i), this.W.start(o), te.info(\"starting...\");\n            }\n        } else te.error(\"`document` not found. Cannot start.\");\n    }\n    stop() {\n        this.W && (this.W.stop(), this.W = void 0, te.info(\"stopping...\"));\n    }\n    constructor(t, i, e){\n        this.instance = t, this.isEnabled = i, this.onCapture = e, this.startIfEnabled();\n    }\n}\nvar se = z(\"[ExceptionAutocapture]\");\nclass ne {\n    it() {\n        var t = this._instance.config.capture_exceptions, i = {\n            capture_unhandled_errors: !1,\n            capture_unhandled_rejections: !1,\n            capture_console_errors: !1\n        };\n        return I(t) ? i = B({}, i, t) : (R(t) ? this.tt : t) && (i = B({}, i, {\n            capture_unhandled_errors: !0,\n            capture_unhandled_rejections: !0\n        })), i;\n    }\n    get isEnabled() {\n        return this.S.capture_console_errors || this.S.capture_unhandled_errors || this.S.capture_unhandled_rejections;\n    }\n    startIfEnabled() {\n        this.isEnabled && (se.info(\"enabled\"), this.G(this.V));\n    }\n    G(t) {\n        var i, e;\n        null != (i = v.__PosthogExtensions__) && i.errorWrappingFunctions && t(), null == (e = v.__PosthogExtensions__) || null == e.loadExternalDependency || e.loadExternalDependency(this._instance, \"exception-autocapture\", (i)=>{\n            if (i) return se.error(\"failed to load script\", i);\n            t();\n        });\n    }\n    Z() {\n        var t, i, e;\n        null == (t = this.K) || t.call(this), this.K = void 0, null == (i = this.Y) || i.call(this), this.Y = void 0, null == (e = this.X) || e.call(this), this.X = void 0;\n    }\n    onRemoteConfig(t) {\n        var i = t.autocaptureExceptions;\n        this.tt = !!i || !1, this.S = this.it(), this._instance.persistence && this._instance.persistence.register({\n            [ht]: this.tt\n        }), this.startIfEnabled();\n    }\n    captureException(t) {\n        var i = this._instance.requestRouter.endpointFor(\"ui\");\n        t.$exception_personURL = i + \"/project/\" + this._instance.config.token + \"/person/\" + this._instance.get_distinct_id(), this._instance.exceptions.sendExceptionEvent(t);\n    }\n    constructor(i){\n        var e;\n        this.V = ()=>{\n            var i;\n            if (t && this.isEnabled && null != (i = v.__PosthogExtensions__) && i.errorWrappingFunctions) {\n                var e = v.__PosthogExtensions__.errorWrappingFunctions.wrapOnError, r = v.__PosthogExtensions__.errorWrappingFunctions.wrapUnhandledRejection, s = v.__PosthogExtensions__.errorWrappingFunctions.wrapConsoleError;\n                try {\n                    !this.K && this.S.capture_unhandled_errors && (this.K = e(this.captureException.bind(this))), !this.Y && this.S.capture_unhandled_rejections && (this.Y = r(this.captureException.bind(this))), !this.X && this.S.capture_console_errors && (this.X = s(this.captureException.bind(this)));\n                } catch (t) {\n                    se.error(\"failed to start\", t), this.Z();\n                }\n            }\n        }, this._instance = i, this.tt = !(null == (e = this._instance.persistence) || !e.props[ht]), this.S = this.it(), this.startIfEnabled();\n    }\n}\nfunction oe(t) {\n    return !R(Event) && ae(t, Event);\n}\nfunction ae(t, i) {\n    try {\n        return t instanceof i;\n    } catch (t) {\n        return !1;\n    }\n}\nfunction le(t) {\n    switch(Object.prototype.toString.call(t)){\n        case \"[object Error]\":\n        case \"[object Exception]\":\n        case \"[object DOMException]\":\n        case \"[object DOMError]\":\n            return !0;\n        default:\n            return ae(t, Error);\n    }\n}\nfunction ue(t, i) {\n    return Object.prototype.toString.call(t) === \"[object \" + i + \"]\";\n}\nfunction he(t) {\n    return ue(t, \"DOMError\");\n}\nvar de = /\\(error: (.*)\\)/, ve = 50, ce = \"?\";\nfunction fe(t, i, e, r) {\n    var s = {\n        platform: \"web:javascript\",\n        filename: t,\n        function: \"<anonymous>\" === i ? ce : i,\n        in_app: !0\n    };\n    return R(e) || (s.lineno = e), R(r) || (s.colno = r), s;\n}\nvar pe = /^\\s*at (\\S+?)(?::(\\d+))(?::(\\d+))\\s*$/i, ge = /^\\s*at (?:(.+?\\)(?: \\[.+\\])?|.*?) ?\\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\\/)?.*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i, _e = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/, me = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:[-a-z]+)?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i, be = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i, we = function() {\n    for(var t = arguments.length, i = new Array(t), e = 0; e < t; e++)i[e] = arguments[e];\n    var r = i.sort((t, i)=>t[0] - i[0]).map((t)=>t[1]);\n    return function(t, i) {\n        void 0 === i && (i = 0);\n        for(var e = [], s = t.split(\"\\n\"), n = i; n < s.length; n++){\n            var o = s[n];\n            if (!(o.length > 1024)) {\n                var a = de.test(o) ? o.replace(de, \"$1\") : o;\n                if (!a.match(/\\S*Error: /)) {\n                    for (var l of r){\n                        var u = l(a);\n                        if (u) {\n                            e.push(u);\n                            break;\n                        }\n                    }\n                    if (e.length >= ve) break;\n                }\n            }\n        }\n        return function(t) {\n            if (!t.length) return [];\n            var i = Array.from(t);\n            return i.reverse(), i.slice(0, ve).map((t)=>B({}, t, {\n                    filename: t.filename || ye(i).filename,\n                    function: t.function || ce\n                }));\n        }(e);\n    };\n}(...[\n    [\n        30,\n        (t)=>{\n            var i = pe.exec(t);\n            if (i) {\n                var [, e, r, s] = i;\n                return fe(e, ce, +r, +s);\n            }\n            var n = ge.exec(t);\n            if (n) {\n                if (n[2] && 0 === n[2].indexOf(\"eval\")) {\n                    var o = _e.exec(n[2]);\n                    o && (n[2] = o[1], n[3] = o[2], n[4] = o[3]);\n                }\n                var [a, l] = xe(n[1] || ce, n[2]);\n                return fe(l, a, n[3] ? +n[3] : void 0, n[4] ? +n[4] : void 0);\n            }\n        }\n    ],\n    [\n        50,\n        (t)=>{\n            var i = me.exec(t);\n            if (i) {\n                if (i[3] && i[3].indexOf(\" > eval\") > -1) {\n                    var e = be.exec(i[3]);\n                    e && (i[1] = i[1] || \"eval\", i[3] = e[1], i[4] = e[2], i[5] = \"\");\n                }\n                var r = i[3], s = i[1] || ce;\n                return [s, r] = xe(s, r), fe(r, s, i[4] ? +i[4] : void 0, i[5] ? +i[5] : void 0);\n            }\n        }\n    ]\n]);\nfunction ye(t) {\n    return t[t.length - 1] || {};\n}\nvar Se, $e, ke, xe = (t, i)=>{\n    var e = -1 !== t.indexOf(\"safari-extension\"), r = -1 !== t.indexOf(\"safari-web-extension\");\n    return e || r ? [\n        -1 !== t.indexOf(\"@\") ? t.split(\"@\")[0] : ce,\n        e ? \"safari-extension:\" + i : \"safari-web-extension:\" + i\n    ] : [\n        t,\n        i\n    ];\n};\nvar Ee = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\nfunction Ie(t, i) {\n    void 0 === i && (i = 0);\n    var e = t.stacktrace || t.stack || \"\", r = function(t) {\n        if (t && Pe.test(t.message)) return 1;\n        return 0;\n    }(t);\n    try {\n        var s = we, n = function(t, i) {\n            var e = function(t) {\n                var i = globalThis._posthogChunkIds;\n                if (!i) return {};\n                var e = Object.keys(i);\n                return ke && e.length === $e || ($e = e.length, ke = e.reduce((e, r)=>{\n                    Se || (Se = {});\n                    var s = Se[r];\n                    if (s) e[s[0]] = s[1];\n                    else for(var n = t(r), o = n.length - 1; o >= 0; o--){\n                        var a = n[o], l = null == a ? void 0 : a.filename, u = i[r];\n                        if (l && u) {\n                            e[l] = u, Se[r] = [\n                                l,\n                                u\n                            ];\n                            break;\n                        }\n                    }\n                    return e;\n                }, {})), ke;\n            }(i);\n            return t.forEach((t)=>{\n                t.filename && (t.chunk_id = e[t.filename]);\n            }), t;\n        }(s(e, r), s);\n        return n.slice(0, n.length - i);\n    } catch (t) {}\n    return [];\n}\n_c18 = Ie;\nvar Pe = /Minified React error #\\d+;/i;\nfunction Re(t, i) {\n    var e, r, s = Ie(t), n = null === (e = null == i ? void 0 : i.handled) || void 0 === e || e, o = null !== (r = null == i ? void 0 : i.synthetic) && void 0 !== r && r;\n    return {\n        type: null != i && i.overrideExceptionType ? i.overrideExceptionType : t.name,\n        value: function(t) {\n            var i = t.message;\n            if (i.error && \"string\" == typeof i.error.message) return String(i.error.message);\n            return String(i);\n        }(t),\n        stacktrace: {\n            frames: s,\n            type: \"raw\"\n        },\n        mechanism: {\n            handled: n,\n            synthetic: o\n        }\n    };\n}\n_c19 = Re;\nfunction Te(t, i) {\n    var e = Re(t, i);\n    return t.cause && le(t.cause) && t.cause !== t ? [\n        e,\n        ...Te(t.cause, {\n            handled: null == i ? void 0 : i.handled,\n            synthetic: null == i ? void 0 : i.synthetic\n        })\n    ] : [\n        e\n    ];\n}\n_c20 = Te;\nfunction Me(t, i) {\n    return {\n        $exception_list: Te(t, i),\n        $exception_level: \"error\"\n    };\n}\n_c21 = Me;\nfunction Ce(t, i) {\n    var e, r, s, n = null === (e = null == i ? void 0 : i.handled) || void 0 === e || e, o = null === (r = null == i ? void 0 : i.synthetic) || void 0 === r || r, a = {\n        type: null != i && i.overrideExceptionType ? i.overrideExceptionType : null !== (s = null == i ? void 0 : i.defaultExceptionType) && void 0 !== s ? s : \"Error\",\n        value: t || (null == i ? void 0 : i.defaultExceptionMessage),\n        mechanism: {\n            handled: n,\n            synthetic: o\n        }\n    };\n    if (null != i && i.syntheticException) {\n        var l = Ie(i.syntheticException, 1);\n        l.length && (a.stacktrace = {\n            frames: l,\n            type: \"raw\"\n        });\n    }\n    return {\n        $exception_list: [\n            a\n        ],\n        $exception_level: \"error\"\n    };\n}\n_c22 = Ce;\nfunction Oe(t) {\n    return T(t) && !M(t) && _.indexOf(t) >= 0;\n}\n_c23 = Oe;\nfunction Fe(t, i) {\n    var e, r, s = null === (e = null == i ? void 0 : i.handled) || void 0 === e || e, n = null === (r = null == i ? void 0 : i.synthetic) || void 0 === r || r, o = null != i && i.overrideExceptionType ? i.overrideExceptionType : oe(t) ? t.constructor.name : \"Error\", a = \"Non-Error 'exception' captured with keys: \" + function(t, i) {\n        void 0 === i && (i = 40);\n        var e = Object.keys(t);\n        if (e.sort(), !e.length) return \"[object has no keys]\";\n        for(var r = e.length; r > 0; r--){\n            var s = e.slice(0, r).join(\", \");\n            if (!(s.length > i)) return r === e.length || s.length <= i ? s : s.slice(0, i) + \"...\";\n        }\n        return \"\";\n    }(t), l = {\n        type: o,\n        value: a,\n        mechanism: {\n            handled: s,\n            synthetic: n\n        }\n    };\n    if (null != i && i.syntheticException) {\n        var u = Ie(null == i ? void 0 : i.syntheticException, 1);\n        u.length && (l.stacktrace = {\n            frames: u,\n            type: \"raw\"\n        });\n    }\n    return {\n        $exception_list: [\n            l\n        ],\n        $exception_level: Oe(t.level) ? t.level : \"error\"\n    };\n}\n_c24 = Fe;\nfunction Ae(t, i) {\n    var { error: e, event: r } = t, s = {\n        $exception_list: []\n    }, n = e || r;\n    if (he(n) || function(t) {\n        return ue(t, \"DOMException\");\n    }(n)) {\n        var o = n;\n        if (function(t) {\n            return \"stack\" in t;\n        }(n)) s = Me(n, i);\n        else {\n            var a = o.name || (he(o) ? \"DOMError\" : \"DOMException\"), l = o.message ? a + \": \" + o.message : a;\n            s = Ce(l, B({}, i, {\n                overrideExceptionType: he(o) ? \"DOMError\" : \"DOMException\",\n                defaultExceptionMessage: l\n            }));\n        }\n        return \"code\" in o && (s.$exception_DOMException_code = \"\" + o.code), s;\n    }\n    if (function(t) {\n        return ue(t, \"ErrorEvent\");\n    }(n) && n.error) return Me(n.error, i);\n    if (le(n)) return Me(n, i);\n    if (function(t) {\n        return ue(t, \"Object\");\n    }(n) || oe(n)) return Fe(n, i);\n    if (R(e) && T(r)) {\n        var u = \"Error\", h = r, d = r.match(Ee);\n        return d && (u = d[1], h = d[2]), Ce(h, B({}, i, {\n            overrideExceptionType: u,\n            defaultExceptionMessage: h\n        }));\n    }\n    return Ce(n, i);\n}\n_c25 = Ae;\nfunction De(t, i, e) {\n    try {\n        if (!(i in t)) return ()=>{};\n        var r = t[i], s = e(r);\n        return E(s) && (s.prototype = s.prototype || {}, Object.defineProperties(s, {\n            __posthog_wrapped__: {\n                enumerable: !1,\n                value: !0\n            }\n        })), t[i] = s, ()=>{\n            t[i] = r;\n        };\n    } catch (t) {\n        return ()=>{};\n    }\n}\n_c26 = De;\nclass Le {\n    get isEnabled() {\n        return \"history_change\" === this._instance.config.capture_pageview;\n    }\n    startIfEnabled() {\n        this.isEnabled && (j.info(\"History API monitoring enabled, starting...\"), this.monitorHistoryChanges());\n    }\n    stop() {\n        this.rt && this.rt(), this.rt = void 0, j.info(\"History API monitoring stopped\");\n    }\n    monitorHistoryChanges() {\n        var i, e;\n        if (t && t.history) {\n            var r = this;\n            null != (i = t.history.pushState) && i.__posthog_wrapped__ || De(t.history, \"pushState\", (t)=>function(i, e, s) {\n                    t.call(this, i, e, s), r.st(\"pushState\");\n                }), null != (e = t.history.replaceState) && e.__posthog_wrapped__ || De(t.history, \"replaceState\", (t)=>function(i, e, s) {\n                    t.call(this, i, e, s), r.st(\"replaceState\");\n                }), this.nt();\n        }\n    }\n    st(i) {\n        try {\n            var e, r = null == t || null == (e = t.location) ? void 0 : e.pathname;\n            if (!r) return;\n            r !== this.et && this.isEnabled && this._instance.capture(\"$pageview\", {\n                navigation_type: i\n            }), this.et = r;\n        } catch (t) {\n            j.error(\"Error capturing \" + i + \" pageview\", t);\n        }\n    }\n    nt() {\n        if (!this.rt) {\n            var i = ()=>{\n                this.st(\"popstate\");\n            };\n            st(t, \"popstate\", i), this.rt = ()=>{\n                t && t.removeEventListener(\"popstate\", i);\n            };\n        }\n    }\n    constructor(i){\n        var e;\n        this._instance = i, this.et = (null == t || null == (e = t.location) ? void 0 : e.pathname) || \"\";\n    }\n}\nfunction Ne(t) {\n    var i, e;\n    return (null == (i = JSON.stringify(t, (e = [], function(t, i) {\n        if (I(i)) {\n            for(; e.length > 0 && e[e.length - 1] !== this;)e.pop();\n            return e.includes(i) ? \"[Circular]\" : (e.push(i), i);\n        }\n        return i;\n    }))) ? void 0 : i.length) || 0;\n}\n_c27 = Ne;\nfunction je(t, i) {\n    if (void 0 === i && (i = 6606028.8), t.size >= i && t.data.length > 1) {\n        var e = Math.floor(t.data.length / 2), r = t.data.slice(0, e), s = t.data.slice(e);\n        return [\n            je({\n                size: Ne(r),\n                data: r,\n                sessionId: t.sessionId,\n                windowId: t.windowId\n            }),\n            je({\n                size: Ne(s),\n                data: s,\n                sessionId: t.sessionId,\n                windowId: t.windowId\n            })\n        ].flatMap((t)=>t);\n    }\n    return [\n        t\n    ];\n}\nvar ze = ((t)=>(t[t.DomContentLoaded = 0] = \"DomContentLoaded\", t[t.Load = 1] = \"Load\", t[t.FullSnapshot = 2] = \"FullSnapshot\", t[t.IncrementalSnapshot = 3] = \"IncrementalSnapshot\", t[t.Meta = 4] = \"Meta\", t[t.Custom = 5] = \"Custom\", t[t.Plugin = 6] = \"Plugin\", t))(ze || {}), Ue = ((t)=>(t[t.Mutation = 0] = \"Mutation\", t[t.MouseMove = 1] = \"MouseMove\", t[t.MouseInteraction = 2] = \"MouseInteraction\", t[t.Scroll = 3] = \"Scroll\", t[t.ViewportResize = 4] = \"ViewportResize\", t[t.Input = 5] = \"Input\", t[t.TouchMove = 6] = \"TouchMove\", t[t.MediaInteraction = 7] = \"MediaInteraction\", t[t.StyleSheetRule = 8] = \"StyleSheetRule\", t[t.CanvasMutation = 9] = \"CanvasMutation\", t[t.Font = 10] = \"Font\", t[t.Log = 11] = \"Log\", t[t.Drag = 12] = \"Drag\", t[t.StyleDeclaration = 13] = \"StyleDeclaration\", t[t.Selection = 14] = \"Selection\", t[t.AdoptedStyleSheet = 15] = \"AdoptedStyleSheet\", t[t.CustomElement = 16] = \"CustomElement\", t))(Ue || {}), qe = \"[SessionRecording]\", Be = \"redacted\", He = {\n    initiatorTypes: [\n        \"audio\",\n        \"beacon\",\n        \"body\",\n        \"css\",\n        \"early-hint\",\n        \"embed\",\n        \"fetch\",\n        \"frame\",\n        \"iframe\",\n        \"icon\",\n        \"image\",\n        \"img\",\n        \"input\",\n        \"link\",\n        \"navigation\",\n        \"object\",\n        \"ping\",\n        \"script\",\n        \"track\",\n        \"video\",\n        \"xmlhttprequest\"\n    ],\n    maskRequestFn: (t)=>t,\n    recordHeaders: !1,\n    recordBody: !1,\n    recordInitialRequests: !1,\n    recordPerformance: !1,\n    performanceEntryTypeToObserve: [\n        \"first-input\",\n        \"navigation\",\n        \"paint\",\n        \"resource\"\n    ],\n    payloadSizeLimitBytes: 1e6,\n    payloadHostDenyList: [\n        \".lr-ingest.io\",\n        \".ingest.sentry.io\",\n        \".clarity.ms\",\n        \"analytics.google.com\",\n        \"bam.nr-data.net\"\n    ]\n}, We = [\n    \"authorization\",\n    \"x-forwarded-for\",\n    \"authorization\",\n    \"cookie\",\n    \"set-cookie\",\n    \"x-api-key\",\n    \"x-real-ip\",\n    \"remote-addr\",\n    \"forwarded\",\n    \"proxy-authorization\",\n    \"x-csrf-token\",\n    \"x-csrftoken\",\n    \"x-xsrf-token\"\n], Ge = [\n    \"password\",\n    \"secret\",\n    \"passwd\",\n    \"api_key\",\n    \"apikey\",\n    \"auth\",\n    \"credentials\",\n    \"mysql_pwd\",\n    \"privatekey\",\n    \"private_key\",\n    \"token\"\n], Je = [\n    \"/s/\",\n    \"/e/\",\n    \"/i/\"\n];\nfunction Ve(t, i, e, r) {\n    if (O(t)) return t;\n    var s = (null == i ? void 0 : i[\"content-length\"]) || function(t) {\n        return new Blob([\n            t\n        ]).size;\n    }(t);\n    return T(s) && (s = parseInt(s)), s > e ? qe + \" \" + r + \" body too large to record (\" + s + \" bytes)\" : t;\n}\n_c28 = Ve;\nfunction Ke(t, i) {\n    if (O(t)) return t;\n    var e = t;\n    return ci(e, !1) || (e = qe + \" \" + i + \" body \" + Be), J(Ge, (t)=>{\n        var r, s;\n        null != (r = e) && r.length && -1 !== (null == (s = e) ? void 0 : s.indexOf(t)) && (e = qe + \" \" + i + \" body \" + Be + \" as might contain: \" + t);\n    }), e;\n}\n_c29 = Ke;\nvar Ye = (t, i)=>{\n    var e, r, s, n = {\n        payloadSizeLimitBytes: He.payloadSizeLimitBytes,\n        performanceEntryTypeToObserve: [\n            ...He.performanceEntryTypeToObserve\n        ],\n        payloadHostDenyList: [\n            ...i.payloadHostDenyList || [],\n            ...He.payloadHostDenyList\n        ]\n    }, o = !1 !== t.session_recording.recordHeaders && i.recordHeaders, a = !1 !== t.session_recording.recordBody && i.recordBody, l = !1 !== t.capture_performance && i.recordPerformance, u = (e = n, s = Math.min(1e6, null !== (r = e.payloadSizeLimitBytes) && void 0 !== r ? r : 1e6), (t)=>(null != t && t.requestBody && (t.requestBody = Ve(t.requestBody, t.requestHeaders, s, \"Request\")), null != t && t.responseBody && (t.responseBody = Ve(t.responseBody, t.responseHeaders, s, \"Response\")), t)), h = (i)=>{\n        return u(((t, i)=>{\n            var e, r = yi(t.name), s = 0 === i.indexOf(\"http\") ? null == (e = yi(i)) ? void 0 : e.pathname : i;\n            \"/\" === s && (s = \"\");\n            var n = null == r ? void 0 : r.pathname.replace(s || \"\", \"\");\n            if (!(r && n && Je.some((t)=>0 === n.indexOf(t)))) return t;\n        })((r = (e = i).requestHeaders, O(r) || J(Object.keys(null != r ? r : {}), (t)=>{\n            We.includes(t.toLowerCase()) && (r[t] = Be);\n        }), e), t.api_host));\n        var e, r;\n    }, d = E(t.session_recording.maskNetworkRequestFn);\n    return d && E(t.session_recording.maskCapturedNetworkRequestFn) && j.warn(\"Both `maskNetworkRequestFn` and `maskCapturedNetworkRequestFn` are defined. `maskNetworkRequestFn` will be ignored.\"), d && (t.session_recording.maskCapturedNetworkRequestFn = (i)=>{\n        var e = t.session_recording.maskNetworkRequestFn({\n            url: i.name\n        });\n        return B({}, i, {\n            name: null == e ? void 0 : e.url\n        });\n    }), n.maskRequestFn = E(t.session_recording.maskCapturedNetworkRequestFn) ? (i)=>{\n        var e, r = h(i);\n        return r && null !== (e = null == t.session_recording.maskCapturedNetworkRequestFn ? void 0 : t.session_recording.maskCapturedNetworkRequestFn(r)) && void 0 !== e ? e : void 0;\n    } : (t)=>(function(t) {\n            if (!R(t)) return t.requestBody = Ke(t.requestBody, \"Request\"), t.responseBody = Ke(t.responseBody, \"Response\"), t;\n        })(h(t)), B({}, He, n, {\n        recordHeaders: o,\n        recordBody: a,\n        recordPerformance: l,\n        recordInitialRequests: l\n    });\n};\n_c30 = Ye;\nfunction Xe(t, i, e, r, s) {\n    return i > e && (j.warn(\"min cannot be greater than max.\"), i = e), F(t) ? t > e ? (r && j.warn(r + \" cannot be  greater than max: \" + e + \". Using max value instead.\"), e) : t < i ? (r && j.warn(r + \" cannot be less than min: \" + i + \". Using min value instead.\"), i) : t : (r && j.warn(r + \" must be a number. using max or fallback. max: \" + e + \", fallback: \" + s), Xe(s || e, i, e, r));\n}\n_c31 = Xe;\nclass Qe {\n    constructor(t, i){\n        var e, r;\n        void 0 === i && (i = {}), this.ot = 100, this.lt = 10, this.ut = {}, this.ht = {}, this.dt = ()=>{\n            Object.keys(this.ut).forEach((t)=>{\n                this.ut[t] = this.ut[t] + this.lt, this.ut[t] >= this.ot && delete this.ut[t];\n            });\n        }, this.vt = (t)=>{\n            var i = this._rrweb.mirror.getNode(t);\n            if (\"svg\" !== (null == i ? void 0 : i.nodeName) && i instanceof Element) {\n                var e = i.closest(\"svg\");\n                if (e) return [\n                    this._rrweb.mirror.getId(e),\n                    e\n                ];\n            }\n            return [\n                t,\n                i\n            ];\n        }, this.ct = (t)=>{\n            var i, e, r, s, n, o, a, l;\n            return (null !== (i = null == (e = t.removes) ? void 0 : e.length) && void 0 !== i ? i : 0) + (null !== (r = null == (s = t.attributes) ? void 0 : s.length) && void 0 !== r ? r : 0) + (null !== (n = null == (o = t.texts) ? void 0 : o.length) && void 0 !== n ? n : 0) + (null !== (a = null == (l = t.adds) ? void 0 : l.length) && void 0 !== a ? a : 0);\n        }, this.throttleMutations = (t)=>{\n            if (3 !== t.type || 0 !== t.data.source) return t;\n            var i = t.data, e = this.ct(i);\n            i.attributes && (i.attributes = i.attributes.filter((t)=>{\n                var i, e, r, [s, n] = this.vt(t.id);\n                if (0 === this.ut[s]) return !1;\n                (this.ut[s] = null !== (i = this.ut[s]) && void 0 !== i ? i : this.ot, this.ut[s] = Math.max(this.ut[s] - 1, 0), 0 === this.ut[s]) && (this.ht[s] || (this.ht[s] = !0, null == (e = (r = this.ft).onBlockedNode) || e.call(r, s, n)));\n                return t;\n            }));\n            var r = this.ct(i);\n            return 0 !== r || e === r ? t : void 0;\n        }, this._rrweb = t, this.ft = i, this.lt = Xe(null !== (e = this.ft.refillRate) && void 0 !== e ? e : this.lt, 0, 100, \"mutation throttling refill rate\"), this.ot = Xe(null !== (r = this.ft.bucketSize) && void 0 !== r ? r : this.ot, 0, 100, \"mutation throttling bucket size\"), setInterval(()=>{\n            this.dt();\n        }, 1e3);\n    }\n}\nvar Ze = Uint8Array, tr = Uint16Array, ir = Uint32Array, er = new Ze([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    2,\n    2,\n    2,\n    2,\n    3,\n    3,\n    3,\n    3,\n    4,\n    4,\n    4,\n    4,\n    5,\n    5,\n    5,\n    5,\n    0,\n    0,\n    0,\n    0\n]), rr = new Ze([\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    2,\n    2,\n    3,\n    3,\n    4,\n    4,\n    5,\n    5,\n    6,\n    6,\n    7,\n    7,\n    8,\n    8,\n    9,\n    9,\n    10,\n    10,\n    11,\n    11,\n    12,\n    12,\n    13,\n    13,\n    0,\n    0\n]), sr = new Ze([\n    16,\n    17,\n    18,\n    0,\n    8,\n    7,\n    9,\n    6,\n    10,\n    5,\n    11,\n    4,\n    12,\n    3,\n    13,\n    2,\n    14,\n    1,\n    15\n]), nr = function(t, i) {\n    for(var e = new tr(31), r = 0; r < 31; ++r)e[r] = i += 1 << t[r - 1];\n    var s = new ir(e[30]);\n    for(r = 1; r < 30; ++r)for(var n = e[r]; n < e[r + 1]; ++n)s[n] = n - e[r] << 5 | r;\n    return [\n        e,\n        s\n    ];\n}, or = nr(er, 2), ar = or[0], lr = or[1];\nar[28] = 258, lr[258] = 28;\nfor(var ur = nr(rr, 0)[1], hr = new tr(32768), dr = 0; dr < 32768; ++dr){\n    var vr = (43690 & dr) >>> 1 | (21845 & dr) << 1;\n    vr = (61680 & (vr = (52428 & vr) >>> 2 | (13107 & vr) << 2)) >>> 4 | (3855 & vr) << 4, hr[dr] = ((65280 & vr) >>> 8 | (255 & vr) << 8) >>> 1;\n}\nvar cr = function(t, i, e) {\n    for(var r = t.length, s = 0, n = new tr(i); s < r; ++s)++n[t[s] - 1];\n    var o, a = new tr(i);\n    for(s = 0; s < i; ++s)a[s] = a[s - 1] + n[s - 1] << 1;\n    if (e) {\n        o = new tr(1 << i);\n        var l = 15 - i;\n        for(s = 0; s < r; ++s)if (t[s]) for(var u = s << 4 | t[s], h = i - t[s], d = a[t[s] - 1]++ << h, v = d | (1 << h) - 1; d <= v; ++d)o[hr[d] >>> l] = u;\n    } else for(o = new tr(r), s = 0; s < r; ++s)o[s] = hr[a[t[s] - 1]++] >>> 15 - t[s];\n    return o;\n}, fr = new Ze(288);\nfor(dr = 0; dr < 144; ++dr)fr[dr] = 8;\nfor(dr = 144; dr < 256; ++dr)fr[dr] = 9;\nfor(dr = 256; dr < 280; ++dr)fr[dr] = 7;\nfor(dr = 280; dr < 288; ++dr)fr[dr] = 8;\nvar pr = new Ze(32);\nfor(dr = 0; dr < 32; ++dr)pr[dr] = 5;\nvar gr = cr(fr, 9, 0), _r = cr(pr, 5, 0), mr = function(t) {\n    return (t / 8 >> 0) + (7 & t && 1);\n}, br = function(t, i, e) {\n    (null == e || e > t.length) && (e = t.length);\n    var r = new (t instanceof tr ? tr : t instanceof ir ? ir : Ze)(e - i);\n    return r.set(t.subarray(i, e)), r;\n}, wr = function(t, i, e) {\n    e <<= 7 & i;\n    var r = i / 8 >> 0;\n    t[r] |= e, t[r + 1] |= e >>> 8;\n}, yr = function(t, i, e) {\n    e <<= 7 & i;\n    var r = i / 8 >> 0;\n    t[r] |= e, t[r + 1] |= e >>> 8, t[r + 2] |= e >>> 16;\n}, Sr = function(t, i) {\n    for(var e = [], r = 0; r < t.length; ++r)t[r] && e.push({\n        s: r,\n        f: t[r]\n    });\n    var s = e.length, n = e.slice();\n    if (!s) return [\n        new Ze(0),\n        0\n    ];\n    if (1 == s) {\n        var o = new Ze(e[0].s + 1);\n        return o[e[0].s] = 1, [\n            o,\n            1\n        ];\n    }\n    e.sort(function(t, i) {\n        return t.f - i.f;\n    }), e.push({\n        s: -1,\n        f: 25001\n    });\n    var a = e[0], l = e[1], u = 0, h = 1, d = 2;\n    for(e[0] = {\n        s: -1,\n        f: a.f + l.f,\n        l: a,\n        r: l\n    }; h != s - 1;)a = e[e[u].f < e[d].f ? u++ : d++], l = e[u != h && e[u].f < e[d].f ? u++ : d++], e[h++] = {\n        s: -1,\n        f: a.f + l.f,\n        l: a,\n        r: l\n    };\n    var v = n[0].s;\n    for(r = 1; r < s; ++r)n[r].s > v && (v = n[r].s);\n    var c = new tr(v + 1), f = $r(e[h - 1], c, 0);\n    if (f > i) {\n        r = 0;\n        var p = 0, g = f - i, _ = 1 << g;\n        for(n.sort(function(t, i) {\n            return c[i.s] - c[t.s] || t.f - i.f;\n        }); r < s; ++r){\n            var m = n[r].s;\n            if (!(c[m] > i)) break;\n            p += _ - (1 << f - c[m]), c[m] = i;\n        }\n        for(p >>>= g; p > 0;){\n            var b = n[r].s;\n            c[b] < i ? p -= 1 << i - c[b]++ - 1 : ++r;\n        }\n        for(; r >= 0 && p; --r){\n            var w = n[r].s;\n            c[w] == i && (--c[w], ++p);\n        }\n        f = i;\n    }\n    return [\n        new Ze(c),\n        f\n    ];\n}, $r = function(t, i, e) {\n    return -1 == t.s ? Math.max($r(t.l, i, e + 1), $r(t.r, i, e + 1)) : i[t.s] = e;\n}, kr = function(t) {\n    for(var i = t.length; i && !t[--i];);\n    for(var e = new tr(++i), r = 0, s = t[0], n = 1, o = function(t) {\n        e[r++] = t;\n    }, a = 1; a <= i; ++a)if (t[a] == s && a != i) ++n;\n    else {\n        if (!s && n > 2) {\n            for(; n > 138; n -= 138)o(32754);\n            n > 2 && (o(n > 10 ? n - 11 << 5 | 28690 : n - 3 << 5 | 12305), n = 0);\n        } else if (n > 3) {\n            for(o(s), --n; n > 6; n -= 6)o(8304);\n            n > 2 && (o(n - 3 << 5 | 8208), n = 0);\n        }\n        for(; n--;)o(s);\n        n = 1, s = t[a];\n    }\n    return [\n        e.subarray(0, r),\n        i\n    ];\n}, xr = function(t, i) {\n    for(var e = 0, r = 0; r < i.length; ++r)e += t[r] * i[r];\n    return e;\n}, Er = function(t, i, e) {\n    var r = e.length, s = mr(i + 2);\n    t[s] = 255 & r, t[s + 1] = r >>> 8, t[s + 2] = 255 ^ t[s], t[s + 3] = 255 ^ t[s + 1];\n    for(var n = 0; n < r; ++n)t[s + n + 4] = e[n];\n    return 8 * (s + 4 + r);\n}, Ir = function(t, i, e, r, s, n, o, a, l, u, h) {\n    wr(i, h++, e), ++s[256];\n    for(var d = Sr(s, 15), v = d[0], c = d[1], f = Sr(n, 15), p = f[0], g = f[1], _ = kr(v), m = _[0], b = _[1], w = kr(p), y = w[0], S = w[1], $ = new tr(19), k = 0; k < m.length; ++k)$[31 & m[k]]++;\n    for(k = 0; k < y.length; ++k)$[31 & y[k]]++;\n    for(var x = Sr($, 7), E = x[0], I = x[1], P = 19; P > 4 && !E[sr[P - 1]]; --P);\n    var R, T, M, C, O = u + 5 << 3, F = xr(s, fr) + xr(n, pr) + o, A = xr(s, v) + xr(n, p) + o + 14 + 3 * P + xr($, E) + (2 * $[16] + 3 * $[17] + 7 * $[18]);\n    if (O <= F && O <= A) return Er(i, h, t.subarray(l, l + u));\n    if (wr(i, h, 1 + (A < F)), h += 2, A < F) {\n        R = cr(v, c, 0), T = v, M = cr(p, g, 0), C = p;\n        var D = cr(E, I, 0);\n        wr(i, h, b - 257), wr(i, h + 5, S - 1), wr(i, h + 10, P - 4), h += 14;\n        for(k = 0; k < P; ++k)wr(i, h + 3 * k, E[sr[k]]);\n        h += 3 * P;\n        for(var L = [\n            m,\n            y\n        ], N = 0; N < 2; ++N){\n            var j = L[N];\n            for(k = 0; k < j.length; ++k){\n                var z = 31 & j[k];\n                wr(i, h, D[z]), h += E[z], z > 15 && (wr(i, h, j[k] >>> 5 & 127), h += j[k] >>> 12);\n            }\n        }\n    } else R = gr, T = fr, M = _r, C = pr;\n    for(k = 0; k < a; ++k)if (r[k] > 255) {\n        z = r[k] >>> 18 & 31;\n        yr(i, h, R[z + 257]), h += T[z + 257], z > 7 && (wr(i, h, r[k] >>> 23 & 31), h += er[z]);\n        var U = 31 & r[k];\n        yr(i, h, M[U]), h += C[U], U > 3 && (yr(i, h, r[k] >>> 5 & 8191), h += rr[U]);\n    } else yr(i, h, R[r[k]]), h += T[r[k]];\n    return yr(i, h, R[256]), h + T[256];\n}, Pr = new ir([\n    65540,\n    131080,\n    131088,\n    131104,\n    262176,\n    1048704,\n    1048832,\n    2114560,\n    2117632\n]), Rr = function() {\n    for(var t = new ir(256), i = 0; i < 256; ++i){\n        for(var e = i, r = 9; --r;)e = (1 & e && 3988292384) ^ e >>> 1;\n        t[i] = e;\n    }\n    return t;\n}(), Tr = function() {\n    var t = 4294967295;\n    return {\n        p: function(i) {\n            for(var e = t, r = 0; r < i.length; ++r)e = Rr[255 & e ^ i[r]] ^ e >>> 8;\n            t = e;\n        },\n        d: function() {\n            return 4294967295 ^ t;\n        }\n    };\n}, Mr = function(t, i, e, r, s) {\n    return function(t, i, e, r, s, n) {\n        var o = t.length, a = new Ze(r + o + 5 * (1 + Math.floor(o / 7e3)) + s), l = a.subarray(r, a.length - s), u = 0;\n        if (!i || o < 8) for(var h = 0; h <= o; h += 65535){\n            var d = h + 65535;\n            d < o ? u = Er(l, u, t.subarray(h, d)) : (l[h] = n, u = Er(l, u, t.subarray(h, o)));\n        }\n        else {\n            for(var v = Pr[i - 1], c = v >>> 13, f = 8191 & v, p = (1 << e) - 1, g = new tr(32768), _ = new tr(p + 1), m = Math.ceil(e / 3), b = 2 * m, w = function(i) {\n                return (t[i] ^ t[i + 1] << m ^ t[i + 2] << b) & p;\n            }, y = new ir(25e3), S = new tr(288), $ = new tr(32), k = 0, x = 0, E = (h = 0, 0), I = 0, P = 0; h < o; ++h){\n                var R = w(h), T = 32767 & h, M = _[R];\n                if (g[T] = M, _[R] = T, I <= h) {\n                    var C = o - h;\n                    if ((k > 7e3 || E > 24576) && C > 423) {\n                        u = Ir(t, l, 0, y, S, $, x, E, P, h - P, u), E = k = x = 0, P = h;\n                        for(var O = 0; O < 286; ++O)S[O] = 0;\n                        for(O = 0; O < 30; ++O)$[O] = 0;\n                    }\n                    var F = 2, A = 0, D = f, L = T - M & 32767;\n                    if (C > 2 && R == w(h - L)) for(var N = Math.min(c, C) - 1, j = Math.min(32767, h), z = Math.min(258, C); L <= j && --D && T != M;){\n                        if (t[h + F] == t[h + F - L]) {\n                            for(var U = 0; U < z && t[h + U] == t[h + U - L]; ++U);\n                            if (U > F) {\n                                if (F = U, A = L, U > N) break;\n                                var q = Math.min(L, U - 2), B = 0;\n                                for(O = 0; O < q; ++O){\n                                    var H = h - L + O + 32768 & 32767, W = H - g[H] + 32768 & 32767;\n                                    W > B && (B = W, M = H);\n                                }\n                            }\n                        }\n                        L += (T = M) - (M = g[T]) + 32768 & 32767;\n                    }\n                    if (A) {\n                        y[E++] = 268435456 | lr[F] << 18 | ur[A];\n                        var G = 31 & lr[F], J = 31 & ur[A];\n                        x += er[G] + rr[J], ++S[257 + G], ++$[J], I = h + F, ++k;\n                    } else y[E++] = t[h], ++S[t[h]];\n                }\n            }\n            u = Ir(t, l, n, y, S, $, x, E, P, h - P, u);\n        }\n        return br(a, 0, r + mr(u) + s);\n    }(t, null == i.level ? 6 : i.level, null == i.mem ? Math.ceil(1.5 * Math.max(8, Math.min(13, Math.log(t.length)))) : 12 + i.mem, e, r, !s);\n}, Cr = function(t, i, e) {\n    for(; e; ++i)t[i] = e, e >>>= 8;\n}, Or = function(t, i) {\n    var e = i.filename;\n    if (t[0] = 31, t[1] = 139, t[2] = 8, t[8] = i.level < 2 ? 4 : 9 == i.level ? 2 : 0, t[9] = 3, 0 != i.mtime && Cr(t, 4, Math.floor(new Date(i.mtime || Date.now()) / 1e3)), e) {\n        t[3] = 8;\n        for(var r = 0; r <= e.length; ++r)t[r + 10] = e.charCodeAt(r);\n    }\n}, Fr = function(t) {\n    return 10 + (t.filename && t.filename.length + 1 || 0);\n};\nfunction Ar(t, i) {\n    void 0 === i && (i = {});\n    var e = Tr(), r = t.length;\n    e.p(t);\n    var s = Mr(t, i, Fr(i), 8), n = s.length;\n    return Or(s, i), Cr(s, n - 8, e.d()), Cr(s, n - 4, r), s;\n}\n_c32 = Ar;\nfunction Dr(t, i) {\n    var e = t.length;\n    if (\"undefined\" != typeof TextEncoder) return (new TextEncoder).encode(t);\n    for(var r = new Ze(t.length + (t.length >>> 1)), s = 0, n = function(t) {\n        r[s++] = t;\n    }, o = 0; o < e; ++o){\n        if (s + 5 > r.length) {\n            var a = new Ze(s + 8 + (e - o << 1));\n            a.set(r), r = a;\n        }\n        var l = t.charCodeAt(o);\n        l < 128 || i ? n(l) : l < 2048 ? (n(192 | l >>> 6), n(128 | 63 & l)) : l > 55295 && l < 57344 ? (n(240 | (l = 65536 + (1047552 & l) | 1023 & t.charCodeAt(++o)) >>> 18), n(128 | l >>> 12 & 63), n(128 | l >>> 6 & 63), n(128 | 63 & l)) : (n(224 | l >>> 12), n(128 | l >>> 6 & 63), n(128 | 63 & l));\n    }\n    return br(r, 0, s);\n}\n_c33 = Dr;\nfunction Lr(t, i) {\n    return function(t) {\n        for(var i = 0, e = 0; e < t.length; e++)i = (i << 5) - i + t.charCodeAt(e), i |= 0;\n        return Math.abs(i);\n    }(t) % 100 < Xe(100 * i, 0, 100);\n}\n_c34 = Lr;\nvar Nr = \"disabled\", jr = \"sampled\", zr = \"active\", Ur = \"buffering\", qr = \"paused\", Br = \"trigger\", Hr = Br + \"_activated\", Wr = Br + \"_pending\", Gr = Br + \"_\" + Nr;\nfunction Jr(t, i) {\n    return i.some((i)=>\"regex\" === i.matching && new RegExp(i.url).test(t));\n}\n_c35 = Jr;\nclass Vr {\n    triggerStatus(t) {\n        var i = this.gt.map((i)=>i.triggerStatus(t));\n        return i.includes(Hr) ? Hr : i.includes(Wr) ? Wr : Gr;\n    }\n    stop() {\n        this.gt.forEach((t)=>t.stop());\n    }\n    constructor(t){\n        this.gt = t;\n    }\n}\nclass Kr {\n    triggerStatus(t) {\n        var i = new Set;\n        for (var e of this.gt)i.add(e.triggerStatus(t));\n        switch(i.delete(Gr), i.size){\n            case 0:\n                return Gr;\n            case 1:\n                return Array.from(i)[0];\n            default:\n                return Wr;\n        }\n    }\n    stop() {\n        this.gt.forEach((t)=>t.stop());\n    }\n    constructor(t){\n        this.gt = t;\n    }\n}\nclass Yr {\n    triggerStatus() {\n        return Wr;\n    }\n    stop() {}\n}\nclass Xr {\n    onRemoteConfig(t) {\n        var i, e;\n        this._t = (null == (i = t.sessionRecording) ? void 0 : i.urlTriggers) || [], this.bt = (null == (e = t.sessionRecording) ? void 0 : e.urlBlocklist) || [];\n    }\n    wt(t) {\n        var i;\n        return 0 === this._t.length ? Gr : (null == (i = this._instance) ? void 0 : i.get_property(xt)) === t ? Hr : Wr;\n    }\n    triggerStatus(t) {\n        var i = this.wt(t), e = i === Hr ? Hr : i === Wr ? Wr : Gr;\n        return this._instance.register_for_session({\n            $sdk_debug_replay_url_trigger_status: e\n        }), e;\n    }\n    checkUrlTriggerConditions(i, e, r) {\n        if (void 0 !== t && t.location.href) {\n            var s = t.location.href, n = this.urlBlocked, o = Jr(s, this.bt);\n            n && o || (o && !n ? i() : !o && n && e(), Jr(s, this._t) && r(\"url\"));\n        }\n    }\n    stop() {}\n    constructor(t){\n        this._t = [], this.bt = [], this.urlBlocked = !1, this._instance = t;\n    }\n}\nclass Qr {\n    triggerStatus() {\n        var t = Wr;\n        return O(this.linkedFlag) && (t = Gr), this.linkedFlagSeen && (t = Hr), this._instance.register_for_session({\n            $sdk_debug_replay_linked_flag_trigger_status: t\n        }), t;\n    }\n    onRemoteConfig(t, i) {\n        var e;\n        if (this.linkedFlag = (null == (e = t.sessionRecording) ? void 0 : e.linkedFlag) || null, !O(this.linkedFlag) && !this.linkedFlagSeen) {\n            var r = T(this.linkedFlag) ? this.linkedFlag : this.linkedFlag.flag, s = T(this.linkedFlag) ? null : this.linkedFlag.variant;\n            this.yt = this._instance.onFeatureFlags((t, e)=>{\n                var n = !1;\n                if (I(e) && r in e) {\n                    var o = e[r];\n                    n = A(o) ? !0 === o : s ? o === s : !!o;\n                }\n                this.linkedFlagSeen = n, n && i(r, s);\n            });\n        }\n    }\n    stop() {\n        this.yt();\n    }\n    constructor(t){\n        this.linkedFlag = null, this.linkedFlagSeen = !1, this.yt = ()=>{}, this._instance = t;\n    }\n}\nclass Zr {\n    onRemoteConfig(t) {\n        var i;\n        this.St = (null == (i = t.sessionRecording) ? void 0 : i.eventTriggers) || [];\n    }\n    $t(t) {\n        var i;\n        return 0 === this.St.length ? Gr : (null == (i = this._instance) ? void 0 : i.get_property(Et)) === t ? Hr : Wr;\n    }\n    triggerStatus(t) {\n        var i = this.$t(t), e = i === Hr ? Hr : i === Wr ? Wr : Gr;\n        return this._instance.register_for_session({\n            $sdk_debug_replay_event_trigger_status: e\n        }), e;\n    }\n    stop() {}\n    constructor(t){\n        this.St = [], this._instance = t;\n    }\n}\nfunction ts(t) {\n    return t.isRecordingEnabled ? Ur : Nr;\n}\nfunction is(t) {\n    if (!t.receivedDecide) return Ur;\n    if (!t.isRecordingEnabled) return Nr;\n    if (t.urlTriggerMatching.urlBlocked) return qr;\n    var i = !0 === t.isSampled, e = new Vr([\n        t.eventTriggerMatching,\n        t.urlTriggerMatching,\n        t.linkedFlagMatching\n    ]).triggerStatus(t.sessionId);\n    return i ? jr : e === Hr ? zr : e === Wr ? Ur : !1 === t.isSampled ? Nr : zr;\n}\nfunction es(t) {\n    if (!t.receivedDecide) return Ur;\n    if (!t.isRecordingEnabled) return Nr;\n    if (t.urlTriggerMatching.urlBlocked) return qr;\n    var i = new Kr([\n        t.eventTriggerMatching,\n        t.urlTriggerMatching,\n        t.linkedFlagMatching\n    ]).triggerStatus(t.sessionId), e = i !== Gr, r = A(t.isSampled);\n    return e && i === Wr ? Ur : e && i === Gr || r && !t.isSampled ? Nr : !0 === t.isSampled ? jr : zr;\n}\nvar rs = \"[SessionRecording]\", ss = z(rs);\nfunction ns() {\n    var t;\n    return null == v || null == (t = v.__PosthogExtensions__) || null == (t = t.rrweb) ? void 0 : t.record;\n}\nvar os = 3e5, as = [\n    Ue.MouseMove,\n    Ue.MouseInteraction,\n    Ue.Scroll,\n    Ue.ViewportResize,\n    Ue.Input,\n    Ue.TouchMove,\n    Ue.MediaInteraction,\n    Ue.Drag\n], ls = (t)=>({\n        rrwebMethod: t,\n        enqueuedAt: Date.now(),\n        attempt: 1\n    });\nfunction us(t) {\n    return function(t, i) {\n        for(var e = \"\", r = 0; r < t.length;){\n            var s = t[r++];\n            s < 128 || i ? e += String.fromCharCode(s) : s < 224 ? e += String.fromCharCode((31 & s) << 6 | 63 & t[r++]) : s < 240 ? e += String.fromCharCode((15 & s) << 12 | (63 & t[r++]) << 6 | 63 & t[r++]) : (s = ((15 & s) << 18 | (63 & t[r++]) << 12 | (63 & t[r++]) << 6 | 63 & t[r++]) - 65536, e += String.fromCharCode(55296 | s >> 10, 56320 | 1023 & s));\n        }\n        return e;\n    }(Ar(Dr(JSON.stringify(t))), !0);\n}\nfunction hs(t) {\n    return t.type === ze.Custom && \"sessionIdle\" === t.data.tag;\n}\nclass ds {\n    get sessionId() {\n        return this.kt;\n    }\n    get xt() {\n        return this._instance.config.session_recording.session_idle_threshold_ms || 3e5;\n    }\n    get started() {\n        return this.Et;\n    }\n    get It() {\n        if (!this._instance.sessionManager) throw new Error(rs + \" must be started with a valid sessionManager.\");\n        return this._instance.sessionManager;\n    }\n    get Pt() {\n        var t, i;\n        return this.Rt.triggerStatus(this.sessionId) === Wr ? 6e4 : null !== (t = null == (i = this._instance.config.session_recording) ? void 0 : i.full_snapshot_interval_millis) && void 0 !== t ? t : os;\n    }\n    get Tt() {\n        var t = this._instance.get_property(kt);\n        return A(t) ? t : null;\n    }\n    get Mt() {\n        var t, i, e = null == (t = this.M) ? void 0 : t.data[(null == (i = this.M) ? void 0 : i.data.length) - 1], { sessionStartTimestamp: r } = this.It.checkAndGetSessionAndWindowId(!0);\n        return e ? e.timestamp - r : null;\n    }\n    get Ct() {\n        var i = !!this._instance.get_property(pt), e = !this._instance.config.disable_session_recording;\n        return t && i && e;\n    }\n    get Ot() {\n        var t = !!this._instance.get_property(gt), i = this._instance.config.enable_recording_console_log;\n        return null != i ? i : t;\n    }\n    get Ft() {\n        var t, i, e, r, s, n, o = this._instance.config.session_recording.captureCanvas, a = this._instance.get_property(bt), l = null !== (t = null !== (i = null == o ? void 0 : o.recordCanvas) && void 0 !== i ? i : null == a ? void 0 : a.enabled) && void 0 !== t && t, u = null !== (e = null !== (r = null == o ? void 0 : o.canvasFps) && void 0 !== r ? r : null == a ? void 0 : a.fps) && void 0 !== e ? e : 4, h = null !== (s = null !== (n = null == o ? void 0 : o.canvasQuality) && void 0 !== n ? n : null == a ? void 0 : a.quality) && void 0 !== s ? s : .4;\n        if (\"string\" == typeof h) {\n            var d = parseFloat(h);\n            h = isNaN(d) ? .4 : d;\n        }\n        return {\n            enabled: l,\n            fps: Xe(u, 0, 12, \"canvas recording fps\", 4),\n            quality: Xe(h, 0, 1, \"canvas recording quality\", .4)\n        };\n    }\n    get At() {\n        var t, i, e = this._instance.get_property(_t), r = {\n            recordHeaders: null == (t = this._instance.config.session_recording) ? void 0 : t.recordHeaders,\n            recordBody: null == (i = this._instance.config.session_recording) ? void 0 : i.recordBody\n        }, s = (null == r ? void 0 : r.recordHeaders) || (null == e ? void 0 : e.recordHeaders), n = (null == r ? void 0 : r.recordBody) || (null == e ? void 0 : e.recordBody), o = I(this._instance.config.capture_performance) ? this._instance.config.capture_performance.network_timing : this._instance.config.capture_performance, a = !!(A(o) ? o : null == e ? void 0 : e.capturePerformance);\n        return s || n || a ? {\n            recordHeaders: s,\n            recordBody: n,\n            recordPerformance: a\n        } : void 0;\n    }\n    get Dt() {\n        var t, i, e, r, s, n, o = this._instance.get_property(mt), a = {\n            maskAllInputs: null == (t = this._instance.config.session_recording) ? void 0 : t.maskAllInputs,\n            maskTextSelector: null == (i = this._instance.config.session_recording) ? void 0 : i.maskTextSelector,\n            blockSelector: null == (e = this._instance.config.session_recording) ? void 0 : e.blockSelector\n        }, l = null !== (r = null == a ? void 0 : a.maskAllInputs) && void 0 !== r ? r : null == o ? void 0 : o.maskAllInputs, u = null !== (s = null == a ? void 0 : a.maskTextSelector) && void 0 !== s ? s : null == o ? void 0 : o.maskTextSelector, h = null !== (n = null == a ? void 0 : a.blockSelector) && void 0 !== n ? n : null == o ? void 0 : o.blockSelector;\n        return R(l) && R(u) && R(h) ? void 0 : {\n            maskAllInputs: null == l || l,\n            maskTextSelector: u,\n            blockSelector: h\n        };\n    }\n    get Lt() {\n        var t = this._instance.get_property(wt);\n        return F(t) ? t : null;\n    }\n    get Nt() {\n        var t = this._instance.get_property(yt);\n        return F(t) ? t : null;\n    }\n    get status() {\n        return this.jt ? this.zt({\n            receivedDecide: this.jt,\n            isRecordingEnabled: this.Ct,\n            isSampled: this.Tt,\n            urlTriggerMatching: this.Ut,\n            eventTriggerMatching: this.qt,\n            linkedFlagMatching: this.Bt,\n            sessionId: this.sessionId\n        }) : Ur;\n    }\n    startIfEnabledOrStop(i) {\n        this.Ct ? (this.li(i), st(t, \"beforeunload\", this.Qt), st(t, \"offline\", this.ti), st(t, \"online\", this.ei), st(t, \"visibilitychange\", this.ri), this.ui(), this.hi(), O(this.Jt) && (this.Jt = this._instance.on(\"eventCaptured\", (t)=>{\n            try {\n                if (\"$pageview\" === t.event) {\n                    var i = null != t && t.properties.$current_url ? this.di(null == t ? void 0 : t.properties.$current_url) : \"\";\n                    if (!i) return;\n                    this.ii(\"$pageview\", {\n                        href: i\n                    });\n                }\n            } catch (t) {\n                ss.error(\"Could not add $pageview to rrweb session\", t);\n            }\n        })), this.Vt || (this.Vt = this.It.onSessionId((t, i, e)=>{\n            var r, s;\n            e && (this.ii(\"$session_id_change\", {\n                sessionId: t,\n                windowId: i,\n                changeReason: e\n            }), null == (r = this._instance) || null == (r = r.persistence) || r.unregister(Et), null == (s = this._instance) || null == (s = s.persistence) || s.unregister(xt));\n        }))) : this.stopRecording();\n    }\n    stopRecording() {\n        var i, e, r, s;\n        this.Et && this.ni && (this.ni(), this.ni = void 0, this.Et = !1, null == t || t.removeEventListener(\"beforeunload\", this.Qt), null == t || t.removeEventListener(\"offline\", this.ti), null == t || t.removeEventListener(\"online\", this.ei), null == t || t.removeEventListener(\"visibilitychange\", this.ri), this.ai(), clearInterval(this.vi), null == (i = this.Jt) || i.call(this), this.Jt = void 0, null == (e = this.Xt) || e.call(this), this.Xt = void 0, null == (r = this.Vt) || r.call(this), this.Vt = void 0, null == (s = this.Yt) || s.call(this), this.Yt = void 0, this.qt.stop(), this.Ut.stop(), this.Bt.stop(), ss.info(\"stopped\"));\n    }\n    ci() {\n        var t;\n        null == (t = this._instance.persistence) || t.unregister(kt);\n    }\n    fi(t) {\n        var i, e = this.kt !== t, r = this.Lt;\n        if (F(r)) {\n            var s = this.Tt, n = e || !A(s), o = n ? Lr(t, r) : s;\n            n && (o ? this.pi(jr) : ss.warn(\"Sample rate (\" + r + \") has determined that this sessionId (\" + t + \") will not be sent to the server.\"), this.ii(\"samplingDecisionMade\", {\n                sampleRate: r,\n                isSampled: o\n            })), null == (i = this._instance.persistence) || i.register({\n                [kt]: o\n            });\n        } else this.ci();\n    }\n    onRemoteConfig(t) {\n        var i, e, r, s;\n        (this.ii(\"$remote_config_received\", t), this.gi(t), null != (i = t.sessionRecording) && i.endpoint) && (this.si = null == (s = t.sessionRecording) ? void 0 : s.endpoint);\n        this.ui(), \"any\" === (null == (e = t.sessionRecording) ? void 0 : e.triggerMatchType) ? (this.zt = is, this.Rt = new Vr([\n            this.qt,\n            this.Ut\n        ])) : (this.zt = es, this.Rt = new Kr([\n            this.qt,\n            this.Ut\n        ])), this._instance.register_for_session({\n            $sdk_debug_replay_remote_trigger_matching_config: null == (r = t.sessionRecording) ? void 0 : r.triggerMatchType\n        }), this.Ut.onRemoteConfig(t), this.qt.onRemoteConfig(t), this.Bt.onRemoteConfig(t, (t, i)=>{\n            this.pi(\"linked_flag_matched\", {\n                flag: t,\n                variant: i\n            });\n        }), this.jt = !0, this.startIfEnabledOrStop();\n    }\n    ui() {\n        F(this.Lt) && O(this.Yt) && (this.Yt = this.It.onSessionId((t)=>{\n            this.fi(t);\n        }));\n    }\n    gi(t) {\n        if (this._instance.persistence) {\n            var i, e = this._instance.persistence, r = ()=>{\n                var i, r, s, n, o, a, l, u, h, d = null == (i = t.sessionRecording) ? void 0 : i.sampleRate, v = O(d) ? null : parseFloat(d);\n                O(v) && this.ci();\n                var c = null == (r = t.sessionRecording) ? void 0 : r.minimumDurationMilliseconds;\n                e.register({\n                    [pt]: !!t.sessionRecording,\n                    [gt]: null == (s = t.sessionRecording) ? void 0 : s.consoleLogRecordingEnabled,\n                    [_t]: B({\n                        capturePerformance: t.capturePerformance\n                    }, null == (n = t.sessionRecording) ? void 0 : n.networkPayloadCapture),\n                    [mt]: null == (o = t.sessionRecording) ? void 0 : o.masking,\n                    [bt]: {\n                        enabled: null == (a = t.sessionRecording) ? void 0 : a.recordCanvas,\n                        fps: null == (l = t.sessionRecording) ? void 0 : l.canvasFps,\n                        quality: null == (u = t.sessionRecording) ? void 0 : u.canvasQuality\n                    },\n                    [wt]: v,\n                    [yt]: R(c) ? null : c,\n                    [St]: null == (h = t.sessionRecording) ? void 0 : h.scriptConfig\n                });\n            };\n            r(), null == (i = this.Kt) || i.call(this), this.Kt = this.It.onSessionId(r);\n        }\n    }\n    log(t, i) {\n        var e;\n        void 0 === i && (i = \"log\"), null == (e = this._instance.sessionRecording) || e.onRRwebEmit({\n            type: 6,\n            data: {\n                plugin: \"rrweb/console@1\",\n                payload: {\n                    level: i,\n                    trace: [],\n                    payload: [\n                        JSON.stringify(t)\n                    ]\n                }\n            },\n            timestamp: Date.now()\n        });\n    }\n    li(t) {\n        if (!R(Object.assign) && !R(Array.from) && !(this.Et || this._instance.config.disable_session_recording || this._instance.consent.isOptedOut())) {\n            var i;\n            if (this.Et = !0, this.It.checkAndGetSessionAndWindowId(), ns()) this.mi();\n            else null == (i = v.__PosthogExtensions__) || null == i.loadExternalDependency || i.loadExternalDependency(this._instance, this.bi, (t)=>{\n                if (t) return ss.error(\"could not load recorder\", t);\n                this.mi();\n            });\n            ss.info(\"starting\"), this.status === zr && this.pi(t || \"recording_initialized\");\n        }\n    }\n    get bi() {\n        var t;\n        return (null == (t = this._instance) || null == (t = t.persistence) || null == (t = t.get_property(St)) ? void 0 : t.script) || \"recorder\";\n    }\n    wi(t) {\n        var i;\n        return 3 === t.type && -1 !== as.indexOf(null == (i = t.data) ? void 0 : i.source);\n    }\n    yi(t) {\n        var i = this.wi(t);\n        i || this.Wt || t.timestamp - this.Gt > this.xt && (this.Wt = !0, clearInterval(this.vi), this.ii(\"sessionIdle\", {\n            eventTimestamp: t.timestamp,\n            lastActivityTimestamp: this.Gt,\n            threshold: this.xt,\n            bufferLength: this.M.data.length,\n            bufferSize: this.M.size\n        }), this.Zt());\n        var e = !1;\n        if (i && (this.Gt = t.timestamp, this.Wt)) {\n            var r = \"unknown\" === this.Wt;\n            this.Wt = !1, r || (this.ii(\"sessionNoLongerIdle\", {\n                reason: \"user activity\",\n                type: t.type\n            }), e = !0);\n        }\n        if (!this.Wt) {\n            var { windowId: s, sessionId: n } = this.It.checkAndGetSessionAndWindowId(!i, t.timestamp), o = this.kt !== n, a = this.oi !== s;\n            this.oi = s, this.kt = n, o || a ? (this.stopRecording(), this.startIfEnabledOrStop(\"session_id_changed\")) : e && this.Si();\n        }\n    }\n    $i(t) {\n        try {\n            return t.rrwebMethod(), !0;\n        } catch (i) {\n            return this.Ht.length < 10 ? this.Ht.push({\n                enqueuedAt: t.enqueuedAt || Date.now(),\n                attempt: t.attempt++,\n                rrwebMethod: t.rrwebMethod\n            }) : ss.warn(\"could not emit queued rrweb event.\", i, t), !1;\n        }\n    }\n    ii(t, i) {\n        return this.$i(ls(()=>ns().addCustomEvent(t, i)));\n    }\n    ki() {\n        return this.$i(ls(()=>ns().takeFullSnapshot()));\n    }\n    mi() {\n        var t, i, e, r, s = {\n            blockClass: \"ph-no-capture\",\n            blockSelector: void 0,\n            ignoreClass: \"ph-ignore-input\",\n            maskTextClass: \"ph-mask\",\n            maskTextSelector: void 0,\n            maskTextFn: void 0,\n            maskAllInputs: !0,\n            maskInputOptions: {\n                password: !0\n            },\n            maskInputFn: void 0,\n            slimDOMOptions: {},\n            collectFonts: !1,\n            inlineStylesheet: !0,\n            recordCrossOriginIframes: !1\n        }, n = this._instance.config.session_recording;\n        for (var [o, a] of Object.entries(n || {}))o in s && (\"maskInputOptions\" === o ? s.maskInputOptions = B({\n            password: !0\n        }, a) : s[o] = a);\n        (this.Ft && this.Ft.enabled && (s.recordCanvas = !0, s.sampling = {\n            canvas: this.Ft.fps\n        }, s.dataURLOptions = {\n            type: \"image/webp\",\n            quality: this.Ft.quality\n        }), this.Dt) && (s.maskAllInputs = null === (i = this.Dt.maskAllInputs) || void 0 === i || i, s.maskTextSelector = null !== (e = this.Dt.maskTextSelector) && void 0 !== e ? e : void 0, s.blockSelector = null !== (r = this.Dt.blockSelector) && void 0 !== r ? r : void 0);\n        var l = ns();\n        if (l) {\n            this.xi = null !== (t = this.xi) && void 0 !== t ? t : new Qe(l, {\n                refillRate: this._instance.config.session_recording.__mutationRateLimiterRefillRate,\n                bucketSize: this._instance.config.session_recording.__mutationRateLimiterBucketSize,\n                onBlockedNode: (t, i)=>{\n                    var e = \"Too many mutations on node '\" + t + \"'. Rate limiting. This could be due to SVG animations or something similar\";\n                    ss.info(e, {\n                        node: i\n                    }), this.log(rs + \" \" + e, \"warn\");\n                }\n            });\n            var u = this.Ei();\n            this.ni = l(B({\n                emit: (t)=>{\n                    this.onRRwebEmit(t);\n                },\n                plugins: u\n            }, s)), this.Gt = Date.now(), this.Wt = A(this.Wt) ? this.Wt : \"unknown\", this.ii(\"$session_options\", {\n                sessionRecordingOptions: s,\n                activePlugins: u.map((t)=>null == t ? void 0 : t.name)\n            }), this.ii(\"$posthog_config\", {\n                config: this._instance.config\n            });\n        } else ss.error(\"onScriptLoaded was called but rrwebRecord is not available. This indicates something has gone wrong.\");\n    }\n    Si() {\n        if (this.vi && clearInterval(this.vi), !0 !== this.Wt) {\n            var t = this.Pt;\n            t && (this.vi = setInterval(()=>{\n                this.ki();\n            }, t));\n        }\n    }\n    Ei() {\n        var t, i, e = [], r = null == (t = v.__PosthogExtensions__) || null == (t = t.rrwebPlugins) ? void 0 : t.getRecordConsolePlugin;\n        r && this.Ot && e.push(r());\n        var s = null == (i = v.__PosthogExtensions__) || null == (i = i.rrwebPlugins) ? void 0 : i.getRecordNetworkPlugin;\n        this.At && E(s) && (!wi.includes(location.hostname) || this._forceAllowLocalhostNetworkCapture ? e.push(s(Ye(this._instance.config, this.At))) : ss.info(\"NetworkCapture not started because we are on localhost.\"));\n        return e;\n    }\n    onRRwebEmit(t) {\n        var i;\n        if (this.Ii(), t && I(t)) {\n            if (t.type === ze.Meta) {\n                var e = this.di(t.data.href);\n                if (this.Pi = e, !e) return;\n                t.data.href = e;\n            } else this.Ri();\n            if (this.Ut.checkUrlTriggerConditions(()=>this.Ti(), ()=>this.Mi(), (t)=>this.Ci(t)), !this.Ut.urlBlocked || (r = t).type === ze.Custom && \"recording paused\" === r.data.tag) {\n                var r;\n                t.type === ze.FullSnapshot && this.Si(), t.type === ze.FullSnapshot && this.jt && this.Rt.triggerStatus(this.sessionId) === Wr && this.ai();\n                var s = this.xi ? this.xi.throttleMutations(t) : t;\n                if (s) {\n                    var n = function(t) {\n                        var i = t;\n                        if (i && I(i) && 6 === i.type && I(i.data) && \"rrweb/console@1\" === i.data.plugin) {\n                            i.data.payload.payload.length > 10 && (i.data.payload.payload = i.data.payload.payload.slice(0, 10), i.data.payload.payload.push(\"...[truncated]\"));\n                            for(var e = [], r = 0; r < i.data.payload.payload.length; r++)i.data.payload.payload[r] && i.data.payload.payload[r].length > 2e3 ? e.push(i.data.payload.payload[r].slice(0, 2e3) + \"...[truncated]\") : e.push(i.data.payload.payload[r]);\n                            return i.data.payload.payload = e, t;\n                        }\n                        return t;\n                    }(s);\n                    if (this.yi(n), !0 !== this.Wt || hs(n)) {\n                        if (hs(n)) {\n                            var o = n.data.payload;\n                            if (o) {\n                                var a = o.lastActivityTimestamp, l = o.threshold;\n                                n.timestamp = a + l;\n                            }\n                        }\n                        var u = null === (i = this._instance.config.session_recording.compress_events) || void 0 === i || i ? function(t) {\n                            if (Ne(t) < 1024) return t;\n                            try {\n                                if (t.type === ze.FullSnapshot) return B({}, t, {\n                                    data: us(t.data),\n                                    cv: \"2024-10\"\n                                });\n                                if (t.type === ze.IncrementalSnapshot && t.data.source === Ue.Mutation) return B({}, t, {\n                                    cv: \"2024-10\",\n                                    data: B({}, t.data, {\n                                        texts: us(t.data.texts),\n                                        attributes: us(t.data.attributes),\n                                        removes: us(t.data.removes),\n                                        adds: us(t.data.adds)\n                                    })\n                                });\n                                if (t.type === ze.IncrementalSnapshot && t.data.source === Ue.StyleSheetRule) return B({}, t, {\n                                    cv: \"2024-10\",\n                                    data: B({}, t.data, {\n                                        adds: t.data.adds ? us(t.data.adds) : void 0,\n                                        removes: t.data.removes ? us(t.data.removes) : void 0\n                                    })\n                                });\n                            } catch (t) {\n                                ss.error(\"could not compress event - will use uncompressed event\", t);\n                            }\n                            return t;\n                        }(n) : n, h = {\n                            $snapshot_bytes: Ne(u),\n                            $snapshot_data: u,\n                            $session_id: this.kt,\n                            $window_id: this.oi\n                        };\n                        this.status !== Nr ? this.Oi(h) : this.ai();\n                    }\n                }\n            }\n        }\n    }\n    Ri() {\n        if (!this._instance.config.capture_pageview && t) {\n            var i = this.di(t.location.href);\n            this.Pi !== i && (this.ii(\"$url_changed\", {\n                href: i\n            }), this.Pi = i);\n        }\n    }\n    Ii() {\n        if (this.Ht.length) {\n            var t = [\n                ...this.Ht\n            ];\n            this.Ht = [], t.forEach((t)=>{\n                Date.now() - t.enqueuedAt <= 2e3 && this.$i(t);\n            });\n        }\n    }\n    di(t) {\n        var i = this._instance.config.session_recording;\n        if (i.maskNetworkRequestFn) {\n            var e, r = {\n                url: t\n            };\n            return null == (e = r = i.maskNetworkRequestFn(r)) ? void 0 : e.url;\n        }\n        return t;\n    }\n    ai() {\n        return this.M = {\n            size: 0,\n            data: [],\n            sessionId: this.kt,\n            windowId: this.oi\n        }, this.M;\n    }\n    Zt() {\n        this.Fi && (clearTimeout(this.Fi), this.Fi = void 0);\n        var t = this.Nt, i = this.Mt, e = F(i) && i >= 0, r = F(t) && e && i < t;\n        if (this.status === Ur || this.status === qr || this.status === Nr || r) return this.Fi = setTimeout(()=>{\n            this.Zt();\n        }, 2e3), this.M;\n        this.M.data.length > 0 && je(this.M).forEach((t)=>{\n            this.Ai({\n                $snapshot_bytes: t.size,\n                $snapshot_data: t.data,\n                $session_id: t.sessionId,\n                $window_id: t.windowId,\n                $lib: \"web\",\n                $lib_version: c.LIB_VERSION\n            });\n        });\n        return this.ai();\n    }\n    Oi(t) {\n        var i, e = 2 + ((null == (i = this.M) ? void 0 : i.data.length) || 0);\n        !this.Wt && (this.M.size + t.$snapshot_bytes + e > 943718.4 || this.M.sessionId !== this.kt) && (this.M = this.Zt()), this.M.size += t.$snapshot_bytes, this.M.data.push(t.$snapshot_data), this.Fi || this.Wt || (this.Fi = setTimeout(()=>{\n            this.Zt();\n        }, 2e3));\n    }\n    Ai(t) {\n        this._instance.capture(\"$snapshot\", t, {\n            _url: this._instance.requestRouter.endpointFor(\"api\", this.si),\n            _noTruncate: !0,\n            _batchKey: \"recordings\",\n            skip_client_rate_limiting: !0\n        });\n    }\n    Ci(t) {\n        var i;\n        this.Rt.triggerStatus(this.sessionId) === Wr && (null == (i = this._instance) || null == (i = i.persistence) || i.register({\n            [\"url\" === t ? xt : Et]: this.kt\n        }), this.Zt(), this.pi(t + \"_trigger_matched\"));\n    }\n    Ti() {\n        this.Ut.urlBlocked || (this.Ut.urlBlocked = !0, clearInterval(this.vi), ss.info(\"recording paused due to URL blocker\"), this.ii(\"recording paused\", {\n            reason: \"url blocker\"\n        }));\n    }\n    Mi() {\n        this.Ut.urlBlocked && (this.Ut.urlBlocked = !1, this.ki(), this.Si(), this.ii(\"recording resumed\", {\n            reason: \"left blocked url\"\n        }), ss.info(\"recording resumed\"));\n    }\n    hi() {\n        0 !== this.qt.St.length && O(this.Xt) && (this.Xt = this._instance.on(\"eventCaptured\", (t)=>{\n            try {\n                this.qt.St.includes(t.event) && this.Ci(\"event\");\n            } catch (t) {\n                ss.error(\"Could not activate event trigger\", t);\n            }\n        }));\n    }\n    overrideLinkedFlag() {\n        this.Bt.linkedFlagSeen = !0, this.ki(), this.pi(\"linked_flag_overridden\");\n    }\n    overrideSampling() {\n        var t;\n        null == (t = this._instance.persistence) || t.register({\n            [kt]: !0\n        }), this.ki(), this.pi(\"sampling_overridden\");\n    }\n    overrideTrigger(t) {\n        this.Ci(t);\n    }\n    pi(t, i) {\n        this._instance.register_for_session({\n            $session_recording_start_reason: t\n        }), ss.info(t.replace(\"_\", \" \"), i), m([\n            \"recording_initialized\",\n            \"session_id_changed\"\n        ], t) || this.ii(t, i);\n    }\n    get sdkDebugProperties() {\n        var { sessionStartTimestamp: t } = this.It.checkAndGetSessionAndWindowId(!0);\n        return {\n            $recording_status: this.status,\n            $sdk_debug_replay_internal_buffer_length: this.M.data.length,\n            $sdk_debug_replay_internal_buffer_size: this.M.size,\n            $sdk_debug_current_session_duration: this.Mt,\n            $sdk_debug_session_start: t\n        };\n    }\n    constructor(t){\n        if (this.zt = ts, this.jt = !1, this.Ht = [], this.Wt = \"unknown\", this.Gt = Date.now(), this.Rt = new Yr, this.Jt = void 0, this.Vt = void 0, this.Kt = void 0, this.Yt = void 0, this.Xt = void 0, this._forceAllowLocalhostNetworkCapture = !1, this.Qt = ()=>{\n            this.Zt();\n        }, this.ti = ()=>{\n            this.ii(\"browser offline\", {});\n        }, this.ei = ()=>{\n            this.ii(\"browser online\", {});\n        }, this.ri = ()=>{\n            if (null != o && o.visibilityState) {\n                var t = \"window \" + o.visibilityState;\n                this.ii(t, {});\n            }\n        }, this._instance = t, this.Et = !1, this.si = \"/s/\", this.ni = void 0, this.jt = !1, !this._instance.sessionManager) throw ss.error(\"started without valid sessionManager\"), new Error(rs + \" started without valid sessionManager. This is a bug.\");\n        if (this._instance.config.__preview_experimental_cookieless_mode) throw new Error(rs + \" cannot be used with __preview_experimental_cookieless_mode.\");\n        this.Bt = new Qr(this._instance), this.Ut = new Xr(this._instance), this.qt = new Zr(this._instance);\n        var { sessionId: i, windowId: e } = this.It.checkAndGetSessionAndWindowId();\n        this.kt = i, this.oi = e, this.M = this.ai(), this.xt >= this.It.sessionTimeoutMs && ss.warn(\"session_idle_threshold_ms (\" + this.xt + \") is greater than the session timeout (\" + this.It.sessionTimeoutMs + \"). Session will never be detected as idle\");\n    }\n}\nvar vs = z(\"[SegmentIntegration]\");\nfunction cs(t, i) {\n    var e = t.config.segment;\n    if (!e) return i();\n    !function(t, i) {\n        var e = t.config.segment;\n        if (!e) return i();\n        var r = (e)=>{\n            var r = ()=>e.anonymousId() || Ni();\n            t.config.get_device_id = r, e.id() && (t.register({\n                distinct_id: e.id(),\n                $device_id: r()\n            }), t.persistence.set_property(At, \"identified\")), i();\n        }, s = e.user();\n        \"then\" in s && E(s.then) ? s.then((t)=>r(t)) : r(s);\n    }(t, ()=>{\n        e.register(((t)=>{\n            Promise && Promise.resolve || vs.warn(\"This browser does not have Promise support, and can not use the segment integration\");\n            var i = (i, e)=>{\n                if (!e) return i;\n                i.event.userId || i.event.anonymousId === t.get_distinct_id() || (vs.info(\"No userId set, resetting PostHog\"), t.reset()), i.event.userId && i.event.userId !== t.get_distinct_id() && (vs.info(\"UserId set, identifying with PostHog\"), t.identify(i.event.userId));\n                var r = t.calculateEventProperties(e, i.event.properties);\n                return i.event.properties = Object.assign({}, r, i.event.properties), i;\n            };\n            return {\n                name: \"PostHog JS\",\n                type: \"enrichment\",\n                version: \"1.0.0\",\n                isLoaded: ()=>!0,\n                load: ()=>Promise.resolve(),\n                track: (t)=>i(t, t.event.event),\n                page: (t)=>i(t, \"$pageview\"),\n                identify: (t)=>i(t, \"$identify\"),\n                screen: (t)=>i(t, \"$screen\")\n            };\n        })(t)).then(()=>{\n            i();\n        });\n    });\n}\nvar fs = \"posthog-js\";\nfunction ps(t, i) {\n    var { organization: e, projectId: r, prefix: s, severityAllowList: n = [\n        \"error\"\n    ] } = void 0 === i ? {} : i;\n    return (i)=>{\n        var o, a, l, u, h;\n        if (!(\"*\" === n || n.includes(i.level)) || !t.__loaded) return i;\n        i.tags || (i.tags = {});\n        var d = t.requestRouter.endpointFor(\"ui\", \"/project/\" + t.config.token + \"/person/\" + t.get_distinct_id());\n        i.tags[\"PostHog Person URL\"] = d, t.sessionRecordingStarted() && (i.tags[\"PostHog Recording URL\"] = t.get_session_replay_url({\n            withTimestamp: !0\n        }));\n        var v = (null == (o = i.exception) ? void 0 : o.values) || [], c = v.map((t)=>B({}, t, {\n                stacktrace: t.stacktrace ? B({}, t.stacktrace, {\n                    type: \"raw\",\n                    frames: (t.stacktrace.frames || []).map((t)=>B({}, t, {\n                            platform: \"web:javascript\"\n                        }))\n                }) : void 0\n            })), f = {\n            $exception_message: (null == (a = v[0]) ? void 0 : a.value) || i.message,\n            $exception_type: null == (l = v[0]) ? void 0 : l.type,\n            $exception_personURL: d,\n            $exception_level: i.level,\n            $exception_list: c,\n            $sentry_event_id: i.event_id,\n            $sentry_exception: i.exception,\n            $sentry_exception_message: (null == (u = v[0]) ? void 0 : u.value) || i.message,\n            $sentry_exception_type: null == (h = v[0]) ? void 0 : h.type,\n            $sentry_tags: i.tags\n        };\n        return e && r && (f.$sentry_url = (s || \"https://sentry.io/organizations/\") + e + \"/issues/?project=\" + r + \"&query=\" + i.event_id), t.exceptions.sendExceptionEvent(f), i;\n    };\n}\nclass gs {\n    constructor(t, i, e, r, s){\n        this.name = fs, this.setupOnce = function(n) {\n            n(ps(t, {\n                organization: i,\n                projectId: e,\n                prefix: r,\n                severityAllowList: s\n            }));\n        };\n    }\n}\nvar _s = null != t && t.location ? xi(t.location.hash, \"__posthog\") || xi(location.hash, \"state\") : null, ms = \"_postHogToolbarParams\", bs = z(\"[Toolbar]\"), ws = function(t) {\n    return t[t.UNINITIALIZED = 0] = \"UNINITIALIZED\", t[t.LOADING = 1] = \"LOADING\", t[t.LOADED = 2] = \"LOADED\", t;\n}(ws || {});\nclass ys {\n    Di(t) {\n        v.ph_toolbar_state = t;\n    }\n    Li() {\n        var t;\n        return null !== (t = v.ph_toolbar_state) && void 0 !== t ? t : ws.UNINITIALIZED;\n    }\n    maybeLoadToolbar(i, e, r) {\n        if (void 0 === i && (i = void 0), void 0 === e && (e = void 0), void 0 === r && (r = void 0), !t || !o) return !1;\n        i = null != i ? i : t.location, r = null != r ? r : t.history;\n        try {\n            if (!e) {\n                try {\n                    t.localStorage.setItem(\"test\", \"test\"), t.localStorage.removeItem(\"test\");\n                } catch (t) {\n                    return !1;\n                }\n                e = null == t ? void 0 : t.localStorage;\n            }\n            var s, n = _s || xi(i.hash, \"__posthog\") || xi(i.hash, \"state\"), a = n ? X(()=>JSON.parse(atob(decodeURIComponent(n)))) || X(()=>JSON.parse(decodeURIComponent(n))) : null;\n            return a && \"ph_authorize\" === a.action ? ((s = a).source = \"url\", s && Object.keys(s).length > 0 && (a.desiredHash ? i.hash = a.desiredHash : r ? r.replaceState(r.state, \"\", i.pathname + i.search) : i.hash = \"\")) : ((s = JSON.parse(e.getItem(ms) || \"{}\")).source = \"localstorage\", delete s.userIntent), !(!s.token || this.instance.config.token !== s.token) && (this.loadToolbar(s), !0);\n        } catch (t) {\n            return !1;\n        }\n    }\n    Ni(t) {\n        var i = v.ph_load_toolbar || v.ph_load_editor;\n        !O(i) && E(i) ? i(t, this.instance) : bs.warn(\"No toolbar load function found\");\n    }\n    loadToolbar(i) {\n        var e = !(null == o || !o.getElementById(qt));\n        if (!t || e) return !1;\n        var r = \"custom\" === this.instance.requestRouter.region && this.instance.config.advanced_disable_toolbar_metrics, s = B({\n            token: this.instance.config.token\n        }, i, {\n            apiURL: this.instance.requestRouter.endpointFor(\"ui\")\n        }, r ? {\n            instrument: !1\n        } : {});\n        if (t.localStorage.setItem(ms, JSON.stringify(B({}, s, {\n            source: void 0\n        }))), this.Li() === ws.LOADED) this.Ni(s);\n        else if (this.Li() === ws.UNINITIALIZED) {\n            var n;\n            this.Di(ws.LOADING), null == (n = v.__PosthogExtensions__) || null == n.loadExternalDependency || n.loadExternalDependency(this.instance, \"toolbar\", (t)=>{\n                if (t) return bs.error(\"[Toolbar] Failed to load\", t), void this.Di(ws.UNINITIALIZED);\n                this.Di(ws.LOADED), this.Ni(s);\n            }), st(t, \"turbolinks:load\", ()=>{\n                this.Di(ws.UNINITIALIZED), this.loadToolbar(s);\n            });\n        }\n        return !0;\n    }\n    ji(t) {\n        return this.loadToolbar(t);\n    }\n    maybeLoadEditor(t, i, e) {\n        return void 0 === t && (t = void 0), void 0 === i && (i = void 0), void 0 === e && (e = void 0), this.maybeLoadToolbar(t, i, e);\n    }\n    constructor(t){\n        this.instance = t;\n    }\n}\nvar Ss = z(\"[TracingHeaders]\");\nclass $s {\n    G(t) {\n        var i, e;\n        null != (i = v.__PosthogExtensions__) && i.tracingHeadersPatchFns && t(), null == (e = v.__PosthogExtensions__) || null == e.loadExternalDependency || e.loadExternalDependency(this._instance, \"tracing-headers\", (i)=>{\n            if (i) return Ss.error(\"failed to load script\", i);\n            t();\n        });\n    }\n    startIfEnabledOrStop() {\n        var t, i;\n        this._instance.config.__add_tracing_headers ? this.G(this.V) : (null == (t = this.zi) || t.call(this), null == (i = this.Ui) || i.call(this), this.zi = void 0, this.Ui = void 0);\n    }\n    constructor(t){\n        this.zi = void 0, this.Ui = void 0, this.V = ()=>{\n            var t, i;\n            R(this.zi) && (null == (t = v.__PosthogExtensions__) || null == (t = t.tracingHeadersPatchFns) || t._patchXHR(this._instance.sessionManager));\n            R(this.Ui) && (null == (i = v.__PosthogExtensions__) || null == (i = i.tracingHeadersPatchFns) || i._patchFetch(this._instance.sessionManager));\n        }, this._instance = t;\n    }\n}\nvar ks = z(\"[Web Vitals]\"), xs = 9e5;\nclass Es {\n    get allowedMetrics() {\n        var t, i, e = I(this._instance.config.capture_performance) ? null == (t = this._instance.config.capture_performance) ? void 0 : t.web_vitals_allowed_metrics : void 0;\n        return R(e) ? (null == (i = this._instance.persistence) ? void 0 : i.props[ft]) || [\n            \"CLS\",\n            \"FCP\",\n            \"INP\",\n            \"LCP\"\n        ] : e;\n    }\n    get flushToCaptureTimeoutMs() {\n        return (I(this._instance.config.capture_performance) ? this._instance.config.capture_performance.web_vitals_delayed_flush_ms : void 0) || 5e3;\n    }\n    get Ji() {\n        var t = I(this._instance.config.capture_performance) && F(this._instance.config.capture_performance.__web_vitals_max_value) ? this._instance.config.capture_performance.__web_vitals_max_value : xs;\n        return 0 < t && t <= 6e4 ? xs : t;\n    }\n    get isEnabled() {\n        var t = null == a ? void 0 : a.protocol;\n        if (\"http:\" !== t && \"https:\" !== t) return ks.info(\"Web Vitals are disabled on non-http/https protocols\"), !1;\n        var i = I(this._instance.config.capture_performance) ? this._instance.config.capture_performance.web_vitals : A(this._instance.config.capture_performance) ? this._instance.config.capture_performance : void 0;\n        return A(i) ? i : this.qi;\n    }\n    startIfEnabled() {\n        this.isEnabled && !this.i && (ks.info(\"enabled, starting...\"), this.G(this.V));\n    }\n    onRemoteConfig(t) {\n        var i = I(t.capturePerformance) && !!t.capturePerformance.web_vitals, e = I(t.capturePerformance) ? t.capturePerformance.web_vitals_allowed_metrics : void 0;\n        this._instance.persistence && (this._instance.persistence.register({\n            [vt]: i\n        }), this._instance.persistence.register({\n            [ft]: e\n        })), this.qi = i, this.startIfEnabled();\n    }\n    G(t) {\n        var i, e;\n        null != (i = v.__PosthogExtensions__) && i.postHogWebVitalsCallbacks && t(), null == (e = v.__PosthogExtensions__) || null == e.loadExternalDependency || e.loadExternalDependency(this._instance, \"web-vitals\", (i)=>{\n            i ? ks.error(\"failed to load script\", i) : t();\n        });\n    }\n    Gi() {\n        var i = t ? t.location.href : void 0;\n        return i || ks.error(\"Could not determine current URL\"), i;\n    }\n    constructor(t){\n        var i;\n        this.qi = !1, this.i = !1, this.M = {\n            url: void 0,\n            metrics: [],\n            firstMetricTimestamp: void 0\n        }, this.Bi = ()=>{\n            clearTimeout(this.Hi), 0 !== this.M.metrics.length && (this._instance.capture(\"$web_vitals\", this.M.metrics.reduce((t, i)=>B({}, t, {\n                    [\"$web_vitals_\" + i.name + \"_event\"]: B({}, i),\n                    [\"$web_vitals_\" + i.name + \"_value\"]: i.value\n                }), {})), this.M = {\n                url: void 0,\n                metrics: [],\n                firstMetricTimestamp: void 0\n            });\n        }, this.Wi = (t)=>{\n            var i, e = null == (i = this._instance.sessionManager) ? void 0 : i.checkAndGetSessionAndWindowId(!0);\n            if (R(e)) ks.error(\"Could not read session ID. Dropping metrics!\");\n            else {\n                this.M = this.M || {\n                    url: void 0,\n                    metrics: [],\n                    firstMetricTimestamp: void 0\n                };\n                var r = this.Gi();\n                if (!R(r)) if (O(null == t ? void 0 : t.name) || O(null == t ? void 0 : t.value)) ks.error(\"Invalid metric received\", t);\n                else if (this.Ji && t.value >= this.Ji) ks.error(\"Ignoring metric with value >= \" + this.Ji, t);\n                else this.M.url !== r && (this.Bi(), this.Hi = setTimeout(this.Bi, this.flushToCaptureTimeoutMs)), R(this.M.url) && (this.M.url = r), this.M.firstMetricTimestamp = R(this.M.firstMetricTimestamp) ? Date.now() : this.M.firstMetricTimestamp, t.attribution && t.attribution.interactionTargetElement && (t.attribution.interactionTargetElement = void 0), this.M.metrics.push(B({}, t, {\n                    $current_url: r,\n                    $session_id: e.sessionId,\n                    $window_id: e.windowId,\n                    timestamp: Date.now()\n                })), this.M.metrics.length === this.allowedMetrics.length && this.Bi();\n            }\n        }, this.V = ()=>{\n            var t, i, e, r, s = v.__PosthogExtensions__;\n            R(s) || R(s.postHogWebVitalsCallbacks) || ({ onLCP: t, onCLS: i, onFCP: e, onINP: r } = s.postHogWebVitalsCallbacks), t && i && e && r ? (this.allowedMetrics.indexOf(\"LCP\") > -1 && t(this.Wi.bind(this)), this.allowedMetrics.indexOf(\"CLS\") > -1 && i(this.Wi.bind(this)), this.allowedMetrics.indexOf(\"FCP\") > -1 && e(this.Wi.bind(this)), this.allowedMetrics.indexOf(\"INP\") > -1 && r(this.Wi.bind(this)), this.i = !0) : ks.error(\"web vitals callbacks not loaded - not starting\");\n        }, this._instance = t, this.qi = !(null == (i = this._instance.persistence) || !i.props[vt]), this.startIfEnabled();\n    }\n}\nvar Is = z(\"[Heatmaps]\");\nfunction Ps(t) {\n    return I(t) && \"clientX\" in t && \"clientY\" in t && F(t.clientX) && F(t.clientY);\n}\n_c36 = Ps;\nclass Rs {\n    get flushIntervalMilliseconds() {\n        var t = 5e3;\n        return I(this.instance.config.capture_heatmaps) && this.instance.config.capture_heatmaps.flush_interval_milliseconds && (t = this.instance.config.capture_heatmaps.flush_interval_milliseconds), t;\n    }\n    get isEnabled() {\n        return R(this.instance.config.capture_heatmaps) ? R(this.instance.config.enable_heatmaps) ? this.qi : this.instance.config.enable_heatmaps : !1 !== this.instance.config.capture_heatmaps;\n    }\n    startIfEnabled() {\n        if (this.isEnabled) {\n            if (this.i) return;\n            Is.info(\"starting...\"), this.Ki(), this.Vi = setInterval(this.Yi.bind(this), this.flushIntervalMilliseconds);\n        } else {\n            var t, i;\n            clearInterval(null !== (t = this.Vi) && void 0 !== t ? t : void 0), null == (i = this.Xi) || i.stop(), this.getAndClearBuffer();\n        }\n    }\n    onRemoteConfig(t) {\n        var i = !!t.heatmaps;\n        this.instance.persistence && this.instance.persistence.register({\n            [ut]: i\n        }), this.qi = i, this.startIfEnabled();\n    }\n    getAndClearBuffer() {\n        var t = this.M;\n        return this.M = void 0, t;\n    }\n    Qi(t) {\n        this.Zi(t.originalEvent, \"deadclick\");\n    }\n    Ki() {\n        t && o && (st(t, \"beforeunload\", this.Yi.bind(this)), st(o, \"click\", (i)=>this.Zi(i || (null == t ? void 0 : t.event)), {\n            capture: !0\n        }), st(o, \"mousemove\", (i)=>this.te(i || (null == t ? void 0 : t.event)), {\n            capture: !0\n        }), this.Xi = new re(this.instance, ie, this.Qi.bind(this)), this.Xi.startIfEnabled(), this.i = !0);\n    }\n    ie(i, e) {\n        var r = this.instance.scrollManager.scrollY(), s = this.instance.scrollManager.scrollX(), n = this.instance.scrollManager.scrollElement(), o = function(i, e, r) {\n            for(var s = i; s && Gt(s) && !Jt(s, \"body\");){\n                if (s === r) return !1;\n                if (m(e, null == t ? void 0 : t.getComputedStyle(s).position)) return !0;\n                s = ri(s);\n            }\n            return !1;\n        }(ii(i), [\n            \"fixed\",\n            \"sticky\"\n        ], n);\n        return {\n            x: i.clientX + (o ? 0 : s),\n            y: i.clientY + (o ? 0 : r),\n            target_fixed: o,\n            type: e\n        };\n    }\n    Zi(t, i) {\n        var e;\n        if (void 0 === i && (i = \"click\"), !Wt(t.target) && Ps(t)) {\n            var r = this.ie(t, i);\n            null != (e = this.rageclicks) && e.isRageClick(t.clientX, t.clientY, (new Date).getTime()) && this.ee(B({}, r, {\n                type: \"rageclick\"\n            })), this.ee(r);\n        }\n    }\n    te(t) {\n        !Wt(t.target) && Ps(t) && (clearTimeout(this.re), this.re = setTimeout(()=>{\n            this.ee(this.ie(t, \"mousemove\"));\n        }, 500));\n    }\n    ee(i) {\n        if (t) {\n            var e = t.location.href;\n            this.M = this.M || {}, this.M[e] || (this.M[e] = []), this.M[e].push(i);\n        }\n    }\n    Yi() {\n        this.M && !P(this.M) && this.instance.capture(\"$$heatmap\", {\n            $heatmap_data: this.getAndClearBuffer()\n        });\n    }\n    constructor(t){\n        var i;\n        this.rageclicks = new bi, this.qi = !1, this.i = !1, this.Vi = null, this.instance = t, this.qi = !(null == (i = this.instance.persistence) || !i.props[ut]);\n    }\n}\nclass Ts {\n    doPageView(i, e) {\n        var r, s = this.se(i, e);\n        return this.ne = {\n            pathname: null !== (r = null == t ? void 0 : t.location.pathname) && void 0 !== r ? r : \"\",\n            pageViewId: e,\n            timestamp: i\n        }, this._instance.scrollManager.resetContext(), s;\n    }\n    doPageLeave(t) {\n        var i;\n        return this.se(t, null == (i = this.ne) ? void 0 : i.pageViewId);\n    }\n    doEvent() {\n        var t;\n        return {\n            $pageview_id: null == (t = this.ne) ? void 0 : t.pageViewId\n        };\n    }\n    se(t, i) {\n        var e = this.ne;\n        if (!e) return {\n            $pageview_id: i\n        };\n        var r = {\n            $pageview_id: i,\n            $prev_pageview_id: e.pageViewId\n        }, s = this._instance.scrollManager.getContext();\n        if (s && !this._instance.config.disable_scroll_properties) {\n            var { maxScrollHeight: n, lastScrollY: o, maxScrollY: a, maxContentHeight: l, lastContentY: u, maxContentY: h } = s;\n            if (!(R(n) || R(o) || R(a) || R(l) || R(u) || R(h))) {\n                n = Math.ceil(n), o = Math.ceil(o), a = Math.ceil(a), l = Math.ceil(l), u = Math.ceil(u), h = Math.ceil(h);\n                var d = n <= 1 ? 1 : Xe(o / n, 0, 1), v = n <= 1 ? 1 : Xe(a / n, 0, 1), c = l <= 1 ? 1 : Xe(u / l, 0, 1), f = l <= 1 ? 1 : Xe(h / l, 0, 1);\n                r = V(r, {\n                    $prev_pageview_last_scroll: o,\n                    $prev_pageview_last_scroll_percentage: d,\n                    $prev_pageview_max_scroll: a,\n                    $prev_pageview_max_scroll_percentage: v,\n                    $prev_pageview_last_content: u,\n                    $prev_pageview_last_content_percentage: c,\n                    $prev_pageview_max_content: h,\n                    $prev_pageview_max_content_percentage: f\n                });\n            }\n        }\n        return e.pathname && (r.$prev_pageview_pathname = e.pathname), e.timestamp && (r.$prev_pageview_duration = (t.getTime() - e.timestamp.getTime()) / 1e3), r;\n    }\n    constructor(t){\n        this._instance = t;\n    }\n}\nvar Ms = function(t) {\n    var i, e, r, s, n = \"\";\n    for(i = e = 0, r = (t = (t + \"\").replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\")).length, s = 0; s < r; s++){\n        var o = t.charCodeAt(s), a = null;\n        o < 128 ? e++ : a = o > 127 && o < 2048 ? String.fromCharCode(o >> 6 | 192, 63 & o | 128) : String.fromCharCode(o >> 12 | 224, o >> 6 & 63 | 128, 63 & o | 128), C(a) || (e > i && (n += t.substring(i, e)), n += a, i = e = s + 1);\n    }\n    return e > i && (n += t.substring(i, t.length)), n;\n}, Cs = !!u || !!l, Os = \"text/plain\", Fs = (t, i)=>{\n    var [e, r] = t.split(\"?\"), s = B({}, i);\n    null == r || r.split(\"&\").forEach((t)=>{\n        var [i] = t.split(\"=\");\n        delete s[i];\n    });\n    var n = Si(s);\n    return e + \"?\" + (n = n ? (r ? r + \"&\" : \"\") + n : r);\n}, As = (t, i)=>JSON.stringify(t, (t, i)=>\"bigint\" == typeof i ? i.toString() : i, i), Ds = (t)=>{\n    var { data: i, compression: e } = t;\n    if (i) {\n        if (e === g.GZipJS) {\n            var r = Ar(Dr(As(i)), {\n                mtime: 0\n            }), s = new Blob([\n                r\n            ], {\n                type: Os\n            });\n            return {\n                contentType: Os,\n                body: s,\n                estimatedSize: s.size\n            };\n        }\n        if (e === g.Base64) {\n            var n = function(t) {\n                var i, e, r, s, n, o = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\", a = 0, l = 0, u = \"\", h = [];\n                if (!t) return t;\n                t = Ms(t);\n                do {\n                    i = (n = t.charCodeAt(a++) << 16 | t.charCodeAt(a++) << 8 | t.charCodeAt(a++)) >> 18 & 63, e = n >> 12 & 63, r = n >> 6 & 63, s = 63 & n, h[l++] = o.charAt(i) + o.charAt(e) + o.charAt(r) + o.charAt(s);\n                }while (a < t.length);\n                switch(u = h.join(\"\"), t.length % 3){\n                    case 1:\n                        u = u.slice(0, -2) + \"==\";\n                        break;\n                    case 2:\n                        u = u.slice(0, -1) + \"=\";\n                }\n                return u;\n            }(As(i)), o = ((t)=>\"data=\" + encodeURIComponent(\"string\" == typeof t ? t : As(t)))(n);\n            return {\n                contentType: \"application/x-www-form-urlencoded\",\n                body: o,\n                estimatedSize: new Blob([\n                    o\n                ]).size\n            };\n        }\n        var a = As(i);\n        return {\n            contentType: \"application/json\",\n            body: a,\n            estimatedSize: new Blob([\n                a\n            ]).size\n        };\n    }\n}, Ls = [];\nl && Ls.push({\n    transport: \"fetch\",\n    method: (t)=>{\n        var i, e, { contentType: r, body: s, estimatedSize: n } = null !== (i = Ds(t)) && void 0 !== i ? i : {}, o = new Headers;\n        J(t.headers, function(t, i) {\n            o.append(i, t);\n        }), r && o.append(\"Content-Type\", r);\n        var a = t.url, u = null;\n        if (h) {\n            var d = new h;\n            u = {\n                signal: d.signal,\n                timeout: setTimeout(()=>d.abort(), t.timeout)\n            };\n        }\n        l(a, B({\n            method: (null == t ? void 0 : t.method) || \"GET\",\n            headers: o,\n            keepalive: \"POST\" === t.method && (n || 0) < 52428.8,\n            body: s,\n            signal: null == (e = u) ? void 0 : e.signal\n        }, t.fetchOptions)).then((i)=>i.text().then((e)=>{\n                var r = {\n                    statusCode: i.status,\n                    text: e\n                };\n                if (200 === i.status) try {\n                    r.json = JSON.parse(e);\n                } catch (t) {\n                    j.error(t);\n                }\n                null == t.callback || t.callback(r);\n            })).catch((i)=>{\n            j.error(i), null == t.callback || t.callback({\n                statusCode: 0,\n                text: i\n            });\n        }).finally(()=>u ? clearTimeout(u.timeout) : null);\n    }\n}), u && Ls.push({\n    transport: \"XHR\",\n    method: (t)=>{\n        var i, e = new u;\n        e.open(t.method || \"GET\", t.url, !0);\n        var { contentType: r, body: s } = null !== (i = Ds(t)) && void 0 !== i ? i : {};\n        J(t.headers, function(t, i) {\n            e.setRequestHeader(i, t);\n        }), r && e.setRequestHeader(\"Content-Type\", r), t.timeout && (e.timeout = t.timeout), e.withCredentials = !0, e.onreadystatechange = ()=>{\n            if (4 === e.readyState) {\n                var i = {\n                    statusCode: e.status,\n                    text: e.responseText\n                };\n                if (200 === e.status) try {\n                    i.json = JSON.parse(e.responseText);\n                } catch (t) {}\n                null == t.callback || t.callback(i);\n            }\n        }, e.send(s);\n    }\n}), null != n && n.sendBeacon && Ls.push({\n    transport: \"sendBeacon\",\n    method: (t)=>{\n        var i = Fs(t.url, {\n            beacon: \"1\"\n        });\n        try {\n            var e, { contentType: r, body: s } = null !== (e = Ds(t)) && void 0 !== e ? e : {}, o = \"string\" == typeof s ? new Blob([\n                s\n            ], {\n                type: r\n            }) : s;\n            n.sendBeacon(i, o);\n        } catch (t) {}\n    }\n});\nvar Ns = function(t, i) {\n    if (!function(t) {\n        try {\n            new RegExp(t);\n        } catch (t) {\n            return !1;\n        }\n        return !0;\n    }(i)) return !1;\n    try {\n        return new RegExp(i).test(t);\n    } catch (t) {\n        return !1;\n    }\n};\n_c37 = Ns;\nfunction js(t, i, e) {\n    return As({\n        distinct_id: t,\n        userPropertiesToSet: i,\n        userPropertiesToSetOnce: e\n    });\n}\nvar zs = {\n    exact: (t, i)=>i.some((i)=>t.some((t)=>i === t)),\n    is_not: (t, i)=>i.every((i)=>t.every((t)=>i !== t)),\n    regex: (t, i)=>i.some((i)=>t.some((t)=>Ns(i, t))),\n    not_regex: (t, i)=>i.every((i)=>t.every((t)=>!Ns(i, t))),\n    icontains: (t, i)=>i.map(Us).some((i)=>t.map(Us).some((t)=>i.includes(t))),\n    not_icontains: (t, i)=>i.map(Us).every((i)=>t.map(Us).every((t)=>!i.includes(t)))\n}, Us = (t)=>t.toLowerCase(), qs = z(\"[Error tracking]\");\nclass Bs {\n    onRemoteConfig(t) {\n        var i, e, r = null !== (i = null == (e = t.errorTracking) ? void 0 : e.suppressionRules) && void 0 !== i ? i : [];\n        this.oe = r, this._instance.persistence && this._instance.persistence.register({\n            [dt]: this.oe\n        });\n    }\n    sendExceptionEvent(t) {\n        this.ae(t) ? qs.info(\"Skipping exception capture because a suppression rule matched\") : this._instance.capture(\"$exception\", t, {\n            _noTruncate: !0,\n            _batchKey: \"exceptionEvent\"\n        });\n    }\n    ae(t) {\n        var i = t.$exception_list;\n        if (!i || !x(i) || 0 === i.length) return !1;\n        var e = i.reduce((t, i)=>{\n            var { type: e, value: r } = i;\n            return T(e) && e.length > 0 && t.$exception_types.push(e), T(r) && r.length > 0 && t.$exception_messages.push(r), t;\n        }, {\n            $exception_types: [],\n            $exception_messages: []\n        });\n        return this.oe.some((t)=>{\n            var i = t.values.map((t)=>{\n                var i = zs[t.operator], r = x(t.value) ? t.value : [\n                    t.value\n                ], s = e[t.key];\n                return r.length > 0 && i(r, s);\n            });\n            return \"OR\" === t.type ? i.some(Boolean) : i.every(Boolean);\n        });\n    }\n    constructor(t){\n        var i, e;\n        this.oe = [], this._instance = t, this.oe = null !== (i = null == (e = this._instance.persistence) ? void 0 : e.get_property(dt)) && void 0 !== i ? i : [];\n    }\n}\nvar Hs = \"Mobile\", Ws = \"iOS\", Gs = \"Android\", Js = \"Tablet\", Vs = Gs + \" \" + Js, Ks = \"iPad\", Ys = \"Apple\", Xs = Ys + \" Watch\", Qs = \"Safari\", Zs = \"BlackBerry\", tn = \"Samsung\", en = tn + \"Browser\", rn = tn + \" Internet\", sn = \"Chrome\", nn = sn + \" OS\", on = sn + \" \" + Ws, an = \"Internet Explorer\", ln = an + \" \" + Hs, un = \"Opera\", hn = un + \" Mini\", dn = \"Edge\", vn = \"Microsoft \" + dn, cn = \"Firefox\", fn = cn + \" \" + Ws, pn = \"Nintendo\", gn = \"PlayStation\", _n = \"Xbox\", mn = Gs + \" \" + Hs, bn = Hs + \" \" + Qs, wn = \"Windows\", yn = wn + \" Phone\", Sn = \"Nokia\", $n = \"Ouya\", kn = \"Generic\", xn = kn + \" \" + Hs.toLowerCase(), En = kn + \" \" + Js.toLowerCase(), In = \"Konqueror\", Pn = \"(\\\\d+(\\\\.\\\\d+)?)\", Rn = new RegExp(\"Version/\" + Pn), Tn = new RegExp(_n, \"i\"), Mn = new RegExp(gn + \" \\\\w+\", \"i\"), Cn = new RegExp(pn + \" \\\\w+\", \"i\"), On = new RegExp(Zs + \"|PlayBook|BB10\", \"i\"), Fn = {\n    \"NT3.51\": \"NT 3.11\",\n    \"NT4.0\": \"NT 4.0\",\n    \"5.0\": \"2000\",\n    5.1: \"XP\",\n    5.2: \"XP\",\n    \"6.0\": \"Vista\",\n    6.1: \"7\",\n    6.2: \"8\",\n    6.3: \"8.1\",\n    6.4: \"10\",\n    \"10.0\": \"10\"\n};\nvar An = (t, i)=>i && m(i, Ys) || function(t) {\n        return m(t, Qs) && !m(t, sn) && !m(t, Gs);\n    }(t), Dn = function(t, i) {\n    return i = i || \"\", m(t, \" OPR/\") && m(t, \"Mini\") ? hn : m(t, \" OPR/\") ? un : On.test(t) ? Zs : m(t, \"IE\" + Hs) || m(t, \"WPDesktop\") ? ln : m(t, en) ? rn : m(t, dn) || m(t, \"Edg/\") ? vn : m(t, \"FBIOS\") ? \"Facebook \" + Hs : m(t, \"UCWEB\") || m(t, \"UCBrowser\") ? \"UC Browser\" : m(t, \"CriOS\") ? on : m(t, \"CrMo\") || m(t, sn) ? sn : m(t, Gs) && m(t, Qs) ? mn : m(t, \"FxiOS\") ? fn : m(t.toLowerCase(), In.toLowerCase()) ? In : An(t, i) ? m(t, Hs) ? bn : Qs : m(t, cn) ? cn : m(t, \"MSIE\") || m(t, \"Trident/\") ? an : m(t, \"Gecko\") ? cn : \"\";\n}, Ln = {\n    [ln]: [\n        new RegExp(\"rv:\" + Pn)\n    ],\n    [vn]: [\n        new RegExp(dn + \"?\\\\/\" + Pn)\n    ],\n    [sn]: [\n        new RegExp(\"(\" + sn + \"|CrMo)\\\\/\" + Pn)\n    ],\n    [on]: [\n        new RegExp(\"CriOS\\\\/\" + Pn)\n    ],\n    \"UC Browser\": [\n        new RegExp(\"(UCBrowser|UCWEB)\\\\/\" + Pn)\n    ],\n    [Qs]: [\n        Rn\n    ],\n    [bn]: [\n        Rn\n    ],\n    [un]: [\n        new RegExp(\"(Opera|OPR)\\\\/\" + Pn)\n    ],\n    [cn]: [\n        new RegExp(cn + \"\\\\/\" + Pn)\n    ],\n    [fn]: [\n        new RegExp(\"FxiOS\\\\/\" + Pn)\n    ],\n    [In]: [\n        new RegExp(\"Konqueror[:/]?\" + Pn, \"i\")\n    ],\n    [Zs]: [\n        new RegExp(Zs + \" \" + Pn),\n        Rn\n    ],\n    [mn]: [\n        new RegExp(\"android\\\\s\" + Pn, \"i\")\n    ],\n    [rn]: [\n        new RegExp(en + \"\\\\/\" + Pn)\n    ],\n    [an]: [\n        new RegExp(\"(rv:|MSIE )\" + Pn)\n    ],\n    Mozilla: [\n        new RegExp(\"rv:\" + Pn)\n    ]\n}, Nn = function(t, i) {\n    var e = Dn(t, i), r = Ln[e];\n    if (R(r)) return null;\n    for(var s = 0; s < r.length; s++){\n        var n = r[s], o = t.match(n);\n        if (o) return parseFloat(o[o.length - 2]);\n    }\n    return null;\n}, jn = [\n    [\n        new RegExp(_n + \"; \" + _n + \" (.*?)[);]\", \"i\"),\n        (t)=>[\n                _n,\n                t && t[1] || \"\"\n            ]\n    ],\n    [\n        new RegExp(pn, \"i\"),\n        [\n            pn,\n            \"\"\n        ]\n    ],\n    [\n        new RegExp(gn, \"i\"),\n        [\n            gn,\n            \"\"\n        ]\n    ],\n    [\n        On,\n        [\n            Zs,\n            \"\"\n        ]\n    ],\n    [\n        new RegExp(wn, \"i\"),\n        (t, i)=>{\n            if (/Phone/.test(i) || /WPDesktop/.test(i)) return [\n                yn,\n                \"\"\n            ];\n            if (new RegExp(Hs).test(i) && !/IEMobile\\b/.test(i)) return [\n                wn + \" \" + Hs,\n                \"\"\n            ];\n            var e = /Windows NT ([0-9.]+)/i.exec(i);\n            if (e && e[1]) {\n                var r = e[1], s = Fn[r] || \"\";\n                return /arm/i.test(i) && (s = \"RT\"), [\n                    wn,\n                    s\n                ];\n            }\n            return [\n                wn,\n                \"\"\n            ];\n        }\n    ],\n    [\n        /((iPhone|iPad|iPod).*?OS (\\d+)_(\\d+)_?(\\d+)?|iPhone)/,\n        (t)=>{\n            if (t && t[3]) {\n                var i = [\n                    t[3],\n                    t[4],\n                    t[5] || \"0\"\n                ];\n                return [\n                    Ws,\n                    i.join(\".\")\n                ];\n            }\n            return [\n                Ws,\n                \"\"\n            ];\n        }\n    ],\n    [\n        /(watch.*\\/(\\d+\\.\\d+\\.\\d+)|watch os,(\\d+\\.\\d+),)/i,\n        (t)=>{\n            var i = \"\";\n            return t && t.length >= 3 && (i = R(t[2]) ? t[3] : t[2]), [\n                \"watchOS\",\n                i\n            ];\n        }\n    ],\n    [\n        new RegExp(\"(\" + Gs + \" (\\\\d+)\\\\.(\\\\d+)\\\\.?(\\\\d+)?|\" + Gs + \")\", \"i\"),\n        (t)=>{\n            if (t && t[2]) {\n                var i = [\n                    t[2],\n                    t[3],\n                    t[4] || \"0\"\n                ];\n                return [\n                    Gs,\n                    i.join(\".\")\n                ];\n            }\n            return [\n                Gs,\n                \"\"\n            ];\n        }\n    ],\n    [\n        /Mac OS X (\\d+)[_.](\\d+)[_.]?(\\d+)?/i,\n        (t)=>{\n            var i = [\n                \"Mac OS X\",\n                \"\"\n            ];\n            if (t && t[1]) {\n                var e = [\n                    t[1],\n                    t[2],\n                    t[3] || \"0\"\n                ];\n                i[1] = e.join(\".\");\n            }\n            return i;\n        }\n    ],\n    [\n        /Mac/i,\n        [\n            \"Mac OS X\",\n            \"\"\n        ]\n    ],\n    [\n        /CrOS/,\n        [\n            nn,\n            \"\"\n        ]\n    ],\n    [\n        /Linux|debian/i,\n        [\n            \"Linux\",\n            \"\"\n        ]\n    ]\n], zn = function(t) {\n    return Cn.test(t) ? pn : Mn.test(t) ? gn : Tn.test(t) ? _n : new RegExp($n, \"i\").test(t) ? $n : new RegExp(\"(\" + yn + \"|WPDesktop)\", \"i\").test(t) ? yn : /iPad/.test(t) ? Ks : /iPod/.test(t) ? \"iPod Touch\" : /iPhone/.test(t) ? \"iPhone\" : /(watch)(?: ?os[,/]|\\d,\\d\\/)[\\d.]+/i.test(t) ? Xs : On.test(t) ? Zs : /(kobo)\\s(ereader|touch)/i.test(t) ? \"Kobo\" : new RegExp(Sn, \"i\").test(t) ? Sn : /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\\))/i.test(t) || /(kf[a-z]+)( bui|\\)).+silk\\//i.test(t) ? \"Kindle Fire\" : /(Android|ZTE)/i.test(t) ? !new RegExp(Hs).test(t) || /(9138B|TB782B|Nexus [97]|pixel c|HUAWEISHT|BTV|noble nook|smart ultra 6)/i.test(t) ? /pixel[\\daxl ]{1,6}/i.test(t) && !/pixel c/i.test(t) || /(huaweimed-al00|tah-|APA|SM-G92|i980|zte|U304AA)/i.test(t) || /lmy47v/i.test(t) && !/QTAQZ3/i.test(t) ? Gs : Vs : Gs : new RegExp(\"(pda|\" + Hs + \")\", \"i\").test(t) ? xn : new RegExp(Js, \"i\").test(t) && !new RegExp(Js + \" pc\", \"i\").test(t) ? En : \"\";\n}, Un = \"https?://(.*)\", qn = [\n    \"gclid\",\n    \"gclsrc\",\n    \"dclid\",\n    \"gbraid\",\n    \"wbraid\",\n    \"fbclid\",\n    \"msclkid\",\n    \"twclid\",\n    \"li_fat_id\",\n    \"igshid\",\n    \"ttclid\",\n    \"rdt_cid\",\n    \"epik\",\n    \"qclid\",\n    \"sccid\",\n    \"irclid\",\n    \"_kx\"\n], Bn = K([\n    \"utm_source\",\n    \"utm_medium\",\n    \"utm_campaign\",\n    \"utm_content\",\n    \"utm_term\",\n    \"gad_source\",\n    \"mc_cid\"\n], qn), Hn = \"<masked>\";\nfunction Wn(t, i, e) {\n    if (!o) return {};\n    var r = i ? K([], qn, e || []) : [];\n    return Gn(ki(o.URL, r, Hn), t);\n}\n_c38 = Wn;\nfunction Gn(t, i) {\n    var e = Bn.concat(i || []), r = {};\n    return J(e, function(i) {\n        var e = $i(t, i);\n        r[i] = e || null;\n    }), r;\n}\n_c39 = Gn;\nfunction Jn(t) {\n    var i = function(t) {\n        return t ? 0 === t.search(Un + \"google.([^/?]*)\") ? \"google\" : 0 === t.search(Un + \"bing.com\") ? \"bing\" : 0 === t.search(Un + \"yahoo.com\") ? \"yahoo\" : 0 === t.search(Un + \"duckduckgo.com\") ? \"duckduckgo\" : null : null;\n    }(t), e = \"yahoo\" != i ? \"q\" : \"p\", r = {};\n    if (!C(i)) {\n        r.$search_engine = i;\n        var s = o ? $i(o.referrer, e) : \"\";\n        s.length && (r.ph_keyword = s);\n    }\n    return r;\n}\n_c40 = Jn;\nfunction Vn() {\n    return navigator.language || navigator.userLanguage;\n}\n_c41 = Vn;\nfunction Kn() {\n    return (null == o ? void 0 : o.referrer) || \"$direct\";\n}\n_c42 = Kn;\nfunction Yn(t, i) {\n    var e = t ? K([], qn, i || []) : [], r = null == a ? void 0 : a.href.substring(0, 1e3);\n    return {\n        r: Kn().substring(0, 1e3),\n        u: r ? ki(r, e, Hn) : void 0\n    };\n}\n_c43 = Yn;\nfunction Xn(t) {\n    var i, { r: e, u: r } = t, s = {\n        $referrer: e,\n        $referring_domain: null == e ? void 0 : \"$direct\" == e ? \"$direct\" : null == (i = yi(e)) ? void 0 : i.host\n    };\n    if (r) {\n        s.$current_url = r;\n        var n = yi(r);\n        s.$host = null == n ? void 0 : n.host, s.$pathname = null == n ? void 0 : n.pathname;\n        var o = Gn(r);\n        V(s, o);\n    }\n    if (e) {\n        var a = Jn(e);\n        V(s, a);\n    }\n    return s;\n}\n_c44 = Xn;\nfunction Qn() {\n    try {\n        return Intl.DateTimeFormat().resolvedOptions().timeZone;\n    } catch (t) {\n        return;\n    }\n}\n_c45 = Qn;\nfunction Zn() {\n    try {\n        return (new Date).getTimezoneOffset();\n    } catch (t) {\n        return;\n    }\n}\n_c46 = Zn;\nfunction to(i, e) {\n    if (!d) return {};\n    var r, s, n, o = i ? K([], qn, e || []) : [], [l, u] = function(t) {\n        for(var i = 0; i < jn.length; i++){\n            var [e, r] = jn[i], s = e.exec(t), n = s && (E(r) ? r(s, t) : r);\n            if (n) return n;\n        }\n        return [\n            \"\",\n            \"\"\n        ];\n    }(d);\n    return V(Z({\n        $os: l,\n        $os_version: u,\n        $browser: Dn(d, navigator.vendor),\n        $device: zn(d),\n        $device_type: (s = d, n = zn(s), n === Ks || n === Vs || \"Kobo\" === n || \"Kindle Fire\" === n || n === En ? Js : n === pn || n === _n || n === gn || n === $n ? \"Console\" : n === Xs ? \"Wearable\" : n ? Hs : \"Desktop\"),\n        $timezone: Qn(),\n        $timezone_offset: Zn()\n    }), {\n        $current_url: ki(null == a ? void 0 : a.href, o, Hn),\n        $host: null == a ? void 0 : a.host,\n        $pathname: null == a ? void 0 : a.pathname,\n        $raw_user_agent: d.length > 1e3 ? d.substring(0, 997) + \"...\" : d,\n        $browser_version: Nn(d, navigator.vendor),\n        $browser_language: Vn(),\n        $browser_language_prefix: (r = Vn(), \"string\" == typeof r ? r.split(\"-\")[0] : void 0),\n        $screen_height: null == t ? void 0 : t.screen.height,\n        $screen_width: null == t ? void 0 : t.screen.width,\n        $viewport_height: null == t ? void 0 : t.innerHeight,\n        $viewport_width: null == t ? void 0 : t.innerWidth,\n        $lib: \"web\",\n        $lib_version: c.LIB_VERSION,\n        $insert_id: Math.random().toString(36).substring(2, 10) + Math.random().toString(36).substring(2, 10),\n        $time: Date.now() / 1e3\n    });\n}\nvar io = z(\"[FeatureFlags]\"), eo = \"$active_feature_flags\", ro = \"$override_feature_flags\", so = \"$feature_flag_payloads\", no = \"$override_feature_flag_payloads\", oo = \"$feature_flag_request_id\", ao = (t)=>{\n    var i = {};\n    for (var [e, r] of Y(t || {}))r && (i[e] = r);\n    return i;\n}, lo = (t)=>{\n    var i = t.flags;\n    return i ? (t.featureFlags = Object.fromEntries(Object.keys(i).map((t)=>{\n        var e;\n        return [\n            t,\n            null !== (e = i[t].variant) && void 0 !== e ? e : i[t].enabled\n        ];\n    })), t.featureFlagPayloads = Object.fromEntries(Object.keys(i).filter((t)=>i[t].enabled).filter((t)=>{\n        var e;\n        return null == (e = i[t].metadata) ? void 0 : e.payload;\n    }).map((t)=>{\n        var e;\n        return [\n            t,\n            null == (e = i[t].metadata) ? void 0 : e.payload\n        ];\n    }))) : io.warn(\"Using an older version of the feature flags endpoint. Please upgrade your PostHog server to the latest version\"), t;\n}, uo = function(t) {\n    return t.FeatureFlags = \"feature_flags\", t.Recordings = \"recordings\", t;\n}({});\nclass ho {\n    decide() {\n        if (this._instance.config.__preview_remote_config) this.ce = !0;\n        else {\n            var t = !this.pe && (this._instance.config.advanced_disable_feature_flags || this._instance.config.advanced_disable_feature_flags_on_first_load);\n            this.ge({\n                disableFlags: t\n            });\n        }\n    }\n    get hasLoadedFlags() {\n        return this.ue;\n    }\n    getFlags() {\n        return Object.keys(this.getFlagVariants());\n    }\n    getFlagsWithDetails() {\n        var t = this._instance.get_property(Rt), i = this._instance.get_property(ro), e = this._instance.get_property(no);\n        if (!e && !i) return t || {};\n        var r = V({}, t || {}), s = [\n            ...new Set([\n                ...Object.keys(e || {}),\n                ...Object.keys(i || {})\n            ])\n        ];\n        for (var n of s){\n            var o, a, l = r[n], u = null == i ? void 0 : i[n], h = R(u) ? null !== (o = null == l ? void 0 : l.enabled) && void 0 !== o && o : !!u, d = R(u) ? l.variant : \"string\" == typeof u ? u : void 0, v = null == e ? void 0 : e[n], c = B({}, l, {\n                enabled: h,\n                variant: h ? null != d ? d : null == l ? void 0 : l.variant : void 0\n            });\n            if (h !== (null == l ? void 0 : l.enabled) && (c.original_enabled = null == l ? void 0 : l.enabled), d !== (null == l ? void 0 : l.variant) && (c.original_variant = null == l ? void 0 : l.variant), v) c.metadata = B({}, null == l ? void 0 : l.metadata, {\n                payload: v,\n                original_payload: null == l || null == (a = l.metadata) ? void 0 : a.payload\n            });\n            r[n] = c;\n        }\n        return this.le || (io.warn(\" Overriding feature flag details!\", {\n            flagDetails: t,\n            overriddenPayloads: e,\n            finalDetails: r\n        }), this.le = !0), r;\n    }\n    getFlagVariants() {\n        var t = this._instance.get_property(It), i = this._instance.get_property(ro);\n        if (!i) return t || {};\n        for(var e = V({}, t), r = Object.keys(i), s = 0; s < r.length; s++)e[r[s]] = i[r[s]];\n        return this.le || (io.warn(\" Overriding feature flags!\", {\n            enabledFlags: t,\n            overriddenFlags: i,\n            finalFlags: e\n        }), this.le = !0), e;\n    }\n    getFlagPayloads() {\n        var t = this._instance.get_property(so), i = this._instance.get_property(no);\n        if (!i) return t || {};\n        for(var e = V({}, t || {}), r = Object.keys(i), s = 0; s < r.length; s++)e[r[s]] = i[r[s]];\n        return this.le || (io.warn(\" Overriding feature flag payloads!\", {\n            flagPayloads: t,\n            overriddenPayloads: i,\n            finalPayloads: e\n        }), this.le = !0), e;\n    }\n    reloadFeatureFlags() {\n        this.de || this._instance.config.advanced_disable_feature_flags || this.pe || (this.pe = setTimeout(()=>{\n            this.ge();\n        }, 5));\n    }\n    _e() {\n        clearTimeout(this.pe), this.pe = void 0;\n    }\n    ensureFlagsLoaded() {\n        this.ue || this.he || this.pe || this.reloadFeatureFlags();\n    }\n    setAnonymousDistinctId(t) {\n        this.$anon_distinct_id = t;\n    }\n    setReloadingPaused(t) {\n        this.de = t;\n    }\n    ge(t) {\n        var i;\n        if (this._e(), !this._instance.config.advanced_disable_decide) if (this.he) this.ve = !0;\n        else {\n            var e = {\n                token: this._instance.config.token,\n                distinct_id: this._instance.get_distinct_id(),\n                groups: this._instance.getGroups(),\n                $anon_distinct_id: this.$anon_distinct_id,\n                person_properties: B({}, (null == (i = this._instance.persistence) ? void 0 : i.get_initial_props()) || {}, this._instance.get_property(Tt) || {}),\n                group_properties: this._instance.get_property(Mt)\n            };\n            (null != t && t.disableFlags || this._instance.config.advanced_disable_feature_flags) && (e.disable_flags = !0);\n            var r = this._instance.config.__preview_flags_v2 && this._instance.config.__preview_remote_config;\n            r && (e.timezone = Qn()), this.he = !0, this._instance.me({\n                method: \"POST\",\n                url: this._instance.requestRouter.endpointFor(\"api\", r ? \"/flags/?v=2\" : \"/decide/?v=4\"),\n                data: e,\n                compression: this._instance.config.disable_compression ? void 0 : g.Base64,\n                timeout: this._instance.config.feature_flag_request_timeout_ms,\n                callback: (t)=>{\n                    var i, r, s = !0;\n                    (200 === t.statusCode && (this.ve || (this.$anon_distinct_id = void 0), s = !1), this.he = !1, this.ce) || (this.ce = !0, this._instance.be(null !== (r = t.json) && void 0 !== r ? r : {}));\n                    if (!e.disable_flags || this.ve) if (this.fe = !s, t.json && null != (i = t.json.quotaLimited) && i.includes(uo.FeatureFlags)) io.warn(\"You have hit your feature flags quota limit, and will not be able to load feature flags until the quota is reset.  Please visit https://posthog.com/docs/billing/limits-alerts to learn more.\");\n                    else {\n                        var n;\n                        if (!e.disable_flags) this.receivedFeatureFlags(null !== (n = t.json) && void 0 !== n ? n : {}, s);\n                        this.ve && (this.ve = !1, this.ge());\n                    }\n                }\n            });\n        }\n    }\n    getFeatureFlag(t, i) {\n        if (void 0 === i && (i = {}), this.ue || this.getFlags() && this.getFlags().length > 0) {\n            var e = this.getFlagVariants()[t], r = \"\" + e, s = this._instance.get_property(oo) || void 0, n = this._instance.get_property(Ft) || {};\n            if ((i.send_event || !(\"send_event\" in i)) && (!(t in n) || !n[t].includes(r))) {\n                var o, a, l, u, h, d, v, c, f;\n                x(n[t]) ? n[t].push(r) : n[t] = [\n                    r\n                ], null == (o = this._instance.persistence) || o.register({\n                    [Ft]: n\n                });\n                var p = this.getFeatureFlagDetails(t), g = {\n                    $feature_flag: t,\n                    $feature_flag_response: e,\n                    $feature_flag_payload: this.getFeatureFlagPayload(t) || null,\n                    $feature_flag_request_id: s,\n                    $feature_flag_bootstrapped_response: (null == (a = this._instance.config.bootstrap) || null == (a = a.featureFlags) ? void 0 : a[t]) || null,\n                    $feature_flag_bootstrapped_payload: (null == (l = this._instance.config.bootstrap) || null == (l = l.featureFlagPayloads) ? void 0 : l[t]) || null,\n                    $used_bootstrap_value: !this.fe\n                };\n                R(null == p || null == (u = p.metadata) ? void 0 : u.version) || (g.$feature_flag_version = p.metadata.version);\n                var _, m = null !== (h = null == p || null == (d = p.reason) ? void 0 : d.description) && void 0 !== h ? h : null == p || null == (v = p.reason) ? void 0 : v.code;\n                if (m && (g.$feature_flag_reason = m), null != p && null != (c = p.metadata) && c.id && (g.$feature_flag_id = p.metadata.id), R(null == p ? void 0 : p.original_variant) && R(null == p ? void 0 : p.original_enabled) || (g.$feature_flag_original_response = R(p.original_variant) ? p.original_enabled : p.original_variant), null != p && null != (f = p.metadata) && f.original_payload) g.$feature_flag_original_payload = null == p || null == (_ = p.metadata) ? void 0 : _.original_payload;\n                this._instance.capture(\"$feature_flag_called\", g);\n            }\n            return e;\n        }\n        io.warn('getFeatureFlag for key \"' + t + \"\\\" failed. Feature flags didn't load in time.\");\n    }\n    getFeatureFlagDetails(t) {\n        return this.getFlagsWithDetails()[t];\n    }\n    getFeatureFlagPayload(t) {\n        return this.getFlagPayloads()[t];\n    }\n    getRemoteConfigPayload(t, i) {\n        var e = this._instance.config.token;\n        this._instance.me({\n            method: \"POST\",\n            url: this._instance.requestRouter.endpointFor(\"api\", \"/decide/?v=4\"),\n            data: {\n                distinct_id: this._instance.get_distinct_id(),\n                token: e\n            },\n            compression: this._instance.config.disable_compression ? void 0 : g.Base64,\n            timeout: this._instance.config.feature_flag_request_timeout_ms,\n            callback: (e)=>{\n                var r, s = null == (r = e.json) ? void 0 : r.featureFlagPayloads;\n                i((null == s ? void 0 : s[t]) || void 0);\n            }\n        });\n    }\n    isFeatureEnabled(t, i) {\n        if (void 0 === i && (i = {}), this.ue || this.getFlags() && this.getFlags().length > 0) return !!this.getFeatureFlag(t, i);\n        io.warn('isFeatureEnabled for key \"' + t + \"\\\" failed. Feature flags didn't load in time.\");\n    }\n    addFeatureFlagsHandler(t) {\n        this.featureFlagEventHandlers.push(t);\n    }\n    removeFeatureFlagsHandler(t) {\n        this.featureFlagEventHandlers = this.featureFlagEventHandlers.filter((i)=>i !== t);\n    }\n    receivedFeatureFlags(t, i) {\n        if (this._instance.persistence) {\n            this.ue = !0;\n            var e = this.getFlagVariants(), r = this.getFlagPayloads(), s = this.getFlagsWithDetails();\n            !function(t, i, e, r, s) {\n                void 0 === e && (e = {}), void 0 === r && (r = {}), void 0 === s && (s = {});\n                var n = lo(t), o = n.flags, a = n.featureFlags, l = n.featureFlagPayloads;\n                if (a) {\n                    var u = t.requestId;\n                    if (x(a)) {\n                        io.warn(\"v1 of the feature flags endpoint is deprecated. Please use the latest version.\");\n                        var h = {};\n                        if (a) for(var d = 0; d < a.length; d++)h[a[d]] = !0;\n                        i && i.register({\n                            [eo]: a,\n                            [It]: h\n                        });\n                    } else {\n                        var v = a, c = l, f = o;\n                        t.errorsWhileComputingFlags && (v = B({}, e, v), c = B({}, r, c), f = B({}, s, f)), i && i.register(B({\n                            [eo]: Object.keys(ao(v)),\n                            [It]: v || {},\n                            [so]: c || {},\n                            [Rt]: f || {}\n                        }, u ? {\n                            [oo]: u\n                        } : {}));\n                    }\n                }\n            }(t, this._instance.persistence, e, r, s), this.we(i);\n        }\n    }\n    override(t, i) {\n        void 0 === i && (i = !1), io.warn(\"override is deprecated. Please use overrideFeatureFlags instead.\"), this.overrideFeatureFlags({\n            flags: t,\n            suppressWarning: i\n        });\n    }\n    overrideFeatureFlags(t) {\n        if (!this._instance.__loaded || !this._instance.persistence) return io.uninitializedWarning(\"posthog.featureFlags.overrideFeatureFlags\");\n        if (!1 === t) return this._instance.persistence.unregister(ro), this._instance.persistence.unregister(no), void this.we();\n        if (t && \"object\" == typeof t && (\"flags\" in t || \"payloads\" in t)) {\n            var i, e = t;\n            if (this.le = Boolean(null !== (i = e.suppressWarning) && void 0 !== i && i), \"flags\" in e) {\n                if (!1 === e.flags) this._instance.persistence.unregister(ro);\n                else if (e.flags) if (x(e.flags)) {\n                    for(var r = {}, s = 0; s < e.flags.length; s++)r[e.flags[s]] = !0;\n                    this._instance.persistence.register({\n                        [ro]: r\n                    });\n                } else this._instance.persistence.register({\n                    [ro]: e.flags\n                });\n            }\n            return \"payloads\" in e && (!1 === e.payloads ? this._instance.persistence.unregister(no) : e.payloads && this._instance.persistence.register({\n                [no]: e.payloads\n            })), void this.we();\n        }\n        this.we();\n    }\n    onFeatureFlags(t) {\n        if (this.addFeatureFlagsHandler(t), this.ue) {\n            var { flags: i, flagVariants: e } = this.ye();\n            t(i, e);\n        }\n        return ()=>this.removeFeatureFlagsHandler(t);\n    }\n    updateEarlyAccessFeatureEnrollment(t, i) {\n        var e, r = (this._instance.get_property(Pt) || []).find((i)=>i.flagKey === t), s = {\n            [\"$feature_enrollment/\" + t]: i\n        }, n = {\n            $feature_flag: t,\n            $feature_enrollment: i,\n            $set: s\n        };\n        r && (n.$early_access_feature_name = r.name), this._instance.capture(\"$feature_enrollment_update\", n), this.setPersonPropertiesForFlags(s, !1);\n        var o = B({}, this.getFlagVariants(), {\n            [t]: i\n        });\n        null == (e = this._instance.persistence) || e.register({\n            [eo]: Object.keys(ao(o)),\n            [It]: o\n        }), this.we();\n    }\n    getEarlyAccessFeatures(t, i, e) {\n        void 0 === i && (i = !1);\n        var r = this._instance.get_property(Pt), s = e ? \"&\" + e.map((t)=>\"stage=\" + t).join(\"&\") : \"\";\n        if (r && !i) return t(r);\n        this._instance.me({\n            url: this._instance.requestRouter.endpointFor(\"api\", \"/api/early_access_features/?token=\" + this._instance.config.token + s),\n            method: \"GET\",\n            callback: (i)=>{\n                var e;\n                if (i.json) {\n                    var r = i.json.earlyAccessFeatures;\n                    return null == (e = this._instance.persistence) || e.register({\n                        [Pt]: r\n                    }), t(r);\n                }\n            }\n        });\n    }\n    ye() {\n        var t = this.getFlags(), i = this.getFlagVariants();\n        return {\n            flags: t.filter((t)=>i[t]),\n            flagVariants: Object.keys(i).filter((t)=>i[t]).reduce((t, e)=>(t[e] = i[e], t), {})\n        };\n    }\n    we(t) {\n        var { flags: i, flagVariants: e } = this.ye();\n        this.featureFlagEventHandlers.forEach((r)=>r(i, e, {\n                errorsLoading: t\n            }));\n    }\n    setPersonPropertiesForFlags(t, i) {\n        void 0 === i && (i = !0);\n        var e = this._instance.get_property(Tt) || {};\n        this._instance.register({\n            [Tt]: B({}, e, t)\n        }), i && this._instance.reloadFeatureFlags();\n    }\n    resetPersonPropertiesForFlags() {\n        this._instance.unregister(Tt);\n    }\n    setGroupPropertiesForFlags(t, i) {\n        void 0 === i && (i = !0);\n        var e = this._instance.get_property(Mt) || {};\n        0 !== Object.keys(e).length && Object.keys(e).forEach((i)=>{\n            e[i] = B({}, e[i], t[i]), delete t[i];\n        }), this._instance.register({\n            [Mt]: B({}, e, t)\n        }), i && this._instance.reloadFeatureFlags();\n    }\n    resetGroupPropertiesForFlags(t) {\n        if (t) {\n            var i = this._instance.get_property(Mt) || {};\n            this._instance.register({\n                [Mt]: B({}, i, {\n                    [t]: {}\n                })\n            });\n        } else this._instance.unregister(Mt);\n    }\n    constructor(t){\n        this.le = !1, this.ue = !1, this.he = !1, this.de = !1, this.ve = !1, this.ce = !1, this.fe = !1, this._instance = t, this.featureFlagEventHandlers = [];\n    }\n}\nvar vo = [\n    \"cookie\",\n    \"localstorage\",\n    \"localstorage+cookie\",\n    \"sessionstorage\",\n    \"memory\"\n];\nclass co {\n    ke(t) {\n        -1 === vo.indexOf(t.persistence.toLowerCase()) && (j.critical(\"Unknown persistence type \" + t.persistence + \"; falling back to localStorage+cookie\"), t.persistence = \"localStorage+cookie\");\n        var i = t.persistence.toLowerCase();\n        return \"localstorage\" === i && Wi.O() ? Wi : \"localstorage+cookie\" === i && Ji.O() ? Ji : \"sessionstorage\" === i && Xi.O() ? Xi : \"memory\" === i ? Ki : \"cookie\" === i ? Bi : Ji.O() ? Ji : Bi;\n    }\n    properties() {\n        var t = {};\n        return J(this.props, function(i, e) {\n            if (e === It && I(i)) for(var r = Object.keys(i), n = 0; n < r.length; n++)t[\"$feature/\" + r[n]] = i[r[n]];\n            else a = e, l = !1, (C(o = Ht) ? l : s && o.indexOf === s ? -1 != o.indexOf(a) : (J(o, function(t) {\n                if (l || (l = t === a)) return W;\n            }), l)) || (t[e] = i);\n            var o, a, l;\n        }), t;\n    }\n    load() {\n        if (!this.xe) {\n            var t = this.q.D(this.$e);\n            t && (this.props = V({}, t));\n        }\n    }\n    save() {\n        this.xe || this.q.L(this.$e, this.props, this.Ee, this.Ie, this.Pe, this.S.debug);\n    }\n    remove() {\n        this.q.N(this.$e, !1), this.q.N(this.$e, !0);\n    }\n    clear() {\n        this.remove(), this.props = {};\n    }\n    register_once(t, i, e) {\n        if (I(t)) {\n            R(i) && (i = \"None\"), this.Ee = R(e) ? this.Re : e;\n            var r = !1;\n            if (J(t, (t, e)=>{\n                this.props.hasOwnProperty(e) && this.props[e] !== i || (this.props[e] = t, r = !0);\n            }), r) return this.save(), !0;\n        }\n        return !1;\n    }\n    register(t, i) {\n        if (I(t)) {\n            this.Ee = R(i) ? this.Re : i;\n            var e = !1;\n            if (J(t, (i, r)=>{\n                t.hasOwnProperty(r) && this.props[r] !== i && (this.props[r] = i, e = !0);\n            }), e) return this.save(), !0;\n        }\n        return !1;\n    }\n    unregister(t) {\n        t in this.props && (delete this.props[t], this.save());\n    }\n    update_campaign_params() {\n        if (!this.Se) {\n            var t = Wn(this.S.custom_campaign_params, this.S.mask_personal_data_properties, this.S.custom_personal_data_properties);\n            P(Z(t)) || this.register(t), this.Se = !0;\n        }\n    }\n    update_search_keyword() {\n        var t;\n        this.register((t = null == o ? void 0 : o.referrer) ? Jn(t) : {});\n    }\n    update_referrer_info() {\n        var t;\n        this.register_once({\n            $referrer: Kn(),\n            $referring_domain: null != o && o.referrer && (null == (t = yi(o.referrer)) ? void 0 : t.host) || \"$direct\"\n        }, void 0);\n    }\n    set_initial_person_info() {\n        this.props[Nt] || this.props[jt] || this.register_once({\n            [zt]: Yn(this.S.mask_personal_data_properties, this.S.custom_personal_data_properties)\n        }, void 0);\n    }\n    get_initial_props() {\n        var t = {};\n        J([\n            jt,\n            Nt\n        ], (i)=>{\n            var e = this.props[i];\n            e && J(e, function(i, e) {\n                t[\"$initial_\" + w(e)] = i;\n            });\n        });\n        var i, e, r = this.props[zt];\n        if (r) {\n            var s = (i = Xn(r), e = {}, J(i, function(t, i) {\n                e[\"$initial_\" + w(i)] = t;\n            }), e);\n            V(t, s);\n        }\n        return t;\n    }\n    safe_merge(t) {\n        return J(this.props, function(i, e) {\n            e in t || (t[e] = i);\n        }), t;\n    }\n    update_config(t, i) {\n        if (this.Re = this.Ee = t.cookie_expiration, this.set_disabled(t.disable_persistence), this.set_cross_subdomain(t.cross_subdomain_cookie), this.set_secure(t.secure_cookie), t.persistence !== i.persistence) {\n            var e = this.ke(t), r = this.props;\n            this.clear(), this.q = e, this.props = r, this.save();\n        }\n    }\n    set_disabled(t) {\n        this.xe = t, this.xe ? this.remove() : this.save();\n    }\n    set_cross_subdomain(t) {\n        t !== this.Ie && (this.Ie = t, this.remove(), this.save());\n    }\n    set_secure(t) {\n        t !== this.Pe && (this.Pe = t, this.remove(), this.save());\n    }\n    set_event_timer(t, i) {\n        var e = this.props[at] || {};\n        e[t] = i, this.props[at] = e, this.save();\n    }\n    remove_event_timer(t) {\n        var i = (this.props[at] || {})[t];\n        return R(i) || (delete this.props[at][t], this.save()), i;\n    }\n    get_property(t) {\n        return this.props[t];\n    }\n    set_property(t, i) {\n        this.props[t] = i, this.save();\n    }\n    constructor(t){\n        this.S = t, this.props = {}, this.Se = !1, this.$e = ((t)=>{\n            var i = \"\";\n            return t.token && (i = t.token.replace(/\\+/g, \"PL\").replace(/\\//g, \"SL\").replace(/=/g, \"EQ\")), t.persistence_name ? \"ph_\" + t.persistence_name : \"ph_\" + i + \"_posthog\";\n        })(t), this.q = this.ke(t), this.load(), t.debug && j.info(\"Persistence loaded\", t.persistence, B({}, this.props)), this.update_config(t, t), this.save();\n    }\n}\nclass fo {\n    on(t, i) {\n        return this.Te[t] || (this.Te[t] = []), this.Te[t].push(i), ()=>{\n            this.Te[t] = this.Te[t].filter((t)=>t !== i);\n        };\n    }\n    emit(t, i) {\n        for (var e of this.Te[t] || [])e(i);\n        for (var r of this.Te[\"*\"] || [])r(t, i);\n    }\n    constructor(){\n        this.Te = {}, this.Te = {};\n    }\n}\nclass po {\n    init() {\n        var t;\n        if (!R(null == (t = this._instance) ? void 0 : t.Ne)) {\n            var i;\n            null == (i = this._instance) || i.Ne((t, i)=>{\n                this.on(t, i);\n            });\n        }\n    }\n    register(t) {\n        var i, e;\n        if (!R(null == (i = this._instance) ? void 0 : i.Ne) && (t.forEach((t)=>{\n            var i, e;\n            null == (i = this.Le) || i.add(t), null == (e = t.steps) || e.forEach((t)=>{\n                var i;\n                null == (i = this.De) || i.add((null == t ? void 0 : t.event) || \"\");\n            });\n        }), null != (e = this._instance) && e.autocapture)) {\n            var r, s = new Set;\n            t.forEach((t)=>{\n                var i;\n                null == (i = t.steps) || i.forEach((t)=>{\n                    null != t && t.selector && s.add(null == t ? void 0 : t.selector);\n                });\n            }), null == (r = this._instance) || r.autocapture.setElementSelectors(s);\n        }\n    }\n    on(t, i) {\n        var e;\n        null != i && 0 != t.length && (this.De.has(t) || this.De.has(null == i ? void 0 : i.event)) && this.Le && (null == (e = this.Le) ? void 0 : e.size) > 0 && this.Le.forEach((t)=>{\n            this.je(i, t) && this.Me.emit(\"actionCaptured\", t.name);\n        });\n    }\n    ze(t) {\n        this.onAction(\"actionCaptured\", (i)=>t(i));\n    }\n    je(t, i) {\n        if (null == (null == i ? void 0 : i.steps)) return !1;\n        for (var e of i.steps)if (this.Ce(t, e)) return !0;\n        return !1;\n    }\n    onAction(t, i) {\n        return this.Me.on(t, i);\n    }\n    Fe(t, i) {\n        if (null != i && i.url) {\n            var e, r = null == t || null == (e = t.properties) ? void 0 : e.$current_url;\n            if (!r || \"string\" != typeof r) return !1;\n            if (!po.Ue(r, null == i ? void 0 : i.url, (null == i ? void 0 : i.url_matching) || \"contains\")) return !1;\n        }\n        return !0;\n    }\n    static Ue(i, e, r) {\n        switch(r){\n            case \"regex\":\n                return !!t && Ns(i, e);\n            case \"exact\":\n                return e === i;\n            case \"contains\":\n                var s = po.qe(e).replace(/_/g, \".\").replace(/%/g, \".*\");\n                return Ns(i, s);\n            default:\n                return !1;\n        }\n    }\n    static qe(t) {\n        return t.replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\").replace(/-/g, \"\\\\x2d\");\n    }\n    Ae(t, i) {\n        if ((null != i && i.href || null != i && i.tag_name || null != i && i.text) && !this.Be(t).some((t)=>!(null != i && i.href && !po.Ue(t.href || \"\", null == i ? void 0 : i.href, (null == i ? void 0 : i.href_matching) || \"exact\")) && (null == i || !i.tag_name || t.tag_name === (null == i ? void 0 : i.tag_name)) && !(null != i && i.text && !po.Ue(t.text || \"\", null == i ? void 0 : i.text, (null == i ? void 0 : i.text_matching) || \"exact\") && !po.Ue(t.$el_text || \"\", null == i ? void 0 : i.text, (null == i ? void 0 : i.text_matching) || \"exact\")))) return !1;\n        if (null != i && i.selector) {\n            var e, r = null == t || null == (e = t.properties) ? void 0 : e.$element_selectors;\n            if (!r) return !1;\n            if (!r.includes(null == i ? void 0 : i.selector)) return !1;\n        }\n        return !0;\n    }\n    Be(t) {\n        return null == (null == t ? void 0 : t.properties.$elements) ? [] : null == t ? void 0 : t.properties.$elements;\n    }\n    constructor(t){\n        this.Me = new fo, this.Ce = (t, i)=>this.Oe(t, i) && this.Fe(t, i) && this.Ae(t, i), this.Oe = (t, i)=>null == i || !i.event || (null == t ? void 0 : t.event) === (null == i ? void 0 : i.event), this._instance = t, this.De = new Set, this.Le = new Set;\n    }\n}\nvar go = z(\"[Surveys]\");\nclass _o {\n    register(t) {\n        var i;\n        R(null == (i = this._instance) ? void 0 : i.Ne) || (this.Ge(t), this.Je(t));\n    }\n    Je(t) {\n        var i = t.filter((t)=>{\n            var i, e;\n            return (null == (i = t.conditions) ? void 0 : i.actions) && (null == (e = t.conditions) || null == (e = e.actions) || null == (e = e.values) ? void 0 : e.length) > 0;\n        });\n        if (0 !== i.length) {\n            if (null == this.Ve) {\n                this.Ve = new po(this._instance), this.Ve.init();\n                this.Ve.ze((t)=>{\n                    this.onAction(t);\n                });\n            }\n            i.forEach((t)=>{\n                var i, e, r, s, n;\n                t.conditions && null != (i = t.conditions) && i.actions && null != (e = t.conditions) && null != (e = e.actions) && e.values && (null == (r = t.conditions) || null == (r = r.actions) || null == (r = r.values) ? void 0 : r.length) > 0 && (null == (s = this.Ve) || s.register(t.conditions.actions.values), null == (n = t.conditions) || null == (n = n.actions) || null == (n = n.values) || n.forEach((i)=>{\n                    if (i && i.name) {\n                        var e = this.We.get(i.name);\n                        e && e.push(t.id), this.We.set(i.name, e || [\n                            t.id\n                        ]);\n                    }\n                }));\n            });\n        }\n    }\n    Ge(t) {\n        var i;\n        if (0 !== t.filter((t)=>{\n            var i, e;\n            return (null == (i = t.conditions) ? void 0 : i.events) && (null == (e = t.conditions) || null == (e = e.events) || null == (e = e.values) ? void 0 : e.length) > 0;\n        }).length) {\n            null == (i = this._instance) || i.Ne((t, i)=>{\n                this.onEvent(t, i);\n            }), t.forEach((t)=>{\n                var i;\n                null == (i = t.conditions) || null == (i = i.events) || null == (i = i.values) || i.forEach((i)=>{\n                    if (i && i.name) {\n                        var e = this.He.get(i.name);\n                        e && e.push(t.id), this.He.set(i.name, e || [\n                            t.id\n                        ]);\n                    }\n                });\n            });\n        }\n    }\n    onEvent(t, i) {\n        var e, r = (null == (e = this._instance) || null == (e = e.persistence) ? void 0 : e.props[Ot]) || [];\n        if (\"survey shown\" === t && i && r.length > 0) {\n            var s;\n            go.info(\"survey event matched, removing survey from activated surveys\", {\n                event: t,\n                eventPayload: i,\n                existingActivatedSurveys: r\n            });\n            var n = null == i || null == (s = i.properties) ? void 0 : s.$survey_id;\n            if (n) {\n                var o = r.indexOf(n);\n                o >= 0 && (r.splice(o, 1), this.Ke(r));\n            }\n        } else this.He.has(t) && (go.info(\"survey event matched, updating activated surveys\", {\n            event: t,\n            surveys: this.He.get(t)\n        }), this.Ke(r.concat(this.He.get(t) || [])));\n    }\n    onAction(t) {\n        var i, e = (null == (i = this._instance) || null == (i = i.persistence) ? void 0 : i.props[Ot]) || [];\n        this.We.has(t) && this.Ke(e.concat(this.We.get(t) || []));\n    }\n    Ke(t) {\n        var i;\n        null == (i = this._instance) || null == (i = i.persistence) || i.register({\n            [Ot]: [\n                ...new Set(t)\n            ]\n        });\n    }\n    getSurveys() {\n        var t, i = null == (t = this._instance) || null == (t = t.persistence) ? void 0 : t.props[Ot];\n        return i || [];\n    }\n    getEventToSurveys() {\n        return this.He;\n    }\n    Ye() {\n        return this.Ve;\n    }\n    constructor(t){\n        this._instance = t, this.He = new Map, this.We = new Map;\n    }\n}\nclass mo {\n    onRemoteConfig(t) {\n        var i = t.surveys;\n        if (O(i)) return go.warn(\"Decide not loaded yet. Not loading surveys.\");\n        var e = x(i);\n        this.ir = e ? i.length > 0 : i, go.info(\"decide response received, hasSurveys: \" + this.ir), this.ir && this.loadIfEnabled();\n    }\n    reset() {\n        localStorage.removeItem(\"lastSeenSurveyDate\");\n        for(var t = [], i = 0; i < localStorage.length; i++){\n            var e = localStorage.key(i);\n            (null != e && e.startsWith(\"seenSurvey_\") || null != e && e.startsWith(\"inProgressSurvey_\")) && t.push(e);\n        }\n        t.forEach((t)=>localStorage.removeItem(t));\n    }\n    loadIfEnabled() {\n        if (!this.Xe) if (this.Ze) go.info(\"Already initializing surveys, skipping...\");\n        else if (this._instance.config.disable_surveys) go.info(\"Disabled. Not loading surveys.\");\n        else if (this.ir) {\n            var t = null == v ? void 0 : v.__PosthogExtensions__;\n            if (t) {\n                this.Ze = !0;\n                try {\n                    var i = t.generateSurveys;\n                    if (i) return void this.er(i);\n                    var e = t.loadExternalDependency;\n                    if (!e) return void this.rr(\"PostHog loadExternalDependency extension not found.\");\n                    e(this._instance, \"surveys\", (i)=>{\n                        i || !t.generateSurveys ? this.rr(\"Could not load surveys script\", i) : this.er(t.generateSurveys);\n                    });\n                } catch (t) {\n                    throw this.rr(\"Error initializing surveys\", t), t;\n                } finally{\n                    this.Ze = !1;\n                }\n            } else go.error(\"PostHog Extensions not found.\");\n        } else go.info(\"No surveys to load.\");\n    }\n    er(t) {\n        this.Xe = t(this._instance), this._surveyEventReceiver = new _o(this._instance), go.info(\"Surveys loaded successfully\"), this.sr({\n            isLoaded: !0\n        });\n    }\n    rr(t, i) {\n        go.error(t, i), this.sr({\n            isLoaded: !1,\n            error: t\n        });\n    }\n    onSurveysLoaded(t) {\n        return this.tr.push(t), this.Xe && this.sr({\n            isLoaded: !0\n        }), ()=>{\n            this.tr = this.tr.filter((i)=>i !== t);\n        };\n    }\n    getSurveys(t, i) {\n        if (void 0 === i && (i = !1), this._instance.config.disable_surveys) return go.info(\"Disabled. Not loading surveys.\"), t([]);\n        var e = this._instance.get_property(Ct);\n        if (e && !i) return t(e, {\n            isLoaded: !0\n        });\n        if (this.Qe) return t([], {\n            isLoaded: !1,\n            error: \"Surveys are already being loaded\"\n        });\n        try {\n            this.Qe = !0, this._instance.me({\n                url: this._instance.requestRouter.endpointFor(\"api\", \"/api/surveys/?token=\" + this._instance.config.token),\n                method: \"GET\",\n                timeout: this._instance.config.surveys_request_timeout_ms,\n                callback: (i)=>{\n                    var e;\n                    this.Qe = !1;\n                    var r = i.statusCode;\n                    if (200 !== r || !i.json) {\n                        var s = \"Surveys API could not be loaded, status: \" + r;\n                        return go.error(s), t([], {\n                            isLoaded: !1,\n                            error: s\n                        });\n                    }\n                    var n, o = i.json.surveys || [], a = o.filter((t)=>(function(t) {\n                            return !(!t.start_date || t.end_date);\n                        })(t) && (function(t) {\n                            var i;\n                            return !(null == (i = t.conditions) || null == (i = i.events) || null == (i = i.values) || !i.length);\n                        }(t) || function(t) {\n                            var i;\n                            return !(null == (i = t.conditions) || null == (i = i.actions) || null == (i = i.values) || !i.length);\n                        }(t)));\n                    a.length > 0 && (null == (n = this._surveyEventReceiver) || n.register(a));\n                    return null == (e = this._instance.persistence) || e.register({\n                        [Ct]: o\n                    }), t(o, {\n                        isLoaded: !0\n                    });\n                }\n            });\n        } catch (t) {\n            throw this.Qe = !1, t;\n        }\n    }\n    sr(t) {\n        for (var i of this.tr)try {\n            t.isLoaded ? this.getSurveys(i) : i([], t);\n        } catch (t) {\n            go.error(\"Error in survey callback\", t);\n        }\n    }\n    getActiveMatchingSurveys(t, i) {\n        if (void 0 === i && (i = !1), !O(this.Xe)) return this.Xe.getActiveMatchingSurveys(t, i);\n        go.warn(\"init was not called\");\n    }\n    nr(t) {\n        var i = null;\n        return this.getSurveys((e)=>{\n            var r;\n            i = null !== (r = e.find((i)=>i.id === t)) && void 0 !== r ? r : null;\n        }), i;\n    }\n    ar(t) {\n        if (O(this.Xe)) return {\n            eligible: !1,\n            reason: \"SDK is not enabled or survey functionality is not yet loaded\"\n        };\n        var i = \"string\" == typeof t ? this.nr(t) : t;\n        return i ? this.Xe.checkSurveyEligibility(i) : {\n            eligible: !1,\n            reason: \"Survey not found\"\n        };\n    }\n    canRenderSurvey(t) {\n        if (O(this.Xe)) return go.warn(\"init was not called\"), {\n            visible: !1,\n            disabledReason: \"SDK is not enabled or survey functionality is not yet loaded\"\n        };\n        var i = this.ar(t);\n        return {\n            visible: i.eligible,\n            disabledReason: i.reason\n        };\n    }\n    canRenderSurveyAsync(t, i) {\n        return O(this.Xe) ? (go.warn(\"init was not called\"), Promise.resolve({\n            visible: !1,\n            disabledReason: \"SDK is not enabled or survey functionality is not yet loaded\"\n        })) : new Promise((e)=>{\n            this.getSurveys((i)=>{\n                var r, s = null !== (r = i.find((i)=>i.id === t)) && void 0 !== r ? r : null;\n                if (s) {\n                    var n = this.ar(s);\n                    e({\n                        visible: n.eligible,\n                        disabledReason: n.reason\n                    });\n                } else e({\n                    visible: !1,\n                    disabledReason: \"Survey not found\"\n                });\n            }, i);\n        });\n    }\n    renderSurvey(t, i) {\n        if (O(this.Xe)) go.warn(\"init was not called\");\n        else {\n            var e = this.nr(t), r = null == o ? void 0 : o.querySelector(i);\n            e ? r ? this.Xe.renderSurvey(e, r) : go.warn(\"Survey element not found\") : go.warn(\"Survey not found\");\n        }\n    }\n    constructor(t){\n        this.Xe = null, this.Qe = !1, this.Ze = !1, this.tr = [], this._instance = t, this._surveyEventReceiver = null;\n    }\n}\nvar bo = z(\"[RateLimiter]\");\nclass wo {\n    clientRateLimitContext(t) {\n        var i, e, r;\n        void 0 === t && (t = !1);\n        var s = (new Date).getTime(), n = null !== (i = null == (e = this.instance.persistence) ? void 0 : e.get_property(Lt)) && void 0 !== i ? i : {\n            tokens: this.captureEventsBurstLimit,\n            last: s\n        };\n        n.tokens += (s - n.last) / 1e3 * this.captureEventsPerSecond, n.last = s, n.tokens > this.captureEventsBurstLimit && (n.tokens = this.captureEventsBurstLimit);\n        var o = n.tokens < 1;\n        return o || t || (n.tokens = Math.max(0, n.tokens - 1)), !o || this.lastEventRateLimited || t || this.instance.capture(\"$$client_ingestion_warning\", {\n            $$client_ingestion_warning_message: \"posthog-js client rate limited. Config is set to \" + this.captureEventsPerSecond + \" events per second and \" + this.captureEventsBurstLimit + \" events burst limit.\"\n        }, {\n            skip_client_rate_limiting: !0\n        }), this.lastEventRateLimited = o, null == (r = this.instance.persistence) || r.set_property(Lt, n), {\n            isRateLimited: o,\n            remainingTokens: n.tokens\n        };\n    }\n    isServerRateLimited(t) {\n        var i = this.serverLimits[t || \"events\"] || !1;\n        return !1 !== i && (new Date).getTime() < i;\n    }\n    constructor(t){\n        var i, e;\n        this.serverLimits = {}, this.lastEventRateLimited = !1, this.checkForLimiting = (t)=>{\n            var i = t.text;\n            if (i && i.length) try {\n                (JSON.parse(i).quota_limited || []).forEach((t)=>{\n                    bo.info((t || \"events\") + \" is quota limited.\"), this.serverLimits[t] = (new Date).getTime() + 6e4;\n                });\n            } catch (t) {\n                return void bo.warn('could not rate limit - continuing. Error: \"' + (null == t ? void 0 : t.message) + '\"', {\n                    text: i\n                });\n            }\n        }, this.instance = t, this.captureEventsPerSecond = (null == (i = t.config.rate_limiting) ? void 0 : i.events_per_second) || 10, this.captureEventsBurstLimit = Math.max((null == (e = t.config.rate_limiting) ? void 0 : e.events_burst_limit) || 10 * this.captureEventsPerSecond, this.captureEventsPerSecond), this.lastEventRateLimited = this.clientRateLimitContext(!0).isRateLimited;\n    }\n}\nvar yo = z(\"[RemoteConfig]\");\nclass So {\n    get remoteConfig() {\n        var t;\n        return null == (t = v._POSTHOG_REMOTE_CONFIG) || null == (t = t[this._instance.config.token]) ? void 0 : t.config;\n    }\n    lr(t) {\n        var i, e;\n        null != (i = v.__PosthogExtensions__) && i.loadExternalDependency ? null == (e = v.__PosthogExtensions__) || null == e.loadExternalDependency || e.loadExternalDependency(this._instance, \"remote-config\", ()=>t(this.remoteConfig)) : (yo.error(\"PostHog Extensions not found. Cannot load remote config.\"), t());\n    }\n    ur(t) {\n        this._instance.me({\n            method: \"GET\",\n            url: this._instance.requestRouter.endpointFor(\"assets\", \"/array/\" + this._instance.config.token + \"/config\"),\n            callback: (i)=>{\n                t(i.json);\n            }\n        });\n    }\n    load() {\n        try {\n            if (this.remoteConfig) return yo.info(\"Using preloaded remote config\", this.remoteConfig), void this.be(this.remoteConfig);\n            if (this._instance.config.advanced_disable_decide) return void yo.warn(\"Remote config is disabled. Falling back to local config.\");\n            this.lr((t)=>{\n                if (!t) return yo.info(\"No config found after loading remote JS config. Falling back to JSON.\"), void this.ur((t)=>{\n                    this.be(t);\n                });\n                this.be(t);\n            });\n        } catch (t) {\n            yo.error(\"Error loading remote config\", t);\n        }\n    }\n    be(t) {\n        t ? this._instance.config.__preview_remote_config ? (this._instance.be(t), !1 !== t.hasFeatureFlags && this._instance.featureFlags.ensureFlagsLoaded()) : yo.info(\"__preview_remote_config is disabled. Logging config instead\", t) : yo.error(\"Failed to fetch remote config from PostHog.\");\n    }\n    constructor(t){\n        this._instance = t;\n    }\n}\nvar $o = 3e3;\nclass ko {\n    enqueue(t) {\n        this.dr.push(t), this.pr || this.gr();\n    }\n    unload() {\n        this._r();\n        var t = this.dr.length > 0 ? this.mr() : {}, i = Object.values(t);\n        [\n            ...i.filter((t)=>0 === t.url.indexOf(\"/e\")),\n            ...i.filter((t)=>0 !== t.url.indexOf(\"/e\"))\n        ].map((t)=>{\n            this.cr(B({}, t, {\n                transport: \"sendBeacon\"\n            }));\n        });\n    }\n    enable() {\n        this.hr = !1, this.gr();\n    }\n    gr() {\n        var t = this;\n        this.hr || (this.pr = setTimeout(()=>{\n            if (this._r(), this.dr.length > 0) {\n                var i = this.mr(), e = function() {\n                    var e = i[r], s = (new Date).getTime();\n                    e.data && x(e.data) && J(e.data, (t)=>{\n                        t.offset = Math.abs(t.timestamp - s), delete t.timestamp;\n                    }), t.cr(e);\n                };\n                for(var r in i)e();\n            }\n        }, this.vr));\n    }\n    _r() {\n        clearTimeout(this.pr), this.pr = void 0;\n    }\n    mr() {\n        var t = {};\n        return J(this.dr, (i)=>{\n            var e, r = i, s = (r ? r.batchKey : null) || r.url;\n            R(t[s]) && (t[s] = B({}, r, {\n                data: []\n            })), null == (e = t[s].data) || e.push(r.data);\n        }), this.dr = [], t;\n    }\n    constructor(t, i){\n        this.hr = !0, this.dr = [], this.vr = Xe((null == i ? void 0 : i.flush_interval_ms) || $o, 250, 5e3, \"flush interval\", $o), this.cr = t;\n    }\n}\nvar xo = [\n    \"retriesPerformedSoFar\"\n];\nclass Eo {\n    get length() {\n        return this.dr.length;\n    }\n    retriableRequest(t) {\n        var { retriesPerformedSoFar: i } = t, e = H(t, xo);\n        F(i) && i > 0 && (e.url = Fs(e.url, {\n            retry_count: i\n        })), this._instance.me(B({}, e, {\n            callback: (t)=>{\n                200 !== t.statusCode && (t.statusCode < 400 || t.statusCode >= 500) && (null != i ? i : 0) < 10 ? this.Sr(B({\n                    retriesPerformedSoFar: i\n                }, e)) : null == e.callback || e.callback(t);\n            }\n        }));\n    }\n    Sr(t) {\n        var i = t.retriesPerformedSoFar || 0;\n        t.retriesPerformedSoFar = i + 1;\n        var e = function(t) {\n            var i = 3e3 * Math.pow(2, t), e = i / 2, r = Math.min(18e5, i), s = (Math.random() - .5) * (r - e);\n            return Math.ceil(r + s);\n        }(i), r = Date.now() + e;\n        this.dr.push({\n            retryAt: r,\n            requestOptions: t\n        });\n        var s = \"Enqueued failed request for retry in \" + e;\n        navigator.onLine || (s += \" (Browser is offline)\"), j.warn(s), this.br || (this.br = !0, this.$r());\n    }\n    $r() {\n        this.kr && clearTimeout(this.kr), this.kr = setTimeout(()=>{\n            this.yr && this.dr.length > 0 && this.Yi(), this.$r();\n        }, this.wr);\n    }\n    Yi() {\n        var t = Date.now(), i = [], e = this.dr.filter((e)=>e.retryAt < t || (i.push(e), !1));\n        if (this.dr = i, e.length > 0) for (var { requestOptions: r } of e)this.retriableRequest(r);\n    }\n    unload() {\n        for (var { requestOptions: t } of (this.kr && (clearTimeout(this.kr), this.kr = void 0), this.dr))try {\n            this._instance.me(B({}, t, {\n                transport: \"sendBeacon\"\n            }));\n        } catch (t) {\n            j.error(t);\n        }\n        this.dr = [];\n    }\n    constructor(i){\n        this.br = !1, this.wr = 3e3, this.dr = [], this._instance = i, this.dr = [], this.yr = !0, !R(t) && \"onLine\" in t.navigator && (this.yr = t.navigator.onLine, st(t, \"online\", ()=>{\n            this.yr = !0, this.Yi();\n        }), st(t, \"offline\", ()=>{\n            this.yr = !1;\n        }));\n    }\n}\nclass Io {\n    getContext() {\n        return this.Ir;\n    }\n    resetContext() {\n        var t = this.Ir;\n        return setTimeout(this.Er, 0), t;\n    }\n    startMeasuringScrollPosition() {\n        st(t, \"scroll\", this.Er, {\n            capture: !0\n        }), st(t, \"scrollend\", this.Er, {\n            capture: !0\n        }), st(t, \"resize\", this.Er);\n    }\n    scrollElement() {\n        if (!this._instance.config.scroll_root_selector) return null == t ? void 0 : t.document.documentElement;\n        var i = x(this._instance.config.scroll_root_selector) ? this._instance.config.scroll_root_selector : [\n            this._instance.config.scroll_root_selector\n        ];\n        for (var e of i){\n            var r = null == t ? void 0 : t.document.querySelector(e);\n            if (r) return r;\n        }\n    }\n    scrollY() {\n        if (this._instance.config.scroll_root_selector) {\n            var i = this.scrollElement();\n            return i && i.scrollTop || 0;\n        }\n        return t && (t.scrollY || t.pageYOffset || t.document.documentElement.scrollTop) || 0;\n    }\n    scrollX() {\n        if (this._instance.config.scroll_root_selector) {\n            var i = this.scrollElement();\n            return i && i.scrollLeft || 0;\n        }\n        return t && (t.scrollX || t.pageXOffset || t.document.documentElement.scrollLeft) || 0;\n    }\n    constructor(t){\n        this.Er = ()=>{\n            var t, i, e, r;\n            this.Ir || (this.Ir = {});\n            var s = this.scrollElement(), n = this.scrollY(), o = s ? Math.max(0, s.scrollHeight - s.clientHeight) : 0, a = n + ((null == s ? void 0 : s.clientHeight) || 0), l = (null == s ? void 0 : s.scrollHeight) || 0;\n            this.Ir.lastScrollY = Math.ceil(n), this.Ir.maxScrollY = Math.max(n, null !== (t = this.Ir.maxScrollY) && void 0 !== t ? t : 0), this.Ir.maxScrollHeight = Math.max(o, null !== (i = this.Ir.maxScrollHeight) && void 0 !== i ? i : 0), this.Ir.lastContentY = a, this.Ir.maxContentY = Math.max(a, null !== (e = this.Ir.maxContentY) && void 0 !== e ? e : 0), this.Ir.maxContentHeight = Math.max(l, null !== (r = this.Ir.maxContentHeight) && void 0 !== r ? r : 0);\n        }, this._instance = t;\n    }\n}\nvar Po = (t)=>Yn(null == t ? void 0 : t.config.mask_personal_data_properties, null == t ? void 0 : t.config.custom_personal_data_properties);\n_c47 = Po;\nclass Ro {\n    Rr() {\n        return this.Mr.props[Dt];\n    }\n    getSetOnceProps() {\n        var t, i = null == (t = this.Rr()) ? void 0 : t.props;\n        return i ? \"r\" in i ? Xn(i) : {\n            $referring_domain: i.referringDomain,\n            $pathname: i.initialPathName,\n            utm_source: i.utm_source,\n            utm_campaign: i.utm_campaign,\n            utm_medium: i.utm_medium,\n            utm_content: i.utm_content,\n            utm_term: i.utm_term\n        } : {};\n    }\n    getSessionProps() {\n        var t = {};\n        return J(Z(this.getSetOnceProps()), (i, e)=>{\n            \"$current_url\" === e && (e = \"url\"), t[\"$session_entry_\" + w(e)] = i;\n        }), t;\n    }\n    constructor(t, i, e, r){\n        this.Pr = (t)=>{\n            var i = this.Rr();\n            if (!i || i.sessionId !== t) {\n                var e = {\n                    sessionId: t,\n                    props: this.Tr(this._instance)\n                };\n                this.Mr.register({\n                    [Dt]: e\n                });\n            }\n        }, this._instance = t, this.Cr = i, this.Mr = e, this.Tr = r || Po, this.Cr.onSessionId(this.Pr);\n    }\n}\nvar To = z(\"[SessionId]\");\nclass Mo {\n    get sessionTimeoutMs() {\n        return this._sessionTimeoutMs;\n    }\n    onSessionId(t) {\n        return R(this.Or) && (this.Or = []), this.Or.push(t), this.kt && t(this.kt, this.oi), ()=>{\n            this.Or = this.Or.filter((i)=>i !== t);\n        };\n    }\n    jr() {\n        return \"memory\" !== this.S.persistence && !this.Mr.xe && Xi.O();\n    }\n    qr(t) {\n        t !== this.oi && (this.oi = t, this.jr() && Xi.L(this.Lr, t));\n    }\n    Br() {\n        return this.oi ? this.oi : this.jr() ? Xi.D(this.Lr) : null;\n    }\n    zr(t, i, e) {\n        t === this.kt && i === this._sessionActivityTimestamp && e === this._sessionStartTimestamp || (this._sessionStartTimestamp = e, this._sessionActivityTimestamp = i, this.kt = t, this.Mr.register({\n            [$t]: [\n                i,\n                t,\n                e\n            ]\n        }));\n    }\n    Hr() {\n        if (this.kt && this._sessionActivityTimestamp && this._sessionStartTimestamp) return [\n            this._sessionActivityTimestamp,\n            this.kt,\n            this._sessionStartTimestamp\n        ];\n        var t = this.Mr.props[$t];\n        return x(t) && 2 === t.length && t.push(t[0]), t || [\n            0,\n            null,\n            0\n        ];\n    }\n    resetSessionId() {\n        this.zr(null, null, null);\n    }\n    Ur() {\n        st(t, \"beforeunload\", ()=>{\n            this.jr() && Xi.N(this.Nr);\n        }, {\n            capture: !1\n        });\n    }\n    checkAndGetSessionAndWindowId(t, i) {\n        if (void 0 === t && (t = !1), void 0 === i && (i = null), this.S.__preview_experimental_cookieless_mode) throw new Error(\"checkAndGetSessionAndWindowId should not be called in __preview_experimental_cookieless_mode\");\n        var e = i || (new Date).getTime(), [r, s, n] = this.Hr(), o = this.Br(), a = F(n) && n > 0 && Math.abs(e - n) > 864e5, l = !1, u = !s, h = !t && Math.abs(e - r) > this.sessionTimeoutMs;\n        u || h || a ? (s = this.Fr(), o = this.Ar(), To.info(\"new session ID generated\", {\n            sessionId: s,\n            windowId: o,\n            changeReason: {\n                noSessionId: u,\n                activityTimeout: h,\n                sessionPastMaximumLength: a\n            }\n        }), n = e, l = !0) : o || (o = this.Ar(), l = !0);\n        var d = 0 === r || !t || a ? e : r, v = 0 === n ? (new Date).getTime() : n;\n        return this.qr(o), this.zr(s, d, v), t || this.Dr(), l && this.Or.forEach((t)=>t(s, o, l ? {\n                noSessionId: u,\n                activityTimeout: h,\n                sessionPastMaximumLength: a\n            } : void 0)), {\n            sessionId: s,\n            windowId: o,\n            sessionStartTimestamp: v,\n            changeReason: l ? {\n                noSessionId: u,\n                activityTimeout: h,\n                sessionPastMaximumLength: a\n            } : void 0,\n            lastActivityTimestamp: r\n        };\n    }\n    Dr() {\n        clearTimeout(this.Wr), this.Wr = setTimeout(()=>{\n            this.resetSessionId();\n        }, 1.1 * this.sessionTimeoutMs);\n    }\n    constructor(t, i, e){\n        var r;\n        if (this.Or = [], !t.persistence) throw new Error(\"SessionIdManager requires a PostHogPersistence instance\");\n        if (t.config.__preview_experimental_cookieless_mode) throw new Error(\"SessionIdManager cannot be used with __preview_experimental_cookieless_mode\");\n        this.S = t.config, this.Mr = t.persistence, this.oi = void 0, this.kt = void 0, this._sessionStartTimestamp = null, this._sessionActivityTimestamp = null, this.Fr = i || Ni, this.Ar = e || Ni;\n        var s = this.S.persistence_name || this.S.token, n = this.S.session_idle_timeout_seconds || 1800;\n        if (this._sessionTimeoutMs = 1e3 * Xe(n, 60, 36e3, \"session_idle_timeout_seconds\", 1800), t.register({\n            $configured_session_timeout_ms: this._sessionTimeoutMs\n        }), this.Dr(), this.Lr = \"ph_\" + s + \"_window_id\", this.Nr = \"ph_\" + s + \"_primary_window_exists\", this.jr()) {\n            var o = Xi.D(this.Lr), a = Xi.D(this.Nr);\n            o && !a ? this.oi = o : Xi.N(this.Lr), Xi.L(this.Nr, !0);\n        }\n        if (null != (r = this.S.bootstrap) && r.sessionID) try {\n            var l = ((t)=>{\n                var i = t.replace(/-/g, \"\");\n                if (32 !== i.length) throw new Error(\"Not a valid UUID\");\n                if (\"7\" !== i[12]) throw new Error(\"Not a UUIDv7\");\n                return parseInt(i.substring(0, 12), 16);\n            })(this.S.bootstrap.sessionID);\n            this.zr(this.S.bootstrap.sessionID, (new Date).getTime(), l);\n        } catch (t) {\n            To.error(\"Invalid sessionID in bootstrap\", t);\n        }\n        this.Ur();\n    }\n}\nvar Co = [\n    \"$set_once\",\n    \"$set\"\n], Oo = z(\"[SiteApps]\");\nclass Fo {\n    get isEnabled() {\n        return !!this._instance.config.opt_in_site_apps;\n    }\n    Jr(t, i) {\n        if (i) {\n            var e = this.globalsForEvent(i);\n            this.Gr.push(e), this.Gr.length > 1e3 && (this.Gr = this.Gr.slice(10));\n        }\n    }\n    get siteAppLoaders() {\n        var t;\n        return null == (t = v._POSTHOG_REMOTE_CONFIG) || null == (t = t[this._instance.config.token]) ? void 0 : t.siteApps;\n    }\n    init() {\n        if (this.isEnabled) {\n            var t = this._instance.Ne(this.Jr.bind(this));\n            this.Vr = ()=>{\n                t(), this.Gr = [], this.Vr = void 0;\n            };\n        }\n    }\n    globalsForEvent(t) {\n        var i, e, r, s, n, o, a;\n        if (!t) throw new Error(\"Event payload is required\");\n        var l = {}, u = this._instance.get_property(\"$groups\") || [], h = this._instance.get_property(\"$stored_group_properties\") || {};\n        for (var [d, v] of Object.entries(h))l[d] = {\n            id: u[d],\n            type: d,\n            properties: v\n        };\n        var { $set_once: c, $set: f } = t;\n        return {\n            event: B({}, H(t, Co), {\n                properties: B({}, t.properties, f ? {\n                    $set: B({}, null !== (i = null == (e = t.properties) ? void 0 : e.$set) && void 0 !== i ? i : {}, f)\n                } : {}, c ? {\n                    $set_once: B({}, null !== (r = null == (s = t.properties) ? void 0 : s.$set_once) && void 0 !== r ? r : {}, c)\n                } : {}),\n                elements_chain: null !== (n = null == (o = t.properties) ? void 0 : o.$elements_chain) && void 0 !== n ? n : \"\",\n                distinct_id: null == (a = t.properties) ? void 0 : a.distinct_id\n            }),\n            person: {\n                properties: this._instance.get_property(\"$stored_person_properties\")\n            },\n            groups: l\n        };\n    }\n    setupSiteApp(t) {\n        var i = this.apps[t.id], e = ()=>{\n            var e;\n            (!i.errored && this.Gr.length && (Oo.info(\"Processing \" + this.Gr.length + \" events for site app with id \" + t.id), this.Gr.forEach((t)=>null == i.processEvent ? void 0 : i.processEvent(t)), i.processedBuffer = !0), Object.values(this.apps).every((t)=>t.processedBuffer || t.errored)) && (null == (e = this.Vr) || e.call(this));\n        }, r = !1, s = (s)=>{\n            i.errored = !s, i.loaded = !0, Oo.info(\"Site app with id \" + t.id + \" \" + (s ? \"loaded\" : \"errored\")), r && e();\n        };\n        try {\n            var { processEvent: n } = t.init({\n                posthog: this._instance,\n                callback: (t)=>{\n                    s(t);\n                }\n            });\n            n && (i.processEvent = n), r = !0;\n        } catch (i) {\n            Oo.error(\"Error while initializing PostHog app with config id \" + t.id, i), s(!1);\n        }\n        if (r && i.loaded) try {\n            e();\n        } catch (e) {\n            Oo.error(\"Error while processing buffered events PostHog app with config id \" + t.id, e), i.errored = !0;\n        }\n    }\n    Kr() {\n        var t = this.siteAppLoaders || [];\n        for (var i of t)this.apps[i.id] = {\n            id: i.id,\n            loaded: !1,\n            errored: !1,\n            processedBuffer: !1\n        };\n        for (var e of t)this.setupSiteApp(e);\n    }\n    Yr(t) {\n        if (0 !== Object.keys(this.apps).length) {\n            var i = this.globalsForEvent(t);\n            for (var e of Object.values(this.apps))try {\n                null == e.processEvent || e.processEvent(i);\n            } catch (i) {\n                Oo.error(\"Error while processing event \" + t.event + \" for site app \" + e.id, i);\n            }\n        }\n    }\n    onRemoteConfig(t) {\n        var i, e, r, s = this;\n        if (null != (i = this.siteAppLoaders) && i.length) return this.isEnabled ? (this.Kr(), void this._instance.on(\"eventCaptured\", (t)=>this.Yr(t))) : void Oo.error('PostHog site apps are disabled. Enable the \"opt_in_site_apps\" config to proceed.');\n        if (null == (e = this.Vr) || e.call(this), null != (r = t.siteApps) && r.length) if (this.isEnabled) {\n            var n = function(t) {\n                var i;\n                v[\"__$$ph_site_app_\" + t] = s._instance, null == (i = v.__PosthogExtensions__) || null == i.loadSiteApp || i.loadSiteApp(s._instance, a, (i)=>{\n                    if (i) return Oo.error(\"Error while initializing PostHog app with config id \" + t, i);\n                });\n            };\n            for (var { id: o, url: a } of t.siteApps)n(o);\n        } else Oo.error('PostHog site apps are disabled. Enable the \"opt_in_site_apps\" config to proceed.');\n    }\n    constructor(t){\n        this._instance = t, this.Gr = [], this.apps = {};\n    }\n}\nvar Ao = [\n    \"amazonbot\",\n    \"amazonproductbot\",\n    \"app.hypefactors.com\",\n    \"applebot\",\n    \"archive.org_bot\",\n    \"awariobot\",\n    \"backlinksextendedbot\",\n    \"baiduspider\",\n    \"bingbot\",\n    \"bingpreview\",\n    \"chrome-lighthouse\",\n    \"dataforseobot\",\n    \"deepscan\",\n    \"duckduckbot\",\n    \"facebookexternal\",\n    \"facebookcatalog\",\n    \"http://yandex.com/bots\",\n    \"hubspot\",\n    \"ia_archiver\",\n    \"linkedinbot\",\n    \"meta-externalagent\",\n    \"mj12bot\",\n    \"msnbot\",\n    \"nessus\",\n    \"petalbot\",\n    \"pinterest\",\n    \"prerender\",\n    \"rogerbot\",\n    \"screaming frog\",\n    \"sebot-wa\",\n    \"sitebulb\",\n    \"slackbot\",\n    \"slurp\",\n    \"trendictionbot\",\n    \"turnitin\",\n    \"twitterbot\",\n    \"vercelbot\",\n    \"yahoo! slurp\",\n    \"yandexbot\",\n    \"zoombot\",\n    \"bot.htm\",\n    \"bot.php\",\n    \"(bot;\",\n    \"bot/\",\n    \"crawler\",\n    \"ahrefsbot\",\n    \"ahrefssiteaudit\",\n    \"semrushbot\",\n    \"siteauditbot\",\n    \"splitsignalbot\",\n    \"gptbot\",\n    \"oai-searchbot\",\n    \"chatgpt-user\",\n    \"perplexitybot\",\n    \"better uptime bot\",\n    \"sentryuptimebot\",\n    \"uptimerobot\",\n    \"headlesschrome\",\n    \"cypress\",\n    \"google-hoteladsverifier\",\n    \"adsbot-google\",\n    \"apis-google\",\n    \"duplexweb-google\",\n    \"feedfetcher-google\",\n    \"google favicon\",\n    \"google web preview\",\n    \"google-read-aloud\",\n    \"googlebot\",\n    \"googleother\",\n    \"google-cloudvertexbot\",\n    \"googleweblight\",\n    \"mediapartners-google\",\n    \"storebot-google\",\n    \"google-inspectiontool\",\n    \"bytespider\"\n], Do = function(t, i) {\n    if (!t) return !1;\n    var e = t.toLowerCase();\n    return Ao.concat(i || []).some((t)=>{\n        var i = t.toLowerCase();\n        return -1 !== e.indexOf(i);\n    });\n}, Lo = function(t, i) {\n    if (!t) return !1;\n    var e = t.userAgent;\n    if (e && Do(e, i)) return !0;\n    try {\n        var r = null == t ? void 0 : t.userAgentData;\n        if (null != r && r.brands && r.brands.some((t)=>Do(null == t ? void 0 : t.brand, i))) return !0;\n    } catch (t) {}\n    return !!t.webdriver;\n}, No = function(t) {\n    return t.US = \"us\", t.EU = \"eu\", t.CUSTOM = \"custom\", t;\n}({}), jo = \"i.posthog.com\";\nclass zo {\n    get apiHost() {\n        var t = this.instance.config.api_host.trim().replace(/\\/$/, \"\");\n        return \"https://app.posthog.com\" === t ? \"https://us.i.posthog.com\" : t;\n    }\n    get uiHost() {\n        var t, i = null == (t = this.instance.config.ui_host) ? void 0 : t.replace(/\\/$/, \"\");\n        return i || (i = this.apiHost.replace(\".\" + jo, \".posthog.com\")), \"https://app.posthog.com\" === i ? \"https://us.posthog.com\" : i;\n    }\n    get region() {\n        return this.Xr[this.apiHost] || (/https:\\/\\/(app|us|us-assets)(\\.i)?\\.posthog\\.com/i.test(this.apiHost) ? this.Xr[this.apiHost] = No.US : /https:\\/\\/(eu|eu-assets)(\\.i)?\\.posthog\\.com/i.test(this.apiHost) ? this.Xr[this.apiHost] = No.EU : this.Xr[this.apiHost] = No.CUSTOM), this.Xr[this.apiHost];\n    }\n    endpointFor(t, i) {\n        if (void 0 === i && (i = \"\"), i && (i = \"/\" === i[0] ? i : \"/\" + i), \"ui\" === t) return this.uiHost + i;\n        if (this.region === No.CUSTOM) return this.apiHost + i;\n        var e = jo + i;\n        switch(t){\n            case \"assets\":\n                return \"https://\" + this.region + \"-assets.\" + e;\n            case \"api\":\n                return \"https://\" + this.region + \".\" + e;\n        }\n    }\n    constructor(t){\n        this.Xr = {}, this.instance = t;\n    }\n}\nvar Uo = {\n    icontains: (i, e)=>!!t && e.href.toLowerCase().indexOf(i.toLowerCase()) > -1,\n    not_icontains: (i, e)=>!!t && -1 === e.href.toLowerCase().indexOf(i.toLowerCase()),\n    regex: (i, e)=>!!t && Ns(e.href, i),\n    not_regex: (i, e)=>!!t && !Ns(e.href, i),\n    exact: (t, i)=>i.href === t,\n    is_not: (t, i)=>i.href !== t\n};\nclass qo {\n    onFeatureFlags(t) {\n        if (this._is_bot()) qo.Qr(\"Refusing to render web experiment since the viewer is a likely bot\");\n        else if (!this._instance.config.disable_web_experiments) {\n            if (O(this.Zr)) return this.Zr = new Map, this.loadIfEnabled(), void this.previewWebExperiment();\n            qo.Qr(\"applying feature flags\", t), t.forEach((t)=>{\n                var i;\n                if (this.Zr && null != (i = this.Zr) && i.has(t)) {\n                    var e, r = this._instance.getFeatureFlag(t), s = null == (e = this.Zr) ? void 0 : e.get(t);\n                    r && null != s && s.variants[r] && this.ts(s.name, r, s.variants[r].transforms);\n                }\n            });\n        }\n    }\n    previewWebExperiment() {\n        var t = qo.getWindowLocation();\n        if (null != t && t.search) {\n            var i = $i(null == t ? void 0 : t.search, \"__experiment_id\"), e = $i(null == t ? void 0 : t.search, \"__experiment_variant\");\n            i && e && (qo.Qr(\"previewing web experiments \" + i + \" && \" + e), this.getWebExperiments((t)=>{\n                this.rs(parseInt(i), e, t);\n            }, !1, !0));\n        }\n    }\n    loadIfEnabled() {\n        this._instance.config.disable_web_experiments || this.getWebExperimentsAndEvaluateDisplayLogic();\n    }\n    getWebExperiments(t, i, e) {\n        if (this._instance.config.disable_web_experiments && !e) return t([]);\n        var r = this._instance.get_property(\"$web_experiments\");\n        if (r && !i) return t(r);\n        this._instance.me({\n            url: this._instance.requestRouter.endpointFor(\"api\", \"/api/web_experiments/?token=\" + this._instance.config.token),\n            method: \"GET\",\n            callback: (i)=>{\n                if (200 !== i.statusCode || !i.json) return t([]);\n                var e = i.json.experiments || [];\n                return t(e);\n            }\n        });\n    }\n    rs(t, i, e) {\n        var r = e.filter((i)=>i.id === t);\n        r && r.length > 0 && (qo.Qr(\"Previewing web experiment [\" + r[0].name + \"] with variant [\" + i + \"]\"), this.ts(r[0].name, i, r[0].variants[i].transforms));\n    }\n    static es(t) {\n        return !O(t.conditions) && qo.ss(t) && qo.ns(t);\n    }\n    static ss(t) {\n        var i;\n        if (O(t.conditions) || O(null == (i = t.conditions) ? void 0 : i.url)) return !0;\n        var e, r, s, n = qo.getWindowLocation();\n        return !!n && (null == (e = t.conditions) || !e.url || Uo[null !== (r = null == (s = t.conditions) ? void 0 : s.urlMatchType) && void 0 !== r ? r : \"icontains\"](t.conditions.url, n));\n    }\n    static getWindowLocation() {\n        return null == t ? void 0 : t.location;\n    }\n    static ns(t) {\n        var i;\n        if (O(t.conditions) || O(null == (i = t.conditions) ? void 0 : i.utm)) return !0;\n        var e = Wn();\n        if (e.utm_source) {\n            var r, s, n, o, a, l, u, h, d = null == (r = t.conditions) || null == (r = r.utm) || !r.utm_campaign || (null == (s = t.conditions) || null == (s = s.utm) ? void 0 : s.utm_campaign) == e.utm_campaign, v = null == (n = t.conditions) || null == (n = n.utm) || !n.utm_source || (null == (o = t.conditions) || null == (o = o.utm) ? void 0 : o.utm_source) == e.utm_source, c = null == (a = t.conditions) || null == (a = a.utm) || !a.utm_medium || (null == (l = t.conditions) || null == (l = l.utm) ? void 0 : l.utm_medium) == e.utm_medium, f = null == (u = t.conditions) || null == (u = u.utm) || !u.utm_term || (null == (h = t.conditions) || null == (h = h.utm) ? void 0 : h.utm_term) == e.utm_term;\n            return d && c && f && v;\n        }\n        return !1;\n    }\n    static Qr(t) {\n        for(var i = arguments.length, e = new Array(i > 1 ? i - 1 : 0), r = 1; r < i; r++)e[r - 1] = arguments[r];\n        j.info(\"[WebExperiments] \" + t, e);\n    }\n    ts(t, i, e) {\n        this._is_bot() ? qo.Qr(\"Refusing to render web experiment since the viewer is a likely bot\") : \"control\" !== i ? e.forEach((e)=>{\n            if (e.selector) {\n                var r;\n                qo.Qr(\"applying transform of variant \" + i + \" for experiment \" + t + \" \", e);\n                var s = null == (r = document) ? void 0 : r.querySelectorAll(e.selector);\n                null == s || s.forEach((t)=>{\n                    var i = t;\n                    e.html && (i.innerHTML = e.html), e.css && i.setAttribute(\"style\", e.css);\n                });\n            }\n        }) : qo.Qr(\"Control variants leave the page unmodified.\");\n    }\n    _is_bot() {\n        return n && this._instance ? Lo(n, this._instance.config.custom_blocked_useragents) : void 0;\n    }\n    constructor(t){\n        var i = this;\n        this.getWebExperimentsAndEvaluateDisplayLogic = function(t) {\n            void 0 === t && (t = !1), i.getWebExperiments((t)=>{\n                qo.Qr(\"retrieved web experiments from the server\"), i.Zr = new Map, t.forEach((t)=>{\n                    if (t.feature_flag_key) {\n                        var e;\n                        if (i.Zr) qo.Qr(\"setting flag key \", t.feature_flag_key, \" to web experiment \", t), null == (e = i.Zr) || e.set(t.feature_flag_key, t);\n                        var r = i._instance.getFeatureFlag(t.feature_flag_key);\n                        T(r) && t.variants[r] && i.ts(t.name, r, t.variants[r].transforms);\n                    } else if (t.variants) for(var s in t.variants){\n                        var n = t.variants[s];\n                        qo.es(n) && i.ts(t.name, s, n.transforms);\n                    }\n                });\n            }, t);\n        }, this._instance = t, this._instance.onFeatureFlags((t)=>{\n            this.onFeatureFlags(t);\n        });\n    }\n}\nvar Bo = {}, Ho = ()=>{}, Wo = \"posthog\", Go = !Cs && -1 === (null == d ? void 0 : d.indexOf(\"MSIE\")) && -1 === (null == d ? void 0 : d.indexOf(\"Mozilla\")), Jo = ()=>{\n    var i;\n    return {\n        api_host: \"https://us.i.posthog.com\",\n        ui_host: null,\n        token: \"\",\n        autocapture: !0,\n        rageclick: !0,\n        cross_subdomain_cookie: et(null == o ? void 0 : o.location),\n        persistence: \"localStorage+cookie\",\n        persistence_name: \"\",\n        loaded: Ho,\n        save_campaign_params: !0,\n        custom_campaign_params: [],\n        custom_blocked_useragents: [],\n        save_referrer: !0,\n        capture_pageview: !0,\n        capture_pageleave: \"if_capture_pageview\",\n        debug: a && T(null == a ? void 0 : a.search) && -1 !== a.search.indexOf(\"__posthog_debug=true\") || !1,\n        cookie_expiration: 365,\n        upgrade: !1,\n        disable_session_recording: !1,\n        disable_persistence: !1,\n        disable_web_experiments: !0,\n        disable_surveys: !1,\n        disable_external_dependency_loading: !1,\n        enable_recording_console_log: void 0,\n        secure_cookie: \"https:\" === (null == t || null == (i = t.location) ? void 0 : i.protocol),\n        ip: !0,\n        opt_out_capturing_by_default: !1,\n        opt_out_persistence_by_default: !1,\n        opt_out_useragent_filter: !1,\n        opt_out_capturing_persistence_type: \"localStorage\",\n        opt_out_capturing_cookie_prefix: null,\n        opt_in_site_apps: !1,\n        property_denylist: [],\n        respect_dnt: !1,\n        sanitize_properties: null,\n        request_headers: {},\n        request_batching: !0,\n        properties_string_max_length: 65535,\n        session_recording: {},\n        mask_all_element_attributes: !1,\n        mask_all_text: !1,\n        mask_personal_data_properties: !1,\n        custom_personal_data_properties: [],\n        advanced_disable_decide: !1,\n        advanced_disable_feature_flags: !1,\n        advanced_disable_feature_flags_on_first_load: !1,\n        advanced_disable_toolbar_metrics: !1,\n        feature_flag_request_timeout_ms: 3e3,\n        surveys_request_timeout_ms: 1e4,\n        on_request_error: (t)=>{\n            var i = \"Bad HTTP status: \" + t.statusCode + \" \" + t.text;\n            j.error(i);\n        },\n        get_device_id: (t)=>t,\n        capture_performance: void 0,\n        name: \"posthog\",\n        bootstrap: {},\n        disable_compression: !1,\n        session_idle_timeout_seconds: 1800,\n        person_profiles: \"identified_only\",\n        before_send: void 0,\n        request_queue_config: {\n            flush_interval_ms: $o\n        },\n        _onCapture: Ho\n    };\n}, Vo = (t)=>{\n    var i = {};\n    R(t.process_person) || (i.person_profiles = t.process_person), R(t.xhr_headers) || (i.request_headers = t.xhr_headers), R(t.cookie_name) || (i.persistence_name = t.cookie_name), R(t.disable_cookie) || (i.disable_persistence = t.disable_cookie), R(t.store_google) || (i.save_campaign_params = t.store_google), R(t.verbose) || (i.debug = t.verbose);\n    var e = V({}, i, t);\n    return x(t.property_blacklist) && (R(t.property_denylist) ? e.property_denylist = t.property_blacklist : x(t.property_denylist) ? e.property_denylist = [\n        ...t.property_blacklist,\n        ...t.property_denylist\n    ] : j.error(\"Invalid value for property_denylist config: \" + t.property_denylist)), e;\n};\nclass Ko {\n    get os() {\n        return this.__forceAllowLocalhost;\n    }\n    set os(t) {\n        j.error(\"WebPerformanceObserver is deprecated and has no impact on network capture. Use `_forceAllowLocalhostNetworkCapture` on `posthog.sessionRecording`\"), this.__forceAllowLocalhost = t;\n    }\n    constructor(){\n        this.__forceAllowLocalhost = !1;\n    }\n}\nclass Yo {\n    get decideEndpointWasHit() {\n        var t, i;\n        return null !== (t = null == (i = this.featureFlags) ? void 0 : i.hasLoadedFlags) && void 0 !== t && t;\n    }\n    init(t, i, e) {\n        if (e && e !== Wo) {\n            var r, s = null !== (r = Bo[e]) && void 0 !== r ? r : new Yo;\n            return s._init(t, i, e), Bo[e] = s, Bo[Wo][e] = s, s;\n        }\n        return this._init(t, i, e);\n    }\n    _init(i, e, r) {\n        var s, n;\n        if (void 0 === e && (e = {}), R(i) || M(i)) return j.critical(\"PostHog was initialized without a token. This likely indicates a misconfiguration. Please check the first argument passed to posthog.init()\"), this;\n        if (this.__loaded) return j.warn(\"You have already initialized PostHog! Re-initializing is a no-op\"), this;\n        this.__loaded = !0, this.config = {}, this.fs = [], e.person_profiles && (this.vs = e.person_profiles), this.set_config(V({}, Jo(), Vo(e), {\n            name: r,\n            token: i\n        })), this.config.on_xhr_error && j.error(\"on_xhr_error is deprecated. Use on_request_error instead\"), this.compression = e.disable_compression ? void 0 : g.GZipJS, this.persistence = new co(this.config), this.sessionPersistence = \"sessionStorage\" === this.config.persistence || \"memory\" === this.config.persistence ? this.persistence : new co(B({}, this.config, {\n            persistence: \"sessionStorage\"\n        }));\n        var o = B({}, this.persistence.props), a = B({}, this.sessionPersistence.props);\n        if (this.ps = new ko((t)=>this.gs(t), this.config.request_queue_config), this._s = new Eo(this), this.__request_queue = [], this.config.__preview_experimental_cookieless_mode || (this.sessionManager = new Mo(this), this.sessionPropsManager = new Ro(this, this.sessionManager, this.persistence)), new $s(this).startIfEnabledOrStop(), this.siteApps = new Fo(this), null == (s = this.siteApps) || s.init(), this.config.__preview_experimental_cookieless_mode || (this.sessionRecording = new ds(this), this.sessionRecording.startIfEnabledOrStop()), this.config.disable_scroll_properties || this.scrollManager.startMeasuringScrollPosition(), this.autocapture = new Mi(this), this.autocapture.startIfEnabled(), this.surveys.loadIfEnabled(), this.heatmaps = new Rs(this), this.heatmaps.startIfEnabled(), this.webVitalsAutocapture = new Es(this), this.exceptionObserver = new ne(this), this.exceptionObserver.startIfEnabled(), this.deadClicksAutocapture = new re(this, ee), this.deadClicksAutocapture.startIfEnabled(), this.historyAutocapture = new Le(this), this.historyAutocapture.startIfEnabled(), c.DEBUG = c.DEBUG || this.config.debug, c.DEBUG && j.info(\"Starting in debug mode\", {\n            this: this,\n            config: e,\n            thisC: B({}, this.config),\n            p: o,\n            s: a\n        }), this.bs(), void 0 !== (null == (n = e.bootstrap) ? void 0 : n.distinctID)) {\n            var l, u, h = this.config.get_device_id(Ni()), d = null != (l = e.bootstrap) && l.isIdentifiedID ? h : e.bootstrap.distinctID;\n            this.persistence.set_property(At, null != (u = e.bootstrap) && u.isIdentifiedID ? \"identified\" : \"anonymous\"), this.register({\n                distinct_id: e.bootstrap.distinctID,\n                $device_id: d\n            });\n        }\n        if (this.ws()) {\n            var v, f, p = Object.keys((null == (v = e.bootstrap) ? void 0 : v.featureFlags) || {}).filter((t)=>{\n                var i;\n                return !(null == (i = e.bootstrap) || null == (i = i.featureFlags) || !i[t]);\n            }).reduce((t, i)=>{\n                var r;\n                return t[i] = (null == (r = e.bootstrap) || null == (r = r.featureFlags) ? void 0 : r[i]) || !1, t;\n            }, {}), _ = Object.keys((null == (f = e.bootstrap) ? void 0 : f.featureFlagPayloads) || {}).filter((t)=>p[t]).reduce((t, i)=>{\n                var r, s;\n                null != (r = e.bootstrap) && null != (r = r.featureFlagPayloads) && r[i] && (t[i] = null == (s = e.bootstrap) || null == (s = s.featureFlagPayloads) ? void 0 : s[i]);\n                return t;\n            }, {});\n            this.featureFlags.receivedFeatureFlags({\n                featureFlags: p,\n                featureFlagPayloads: _\n            });\n        }\n        if (this.config.__preview_experimental_cookieless_mode) this.register_once({\n            distinct_id: Bt,\n            $device_id: null\n        }, \"\");\n        else if (!this.get_distinct_id()) {\n            var m = this.config.get_device_id(Ni());\n            this.register_once({\n                distinct_id: m,\n                $device_id: m\n            }, \"\"), this.persistence.set_property(At, \"anonymous\");\n        }\n        return st(t, \"onpagehide\" in self ? \"pagehide\" : \"unload\", this._handle_unload.bind(this), {\n            passive: !1\n        }), this.toolbar.maybeLoadToolbar(), e.segment ? cs(this, ()=>this.ys()) : this.ys(), E(this.config._onCapture) && this.config._onCapture !== Ho && (j.warn(\"onCapture is deprecated. Please use `before_send` instead\"), this.on(\"eventCaptured\", (t)=>this.config._onCapture(t.event, t))), this;\n    }\n    be(t) {\n        var i, e, r, s, n, a, l, u;\n        if (!o || !o.body) return j.info(\"document not ready yet, trying again in 500 milliseconds...\"), void setTimeout(()=>{\n            this.be(t);\n        }, 500);\n        this.compression = void 0, t.supportedCompression && !this.config.disable_compression && (this.compression = m(t.supportedCompression, g.GZipJS) ? g.GZipJS : m(t.supportedCompression, g.Base64) ? g.Base64 : void 0), null != (i = t.analytics) && i.endpoint && (this.analyticsDefaultEndpoint = t.analytics.endpoint), this.set_config({\n            person_profiles: this.vs ? this.vs : \"identified_only\"\n        }), null == (e = this.siteApps) || e.onRemoteConfig(t), null == (r = this.sessionRecording) || r.onRemoteConfig(t), null == (s = this.autocapture) || s.onRemoteConfig(t), null == (n = this.heatmaps) || n.onRemoteConfig(t), this.surveys.onRemoteConfig(t), null == (a = this.webVitalsAutocapture) || a.onRemoteConfig(t), null == (l = this.exceptionObserver) || l.onRemoteConfig(t), this.exceptions.onRemoteConfig(t), null == (u = this.deadClicksAutocapture) || u.onRemoteConfig(t);\n    }\n    ys() {\n        try {\n            this.config.loaded(this);\n        } catch (t) {\n            j.critical(\"`loaded` function failed\", t);\n        }\n        this.Ss(), this.config.capture_pageview && setTimeout(()=>{\n            this.consent.isOptedIn() && this.$s();\n        }, 1), new So(this).load(), this.featureFlags.decide();\n    }\n    Ss() {\n        var t;\n        this.has_opted_out_capturing() || this.config.request_batching && (null == (t = this.ps) || t.enable());\n    }\n    _dom_loaded() {\n        this.has_opted_out_capturing() || G(this.__request_queue, (t)=>this.gs(t)), this.__request_queue = [], this.Ss();\n    }\n    _handle_unload() {\n        var t, i;\n        this.config.request_batching ? (this.ks() && this.capture(\"$pageleave\"), null == (t = this.ps) || t.unload(), null == (i = this._s) || i.unload()) : this.ks() && this.capture(\"$pageleave\", null, {\n            transport: \"sendBeacon\"\n        });\n    }\n    me(t) {\n        this.__loaded && (Go ? this.__request_queue.push(t) : this.rateLimiter.isServerRateLimited(t.batchKey) || (t.transport = t.transport || this.config.api_transport, t.url = Fs(t.url, {\n            ip: this.config.ip ? 1 : 0\n        }), t.headers = B({}, this.config.request_headers), t.compression = \"best-available\" === t.compression ? this.compression : t.compression, t.fetchOptions = t.fetchOptions || this.config.fetch_options, ((t)=>{\n            var i, e, r, s = B({}, t);\n            s.timeout = s.timeout || 6e4, s.url = Fs(s.url, {\n                _: (new Date).getTime().toString(),\n                ver: c.LIB_VERSION,\n                compression: s.compression\n            });\n            var n = null !== (i = s.transport) && void 0 !== i ? i : \"fetch\", o = null !== (e = null == (r = rt(Ls, (t)=>t.transport === n)) ? void 0 : r.method) && void 0 !== e ? e : Ls[0].method;\n            if (!o) throw new Error(\"No available transport method\");\n            o(s);\n        })(B({}, t, {\n            callback: (i)=>{\n                var e, r;\n                (this.rateLimiter.checkForLimiting(i), i.statusCode >= 400) && (null == (e = (r = this.config).on_request_error) || e.call(r, i));\n                null == t.callback || t.callback(i);\n            }\n        }))));\n    }\n    gs(t) {\n        this._s ? this._s.retriableRequest(t) : this.me(t);\n    }\n    _execute_array(t) {\n        var i, e = [], r = [], s = [];\n        G(t, (t)=>{\n            t && (i = t[0], x(i) ? s.push(t) : E(t) ? t.call(this) : x(t) && \"alias\" === i ? e.push(t) : x(t) && -1 !== i.indexOf(\"capture\") && E(this[i]) ? s.push(t) : r.push(t));\n        });\n        var n = function(t, i) {\n            G(t, function(t) {\n                if (x(t[0])) {\n                    var e = i;\n                    J(t, function(t) {\n                        e = e[t[0]].apply(e, t.slice(1));\n                    });\n                } else this[t[0]].apply(this, t.slice(1));\n            }, i);\n        };\n        n(e, this), n(r, this), n(s, this);\n    }\n    ws() {\n        var t, i;\n        return (null == (t = this.config.bootstrap) ? void 0 : t.featureFlags) && Object.keys(null == (i = this.config.bootstrap) ? void 0 : i.featureFlags).length > 0 || !1;\n    }\n    push(t) {\n        this._execute_array([\n            t\n        ]);\n    }\n    capture(t, i, e) {\n        var r;\n        if (this.__loaded && this.persistence && this.sessionPersistence && this.ps) {\n            if (!this.consent.isOptedOut()) if (!R(t) && T(t)) {\n                if (this.config.opt_out_useragent_filter || !this._is_bot()) {\n                    var s = null != e && e.skip_client_rate_limiting ? void 0 : this.rateLimiter.clientRateLimitContext();\n                    if (null == s || !s.isRateLimited) {\n                        null != i && i.$current_url && !T(null == i ? void 0 : i.$current_url) && (j.error(\"Invalid `$current_url` property provided to `posthog.capture`. Input must be a string. Ignoring provided value.\"), null == i || delete i.$current_url), this.sessionPersistence.update_search_keyword(), this.config.save_campaign_params && this.sessionPersistence.update_campaign_params(), this.config.save_referrer && this.sessionPersistence.update_referrer_info(), (this.config.save_campaign_params || this.config.save_referrer) && this.persistence.set_initial_person_info();\n                        var n = new Date, o = (null == e ? void 0 : e.timestamp) || n, a = Ni(), l = {\n                            uuid: a,\n                            event: t,\n                            properties: this.calculateEventProperties(t, i || {}, o, a)\n                        };\n                        s && (l.properties.$lib_rate_limit_remaining_tokens = s.remainingTokens), (null == e ? void 0 : e.$set) && (l.$set = null == e ? void 0 : e.$set);\n                        var u = this.xs(null == e ? void 0 : e.$set_once);\n                        u && (l.$set_once = u), (l = tt(l, null != e && e._noTruncate ? null : this.config.properties_string_max_length)).timestamp = o, R(null == e ? void 0 : e.timestamp) || (l.properties.$event_time_override_provided = !0, l.properties.$event_time_override_system_time = n);\n                        var h = B({}, l.properties.$set, l.$set);\n                        if (P(h) || this.setPersonPropertiesForFlags(h), !O(this.config.before_send)) {\n                            var d = this.Es(l);\n                            if (!d) return;\n                            l = d;\n                        }\n                        this.us.emit(\"eventCaptured\", l);\n                        var v = {\n                            method: \"POST\",\n                            url: null !== (r = null == e ? void 0 : e._url) && void 0 !== r ? r : this.requestRouter.endpointFor(\"api\", this.analyticsDefaultEndpoint),\n                            data: l,\n                            compression: \"best-available\",\n                            batchKey: null == e ? void 0 : e._batchKey\n                        };\n                        return !this.config.request_batching || e && (null == e || !e._batchKey) || null != e && e.send_instantly ? this.gs(v) : this.ps.enqueue(v), l;\n                    }\n                    j.critical(\"This capture call is ignored due to client rate limiting.\");\n                }\n            } else j.error(\"No event name provided to posthog.capture\");\n        } else j.uninitializedWarning(\"posthog.capture\");\n    }\n    Ne(t) {\n        return this.on(\"eventCaptured\", (i)=>t(i.event, i));\n    }\n    calculateEventProperties(t, i, e, r, s) {\n        if (e = e || new Date, !this.persistence || !this.sessionPersistence) return i;\n        var n = s ? void 0 : this.persistence.remove_event_timer(t), a = B({}, i);\n        if (a.token = this.config.token, this.config.__preview_experimental_cookieless_mode && (a.$cookieless_mode = !0), \"$snapshot\" === t) {\n            var l = B({}, this.persistence.properties(), this.sessionPersistence.properties());\n            return a.distinct_id = l.distinct_id, (!T(a.distinct_id) && !F(a.distinct_id) || M(a.distinct_id)) && j.error(\"Invalid distinct_id for replay event. This indicates a bug in your implementation\"), a;\n        }\n        var u, h = to(this.config.mask_personal_data_properties, this.config.custom_personal_data_properties);\n        if (this.sessionManager) {\n            var { sessionId: v, windowId: c } = this.sessionManager.checkAndGetSessionAndWindowId(s, e.getTime());\n            a.$session_id = v, a.$window_id = c;\n        }\n        this.sessionPropsManager && V(a, this.sessionPropsManager.getSessionProps());\n        try {\n            var f;\n            this.sessionRecording && V(a, this.sessionRecording.sdkDebugProperties), a.$sdk_debug_retry_queue_size = null == (f = this._s) ? void 0 : f.length;\n        } catch (t) {\n            a.$sdk_debug_error_capturing_properties = String(t);\n        }\n        if (this.requestRouter.region === No.CUSTOM && (a.$lib_custom_api_host = this.config.api_host), u = \"$pageview\" !== t || s ? \"$pageleave\" !== t || s ? this.pageViewManager.doEvent() : this.pageViewManager.doPageLeave(e) : this.pageViewManager.doPageView(e, r), a = V(a, u), \"$pageview\" === t && o && (a.title = o.title), !R(n)) {\n            var p = e.getTime() - n;\n            a.$duration = parseFloat((p / 1e3).toFixed(3));\n        }\n        d && this.config.opt_out_useragent_filter && (a.$browser_type = this._is_bot() ? \"bot\" : \"browser\"), (a = V({}, h, this.persistence.properties(), this.sessionPersistence.properties(), a)).$is_identified = this._isIdentified(), x(this.config.property_denylist) ? J(this.config.property_denylist, function(t) {\n            delete a[t];\n        }) : j.error(\"Invalid value for property_denylist config: \" + this.config.property_denylist + \" or property_blacklist config: \" + this.config.property_blacklist);\n        var g = this.config.sanitize_properties;\n        g && (j.error(\"sanitize_properties is deprecated. Use before_send instead\"), a = g(a, t));\n        var _ = this.Is();\n        return a.$process_person_profile = _, _ && !s && this.Ps(\"_calculate_event_properties\"), a;\n    }\n    xs(t) {\n        var i;\n        if (!this.persistence || !this.Is()) return t;\n        if (this.ls) return t;\n        var e = this.persistence.get_initial_props(), r = null == (i = this.sessionPropsManager) ? void 0 : i.getSetOnceProps(), s = V({}, e, r || {}, t || {}), n = this.config.sanitize_properties;\n        return n && (j.error(\"sanitize_properties is deprecated. Use before_send instead\"), s = n(s, \"$set_once\")), this.ls = !0, P(s) ? void 0 : s;\n    }\n    register(t, i) {\n        var e;\n        null == (e = this.persistence) || e.register(t, i);\n    }\n    register_once(t, i, e) {\n        var r;\n        null == (r = this.persistence) || r.register_once(t, i, e);\n    }\n    register_for_session(t) {\n        var i;\n        null == (i = this.sessionPersistence) || i.register(t);\n    }\n    unregister(t) {\n        var i;\n        null == (i = this.persistence) || i.unregister(t);\n    }\n    unregister_for_session(t) {\n        var i;\n        null == (i = this.sessionPersistence) || i.unregister(t);\n    }\n    Rs(t, i) {\n        this.register({\n            [t]: i\n        });\n    }\n    getFeatureFlag(t, i) {\n        return this.featureFlags.getFeatureFlag(t, i);\n    }\n    getFeatureFlagPayload(t) {\n        var i = this.featureFlags.getFeatureFlagPayload(t);\n        try {\n            return JSON.parse(i);\n        } catch (t) {\n            return i;\n        }\n    }\n    isFeatureEnabled(t, i) {\n        return this.featureFlags.isFeatureEnabled(t, i);\n    }\n    reloadFeatureFlags() {\n        this.featureFlags.reloadFeatureFlags();\n    }\n    updateEarlyAccessFeatureEnrollment(t, i) {\n        this.featureFlags.updateEarlyAccessFeatureEnrollment(t, i);\n    }\n    getEarlyAccessFeatures(t, i, e) {\n        return void 0 === i && (i = !1), this.featureFlags.getEarlyAccessFeatures(t, i, e);\n    }\n    on(t, i) {\n        return this.us.on(t, i);\n    }\n    onFeatureFlags(t) {\n        return this.featureFlags.onFeatureFlags(t);\n    }\n    onSurveysLoaded(t) {\n        return this.surveys.onSurveysLoaded(t);\n    }\n    onSessionId(t) {\n        var i, e;\n        return null !== (i = null == (e = this.sessionManager) ? void 0 : e.onSessionId(t)) && void 0 !== i ? i : ()=>{};\n    }\n    getSurveys(t, i) {\n        void 0 === i && (i = !1), this.surveys.getSurveys(t, i);\n    }\n    getActiveMatchingSurveys(t, i) {\n        void 0 === i && (i = !1), this.surveys.getActiveMatchingSurveys(t, i);\n    }\n    renderSurvey(t, i) {\n        this.surveys.renderSurvey(t, i);\n    }\n    canRenderSurvey(t) {\n        return this.surveys.canRenderSurvey(t);\n    }\n    canRenderSurveyAsync(t, i) {\n        return void 0 === i && (i = !1), this.surveys.canRenderSurveyAsync(t, i);\n    }\n    identify(t, i, e) {\n        if (!this.__loaded || !this.persistence) return j.uninitializedWarning(\"posthog.identify\");\n        if (F(t) && (t = t.toString(), j.warn(\"The first argument to posthog.identify was a number, but it should be a string. It has been converted to a string.\")), t) {\n            if ([\n                \"distinct_id\",\n                \"distinctid\"\n            ].includes(t.toLowerCase())) j.critical('The string \"' + t + '\" was set in posthog.identify which indicates an error. This ID should be unique to the user and not a hardcoded string.');\n            else if (this.Ps(\"posthog.identify\")) {\n                var r = this.get_distinct_id();\n                if (this.register({\n                    $user_id: t\n                }), !this.get_property(\"$device_id\")) {\n                    var s = r;\n                    this.register_once({\n                        $had_persisted_distinct_id: !0,\n                        $device_id: s\n                    }, \"\");\n                }\n                t !== r && t !== this.get_property(ot) && (this.unregister(ot), this.register({\n                    distinct_id: t\n                }));\n                var n = \"anonymous\" === (this.persistence.get_property(At) || \"anonymous\");\n                t !== r && n ? (this.persistence.set_property(At, \"identified\"), this.setPersonPropertiesForFlags(B({}, e || {}, i || {}), !1), this.capture(\"$identify\", {\n                    distinct_id: t,\n                    $anon_distinct_id: r\n                }, {\n                    $set: i || {},\n                    $set_once: e || {}\n                }), this.cs = js(t, i, e), this.featureFlags.setAnonymousDistinctId(r)) : (i || e) && this.setPersonProperties(i, e), t !== r && (this.reloadFeatureFlags(), this.unregister(Ft));\n            }\n        } else j.error(\"Unique user id has not been set in posthog.identify\");\n    }\n    setPersonProperties(t, i) {\n        if ((t || i) && this.Ps(\"posthog.setPersonProperties\")) {\n            var e = js(this.get_distinct_id(), t, i);\n            this.cs !== e ? (this.setPersonPropertiesForFlags(B({}, i || {}, t || {})), this.capture(\"$set\", {\n                $set: t || {},\n                $set_once: i || {}\n            }), this.cs = e) : j.info(\"A duplicate setPersonProperties call was made with the same properties. It has been ignored.\");\n        }\n    }\n    group(t, i, e) {\n        if (t && i) {\n            if (this.Ps(\"posthog.group\")) {\n                var r = this.getGroups();\n                r[t] !== i && this.resetGroupPropertiesForFlags(t), this.register({\n                    $groups: B({}, r, {\n                        [t]: i\n                    })\n                }), e && (this.capture(\"$groupidentify\", {\n                    $group_type: t,\n                    $group_key: i,\n                    $group_set: e\n                }), this.setGroupPropertiesForFlags({\n                    [t]: e\n                })), r[t] === i || e || this.reloadFeatureFlags();\n            }\n        } else j.error(\"posthog.group requires a group type and group key\");\n    }\n    resetGroups() {\n        this.register({\n            $groups: {}\n        }), this.resetGroupPropertiesForFlags(), this.reloadFeatureFlags();\n    }\n    setPersonPropertiesForFlags(t, i) {\n        void 0 === i && (i = !0), this.featureFlags.setPersonPropertiesForFlags(t, i);\n    }\n    resetPersonPropertiesForFlags() {\n        this.featureFlags.resetPersonPropertiesForFlags();\n    }\n    setGroupPropertiesForFlags(t, i) {\n        void 0 === i && (i = !0), this.Ps(\"posthog.setGroupPropertiesForFlags\") && this.featureFlags.setGroupPropertiesForFlags(t, i);\n    }\n    resetGroupPropertiesForFlags(t) {\n        this.featureFlags.resetGroupPropertiesForFlags(t);\n    }\n    reset(t) {\n        var i, e, r, s;\n        if (j.info(\"reset\"), !this.__loaded) return j.uninitializedWarning(\"posthog.reset\");\n        var n = this.get_property(\"$device_id\");\n        if (this.consent.reset(), null == (i = this.persistence) || i.clear(), null == (e = this.sessionPersistence) || e.clear(), this.surveys.reset(), null == (r = this.persistence) || r.set_property(At, \"anonymous\"), null == (s = this.sessionManager) || s.resetSessionId(), this.cs = null, this.config.__preview_experimental_cookieless_mode) this.register_once({\n            distinct_id: Bt,\n            $device_id: null\n        }, \"\");\n        else {\n            var o = this.config.get_device_id(Ni());\n            this.register_once({\n                distinct_id: o,\n                $device_id: t ? o : n\n            }, \"\");\n        }\n        this.register({\n            $last_posthog_reset: (new Date).toISOString()\n        }, 1);\n    }\n    get_distinct_id() {\n        return this.get_property(\"distinct_id\");\n    }\n    getGroups() {\n        return this.get_property(\"$groups\") || {};\n    }\n    get_session_id() {\n        var t, i;\n        return null !== (t = null == (i = this.sessionManager) ? void 0 : i.checkAndGetSessionAndWindowId(!0).sessionId) && void 0 !== t ? t : \"\";\n    }\n    get_session_replay_url(t) {\n        if (!this.sessionManager) return \"\";\n        var { sessionId: i, sessionStartTimestamp: e } = this.sessionManager.checkAndGetSessionAndWindowId(!0), r = this.requestRouter.endpointFor(\"ui\", \"/project/\" + this.config.token + \"/replay/\" + i);\n        if (null != t && t.withTimestamp && e) {\n            var s, n = null !== (s = t.timestampLookBack) && void 0 !== s ? s : 10;\n            if (!e) return r;\n            r += \"?t=\" + Math.max(Math.floor(((new Date).getTime() - e) / 1e3) - n, 0);\n        }\n        return r;\n    }\n    alias(t, i) {\n        return t === this.get_property(nt) ? (j.critical(\"Attempting to create alias for existing People user - aborting.\"), -2) : this.Ps(\"posthog.alias\") ? (R(i) && (i = this.get_distinct_id()), t !== i ? (this.Rs(ot, t), this.capture(\"$create_alias\", {\n            alias: t,\n            distinct_id: i\n        })) : (j.warn(\"alias matches current distinct_id - skipping api call.\"), this.identify(t), -1)) : void 0;\n    }\n    set_config(t) {\n        var i, e, r, s, n = B({}, this.config);\n        I(t) && (V(this.config, Vo(t)), null == (i = this.persistence) || i.update_config(this.config, n), this.sessionPersistence = \"sessionStorage\" === this.config.persistence || \"memory\" === this.config.persistence ? this.persistence : new co(B({}, this.config, {\n            persistence: \"sessionStorage\"\n        })), Wi.O() && \"true\" === Wi.A(\"ph_debug\") && (this.config.debug = !0), this.config.debug && (c.DEBUG = !0, j.info(\"set_config\", JSON.stringify({\n            config: t,\n            oldConfig: n,\n            newConfig: B({}, this.config)\n        }, null, 2))), null == (e = this.sessionRecording) || e.startIfEnabledOrStop(), null == (r = this.autocapture) || r.startIfEnabled(), null == (s = this.heatmaps) || s.startIfEnabled(), this.surveys.loadIfEnabled(), this.bs());\n    }\n    startSessionRecording(t) {\n        var i = !0 === t, e = {\n            sampling: i || !(null == t || !t.sampling),\n            linked_flag: i || !(null == t || !t.linked_flag),\n            url_trigger: i || !(null == t || !t.url_trigger),\n            event_trigger: i || !(null == t || !t.event_trigger)\n        };\n        if (Object.values(e).some(Boolean)) {\n            var r, s, n, o, a;\n            if (null == (r = this.sessionManager) || r.checkAndGetSessionAndWindowId(), e.sampling) null == (s = this.sessionRecording) || s.overrideSampling();\n            if (e.linked_flag) null == (n = this.sessionRecording) || n.overrideLinkedFlag();\n            if (e.url_trigger) null == (o = this.sessionRecording) || o.overrideTrigger(\"url\");\n            if (e.event_trigger) null == (a = this.sessionRecording) || a.overrideTrigger(\"event\");\n        }\n        this.set_config({\n            disable_session_recording: !1\n        });\n    }\n    stopSessionRecording() {\n        this.set_config({\n            disable_session_recording: !0\n        });\n    }\n    sessionRecordingStarted() {\n        var t;\n        return !(null == (t = this.sessionRecording) || !t.started);\n    }\n    captureException(t, i) {\n        var e = new Error(\"PostHog syntheticException\");\n        this.exceptions.sendExceptionEvent(B({}, Ae(((t)=>t instanceof Error)(t) ? {\n            error: t,\n            event: t.message\n        } : {\n            event: t\n        }, {\n            syntheticException: e\n        }), i));\n    }\n    loadToolbar(t) {\n        return this.toolbar.loadToolbar(t);\n    }\n    get_property(t) {\n        var i;\n        return null == (i = this.persistence) ? void 0 : i.props[t];\n    }\n    getSessionProperty(t) {\n        var i;\n        return null == (i = this.sessionPersistence) ? void 0 : i.props[t];\n    }\n    toString() {\n        var t, i = null !== (t = this.config.name) && void 0 !== t ? t : Wo;\n        return i !== Wo && (i = Wo + \".\" + i), i;\n    }\n    _isIdentified() {\n        var t, i;\n        return \"identified\" === (null == (t = this.persistence) ? void 0 : t.get_property(At)) || \"identified\" === (null == (i = this.sessionPersistence) ? void 0 : i.get_property(At));\n    }\n    Is() {\n        var t, i;\n        return !(\"never\" === this.config.person_profiles || \"identified_only\" === this.config.person_profiles && !this._isIdentified() && P(this.getGroups()) && (null == (t = this.persistence) || null == (t = t.props) || !t[ot]) && (null == (i = this.persistence) || null == (i = i.props) || !i[Ut]));\n    }\n    ks() {\n        return !0 === this.config.capture_pageleave || \"if_capture_pageview\" === this.config.capture_pageleave && (!0 === this.config.capture_pageview || \"history_change\" === this.config.capture_pageview);\n    }\n    createPersonProfile() {\n        this.Is() || this.Ps(\"posthog.createPersonProfile\") && this.setPersonProperties({}, {});\n    }\n    Ps(t) {\n        return \"never\" === this.config.person_profiles ? (j.error(t + ' was called, but process_person is set to \"never\". This call will be ignored.'), !1) : (this.Rs(Ut, !0), !0);\n    }\n    bs() {\n        var t, i, e, r, s = this.consent.isOptedOut(), n = this.config.opt_out_persistence_by_default, o = this.config.disable_persistence || s && !!n;\n        (null == (t = this.persistence) ? void 0 : t.xe) !== o && (null == (e = this.persistence) || e.set_disabled(o));\n        (null == (i = this.sessionPersistence) ? void 0 : i.xe) !== o && (null == (r = this.sessionPersistence) || r.set_disabled(o));\n    }\n    opt_in_capturing(t) {\n        var i;\n        (this.consent.optInOut(!0), this.bs(), R(null == t ? void 0 : t.captureEventName) || null != t && t.captureEventName) && this.capture(null !== (i = null == t ? void 0 : t.captureEventName) && void 0 !== i ? i : \"$opt_in\", null == t ? void 0 : t.captureProperties, {\n            send_instantly: !0\n        });\n        this.config.capture_pageview && this.$s();\n    }\n    opt_out_capturing() {\n        this.consent.optInOut(!1), this.bs();\n    }\n    has_opted_in_capturing() {\n        return this.consent.isOptedIn();\n    }\n    has_opted_out_capturing() {\n        return this.consent.isOptedOut();\n    }\n    clear_opt_in_out_capturing() {\n        this.consent.reset(), this.bs();\n    }\n    _is_bot() {\n        return n ? Lo(n, this.config.custom_blocked_useragents) : void 0;\n    }\n    $s() {\n        o && (\"visible\" === o.visibilityState ? this.hs || (this.hs = !0, this.capture(\"$pageview\", {\n            title: o.title\n        }, {\n            send_instantly: !0\n        }), this.ds && (o.removeEventListener(\"visibilitychange\", this.ds), this.ds = null)) : this.ds || (this.ds = this.$s.bind(this), st(o, \"visibilitychange\", this.ds)));\n    }\n    debug(i) {\n        !1 === i ? (null == t || t.console.log(\"You've disabled debug mode.\"), localStorage && localStorage.removeItem(\"ph_debug\"), this.set_config({\n            debug: !1\n        })) : (null == t || t.console.log(\"You're now in debug mode. All calls to PostHog will be logged in your console.\\nYou can disable this with `posthog.debug(false)`.\"), localStorage && localStorage.setItem(\"ph_debug\", \"true\"), this.set_config({\n            debug: !0\n        }));\n    }\n    Es(t) {\n        if (O(this.config.before_send)) return t;\n        var i = x(this.config.before_send) ? this.config.before_send : [\n            this.config.before_send\n        ], e = t;\n        for (var r of i){\n            if (e = r(e), O(e)) {\n                var s = \"Event '\" + t.event + \"' was rejected in beforeSend function\";\n                return L(t.event) ? j.warn(s + \". This can cause unexpected behavior.\") : j.info(s), null;\n            }\n            e.properties && !P(e.properties) || j.warn(\"Event '\" + t.event + \"' has no properties after beforeSend function, this is likely an error.\");\n        }\n        return e;\n    }\n    getPageViewId() {\n        var t;\n        return null == (t = this.pageViewManager.ne) ? void 0 : t.pageViewId;\n    }\n    captureTraceFeedback(t, i) {\n        this.capture(\"$ai_feedback\", {\n            $ai_trace_id: String(t),\n            $ai_feedback_text: i\n        });\n    }\n    captureTraceMetric(t, i, e) {\n        this.capture(\"$ai_metric\", {\n            $ai_trace_id: String(t),\n            $ai_metric_name: i,\n            $ai_metric_value: String(e)\n        });\n    }\n    constructor(){\n        this.webPerformance = new Ko, this.ls = !1, this.version = c.LIB_VERSION, this.us = new fo, this._calculate_event_properties = this.calculateEventProperties.bind(this), this.config = Jo(), this.SentryIntegration = gs, this.sentryIntegration = (t)=>(function(t, i) {\n                var e = ps(t, i);\n                return {\n                    name: fs,\n                    processEvent: (t)=>e(t)\n                };\n            })(this, t), this.__request_queue = [], this.__loaded = !1, this.analyticsDefaultEndpoint = \"/e/\", this.hs = !1, this.ds = null, this.vs = null, this.cs = null, this.featureFlags = new ho(this), this.toolbar = new ys(this), this.scrollManager = new Io(this), this.pageViewManager = new Ts(this), this.surveys = new mo(this), this.experiments = new qo(this), this.exceptions = new Bs(this), this.rateLimiter = new wo(this), this.requestRouter = new zo(this), this.consent = new Zi(this), this.people = {\n            set: (t, i, e)=>{\n                var r = T(t) ? {\n                    [t]: i\n                } : t;\n                this.setPersonProperties(r), null == e || e({});\n            },\n            set_once: (t, i, e)=>{\n                var r = T(t) ? {\n                    [t]: i\n                } : t;\n                this.setPersonProperties(void 0, r), null == e || e({});\n            }\n        }, this.on(\"eventCaptured\", (t)=>j.info('send \"' + (null == t ? void 0 : t.event) + '\"', t));\n    }\n}\n!function(t, i) {\n    for(var e = 0; e < i.length; e++)t.prototype[i[e]] = Q(t.prototype[i[e]]);\n}(Yo, [\n    \"identify\"\n]);\nvar Xo, Qo = function(t) {\n    return t.Button = \"button\", t.Tab = \"tab\", t.Selector = \"selector\", t;\n}({}), Zo = function(t) {\n    return t.TopLeft = \"top_left\", t.TopRight = \"top_right\", t.TopCenter = \"top_center\", t.MiddleLeft = \"middle_left\", t.MiddleRight = \"middle_right\", t.MiddleCenter = \"middle_center\", t.Left = \"left\", t.Center = \"center\", t.Right = \"right\", t.NextToTrigger = \"next_to_trigger\", t;\n}({}), ta = function(t) {\n    return t.Popover = \"popover\", t.API = \"api\", t.Widget = \"widget\", t;\n}({}), ia = function(t) {\n    return t.Open = \"open\", t.MultipleChoice = \"multiple_choice\", t.SingleChoice = \"single_choice\", t.Rating = \"rating\", t.Link = \"link\", t;\n}({}), ea = function(t) {\n    return t.NextQuestion = \"next_question\", t.End = \"end\", t.ResponseBased = \"response_based\", t.SpecificQuestion = \"specific_question\", t;\n}({}), ra = function(t) {\n    return t.Once = \"once\", t.Recurring = \"recurring\", t.Always = \"always\", t;\n}({}), sa = (Xo = Bo[Wo] = new Yo, function() {\n    function i() {\n        i.done || (i.done = !0, Go = !1, J(Bo, function(t) {\n            t._dom_loaded();\n        }));\n    }\n    null != o && o.addEventListener ? \"complete\" === o.readyState ? i() : st(o, \"DOMContentLoaded\", i, {\n        capture: !1\n    }) : t && j.error(\"Browser doesn't support `document.addEventListener` so PostHog couldn't be initialized\");\n}(), Xo);\n //# sourceMappingURL=module.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30, _c31, _c32, _c33, _c34, _c35, _c36, _c37, _c38, _c39, _c40, _c41, _c42, _c43, _c44, _c45, _c46, _c47;\n$RefreshReg$(_c, \"B\");\n$RefreshReg$(_c1, \"H\");\n$RefreshReg$(_c2, \"G\");\n$RefreshReg$(_c3, \"J\");\n$RefreshReg$(_c4, \"Y\");\n$RefreshReg$(_c5, \"Wt\");\n$RefreshReg$(_c6, \"Gt\");\n$RefreshReg$(_c7, \"Jt\");\n$RefreshReg$(_c8, \"Vt\");\n$RefreshReg$(_c9, \"Kt\");\n$RefreshReg$(_c10, \"Yt\");\n$RefreshReg$(_c11, \"Xt\");\n$RefreshReg$(_c12, \"Qt\");\n$RefreshReg$(_c13, \"Zt\");\n$RefreshReg$(_c14, \"Ii\");\n$RefreshReg$(_c15, \"Pi\");\n$RefreshReg$(_c16, \"Ri\");\n$RefreshReg$(_c17, \"Ti\");\n$RefreshReg$(_c18, \"Ie\");\n$RefreshReg$(_c19, \"Re\");\n$RefreshReg$(_c20, \"Te\");\n$RefreshReg$(_c21, \"Me\");\n$RefreshReg$(_c22, \"Ce\");\n$RefreshReg$(_c23, \"Oe\");\n$RefreshReg$(_c24, \"Fe\");\n$RefreshReg$(_c25, \"Ae\");\n$RefreshReg$(_c26, \"De\");\n$RefreshReg$(_c27, \"Ne\");\n$RefreshReg$(_c28, \"Ve\");\n$RefreshReg$(_c29, \"Ke\");\n$RefreshReg$(_c30, \"Ye\");\n$RefreshReg$(_c31, \"Xe\");\n$RefreshReg$(_c32, \"Ar\");\n$RefreshReg$(_c33, \"Dr\");\n$RefreshReg$(_c34, \"Lr\");\n$RefreshReg$(_c35, \"Jr\");\n$RefreshReg$(_c36, \"Ps\");\n$RefreshReg$(_c37, \"Ns\");\n$RefreshReg$(_c38, \"Wn\");\n$RefreshReg$(_c39, \"Gn\");\n$RefreshReg$(_c40, \"Jn\");\n$RefreshReg$(_c41, \"Vn\");\n$RefreshReg$(_c42, \"Kn\");\n$RefreshReg$(_c43, \"Yn\");\n$RefreshReg$(_c44, \"Xn\");\n$RefreshReg$(_c45, \"Qn\");\n$RefreshReg$(_c46, \"Zn\");\n$RefreshReg$(_c47, \"Po\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/posthog-js/dist/module.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/posthog-js/react/dist/esm/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/posthog-js/react/dist/esm/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PostHogContext: function() { return /* binding */ PostHogContext; },\n/* harmony export */   PostHogErrorBoundary: function() { return /* binding */ PostHogErrorBoundary; },\n/* harmony export */   PostHogFeature: function() { return /* binding */ PostHogFeature; },\n/* harmony export */   PostHogProvider: function() { return /* binding */ PostHogProvider; },\n/* harmony export */   useActiveFeatureFlags: function() { return /* binding */ useActiveFeatureFlags; },\n/* harmony export */   useFeatureFlagEnabled: function() { return /* binding */ useFeatureFlagEnabled; },\n/* harmony export */   useFeatureFlagPayload: function() { return /* binding */ useFeatureFlagPayload; },\n/* harmony export */   useFeatureFlagVariantKey: function() { return /* binding */ useFeatureFlagVariantKey; },\n/* harmony export */   usePostHog: function() { return /* binding */ usePostHog; }\n/* harmony export */ });\n/* harmony import */ var posthog_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! posthog-js */ \"(app-pages-browser)/./node_modules/posthog-js/dist/module.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$();\n\n\nvar PostHogContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    client: posthog_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n});\nfunction isDeepEqual(obj1, obj2, visited) {\n    if (visited === void 0) {\n        visited = new WeakMap();\n    }\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (typeof obj1 !== \"object\" || obj1 === null || typeof obj2 !== \"object\" || obj2 === null) {\n        return false;\n    }\n    if (visited.has(obj1) && visited.get(obj1) === obj2) {\n        return true;\n    }\n    visited.set(obj1, obj2);\n    var keys1 = Object.keys(obj1);\n    var keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for(var _i = 0, keys1_1 = keys1; _i < keys1_1.length; _i++){\n        var key = keys1_1[_i];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (!isDeepEqual(obj1[key], obj2[key], visited)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction PostHogProvider(_a) {\n    _s();\n    var children = _a.children, client = _a.client, apiKey = _a.apiKey, options = _a.options;\n    var previousInitializationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    var posthog = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(function() {\n        if (client) {\n            if (apiKey) {\n                console.warn(\"[PostHog.js] You have provided both `client` and `apiKey` to `PostHogProvider`. `apiKey` will be ignored in favour of `client`.\");\n            }\n            if (options) {\n                console.warn(\"[PostHog.js] You have provided both `client` and `options` to `PostHogProvider`. `options` will be ignored in favour of `client`.\");\n            }\n            return client;\n        }\n        if (apiKey) {\n            return posthog_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n        }\n        console.warn(\"[PostHog.js] No `apiKey` or `client` were provided to `PostHogProvider`. Using default global `window.posthog` instance. You must initialize it manually. This is not recommended behavior.\");\n        return posthog_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    }, [\n        client,\n        apiKey,\n        JSON.stringify(options)\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        if (client) {\n            return;\n        }\n        var previousInitialization = previousInitializationRef.current;\n        if (!previousInitialization) {\n            if (posthog_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].__loaded) {\n                console.warn(\"[PostHog.js] `posthog` was already loaded elsewhere. This may cause issues.\");\n            }\n            posthog_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].init(apiKey, options);\n            previousInitializationRef.current = {\n                apiKey: apiKey,\n                options: options !== null && options !== void 0 ? options : {}\n            };\n        } else {\n            if (apiKey !== previousInitialization.apiKey) {\n                console.warn(\"[PostHog.js] You have provided a different `apiKey` to `PostHogProvider` than the one that was already initialized. This is not supported by our provider and we'll keep using the previous key. If you need to toggle between API Keys you need to control the `client` yourself and pass it in as a prop rather than an `apiKey` prop.\");\n            }\n            if (options && !isDeepEqual(options, previousInitialization.options)) {\n                posthog_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].set_config(options);\n            }\n            previousInitializationRef.current = {\n                apiKey: apiKey,\n                options: options !== null && options !== void 0 ? options : {}\n            };\n        }\n    }, [\n        client,\n        apiKey,\n        JSON.stringify(options)\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(PostHogContext.Provider, {\n        value: {\n            client: posthog\n        }\n    }, children);\n}\n_s(PostHogProvider, \"YhHz18eR3FWb3p/GSdi8auK0g3A=\");\n_c = PostHogProvider;\nvar usePostHog = function() {\n    _s1();\n    var client = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(PostHogContext).client;\n    return client;\n};\n_s1(usePostHog, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nfunction useFeatureFlagEnabled(flag) {\n    _s2();\n    var client = usePostHog();\n    var _a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(function() {\n        return client.isFeatureEnabled(flag);\n    }), featureEnabled = _a[0], setFeatureEnabled = _a[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        return client.onFeatureFlags(function() {\n            setFeatureEnabled(client.isFeatureEnabled(flag));\n        });\n    }, [\n        client,\n        flag\n    ]);\n    return featureEnabled;\n}\n_s2(useFeatureFlagEnabled, \"ClGlqdA/s5nMnD1LJLcgwCJ1+jw=\", false, function() {\n    return [\n        usePostHog\n    ];\n});\nfunction useFeatureFlagPayload(flag) {\n    _s3();\n    var client = usePostHog();\n    var _a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(function() {\n        return client.getFeatureFlagPayload(flag);\n    }), featureFlagPayload = _a[0], setFeatureFlagPayload = _a[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        return client.onFeatureFlags(function() {\n            setFeatureFlagPayload(client.getFeatureFlagPayload(flag));\n        });\n    }, [\n        client,\n        flag\n    ]);\n    return featureFlagPayload;\n}\n_s3(useFeatureFlagPayload, \"0CyRjSfZ6yIPsW/LE9x6fv4/GY4=\", false, function() {\n    return [\n        usePostHog\n    ];\n});\nfunction useActiveFeatureFlags() {\n    _s4();\n    var client = usePostHog();\n    var _a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(function() {\n        return client.featureFlags.getFlags();\n    }), featureFlags = _a[0], setFeatureFlags = _a[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        return client.onFeatureFlags(function(flags) {\n            setFeatureFlags(flags);\n        });\n    }, [\n        client\n    ]);\n    return featureFlags;\n}\n_s4(useActiveFeatureFlags, \"rtlAvIs8hO9ZmqIJpnEgTi/jX0w=\", false, function() {\n    return [\n        usePostHog\n    ];\n});\nfunction useFeatureFlagVariantKey(flag) {\n    _s5();\n    var client = usePostHog();\n    var _a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(function() {\n        return client.getFeatureFlag(flag);\n    }), featureFlagVariantKey = _a[0], setFeatureFlagVariantKey = _a[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        return client.onFeatureFlags(function() {\n            setFeatureFlagVariantKey(client.getFeatureFlag(flag));\n        });\n    }, [\n        client,\n        flag\n    ]);\n    return featureFlagVariantKey;\n}\n_s5(useFeatureFlagVariantKey, \"HHIJM7ENnpoxnd/dWVk5tmqUdGY=\", false, function() {\n    return [\n        usePostHog\n    ];\n});\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nvar isFunction = function(f) {\n    return typeof f === \"function\";\n};\nvar isUndefined = function(x) {\n    return x === void 0;\n};\nvar isNull = function(x) {\n    return x === null;\n};\nfunction PostHogFeature(_a) {\n    _s6();\n    var flag = _a.flag, match = _a.match, children = _a.children, fallback = _a.fallback, visibilityObserverOptions = _a.visibilityObserverOptions, trackInteraction = _a.trackInteraction, trackView = _a.trackView, props = __rest(_a, [\n        \"flag\",\n        \"match\",\n        \"children\",\n        \"fallback\",\n        \"visibilityObserverOptions\",\n        \"trackInteraction\",\n        \"trackView\"\n    ]);\n    var payload = useFeatureFlagPayload(flag);\n    var variant = useFeatureFlagVariantKey(flag);\n    var shouldTrackInteraction = trackInteraction !== null && trackInteraction !== void 0 ? trackInteraction : true;\n    var shouldTrackView = trackView !== null && trackView !== void 0 ? trackView : true;\n    if (isUndefined(match) || variant === match) {\n        var childNode = isFunction(children) ? children(payload) : children;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(VisibilityAndClickTrackers, __assign({\n            flag: flag,\n            options: visibilityObserverOptions,\n            trackInteraction: shouldTrackInteraction,\n            trackView: shouldTrackView\n        }, props), childNode);\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, fallback);\n}\n_s6(PostHogFeature, \"24aGr2rw1tiIQdQvneRp79fz6/c=\", false, function() {\n    return [\n        useFeatureFlagPayload,\n        useFeatureFlagVariantKey\n    ];\n});\n_c1 = PostHogFeature;\nfunction captureFeatureInteraction(_a) {\n    var _b;\n    var flag = _a.flag, posthog = _a.posthog, flagVariant = _a.flagVariant;\n    var properties = {\n        feature_flag: flag,\n        $set: (_b = {}, _b[\"$feature_interaction/\".concat(flag)] = flagVariant !== null && flagVariant !== void 0 ? flagVariant : true, _b)\n    };\n    if (typeof flagVariant === \"string\") {\n        properties.feature_flag_variant = flagVariant;\n    }\n    posthog.capture(\"$feature_interaction\", properties);\n}\nfunction captureFeatureView(_a) {\n    var _b;\n    var flag = _a.flag, posthog = _a.posthog, flagVariant = _a.flagVariant;\n    var properties = {\n        feature_flag: flag,\n        $set: (_b = {}, _b[\"$feature_view/\".concat(flag)] = flagVariant !== null && flagVariant !== void 0 ? flagVariant : true, _b)\n    };\n    if (typeof flagVariant === \"string\") {\n        properties.feature_flag_variant = flagVariant;\n    }\n    posthog.capture(\"$feature_view\", properties);\n}\nfunction VisibilityAndClickTracker(_a) {\n    _s7();\n    var flag = _a.flag, children = _a.children, onIntersect = _a.onIntersect, onClick = _a.onClick, trackView = _a.trackView, options = _a.options, props = __rest(_a, [\n        \"flag\",\n        \"children\",\n        \"onIntersect\",\n        \"onClick\",\n        \"trackView\",\n        \"options\"\n    ]);\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    var posthog = usePostHog();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        if (isNull(ref.current) || !trackView) return;\n        var observer = new IntersectionObserver(function(_a) {\n            var entry = _a[0];\n            return onIntersect(entry);\n        }, __assign({\n            threshold: 0.1\n        }, options));\n        observer.observe(ref.current);\n        return function() {\n            return observer.disconnect();\n        };\n    }, [\n        flag,\n        options,\n        posthog,\n        ref,\n        trackView,\n        onIntersect\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", __assign({\n        ref: ref\n    }, props, {\n        onClick: onClick\n    }), children);\n}\n_s7(VisibilityAndClickTracker, \"aWQQWV0Ial7w4J7+WdLmF8OOZik=\", false, function() {\n    return [\n        usePostHog\n    ];\n});\n_c2 = VisibilityAndClickTracker;\nfunction VisibilityAndClickTrackers(_a) {\n    _s8();\n    var flag = _a.flag, children = _a.children, trackInteraction = _a.trackInteraction, trackView = _a.trackView, options = _a.options, props = __rest(_a, [\n        \"flag\",\n        \"children\",\n        \"trackInteraction\",\n        \"trackView\",\n        \"options\"\n    ]);\n    var clickTrackedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    var visibilityTrackedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    var posthog = usePostHog();\n    var variant = useFeatureFlagVariantKey(flag);\n    var cachedOnClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function() {\n        if (!clickTrackedRef.current && trackInteraction) {\n            captureFeatureInteraction({\n                flag: flag,\n                posthog: posthog,\n                flagVariant: variant\n            });\n            clickTrackedRef.current = true;\n        }\n    }, [\n        flag,\n        posthog,\n        trackInteraction,\n        variant\n    ]);\n    var onIntersect = function(entry) {\n        if (!visibilityTrackedRef.current && entry.isIntersecting) {\n            captureFeatureView({\n                flag: flag,\n                posthog: posthog,\n                flagVariant: variant\n            });\n            visibilityTrackedRef.current = true;\n        }\n    };\n    var trackedChildren = react__WEBPACK_IMPORTED_MODULE_1__.Children.map(children, function(child) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(VisibilityAndClickTracker, __assign({\n            flag: flag,\n            onClick: cachedOnClick,\n            onIntersect: onIntersect,\n            trackView: trackView,\n            options: options\n        }, props), child);\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, trackedChildren);\n}\n_s8(VisibilityAndClickTrackers, \"eNvIN6/QbbcKpKvDretXW8p8n58=\", false, function() {\n    return [\n        usePostHog,\n        useFeatureFlagVariantKey\n    ];\n});\n_c3 = VisibilityAndClickTrackers;\nvar INITIAL_STATE = {\n    componentStack: null,\n    error: null\n};\nvar __POSTHOG_ERROR_MESSAGES = {\n    INVALID_FALLBACK: \"[PostHog.js][PostHogErrorBoundary] Invalid fallback prop, provide a valid React element or a function that returns a valid React element.\"\n};\nvar PostHogErrorBoundary = function(_super) {\n    __extends(PostHogErrorBoundary, _super);\n    function PostHogErrorBoundary(props) {\n        var _this = _super.call(this, props) || this;\n        _this.state = INITIAL_STATE;\n        return _this;\n    }\n    PostHogErrorBoundary.prototype.componentDidCatch = function(error, errorInfo) {\n        var componentStack = errorInfo.componentStack;\n        var additionalProperties = this.props.additionalProperties;\n        this.setState({\n            error: error,\n            componentStack: componentStack\n        });\n        var currentProperties;\n        if (isFunction(additionalProperties)) {\n            currentProperties = additionalProperties(error);\n        } else if (typeof additionalProperties === \"object\") {\n            currentProperties = additionalProperties;\n        }\n        var client = this.context.client;\n        client.captureException(error, currentProperties);\n    };\n    PostHogErrorBoundary.prototype.render = function() {\n        var _a = this.props, children = _a.children, fallback = _a.fallback;\n        var state = this.state;\n        if (state.componentStack == null) {\n            return isFunction(children) ? children() : children;\n        }\n        var element = isFunction(fallback) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(fallback, {\n            error: state.error,\n            componentStack: state.componentStack\n        }) : fallback;\n        if (/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().isValidElement(element)) {\n            return element;\n        }\n        console.warn(__POSTHOG_ERROR_MESSAGES.INVALID_FALLBACK);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null);\n    };\n    PostHogErrorBoundary.contextType = PostHogContext;\n    return PostHogErrorBoundary;\n}((react__WEBPACK_IMPORTED_MODULE_1___default().Component));\n\nvar _c, _c1, _c2, _c3;\n$RefreshReg$(_c, \"PostHogProvider\");\n$RefreshReg$(_c1, \"PostHogFeature\");\n$RefreshReg$(_c2, \"VisibilityAndClickTracker\");\n$RefreshReg$(_c3, \"VisibilityAndClickTrackers\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/posthog-js/react/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"19f02ea41d08\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9hcHAvZ2xvYmFscy5jc3M/YjI3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjE5ZjAyZWE0MWQwOFwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/add-locale.js":
/*!*****************************************************!*\
  !*** ./node_modules/next/dist/client/add-locale.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"addLocale\", ({\n    enumerable: true,\n    get: function() {\n        return addLocale;\n    }\n}));\nconst _normalizetrailingslash = __webpack_require__(/*! ./normalize-trailing-slash */ \"(app-pages-browser)/./node_modules/next/dist/client/normalize-trailing-slash.js\");\nconst addLocale = function(path) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    if (false) {}\n    return path;\n};\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=add-locale.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2FkZC1sb2NhbGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDZDQUE0QztJQUN4Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLDBCQUEwQkMsbUJBQU9BLENBQUMsbUhBQTRCO0FBQ3BFLE1BQU1GLFlBQVksU0FBU0csSUFBSTtJQUMzQixJQUFJLElBQUlDLE9BQU9DLFVBQVVDLE1BQU0sRUFBRUMsT0FBTyxJQUFJQyxNQUFNSixPQUFPLElBQUlBLE9BQU8sSUFBSSxJQUFJSyxPQUFPLEdBQUdBLE9BQU9MLE1BQU1LLE9BQU87UUFDdEdGLElBQUksQ0FBQ0UsT0FBTyxFQUFFLEdBQUdKLFNBQVMsQ0FBQ0ksS0FBSztJQUNwQztJQUNBLElBQUlDLEtBQStCLEVBQUUsRUFFcEM7SUFDRCxPQUFPUDtBQUNYO0FBRUEsSUFBSSxDQUFDLE9BQU9QLFFBQVFrQixPQUFPLEtBQUssY0FBZSxPQUFPbEIsUUFBUWtCLE9BQU8sS0FBSyxZQUFZbEIsUUFBUWtCLE9BQU8sS0FBSyxJQUFJLEtBQU0sT0FBT2xCLFFBQVFrQixPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLckIsT0FBT0MsY0FBYyxDQUFDQyxRQUFRa0IsT0FBTyxFQUFFLGNBQWM7UUFBRWpCLE9BQU87SUFBSztJQUNuRUgsT0FBT3NCLE1BQU0sQ0FBQ3BCLFFBQVFrQixPQUFPLEVBQUVsQjtJQUMvQnFCLE9BQU9yQixPQUFPLEdBQUdBLFFBQVFrQixPQUFPO0FBQ2xDLEVBRUEsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2FkZC1sb2NhbGUuanM/ZTJkOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFkZExvY2FsZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYWRkTG9jYWxlO1xuICAgIH1cbn0pO1xuY29uc3QgX25vcm1hbGl6ZXRyYWlsaW5nc2xhc2ggPSByZXF1aXJlKFwiLi9ub3JtYWxpemUtdHJhaWxpbmctc2xhc2hcIik7XG5jb25zdCBhZGRMb2NhbGUgPSBmdW5jdGlvbihwYXRoKSB7XG4gICAgZm9yKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKXtcbiAgICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfSTE4Tl9TVVBQT1JUKSB7XG4gICAgICAgIHJldHVybiAoMCwgX25vcm1hbGl6ZXRyYWlsaW5nc2xhc2gubm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2gpKHJlcXVpcmUoXCIuLi9zaGFyZWQvbGliL3JvdXRlci91dGlscy9hZGQtbG9jYWxlXCIpLmFkZExvY2FsZShwYXRoLCAuLi5hcmdzKSk7XG4gICAgfVxuICAgIHJldHVybiBwYXRoO1xufTtcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkLWxvY2FsZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiYWRkTG9jYWxlIiwiX25vcm1hbGl6ZXRyYWlsaW5nc2xhc2giLCJyZXF1aXJlIiwicGF0aCIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwicHJvY2VzcyIsImVudiIsIl9fTkVYVF9JMThOX1NVUFBPUlQiLCJub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaCIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/add-locale.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/get-domain-locale.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/client/get-domain-locale.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getDomainLocale\", ({\n    enumerable: true,\n    get: function() {\n        return getDomainLocale;\n    }\n}));\nconst _normalizetrailingslash = __webpack_require__(/*! ./normalize-trailing-slash */ \"(app-pages-browser)/./node_modules/next/dist/client/normalize-trailing-slash.js\");\nconst basePath =  false || \"\";\nfunction getDomainLocale(path, locale, locales, domainLocales) {\n    if (false) {} else {\n        return false;\n    }\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=get-domain-locale.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2dldC1kb21haW4tbG9jYWxlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCxtREFBa0Q7SUFDOUNJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixNQUFNQywwQkFBMEJDLG1CQUFPQSxDQUFDLG1IQUE0QjtBQUNwRSxNQUFNQyxXQUFXQyxNQUFrQyxJQUFJO0FBQ3ZELFNBQVNKLGdCQUFnQk8sSUFBSSxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsYUFBYTtJQUN6RCxJQUFJTixLQUErQixFQUFFLEVBV3BDLE1BQU07UUFDSCxPQUFPO0lBQ1g7QUFDSjtBQUVBLElBQUksQ0FBQyxPQUFPUixRQUFRMkIsT0FBTyxLQUFLLGNBQWUsT0FBTzNCLFFBQVEyQixPQUFPLEtBQUssWUFBWTNCLFFBQVEyQixPQUFPLEtBQUssSUFBSSxLQUFNLE9BQU8zQixRQUFRMkIsT0FBTyxDQUFDQyxVQUFVLEtBQUssYUFBYTtJQUNySzlCLE9BQU9DLGNBQWMsQ0FBQ0MsUUFBUTJCLE9BQU8sRUFBRSxjQUFjO1FBQUUxQixPQUFPO0lBQUs7SUFDbkVILE9BQU8rQixNQUFNLENBQUM3QixRQUFRMkIsT0FBTyxFQUFFM0I7SUFDL0I4QixPQUFPOUIsT0FBTyxHQUFHQSxRQUFRMkIsT0FBTztBQUNsQyxFQUVBLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9nZXQtZG9tYWluLWxvY2FsZS5qcz81YzI3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0RG9tYWluTG9jYWxlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXREb21haW5Mb2NhbGU7XG4gICAgfVxufSk7XG5jb25zdCBfbm9ybWFsaXpldHJhaWxpbmdzbGFzaCA9IHJlcXVpcmUoXCIuL25vcm1hbGl6ZS10cmFpbGluZy1zbGFzaFwiKTtcbmNvbnN0IGJhc2VQYXRoID0gcHJvY2Vzcy5lbnYuX19ORVhUX1JPVVRFUl9CQVNFUEFUSCB8fCBcIlwiO1xuZnVuY3Rpb24gZ2V0RG9tYWluTG9jYWxlKHBhdGgsIGxvY2FsZSwgbG9jYWxlcywgZG9tYWluTG9jYWxlcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfSTE4Tl9TVVBQT1JUKSB7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZUxvY2FsZVBhdGggPSByZXF1aXJlKFwiLi9ub3JtYWxpemUtbG9jYWxlLXBhdGhcIikubm9ybWFsaXplTG9jYWxlUGF0aDtcbiAgICAgICAgY29uc3QgZGV0ZWN0RG9tYWluTG9jYWxlID0gcmVxdWlyZShcIi4vZGV0ZWN0LWRvbWFpbi1sb2NhbGVcIikuZGV0ZWN0RG9tYWluTG9jYWxlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBsb2NhbGUgfHwgbm9ybWFsaXplTG9jYWxlUGF0aChwYXRoLCBsb2NhbGVzKS5kZXRlY3RlZExvY2FsZTtcbiAgICAgICAgY29uc3QgZG9tYWluID0gZGV0ZWN0RG9tYWluTG9jYWxlKGRvbWFpbkxvY2FsZXMsIHVuZGVmaW5lZCwgdGFyZ2V0KTtcbiAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgY29uc3QgcHJvdG8gPSBcImh0dHBcIiArIChkb21haW4uaHR0cCA/IFwiXCIgOiBcInNcIikgKyBcIjovL1wiO1xuICAgICAgICAgICAgY29uc3QgZmluYWxMb2NhbGUgPSB0YXJnZXQgPT09IGRvbWFpbi5kZWZhdWx0TG9jYWxlID8gXCJcIiA6IFwiL1wiICsgdGFyZ2V0O1xuICAgICAgICAgICAgcmV0dXJuIFwiXCIgKyBwcm90byArIGRvbWFpbi5kb21haW4gKyAoMCwgX25vcm1hbGl6ZXRyYWlsaW5nc2xhc2gubm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2gpKFwiXCIgKyBiYXNlUGF0aCArIGZpbmFsTG9jYWxlICsgcGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1kb21haW4tbG9jYWxlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJnZXREb21haW5Mb2NhbGUiLCJfbm9ybWFsaXpldHJhaWxpbmdzbGFzaCIsInJlcXVpcmUiLCJiYXNlUGF0aCIsInByb2Nlc3MiLCJlbnYiLCJfX05FWFRfUk9VVEVSX0JBU0VQQVRIIiwicGF0aCIsImxvY2FsZSIsImxvY2FsZXMiLCJkb21haW5Mb2NhbGVzIiwiX19ORVhUX0kxOE5fU1VQUE9SVCIsIm5vcm1hbGl6ZUxvY2FsZVBhdGgiLCJkZXRlY3REb21haW5Mb2NhbGUiLCJ0YXJnZXQiLCJkZXRlY3RlZExvY2FsZSIsImRvbWFpbiIsInVuZGVmaW5lZCIsInByb3RvIiwiaHR0cCIsImZpbmFsTG9jYWxlIiwiZGVmYXVsdExvY2FsZSIsIm5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoIiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/get-domain-locale.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/link.js":
/*!***********************************************!*\
  !*** ./node_modules/next/dist/client/link.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* __next_internal_client_entry_do_not_use__  cjs */ \nvar _s = $RefreshSig$();\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: function() {\n        return _default;\n    }\n}));\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\nconst _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nconst _resolvehref = __webpack_require__(/*! ./resolve-href */ \"(app-pages-browser)/./node_modules/next/dist/client/resolve-href.js\");\nconst _islocalurl = __webpack_require__(/*! ../shared/lib/router/utils/is-local-url */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/is-local-url.js\");\nconst _formaturl = __webpack_require__(/*! ../shared/lib/router/utils/format-url */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/format-url.js\");\nconst _utils = __webpack_require__(/*! ../shared/lib/utils */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/utils.js\");\nconst _addlocale = __webpack_require__(/*! ./add-locale */ \"(app-pages-browser)/./node_modules/next/dist/client/add-locale.js\");\nconst _routercontextsharedruntime = __webpack_require__(/*! ../shared/lib/router-context.shared-runtime */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router-context.shared-runtime.js\");\nconst _approutercontextsharedruntime = __webpack_require__(/*! ../shared/lib/app-router-context.shared-runtime */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/app-router-context.shared-runtime.js\");\nconst _useintersection = __webpack_require__(/*! ./use-intersection */ \"(app-pages-browser)/./node_modules/next/dist/client/use-intersection.js\");\nconst _getdomainlocale = __webpack_require__(/*! ./get-domain-locale */ \"(app-pages-browser)/./node_modules/next/dist/client/get-domain-locale.js\");\nconst _addbasepath = __webpack_require__(/*! ./add-base-path */ \"(app-pages-browser)/./node_modules/next/dist/client/add-base-path.js\");\nconst _routerreducertypes = __webpack_require__(/*! ./components/router-reducer/router-reducer-types */ \"(app-pages-browser)/./node_modules/next/dist/client/components/router-reducer/router-reducer-types.js\");\nconst prefetched = new Set();\nfunction prefetch(router, href, as, options, appOptions, isAppRouter) {\n    if (false) {}\n    // app-router supports external urls out of the box so it shouldn't short-circuit here as support for e.g. `replace` is added in the app-router.\n    if (!isAppRouter && !(0, _islocalurl.isLocalURL)(href)) {\n        return;\n    }\n    // We should only dedupe requests when experimental.optimisticClientCache is\n    // disabled.\n    if (!options.bypassPrefetchedCheck) {\n        const locale = typeof options.locale !== \"undefined\" ? options.locale : \"locale\" in router ? router.locale : undefined;\n        const prefetchedKey = href + \"%\" + as + \"%\" + locale;\n        // If we've already fetched the key, then don't prefetch it again!\n        if (prefetched.has(prefetchedKey)) {\n            return;\n        }\n        // Mark this URL as prefetched.\n        prefetched.add(prefetchedKey);\n    }\n    const prefetchPromise = isAppRouter ? router.prefetch(href, appOptions) : router.prefetch(href, as, options);\n    // Prefetch the JSON page if asked (only in the client)\n    // We need to handle a prefetch error here since we may be\n    // loading with priority which can reject but we don't\n    // want to force navigation since this is only a prefetch\n    Promise.resolve(prefetchPromise).catch((err)=>{\n        if (true) {\n            // rethrow to show invalid URL errors\n            throw err;\n        }\n    });\n}\nfunction isModifiedEvent(event) {\n    const eventTarget = event.currentTarget;\n    const target = eventTarget.getAttribute(\"target\");\n    return target && target !== \"_self\" || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey || // triggers resource download\n    event.nativeEvent && event.nativeEvent.which === 2;\n}\nfunction linkClicked(e, router, href, as, replace, shallow, scroll, locale, isAppRouter) {\n    const { nodeName } = e.currentTarget;\n    // anchors inside an svg have a lowercase nodeName\n    const isAnchorNodeName = nodeName.toUpperCase() === \"A\";\n    if (isAnchorNodeName && (isModifiedEvent(e) || // app-router supports external urls out of the box so it shouldn't short-circuit here as support for e.g. `replace` is added in the app-router.\n    !isAppRouter && !(0, _islocalurl.isLocalURL)(href))) {\n        // ignore click for browser’s default behavior\n        return;\n    }\n    e.preventDefault();\n    const navigate = ()=>{\n        // If the router is an NextRouter instance it will have `beforePopState`\n        const routerScroll = scroll != null ? scroll : true;\n        if (\"beforePopState\" in router) {\n            router[replace ? \"replace\" : \"push\"](href, as, {\n                shallow,\n                locale,\n                scroll: routerScroll\n            });\n        } else {\n            router[replace ? \"replace\" : \"push\"](as || href, {\n                scroll: routerScroll\n            });\n        }\n    };\n    if (isAppRouter) {\n        _react.default.startTransition(navigate);\n    } else {\n        navigate();\n    }\n}\nfunction formatStringOrUrl(urlObjOrString) {\n    if (typeof urlObjOrString === \"string\") {\n        return urlObjOrString;\n    }\n    return (0, _formaturl.formatUrl)(urlObjOrString);\n}\n/**\n * React Component that enables client-side transitions between routes.\n */ const Link = /*#__PURE__*/ _s(_react.default.forwardRef(_c = _s(function LinkComponent(props, forwardedRef) {\n    _s();\n    let children;\n    const { href: hrefProp, as: asProp, children: childrenProp, prefetch: prefetchProp = null, passHref, replace, shallow, scroll, locale, onClick, onMouseEnter: onMouseEnterProp, onTouchStart: onTouchStartProp, legacyBehavior = false, ...restProps } = props;\n    children = childrenProp;\n    if (legacyBehavior && (typeof children === \"string\" || typeof children === \"number\")) {\n        children = /*#__PURE__*/ (0, _jsxruntime.jsx)(\"a\", {\n            children: children\n        });\n    }\n    const pagesRouter = _react.default.useContext(_routercontextsharedruntime.RouterContext);\n    const appRouter = _react.default.useContext(_approutercontextsharedruntime.AppRouterContext);\n    const router = pagesRouter != null ? pagesRouter : appRouter;\n    // We're in the app directory if there is no pages router.\n    const isAppRouter = !pagesRouter;\n    const prefetchEnabled = prefetchProp !== false;\n    /**\n     * The possible states for prefetch are:\n     * - null: this is the default \"auto\" mode, where we will prefetch partially if the link is in the viewport\n     * - true: we will prefetch if the link is visible and prefetch the full page, not just partially\n     * - false: we will not prefetch if in the viewport at all\n     */ const appPrefetchKind = prefetchProp === null ? _routerreducertypes.PrefetchKind.AUTO : _routerreducertypes.PrefetchKind.FULL;\n    if (true) {\n        function createPropError(args) {\n            return new Error(\"Failed prop type: The prop `\" + args.key + \"` expects a \" + args.expected + \" in `<Link>`, but got `\" + args.actual + \"` instead.\" + ( true ? \"\\nOpen your browser's console to view the Component stack trace.\" : 0));\n        }\n        // TypeScript trick for type-guarding:\n        const requiredPropsGuard = {\n            href: true\n        };\n        const requiredProps = Object.keys(requiredPropsGuard);\n        requiredProps.forEach((key)=>{\n            if (key === \"href\") {\n                if (props[key] == null || typeof props[key] !== \"string\" && typeof props[key] !== \"object\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`string` or `object`\",\n                        actual: props[key] === null ? \"null\" : typeof props[key]\n                    });\n                }\n            } else {\n                // TypeScript trick for type-guarding:\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const _ = key;\n            }\n        });\n        // TypeScript trick for type-guarding:\n        const optionalPropsGuard = {\n            as: true,\n            replace: true,\n            scroll: true,\n            shallow: true,\n            passHref: true,\n            prefetch: true,\n            locale: true,\n            onClick: true,\n            onMouseEnter: true,\n            onTouchStart: true,\n            legacyBehavior: true\n        };\n        const optionalProps = Object.keys(optionalPropsGuard);\n        optionalProps.forEach((key)=>{\n            const valType = typeof props[key];\n            if (key === \"as\") {\n                if (props[key] && valType !== \"string\" && valType !== \"object\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`string` or `object`\",\n                        actual: valType\n                    });\n                }\n            } else if (key === \"locale\") {\n                if (props[key] && valType !== \"string\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`string`\",\n                        actual: valType\n                    });\n                }\n            } else if (key === \"onClick\" || key === \"onMouseEnter\" || key === \"onTouchStart\") {\n                if (props[key] && valType !== \"function\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`function`\",\n                        actual: valType\n                    });\n                }\n            } else if (key === \"replace\" || key === \"scroll\" || key === \"shallow\" || key === \"passHref\" || key === \"prefetch\" || key === \"legacyBehavior\") {\n                if (props[key] != null && valType !== \"boolean\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`boolean`\",\n                        actual: valType\n                    });\n                }\n            } else {\n                // TypeScript trick for type-guarding:\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const _ = key;\n            }\n        });\n        // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const hasWarned = _react.default.useRef(false);\n        if (props.prefetch && !hasWarned.current && !isAppRouter) {\n            hasWarned.current = true;\n            console.warn(\"Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://nextjs.org/docs/messages/prefetch-true-deprecated\");\n        }\n    }\n    if (true) {\n        if (isAppRouter && !asProp) {\n            let href;\n            if (typeof hrefProp === \"string\") {\n                href = hrefProp;\n            } else if (typeof hrefProp === \"object\" && typeof hrefProp.pathname === \"string\") {\n                href = hrefProp.pathname;\n            }\n            if (href) {\n                const hasDynamicSegment = href.split(\"/\").some((segment)=>segment.startsWith(\"[\") && segment.endsWith(\"]\"));\n                if (hasDynamicSegment) {\n                    throw new Error(\"Dynamic href `\" + href + \"` found in <Link> while using the `/app` router, this is not supported. Read more: https://nextjs.org/docs/messages/app-dir-dynamic-href\");\n                }\n            }\n        }\n    }\n    const { href, as } = _react.default.useMemo(()=>{\n        if (!pagesRouter) {\n            const resolvedHref = formatStringOrUrl(hrefProp);\n            return {\n                href: resolvedHref,\n                as: asProp ? formatStringOrUrl(asProp) : resolvedHref\n            };\n        }\n        const [resolvedHref, resolvedAs] = (0, _resolvehref.resolveHref)(pagesRouter, hrefProp, true);\n        return {\n            href: resolvedHref,\n            as: asProp ? (0, _resolvehref.resolveHref)(pagesRouter, asProp) : resolvedAs || resolvedHref\n        };\n    }, [\n        pagesRouter,\n        hrefProp,\n        asProp\n    ]);\n    const previousHref = _react.default.useRef(href);\n    const previousAs = _react.default.useRef(as);\n    // This will return the first child, if multiple are provided it will throw an error\n    let child;\n    if (legacyBehavior) {\n        if (true) {\n            if (onClick) {\n                console.warn('\"onClick\" was passed to <Link> with `href` of `' + hrefProp + '` but \"legacyBehavior\" was set. The legacy behavior requires onClick be set on the child of next/link');\n            }\n            if (onMouseEnterProp) {\n                console.warn('\"onMouseEnter\" was passed to <Link> with `href` of `' + hrefProp + '` but \"legacyBehavior\" was set. The legacy behavior requires onMouseEnter be set on the child of next/link');\n            }\n            try {\n                child = _react.default.Children.only(children);\n            } catch (err) {\n                if (!children) {\n                    throw new Error(\"No children were passed to <Link> with `href` of `\" + hrefProp + \"` but one child is required https://nextjs.org/docs/messages/link-no-children\");\n                }\n                throw new Error(\"Multiple children were passed to <Link> with `href` of `\" + hrefProp + \"` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children\" + ( true ? \" \\nOpen your browser's console to view the Component stack trace.\" : 0));\n            }\n        } else {}\n    } else {\n        if (true) {\n            if ((children == null ? void 0 : children.type) === \"a\") {\n                throw new Error(\"Invalid <Link> with <a> child. Please remove <a> or use <Link legacyBehavior>.\\nLearn more: https://nextjs.org/docs/messages/invalid-new-link-with-extra-anchor\");\n            }\n        }\n    }\n    const childRef = legacyBehavior ? child && typeof child === \"object\" && child.ref : forwardedRef;\n    const [setIntersectionRef, isVisible, resetVisible] = (0, _useintersection.useIntersection)({\n        rootMargin: \"200px\"\n    });\n    const setRef = _react.default.useCallback((el)=>{\n        // Before the link getting observed, check if visible state need to be reset\n        if (previousAs.current !== as || previousHref.current !== href) {\n            resetVisible();\n            previousAs.current = as;\n            previousHref.current = href;\n        }\n        setIntersectionRef(el);\n        if (childRef) {\n            if (typeof childRef === \"function\") childRef(el);\n            else if (typeof childRef === \"object\") {\n                childRef.current = el;\n            }\n        }\n    }, [\n        as,\n        childRef,\n        href,\n        resetVisible,\n        setIntersectionRef\n    ]);\n    // Prefetch the URL if we haven't already and it's visible.\n    _react.default.useEffect(()=>{\n        // in dev, we only prefetch on hover to avoid wasting resources as the prefetch will trigger compiling the page.\n        if (true) {\n            return;\n        }\n        if (!router) {\n            return;\n        }\n        // If we don't need to prefetch the URL, don't do prefetch.\n        if (!isVisible || !prefetchEnabled) {\n            return;\n        }\n        // Prefetch the URL.\n        prefetch(router, href, as, {\n            locale\n        }, {\n            kind: appPrefetchKind\n        }, isAppRouter);\n    }, [\n        as,\n        href,\n        isVisible,\n        locale,\n        prefetchEnabled,\n        pagesRouter == null ? void 0 : pagesRouter.locale,\n        router,\n        isAppRouter,\n        appPrefetchKind\n    ]);\n    const childProps = {\n        ref: setRef,\n        onClick (e) {\n            if (true) {\n                if (!e) {\n                    throw new Error('Component rendered inside next/link has to pass click event to \"onClick\" prop.');\n                }\n            }\n            if (!legacyBehavior && typeof onClick === \"function\") {\n                onClick(e);\n            }\n            if (legacyBehavior && child.props && typeof child.props.onClick === \"function\") {\n                child.props.onClick(e);\n            }\n            if (!router) {\n                return;\n            }\n            if (e.defaultPrevented) {\n                return;\n            }\n            linkClicked(e, router, href, as, replace, shallow, scroll, locale, isAppRouter);\n        },\n        onMouseEnter (e) {\n            if (!legacyBehavior && typeof onMouseEnterProp === \"function\") {\n                onMouseEnterProp(e);\n            }\n            if (legacyBehavior && child.props && typeof child.props.onMouseEnter === \"function\") {\n                child.props.onMouseEnter(e);\n            }\n            if (!router) {\n                return;\n            }\n            if ((!prefetchEnabled || \"development\" === \"development\") && isAppRouter) {\n                return;\n            }\n            prefetch(router, href, as, {\n                locale,\n                priority: true,\n                // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n                bypassPrefetchedCheck: true\n            }, {\n                kind: appPrefetchKind\n            }, isAppRouter);\n        },\n        onTouchStart (e) {\n            if (!legacyBehavior && typeof onTouchStartProp === \"function\") {\n                onTouchStartProp(e);\n            }\n            if (legacyBehavior && child.props && typeof child.props.onTouchStart === \"function\") {\n                child.props.onTouchStart(e);\n            }\n            if (!router) {\n                return;\n            }\n            if (!prefetchEnabled && isAppRouter) {\n                return;\n            }\n            prefetch(router, href, as, {\n                locale,\n                priority: true,\n                // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n                bypassPrefetchedCheck: true\n            }, {\n                kind: appPrefetchKind\n            }, isAppRouter);\n        }\n    };\n    // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is\n    // defined, we specify the current 'href', so that repetition is not needed by the user.\n    // If the url is absolute, we can bypass the logic to prepend the domain and locale.\n    if ((0, _utils.isAbsoluteUrl)(as)) {\n        childProps.href = as;\n    } else if (!legacyBehavior || passHref || child.type === \"a\" && !(\"href\" in child.props)) {\n        const curLocale = typeof locale !== \"undefined\" ? locale : pagesRouter == null ? void 0 : pagesRouter.locale;\n        // we only render domain locales if we are currently on a domain locale\n        // so that locale links are still visitable in development/preview envs\n        const localeDomain = (pagesRouter == null ? void 0 : pagesRouter.isLocaleDomain) && (0, _getdomainlocale.getDomainLocale)(as, curLocale, pagesRouter == null ? void 0 : pagesRouter.locales, pagesRouter == null ? void 0 : pagesRouter.domainLocales);\n        childProps.href = localeDomain || (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(as, curLocale, pagesRouter == null ? void 0 : pagesRouter.defaultLocale));\n    }\n    return legacyBehavior ? /*#__PURE__*/ _react.default.cloneElement(child, childProps) : /*#__PURE__*/ (0, _jsxruntime.jsx)(\"a\", {\n        ...restProps,\n        ...childProps,\n        children: children\n    });\n}, \"wKD5mb5mk47bkaStGb/Fvd6RWZE=\")), \"wKD5mb5mk47bkaStGb/Fvd6RWZE=\");\n_c1 = Link;\nconst _default = Link;\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=link.js.map\nvar _c, _c1;\n$RefreshReg$(_c, \"Link$_react.default.forwardRef\");\n$RefreshReg$(_c1, \"Link\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/link.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/request-idle-callback.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/client/request-idle-callback.js ***!
  \****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    requestIdleCallback: function() {\n        return requestIdleCallback;\n    },\n    cancelIdleCallback: function() {\n        return cancelIdleCallback;\n    }\n});\nconst requestIdleCallback = typeof self !== \"undefined\" && self.requestIdleCallback && self.requestIdleCallback.bind(window) || function(cb) {\n    let start = Date.now();\n    return self.setTimeout(function() {\n        cb({\n            didTimeout: false,\n            timeRemaining: function() {\n                return Math.max(0, 50 - (Date.now() - start));\n            }\n        });\n    }, 1);\n};\nconst cancelIdleCallback = typeof self !== \"undefined\" && self.cancelIdleCallback && self.cancelIdleCallback.bind(window) || function(id) {\n    return clearTimeout(id);\n};\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=request-idle-callback.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3JlcXVlc3QtaWRsZS1jYWxsYmFjay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRixLQUFNQyxDQUFBQSxDQUdOO0FBQ0EsU0FBU0csUUFBUUMsTUFBTSxFQUFFQyxHQUFHO0lBQ3hCLElBQUksSUFBSUMsUUFBUUQsSUFBSVQsT0FBT0MsY0FBYyxDQUFDTyxRQUFRRSxNQUFNO1FBQ3BEQyxZQUFZO1FBQ1pDLEtBQUtILEdBQUcsQ0FBQ0MsS0FBSztJQUNsQjtBQUNKO0FBQ0FILFFBQVFMLFNBQVM7SUFDYkcscUJBQXFCO1FBQ2pCLE9BQU9BO0lBQ1g7SUFDQUMsb0JBQW9CO1FBQ2hCLE9BQU9BO0lBQ1g7QUFDSjtBQUNBLE1BQU1ELHNCQUFzQixPQUFPUSxTQUFTLGVBQWVBLEtBQUtSLG1CQUFtQixJQUFJUSxLQUFLUixtQkFBbUIsQ0FBQ1MsSUFBSSxDQUFDQyxXQUFXLFNBQVNDLEVBQUU7SUFDdkksSUFBSUMsUUFBUUMsS0FBS0MsR0FBRztJQUNwQixPQUFPTixLQUFLTyxVQUFVLENBQUM7UUFDbkJKLEdBQUc7WUFDQ0ssWUFBWTtZQUNaQyxlQUFlO2dCQUNYLE9BQU9DLEtBQUtDLEdBQUcsQ0FBQyxHQUFHLEtBQU1OLENBQUFBLEtBQUtDLEdBQUcsS0FBS0YsS0FBSTtZQUM5QztRQUNKO0lBQ0osR0FBRztBQUNQO0FBQ0EsTUFBTVgscUJBQXFCLE9BQU9PLFNBQVMsZUFBZUEsS0FBS1Asa0JBQWtCLElBQUlPLEtBQUtQLGtCQUFrQixDQUFDUSxJQUFJLENBQUNDLFdBQVcsU0FBU1UsRUFBRTtJQUNwSSxPQUFPQyxhQUFhRDtBQUN4QjtBQUVBLElBQUksQ0FBQyxPQUFPdkIsUUFBUXlCLE9BQU8sS0FBSyxjQUFlLE9BQU96QixRQUFReUIsT0FBTyxLQUFLLFlBQVl6QixRQUFReUIsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPekIsUUFBUXlCLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLGFBQWE7SUFDcks1QixPQUFPQyxjQUFjLENBQUNDLFFBQVF5QixPQUFPLEVBQUUsY0FBYztRQUFFeEIsT0FBTztJQUFLO0lBQ25FSCxPQUFPNkIsTUFBTSxDQUFDM0IsUUFBUXlCLE9BQU8sRUFBRXpCO0lBQy9CRSxPQUFPRixPQUFPLEdBQUdBLFFBQVF5QixPQUFPO0FBQ2xDLEVBRUEsaURBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3JlcXVlc3QtaWRsZS1jYWxsYmFjay5qcz8xZTIwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgcmVxdWVzdElkbGVDYWxsYmFjazogbnVsbCxcbiAgICBjYW5jZWxJZGxlQ2FsbGJhY2s6IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgcmVxdWVzdElkbGVDYWxsYmFjazogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0SWRsZUNhbGxiYWNrO1xuICAgIH0sXG4gICAgY2FuY2VsSWRsZUNhbGxiYWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGNhbmNlbElkbGVDYWxsYmFjaztcbiAgICB9XG59KTtcbmNvbnN0IHJlcXVlc3RJZGxlQ2FsbGJhY2sgPSB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnJlcXVlc3RJZGxlQ2FsbGJhY2sgJiYgc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrLmJpbmQod2luZG93KSB8fCBmdW5jdGlvbihjYikge1xuICAgIGxldCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgcmV0dXJuIHNlbGYuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgY2Ioe1xuICAgICAgICAgICAgZGlkVGltZW91dDogZmFsc2UsXG4gICAgICAgICAgICB0aW1lUmVtYWluaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgNTAgLSAoRGF0ZS5ub3coKSAtIHN0YXJ0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sIDEpO1xufTtcbmNvbnN0IGNhbmNlbElkbGVDYWxsYmFjayA9IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2FuY2VsSWRsZUNhbGxiYWNrICYmIHNlbGYuY2FuY2VsSWRsZUNhbGxiYWNrLmJpbmQod2luZG93KSB8fCBmdW5jdGlvbihpZCkge1xuICAgIHJldHVybiBjbGVhclRpbWVvdXQoaWQpO1xufTtcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdC1pZGxlLWNhbGxiYWNrLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZHVsZSIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJjYW5jZWxJZGxlQ2FsbGJhY2siLCJfZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImVudW1lcmFibGUiLCJnZXQiLCJzZWxmIiwiYmluZCIsIndpbmRvdyIsImNiIiwic3RhcnQiLCJEYXRlIiwibm93Iiwic2V0VGltZW91dCIsImRpZFRpbWVvdXQiLCJ0aW1lUmVtYWluaW5nIiwiTWF0aCIsIm1heCIsImlkIiwiY2xlYXJUaW1lb3V0IiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/request-idle-callback.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/resolve-href.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/client/resolve-href.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"resolveHref\", ({\n    enumerable: true,\n    get: function() {\n        return resolveHref;\n    }\n}));\nconst _querystring = __webpack_require__(/*! ../shared/lib/router/utils/querystring */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/querystring.js\");\nconst _formaturl = __webpack_require__(/*! ../shared/lib/router/utils/format-url */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/format-url.js\");\nconst _omit = __webpack_require__(/*! ../shared/lib/router/utils/omit */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/omit.js\");\nconst _utils = __webpack_require__(/*! ../shared/lib/utils */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/utils.js\");\nconst _normalizetrailingslash = __webpack_require__(/*! ./normalize-trailing-slash */ \"(app-pages-browser)/./node_modules/next/dist/client/normalize-trailing-slash.js\");\nconst _islocalurl = __webpack_require__(/*! ../shared/lib/router/utils/is-local-url */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/is-local-url.js\");\nconst _utils1 = __webpack_require__(/*! ../shared/lib/router/utils */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/index.js\");\nconst _interpolateas = __webpack_require__(/*! ../shared/lib/router/utils/interpolate-as */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/interpolate-as.js\");\nfunction resolveHref(router, href, resolveAs) {\n    // we use a dummy base url for relative urls\n    let base;\n    let urlAsString = typeof href === \"string\" ? href : (0, _formaturl.formatWithValidation)(href);\n    // repeated slashes and backslashes in the URL are considered\n    // invalid and will never match a Next.js page/file\n    const urlProtoMatch = urlAsString.match(/^[a-zA-Z]{1,}:\\/\\//);\n    const urlAsStringNoProto = urlProtoMatch ? urlAsString.slice(urlProtoMatch[0].length) : urlAsString;\n    const urlParts = urlAsStringNoProto.split(\"?\", 1);\n    if ((urlParts[0] || \"\").match(/(\\/\\/|\\\\)/)) {\n        console.error(\"Invalid href '\" + urlAsString + \"' passed to next/router in page: '\" + router.pathname + \"'. Repeated forward-slashes (//) or backslashes \\\\ are not valid in the href.\");\n        const normalizedUrl = (0, _utils.normalizeRepeatedSlashes)(urlAsStringNoProto);\n        urlAsString = (urlProtoMatch ? urlProtoMatch[0] : \"\") + normalizedUrl;\n    }\n    // Return because it cannot be routed by the Next.js router\n    if (!(0, _islocalurl.isLocalURL)(urlAsString)) {\n        return resolveAs ? [\n            urlAsString\n        ] : urlAsString;\n    }\n    try {\n        base = new URL(urlAsString.startsWith(\"#\") ? router.asPath : router.pathname, \"http://n\");\n    } catch (_) {\n        // fallback to / for invalid asPath values e.g. //\n        base = new URL(\"/\", \"http://n\");\n    }\n    try {\n        const finalUrl = new URL(urlAsString, base);\n        finalUrl.pathname = (0, _normalizetrailingslash.normalizePathTrailingSlash)(finalUrl.pathname);\n        let interpolatedAs = \"\";\n        if ((0, _utils1.isDynamicRoute)(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {\n            const query = (0, _querystring.searchParamsToUrlQuery)(finalUrl.searchParams);\n            const { result, params } = (0, _interpolateas.interpolateAs)(finalUrl.pathname, finalUrl.pathname, query);\n            if (result) {\n                interpolatedAs = (0, _formaturl.formatWithValidation)({\n                    pathname: result,\n                    hash: finalUrl.hash,\n                    query: (0, _omit.omit)(query, params)\n                });\n            }\n        }\n        // if the origin didn't change, it means we received a relative href\n        const resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;\n        return resolveAs ? [\n            resolvedHref,\n            interpolatedAs || resolvedHref\n        ] : resolvedHref;\n    } catch (_) {\n        return resolveAs ? [\n            urlAsString\n        ] : urlAsString;\n    }\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=resolve-href.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/resolve-href.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/use-intersection.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/client/use-intersection.js ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"useIntersection\", ({\n    enumerable: true,\n    get: function() {\n        return useIntersection;\n    }\n}));\nconst _react = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nconst _requestidlecallback = __webpack_require__(/*! ./request-idle-callback */ \"(app-pages-browser)/./node_modules/next/dist/client/request-idle-callback.js\");\nconst hasIntersectionObserver = typeof IntersectionObserver === \"function\";\nconst observers = new Map();\nconst idList = [];\nfunction createObserver(options) {\n    const id = {\n        root: options.root || null,\n        margin: options.rootMargin || \"\"\n    };\n    const existing = idList.find((obj)=>obj.root === id.root && obj.margin === id.margin);\n    let instance;\n    if (existing) {\n        instance = observers.get(existing);\n        if (instance) {\n            return instance;\n        }\n    }\n    const elements = new Map();\n    const observer = new IntersectionObserver((entries)=>{\n        entries.forEach((entry)=>{\n            const callback = elements.get(entry.target);\n            const isVisible = entry.isIntersecting || entry.intersectionRatio > 0;\n            if (callback && isVisible) {\n                callback(isVisible);\n            }\n        });\n    }, options);\n    instance = {\n        id,\n        observer,\n        elements\n    };\n    idList.push(id);\n    observers.set(id, instance);\n    return instance;\n}\nfunction observe(element, callback, options) {\n    const { id, observer, elements } = createObserver(options);\n    elements.set(element, callback);\n    observer.observe(element);\n    return function unobserve() {\n        elements.delete(element);\n        observer.unobserve(element);\n        // Destroy observer when there's nothing left to watch:\n        if (elements.size === 0) {\n            observer.disconnect();\n            observers.delete(id);\n            const index = idList.findIndex((obj)=>obj.root === id.root && obj.margin === id.margin);\n            if (index > -1) {\n                idList.splice(index, 1);\n            }\n        }\n    };\n}\nfunction useIntersection(param) {\n    let { rootRef, rootMargin, disabled } = param;\n    const isDisabled = disabled || !hasIntersectionObserver;\n    const [visible, setVisible] = (0, _react.useState)(false);\n    const elementRef = (0, _react.useRef)(null);\n    const setElement = (0, _react.useCallback)((element)=>{\n        elementRef.current = element;\n    }, []);\n    (0, _react.useEffect)(()=>{\n        if (hasIntersectionObserver) {\n            if (isDisabled || visible) return;\n            const element = elementRef.current;\n            if (element && element.tagName) {\n                const unobserve = observe(element, (isVisible)=>isVisible && setVisible(isVisible), {\n                    root: rootRef == null ? void 0 : rootRef.current,\n                    rootMargin\n                });\n                return unobserve;\n            }\n        } else {\n            if (!visible) {\n                const idleCallback = (0, _requestidlecallback.requestIdleCallback)(()=>setVisible(true));\n                return ()=>(0, _requestidlecallback.cancelIdleCallback)(idleCallback);\n            }\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        isDisabled,\n        rootMargin,\n        rootRef,\n        visible,\n        elementRef.current\n    ]);\n    const resetVisible = (0, _react.useCallback)(()=>{\n        setVisible(false);\n    }, []);\n    return [\n        setElement,\n        visible,\n        resetVisible\n    ];\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=use-intersection.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/use-intersection.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/escape-regexp.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/escape-regexp.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("// regexp is based on https://github.com/sindresorhus/escape-string-regexp\n\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"escapeStringRegexp\", ({\n    enumerable: true,\n    get: function() {\n        return escapeStringRegexp;\n    }\n}));\nconst reHasRegExp = /[|\\\\{}()[\\]^$+*?.-]/;\nconst reReplaceRegExp = /[|\\\\{}()[\\]^$+*?.-]/g;\nfunction escapeStringRegexp(str) {\n    // see also: https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/escapeRegExp.js#L23\n    if (reHasRegExp.test(str)) {\n        return str.replace(reReplaceRegExp, \"\\\\$&\");\n    }\n    return str;\n} //# sourceMappingURL=escape-regexp.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9lc2NhcGUtcmVnZXhwLmpzIiwibWFwcGluZ3MiOiJBQUFBLDBFQUEwRTtBQUM3RDtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsc0RBQXFEO0lBQ2pESSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsY0FBYztBQUNwQixNQUFNQyxrQkFBa0I7QUFDeEIsU0FBU0YsbUJBQW1CRyxHQUFHO0lBQzNCLCtHQUErRztJQUMvRyxJQUFJRixZQUFZRyxJQUFJLENBQUNELE1BQU07UUFDdkIsT0FBT0EsSUFBSUUsT0FBTyxDQUFDSCxpQkFBaUI7SUFDeEM7SUFDQSxPQUFPQztBQUNYLEVBRUEseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9lc2NhcGUtcmVnZXhwLmpzP2RiZmIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVnZXhwIGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvZXNjYXBlLXN0cmluZy1yZWdleHBcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZXNjYXBlU3RyaW5nUmVnZXhwXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBlc2NhcGVTdHJpbmdSZWdleHA7XG4gICAgfVxufSk7XG5jb25zdCByZUhhc1JlZ0V4cCA9IC9bfFxcXFx7fSgpW1xcXV4kKyo/Li1dLztcbmNvbnN0IHJlUmVwbGFjZVJlZ0V4cCA9IC9bfFxcXFx7fSgpW1xcXV4kKyo/Li1dL2c7XG5mdW5jdGlvbiBlc2NhcGVTdHJpbmdSZWdleHAoc3RyKSB7XG4gICAgLy8gc2VlIGFsc286IGh0dHBzOi8vZ2l0aHViLmNvbS9sb2Rhc2gvbG9kYXNoL2Jsb2IvMmRhMDI0YzNiNGY5OTQ3YTQ4NTE3NjM5ZGU3NTYwNDU3Y2Q0ZWM2Yy9lc2NhcGVSZWdFeHAuanMjTDIzXG4gICAgaWYgKHJlSGFzUmVnRXhwLnRlc3Qoc3RyKSkge1xuICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UocmVSZXBsYWNlUmVnRXhwLCBcIlxcXFwkJlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXNjYXBlLXJlZ2V4cC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZXNjYXBlU3RyaW5nUmVnZXhwIiwicmVIYXNSZWdFeHAiLCJyZVJlcGxhY2VSZWdFeHAiLCJzdHIiLCJ0ZXN0IiwicmVwbGFjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/escape-regexp.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router-context.shared-runtime.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router-context.shared-runtime.js ***!
  \****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"RouterContext\", ({\n    enumerable: true,\n    get: function() {\n        return RouterContext;\n    }\n}));\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nconst RouterContext = _react.default.createContext(null);\nif (true) {\n    RouterContext.displayName = \"RouterContext\";\n} //# sourceMappingURL=router-context.shared-runtime.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXItY29udGV4dC5zaGFyZWQtcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsaURBQWdEO0lBQzVDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsMkJBQTJCQyxtQkFBT0EsQ0FBQyxnSUFBeUM7QUFDbEYsTUFBTUMsU0FBUyxXQUFXLEdBQUdGLHlCQUF5QkcsQ0FBQyxDQUFDRixtQkFBT0EsQ0FBQyxtRkFBTztBQUN2RSxNQUFNRixnQkFBZ0JHLE9BQU9FLE9BQU8sQ0FBQ0MsYUFBYSxDQUFDO0FBQ25ELElBQUlDLElBQXFDLEVBQUU7SUFDdkNQLGNBQWNRLFdBQVcsR0FBRztBQUNoQyxFQUVBLHlEQUF5RCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyLWNvbnRleHQuc2hhcmVkLXJ1bnRpbWUuanM/OGZhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJvdXRlckNvbnRleHRcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFJvdXRlckNvbnRleHQ7XG4gICAgfVxufSk7XG5jb25zdCBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQgPSByZXF1aXJlKFwiQHN3Yy9oZWxwZXJzL18vX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0XCIpO1xuY29uc3QgX3JlYWN0ID0gLyojX19QVVJFX18qLyBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQuXyhyZXF1aXJlKFwicmVhY3RcIikpO1xuY29uc3QgUm91dGVyQ29udGV4dCA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgUm91dGVyQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiUm91dGVyQ29udGV4dFwiO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0ZXItY29udGV4dC5zaGFyZWQtcnVudGltZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiUm91dGVyQ29udGV4dCIsIl9pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfIiwiZGVmYXVsdCIsImNyZWF0ZUNvbnRleHQiLCJwcm9jZXNzIiwiZGlzcGxheU5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router-context.shared-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/format-url.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/format-url.js ***!
  \**********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("// Format function modified from nodejs\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    formatUrl: function() {\n        return formatUrl;\n    },\n    urlObjectKeys: function() {\n        return urlObjectKeys;\n    },\n    formatWithValidation: function() {\n        return formatWithValidation;\n    }\n});\nconst _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_wildcard.js\");\nconst _querystring = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./querystring */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/querystring.js\"));\nconst slashedProtocols = /https?|ftp|gopher|file/;\nfunction formatUrl(urlObj) {\n    let { auth, hostname } = urlObj;\n    let protocol = urlObj.protocol || \"\";\n    let pathname = urlObj.pathname || \"\";\n    let hash = urlObj.hash || \"\";\n    let query = urlObj.query || \"\";\n    let host = false;\n    auth = auth ? encodeURIComponent(auth).replace(/%3A/i, \":\") + \"@\" : \"\";\n    if (urlObj.host) {\n        host = auth + urlObj.host;\n    } else if (hostname) {\n        host = auth + (~hostname.indexOf(\":\") ? \"[\" + hostname + \"]\" : hostname);\n        if (urlObj.port) {\n            host += \":\" + urlObj.port;\n        }\n    }\n    if (query && typeof query === \"object\") {\n        query = String(_querystring.urlQueryToSearchParams(query));\n    }\n    let search = urlObj.search || query && \"?\" + query || \"\";\n    if (protocol && !protocol.endsWith(\":\")) protocol += \":\";\n    if (urlObj.slashes || (!protocol || slashedProtocols.test(protocol)) && host !== false) {\n        host = \"//\" + (host || \"\");\n        if (pathname && pathname[0] !== \"/\") pathname = \"/\" + pathname;\n    } else if (!host) {\n        host = \"\";\n    }\n    if (hash && hash[0] !== \"#\") hash = \"#\" + hash;\n    if (search && search[0] !== \"?\") search = \"?\" + search;\n    pathname = pathname.replace(/[?#]/g, encodeURIComponent);\n    search = search.replace(\"#\", \"%23\");\n    return \"\" + protocol + host + pathname + search + hash;\n}\nconst urlObjectKeys = [\n    \"auth\",\n    \"hash\",\n    \"host\",\n    \"hostname\",\n    \"href\",\n    \"path\",\n    \"pathname\",\n    \"port\",\n    \"protocol\",\n    \"query\",\n    \"search\",\n    \"slashes\"\n];\nfunction formatWithValidation(url) {\n    if (true) {\n        if (url !== null && typeof url === \"object\") {\n            Object.keys(url).forEach((key)=>{\n                if (!urlObjectKeys.includes(key)) {\n                    console.warn(\"Unknown key passed via urlObject into url.format: \" + key);\n                }\n            });\n        }\n    }\n    return formatUrl(url);\n} //# sourceMappingURL=format-url.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/format-url.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/index.js ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    getSortedRoutes: function() {\n        return _sortedroutes.getSortedRoutes;\n    },\n    isDynamicRoute: function() {\n        return _isdynamic.isDynamicRoute;\n    }\n});\nconst _sortedroutes = __webpack_require__(/*! ./sorted-routes */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/sorted-routes.js\");\nconst _isdynamic = __webpack_require__(/*! ./is-dynamic */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/is-dynamic.js\"); //# sourceMappingURL=index.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0YsS0FBTUMsQ0FBQUEsQ0FHTjtBQUNBLFNBQVNHLFFBQVFDLE1BQU0sRUFBRUMsR0FBRztJQUN4QixJQUFJLElBQUlDLFFBQVFELElBQUlULE9BQU9DLGNBQWMsQ0FBQ08sUUFBUUUsTUFBTTtRQUNwREMsWUFBWTtRQUNaQyxLQUFLSCxHQUFHLENBQUNDLEtBQUs7SUFDbEI7QUFDSjtBQUNBSCxRQUFRTCxTQUFTO0lBQ2JHLGlCQUFpQjtRQUNiLE9BQU9RLGNBQWNSLGVBQWU7SUFDeEM7SUFDQUMsZ0JBQWdCO1FBQ1osT0FBT1EsV0FBV1IsY0FBYztJQUNwQztBQUNKO0FBQ0EsTUFBTU8sZ0JBQWdCRSxtQkFBT0EsQ0FBQyw4R0FBaUI7QUFDL0MsTUFBTUQsYUFBYUMsbUJBQU9BLENBQUMsd0dBQWMsR0FFekMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvaW5kZXguanM/ZjUyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGdldFNvcnRlZFJvdXRlczogbnVsbCxcbiAgICBpc0R5bmFtaWNSb3V0ZTogbnVsbFxufSk7XG5mdW5jdGlvbiBfZXhwb3J0KHRhcmdldCwgYWxsKSB7XG4gICAgZm9yKHZhciBuYW1lIGluIGFsbClPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogYWxsW25hbWVdXG4gICAgfSk7XG59XG5fZXhwb3J0KGV4cG9ydHMsIHtcbiAgICBnZXRTb3J0ZWRSb3V0ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3NvcnRlZHJvdXRlcy5nZXRTb3J0ZWRSb3V0ZXM7XG4gICAgfSxcbiAgICBpc0R5bmFtaWNSb3V0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfaXNkeW5hbWljLmlzRHluYW1pY1JvdXRlO1xuICAgIH1cbn0pO1xuY29uc3QgX3NvcnRlZHJvdXRlcyA9IHJlcXVpcmUoXCIuL3NvcnRlZC1yb3V0ZXNcIik7XG5jb25zdCBfaXNkeW5hbWljID0gcmVxdWlyZShcIi4vaXMtZHluYW1pY1wiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwiZ2V0U29ydGVkUm91dGVzIiwiaXNEeW5hbWljUm91dGUiLCJfZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImVudW1lcmFibGUiLCJnZXQiLCJfc29ydGVkcm91dGVzIiwiX2lzZHluYW1pYyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/interpolate-as.js":
/*!**************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/interpolate-as.js ***!
  \**************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"interpolateAs\", ({\n    enumerable: true,\n    get: function() {\n        return interpolateAs;\n    }\n}));\nconst _routematcher = __webpack_require__(/*! ./route-matcher */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/route-matcher.js\");\nconst _routeregex = __webpack_require__(/*! ./route-regex */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/route-regex.js\");\nfunction interpolateAs(route, asPathname, query) {\n    let interpolatedRoute = \"\";\n    const dynamicRegex = (0, _routeregex.getRouteRegex)(route);\n    const dynamicGroups = dynamicRegex.groups;\n    const dynamicMatches = (asPathname !== route ? (0, _routematcher.getRouteMatcher)(dynamicRegex)(asPathname) : \"\") || // Fall back to reading the values from the href\n    // TODO: should this take priority; also need to change in the router.\n    query;\n    interpolatedRoute = route;\n    const params = Object.keys(dynamicGroups);\n    if (!params.every((param)=>{\n        let value = dynamicMatches[param] || \"\";\n        const { repeat, optional } = dynamicGroups[param];\n        // support single-level catch-all\n        // TODO: more robust handling for user-error (passing `/`)\n        let replaced = \"[\" + (repeat ? \"...\" : \"\") + param + \"]\";\n        if (optional) {\n            replaced = (!value ? \"/\" : \"\") + \"[\" + replaced + \"]\";\n        }\n        if (repeat && !Array.isArray(value)) value = [\n            value\n        ];\n        return (optional || param in dynamicMatches) && // Interpolate group into data URL if present\n        (interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map(// path delimiter escaped since they are being inserted\n        // into the URL and we expect URL encoded segments\n        // when parsing dynamic route params\n        (segment)=>encodeURIComponent(segment)).join(\"/\") : encodeURIComponent(value)) || \"/\");\n    })) {\n        interpolatedRoute = \"\" // did not satisfy all requirements\n        ;\n    // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n    }\n    return {\n        params,\n        result: interpolatedRoute\n    };\n} //# sourceMappingURL=interpolate-as.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvaW50ZXJwb2xhdGUtYXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILGlEQUFnRDtJQUM1Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLGdCQUFnQkMsbUJBQU9BLENBQUMsOEdBQWlCO0FBQy9DLE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLDBHQUFlO0FBQzNDLFNBQVNGLGNBQWNJLEtBQUssRUFBRUMsVUFBVSxFQUFFQyxLQUFLO0lBQzNDLElBQUlDLG9CQUFvQjtJQUN4QixNQUFNQyxlQUFlLENBQUMsR0FBR0wsWUFBWU0sYUFBYSxFQUFFTDtJQUNwRCxNQUFNTSxnQkFBZ0JGLGFBQWFHLE1BQU07SUFDekMsTUFBTUMsaUJBQ04sQ0FBQ1AsZUFBZUQsUUFBUSxDQUFDLEdBQUdILGNBQWNZLGVBQWUsRUFBRUwsY0FBY0gsY0FBYyxFQUFDLEtBQU0sZ0RBQWdEO0lBQzlJLHNFQUFzRTtJQUN0RUM7SUFDQUMsb0JBQW9CSDtJQUNwQixNQUFNVSxTQUFTcEIsT0FBT3FCLElBQUksQ0FBQ0w7SUFDM0IsSUFBSSxDQUFDSSxPQUFPRSxLQUFLLENBQUMsQ0FBQ0M7UUFDZixJQUFJcEIsUUFBUWUsY0FBYyxDQUFDSyxNQUFNLElBQUk7UUFDckMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsRUFBRSxHQUFHVCxhQUFhLENBQUNPLE1BQU07UUFDakQsaUNBQWlDO1FBQ2pDLDBEQUEwRDtRQUMxRCxJQUFJRyxXQUFXLE1BQU9GLENBQUFBLFNBQVMsUUFBUSxFQUFDLElBQUtELFFBQVE7UUFDckQsSUFBSUUsVUFBVTtZQUNWQyxXQUFXLENBQUMsQ0FBQ3ZCLFFBQVEsTUFBTSxFQUFDLElBQUssTUFBTXVCLFdBQVc7UUFDdEQ7UUFDQSxJQUFJRixVQUFVLENBQUNHLE1BQU1DLE9BQU8sQ0FBQ3pCLFFBQVFBLFFBQVE7WUFDekNBO1NBQ0g7UUFDRCxPQUFPLENBQUNzQixZQUFZRixTQUFTTCxjQUFhLEtBQU0sNkNBQTZDO1FBQzVGTCxDQUFBQSxvQkFBb0JBLGtCQUFrQmdCLE9BQU8sQ0FBQ0gsVUFBVUYsU0FBU3JCLE1BQU0yQixHQUFHLENBQzNFLHVEQUF1RDtRQUN2RCxrREFBa0Q7UUFDbEQsb0NBQW9DO1FBQ3BDLENBQUNDLFVBQVVDLG1CQUFtQkQsVUFBVUUsSUFBSSxDQUFDLE9BQU9ELG1CQUFtQjdCLFdBQVcsR0FBRTtJQUN4RixJQUFJO1FBQ0FVLG9CQUFvQixHQUFHLG1DQUFtQzs7SUFFOUQsdUVBQXVFO0lBQ3ZFLGtEQUFrRDtJQUNsRDtJQUNBLE9BQU87UUFDSE87UUFDQWMsUUFBUXJCO0lBQ1o7QUFDSixFQUVBLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2ludGVycG9sYXRlLWFzLmpzP2QwZTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpbnRlcnBvbGF0ZUFzXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpbnRlcnBvbGF0ZUFzO1xuICAgIH1cbn0pO1xuY29uc3QgX3JvdXRlbWF0Y2hlciA9IHJlcXVpcmUoXCIuL3JvdXRlLW1hdGNoZXJcIik7XG5jb25zdCBfcm91dGVyZWdleCA9IHJlcXVpcmUoXCIuL3JvdXRlLXJlZ2V4XCIpO1xuZnVuY3Rpb24gaW50ZXJwb2xhdGVBcyhyb3V0ZSwgYXNQYXRobmFtZSwgcXVlcnkpIHtcbiAgICBsZXQgaW50ZXJwb2xhdGVkUm91dGUgPSBcIlwiO1xuICAgIGNvbnN0IGR5bmFtaWNSZWdleCA9ICgwLCBfcm91dGVyZWdleC5nZXRSb3V0ZVJlZ2V4KShyb3V0ZSk7XG4gICAgY29uc3QgZHluYW1pY0dyb3VwcyA9IGR5bmFtaWNSZWdleC5ncm91cHM7XG4gICAgY29uc3QgZHluYW1pY01hdGNoZXMgPSAvLyBUcnkgdG8gbWF0Y2ggdGhlIGR5bmFtaWMgcm91dGUgYWdhaW5zdCB0aGUgYXNQYXRoXG4gICAgKGFzUGF0aG5hbWUgIT09IHJvdXRlID8gKDAsIF9yb3V0ZW1hdGNoZXIuZ2V0Um91dGVNYXRjaGVyKShkeW5hbWljUmVnZXgpKGFzUGF0aG5hbWUpIDogXCJcIikgfHwgLy8gRmFsbCBiYWNrIHRvIHJlYWRpbmcgdGhlIHZhbHVlcyBmcm9tIHRoZSBocmVmXG4gICAgLy8gVE9ETzogc2hvdWxkIHRoaXMgdGFrZSBwcmlvcml0eTsgYWxzbyBuZWVkIHRvIGNoYW5nZSBpbiB0aGUgcm91dGVyLlxuICAgIHF1ZXJ5O1xuICAgIGludGVycG9sYXRlZFJvdXRlID0gcm91dGU7XG4gICAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmtleXMoZHluYW1pY0dyb3Vwcyk7XG4gICAgaWYgKCFwYXJhbXMuZXZlcnkoKHBhcmFtKT0+e1xuICAgICAgICBsZXQgdmFsdWUgPSBkeW5hbWljTWF0Y2hlc1twYXJhbV0gfHwgXCJcIjtcbiAgICAgICAgY29uc3QgeyByZXBlYXQsIG9wdGlvbmFsIH0gPSBkeW5hbWljR3JvdXBzW3BhcmFtXTtcbiAgICAgICAgLy8gc3VwcG9ydCBzaW5nbGUtbGV2ZWwgY2F0Y2gtYWxsXG4gICAgICAgIC8vIFRPRE86IG1vcmUgcm9idXN0IGhhbmRsaW5nIGZvciB1c2VyLWVycm9yIChwYXNzaW5nIGAvYClcbiAgICAgICAgbGV0IHJlcGxhY2VkID0gXCJbXCIgKyAocmVwZWF0ID8gXCIuLi5cIiA6IFwiXCIpICsgcGFyYW0gKyBcIl1cIjtcbiAgICAgICAgaWYgKG9wdGlvbmFsKSB7XG4gICAgICAgICAgICByZXBsYWNlZCA9ICghdmFsdWUgPyBcIi9cIiA6IFwiXCIpICsgXCJbXCIgKyByZXBsYWNlZCArIFwiXVwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBlYXQgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB2YWx1ZSA9IFtcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiAob3B0aW9uYWwgfHwgcGFyYW0gaW4gZHluYW1pY01hdGNoZXMpICYmIC8vIEludGVycG9sYXRlIGdyb3VwIGludG8gZGF0YSBVUkwgaWYgcHJlc2VudFxuICAgICAgICAoaW50ZXJwb2xhdGVkUm91dGUgPSBpbnRlcnBvbGF0ZWRSb3V0ZS5yZXBsYWNlKHJlcGxhY2VkLCByZXBlYXQgPyB2YWx1ZS5tYXAoLy8gdGhlc2UgdmFsdWVzIHNob3VsZCBiZSBmdWxseSBlbmNvZGVkIGluc3RlYWQgb2YganVzdFxuICAgICAgICAvLyBwYXRoIGRlbGltaXRlciBlc2NhcGVkIHNpbmNlIHRoZXkgYXJlIGJlaW5nIGluc2VydGVkXG4gICAgICAgIC8vIGludG8gdGhlIFVSTCBhbmQgd2UgZXhwZWN0IFVSTCBlbmNvZGVkIHNlZ21lbnRzXG4gICAgICAgIC8vIHdoZW4gcGFyc2luZyBkeW5hbWljIHJvdXRlIHBhcmFtc1xuICAgICAgICAoc2VnbWVudCk9PmVuY29kZVVSSUNvbXBvbmVudChzZWdtZW50KSkuam9pbihcIi9cIikgOiBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKSB8fCBcIi9cIik7XG4gICAgfSkpIHtcbiAgICAgICAgaW50ZXJwb2xhdGVkUm91dGUgPSBcIlwiIC8vIGRpZCBub3Qgc2F0aXNmeSBhbGwgcmVxdWlyZW1lbnRzXG4gICAgICAgIDtcbiAgICAvLyBuLmIuIFdlIGlnbm9yZSB0aGlzIGVycm9yIGJlY2F1c2Ugd2UgaGFuZGxlIHdhcm5pbmcgZm9yIHRoaXMgY2FzZSBpblxuICAgIC8vIGRldmVsb3BtZW50IGluIHRoZSBgPExpbms+YCBjb21wb25lbnQgZGlyZWN0bHkuXG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHBhcmFtcyxcbiAgICAgICAgcmVzdWx0OiBpbnRlcnBvbGF0ZWRSb3V0ZVxuICAgIH07XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVycG9sYXRlLWFzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJpbnRlcnBvbGF0ZUFzIiwiX3JvdXRlbWF0Y2hlciIsInJlcXVpcmUiLCJfcm91dGVyZWdleCIsInJvdXRlIiwiYXNQYXRobmFtZSIsInF1ZXJ5IiwiaW50ZXJwb2xhdGVkUm91dGUiLCJkeW5hbWljUmVnZXgiLCJnZXRSb3V0ZVJlZ2V4IiwiZHluYW1pY0dyb3VwcyIsImdyb3VwcyIsImR5bmFtaWNNYXRjaGVzIiwiZ2V0Um91dGVNYXRjaGVyIiwicGFyYW1zIiwia2V5cyIsImV2ZXJ5IiwicGFyYW0iLCJyZXBlYXQiLCJvcHRpb25hbCIsInJlcGxhY2VkIiwiQXJyYXkiLCJpc0FycmF5IiwicmVwbGFjZSIsIm1hcCIsInNlZ21lbnQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJqb2luIiwicmVzdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/interpolate-as.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/is-dynamic.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/is-dynamic.js ***!
  \**********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"isDynamicRoute\", ({\n    enumerable: true,\n    get: function() {\n        return isDynamicRoute;\n    }\n}));\nconst _interceptionroutes = __webpack_require__(/*! ../../../../server/future/helpers/interception-routes */ \"(app-pages-browser)/./node_modules/next/dist/server/future/helpers/interception-routes.js\");\n// Identify /[param]/ in route string\nconst TEST_ROUTE = /\\/\\[[^/]+?\\](?=\\/|$)/;\nfunction isDynamicRoute(route) {\n    if ((0, _interceptionroutes.isInterceptionRouteAppPath)(route)) {\n        route = (0, _interceptionroutes.extractInterceptionRouteInformation)(route).interceptedRoute;\n    }\n    return TEST_ROUTE.test(route);\n} //# sourceMappingURL=is-dynamic.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvaXMtZHluYW1pYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsa0RBQWlEO0lBQzdDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsc0JBQXNCQyxtQkFBT0EsQ0FBQyx3SkFBdUQ7QUFDM0YscUNBQXFDO0FBQ3JDLE1BQU1DLGFBQWE7QUFDbkIsU0FBU0gsZUFBZUksS0FBSztJQUN6QixJQUFJLENBQUMsR0FBR0gsb0JBQW9CSSwwQkFBMEIsRUFBRUQsUUFBUTtRQUM1REEsUUFBUSxDQUFDLEdBQUdILG9CQUFvQkssbUNBQW1DLEVBQUVGLE9BQU9HLGdCQUFnQjtJQUNoRztJQUNBLE9BQU9KLFdBQVdLLElBQUksQ0FBQ0o7QUFDM0IsRUFFQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9pcy1keW5hbWljLmpzPzQ2ZjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0R5bmFtaWNSb3V0ZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXNEeW5hbWljUm91dGU7XG4gICAgfVxufSk7XG5jb25zdCBfaW50ZXJjZXB0aW9ucm91dGVzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL3NlcnZlci9mdXR1cmUvaGVscGVycy9pbnRlcmNlcHRpb24tcm91dGVzXCIpO1xuLy8gSWRlbnRpZnkgL1twYXJhbV0vIGluIHJvdXRlIHN0cmluZ1xuY29uc3QgVEVTVF9ST1VURSA9IC9cXC9cXFtbXi9dKz9cXF0oPz1cXC98JCkvO1xuZnVuY3Rpb24gaXNEeW5hbWljUm91dGUocm91dGUpIHtcbiAgICBpZiAoKDAsIF9pbnRlcmNlcHRpb25yb3V0ZXMuaXNJbnRlcmNlcHRpb25Sb3V0ZUFwcFBhdGgpKHJvdXRlKSkge1xuICAgICAgICByb3V0ZSA9ICgwLCBfaW50ZXJjZXB0aW9ucm91dGVzLmV4dHJhY3RJbnRlcmNlcHRpb25Sb3V0ZUluZm9ybWF0aW9uKShyb3V0ZSkuaW50ZXJjZXB0ZWRSb3V0ZTtcbiAgICB9XG4gICAgcmV0dXJuIFRFU1RfUk9VVEUudGVzdChyb3V0ZSk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzLWR5bmFtaWMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImlzRHluYW1pY1JvdXRlIiwiX2ludGVyY2VwdGlvbnJvdXRlcyIsInJlcXVpcmUiLCJURVNUX1JPVVRFIiwicm91dGUiLCJpc0ludGVyY2VwdGlvblJvdXRlQXBwUGF0aCIsImV4dHJhY3RJbnRlcmNlcHRpb25Sb3V0ZUluZm9ybWF0aW9uIiwiaW50ZXJjZXB0ZWRSb3V0ZSIsInRlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/is-dynamic.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/is-local-url.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/is-local-url.js ***!
  \************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"isLocalURL\", ({\n    enumerable: true,\n    get: function() {\n        return isLocalURL;\n    }\n}));\nconst _utils = __webpack_require__(/*! ../../utils */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/utils.js\");\nconst _hasbasepath = __webpack_require__(/*! ../../../../client/has-base-path */ \"(app-pages-browser)/./node_modules/next/dist/client/has-base-path.js\");\nfunction isLocalURL(url) {\n    // prevent a hydration mismatch on href for url with anchor refs\n    if (!(0, _utils.isAbsoluteUrl)(url)) return true;\n    try {\n        // absolute urls can be local if they are on the same origin\n        const locationOrigin = (0, _utils.getLocationOrigin)();\n        const resolved = new URL(url, locationOrigin);\n        return resolved.origin === locationOrigin && (0, _hasbasepath.hasBasePath)(resolved.pathname);\n    } catch (_) {\n        return false;\n    }\n} //# sourceMappingURL=is-local-url.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvaXMtbG9jYWwtdXJsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCw4Q0FBNkM7SUFDekNJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixNQUFNQyxTQUFTQyxtQkFBT0EsQ0FBQyxxRkFBYTtBQUNwQyxNQUFNQyxlQUFlRCxtQkFBT0EsQ0FBQyw4R0FBa0M7QUFDL0QsU0FBU0YsV0FBV0ksR0FBRztJQUNuQixnRUFBZ0U7SUFDaEUsSUFBSSxDQUFDLENBQUMsR0FBR0gsT0FBT0ksYUFBYSxFQUFFRCxNQUFNLE9BQU87SUFDNUMsSUFBSTtRQUNBLDREQUE0RDtRQUM1RCxNQUFNRSxpQkFBaUIsQ0FBQyxHQUFHTCxPQUFPTSxpQkFBaUI7UUFDbkQsTUFBTUMsV0FBVyxJQUFJQyxJQUFJTCxLQUFLRTtRQUM5QixPQUFPRSxTQUFTRSxNQUFNLEtBQUtKLGtCQUFrQixDQUFDLEdBQUdILGFBQWFRLFdBQVcsRUFBRUgsU0FBU0ksUUFBUTtJQUNoRyxFQUFFLE9BQU9DLEdBQUc7UUFDUixPQUFPO0lBQ1g7QUFDSixFQUVBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2lzLWxvY2FsLXVybC5qcz81ZDI4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNMb2NhbFVSTFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXNMb2NhbFVSTDtcbiAgICB9XG59KTtcbmNvbnN0IF91dGlscyA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcbmNvbnN0IF9oYXNiYXNlcGF0aCA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9jbGllbnQvaGFzLWJhc2UtcGF0aFwiKTtcbmZ1bmN0aW9uIGlzTG9jYWxVUkwodXJsKSB7XG4gICAgLy8gcHJldmVudCBhIGh5ZHJhdGlvbiBtaXNtYXRjaCBvbiBocmVmIGZvciB1cmwgd2l0aCBhbmNob3IgcmVmc1xuICAgIGlmICghKDAsIF91dGlscy5pc0Fic29sdXRlVXJsKSh1cmwpKSByZXR1cm4gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgICAvLyBhYnNvbHV0ZSB1cmxzIGNhbiBiZSBsb2NhbCBpZiB0aGV5IGFyZSBvbiB0aGUgc2FtZSBvcmlnaW5cbiAgICAgICAgY29uc3QgbG9jYXRpb25PcmlnaW4gPSAoMCwgX3V0aWxzLmdldExvY2F0aW9uT3JpZ2luKSgpO1xuICAgICAgICBjb25zdCByZXNvbHZlZCA9IG5ldyBVUkwodXJsLCBsb2NhdGlvbk9yaWdpbik7XG4gICAgICAgIHJldHVybiByZXNvbHZlZC5vcmlnaW4gPT09IGxvY2F0aW9uT3JpZ2luICYmICgwLCBfaGFzYmFzZXBhdGguaGFzQmFzZVBhdGgpKHJlc29sdmVkLnBhdGhuYW1lKTtcbiAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzLWxvY2FsLXVybC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiaXNMb2NhbFVSTCIsIl91dGlscyIsInJlcXVpcmUiLCJfaGFzYmFzZXBhdGgiLCJ1cmwiLCJpc0Fic29sdXRlVXJsIiwibG9jYXRpb25PcmlnaW4iLCJnZXRMb2NhdGlvbk9yaWdpbiIsInJlc29sdmVkIiwiVVJMIiwib3JpZ2luIiwiaGFzQmFzZVBhdGgiLCJwYXRobmFtZSIsIl8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/is-local-url.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/omit.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/omit.js ***!
  \****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"omit\", ({\n    enumerable: true,\n    get: function() {\n        return omit;\n    }\n}));\nfunction omit(object, keys) {\n    const omitted = {};\n    Object.keys(object).forEach((key)=>{\n        if (!keys.includes(key)) {\n            omitted[key] = object[key];\n        }\n    });\n    return omitted;\n} //# sourceMappingURL=omit.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvb21pdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsd0NBQXVDO0lBQ25DSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsU0FBU0EsS0FBS0MsTUFBTSxFQUFFQyxJQUFJO0lBQ3RCLE1BQU1DLFVBQVUsQ0FBQztJQUNqQlQsT0FBT1EsSUFBSSxDQUFDRCxRQUFRRyxPQUFPLENBQUMsQ0FBQ0M7UUFDekIsSUFBSSxDQUFDSCxLQUFLSSxRQUFRLENBQUNELE1BQU07WUFDckJGLE9BQU8sQ0FBQ0UsSUFBSSxHQUFHSixNQUFNLENBQUNJLElBQUk7UUFDOUI7SUFDSjtJQUNBLE9BQU9GO0FBQ1gsRUFFQSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9vbWl0LmpzP2ZiNzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJvbWl0XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBvbWl0O1xuICAgIH1cbn0pO1xuZnVuY3Rpb24gb21pdChvYmplY3QsIGtleXMpIHtcbiAgICBjb25zdCBvbWl0dGVkID0ge307XG4gICAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKChrZXkpPT57XG4gICAgICAgIGlmICgha2V5cy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBvbWl0dGVkW2tleV0gPSBvYmplY3Rba2V5XTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBvbWl0dGVkO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbWl0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJvbWl0Iiwib2JqZWN0Iiwia2V5cyIsIm9taXR0ZWQiLCJmb3JFYWNoIiwia2V5IiwiaW5jbHVkZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/omit.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/querystring.js":
/*!***********************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/querystring.js ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    searchParamsToUrlQuery: function() {\n        return searchParamsToUrlQuery;\n    },\n    urlQueryToSearchParams: function() {\n        return urlQueryToSearchParams;\n    },\n    assign: function() {\n        return assign;\n    }\n});\nfunction searchParamsToUrlQuery(searchParams) {\n    const query = {};\n    searchParams.forEach((value, key)=>{\n        if (typeof query[key] === \"undefined\") {\n            query[key] = value;\n        } else if (Array.isArray(query[key])) {\n            query[key].push(value);\n        } else {\n            query[key] = [\n                query[key],\n                value\n            ];\n        }\n    });\n    return query;\n}\nfunction stringifyUrlQueryParam(param) {\n    if (typeof param === \"string\" || typeof param === \"number\" && !isNaN(param) || typeof param === \"boolean\") {\n        return String(param);\n    } else {\n        return \"\";\n    }\n}\nfunction urlQueryToSearchParams(urlQuery) {\n    const result = new URLSearchParams();\n    Object.entries(urlQuery).forEach((param)=>{\n        let [key, value] = param;\n        if (Array.isArray(value)) {\n            value.forEach((item)=>result.append(key, stringifyUrlQueryParam(item)));\n        } else {\n            result.set(key, stringifyUrlQueryParam(value));\n        }\n    });\n    return result;\n}\nfunction assign(target) {\n    for(var _len = arguments.length, searchParamsList = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        searchParamsList[_key - 1] = arguments[_key];\n    }\n    searchParamsList.forEach((searchParams)=>{\n        Array.from(searchParams.keys()).forEach((key)=>target.delete(key));\n        searchParams.forEach((value, key)=>target.append(key, value));\n    });\n    return target;\n} //# sourceMappingURL=querystring.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcXVlcnlzdHJpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0YsS0FBTUMsQ0FBQUEsQ0FJTjtBQUNBLFNBQVNJLFFBQVFDLE1BQU0sRUFBRUMsR0FBRztJQUN4QixJQUFJLElBQUlDLFFBQVFELElBQUlWLE9BQU9DLGNBQWMsQ0FBQ1EsUUFBUUUsTUFBTTtRQUNwREMsWUFBWTtRQUNaQyxLQUFLSCxHQUFHLENBQUNDLEtBQUs7SUFDbEI7QUFDSjtBQUNBSCxRQUFRTixTQUFTO0lBQ2JHLHdCQUF3QjtRQUNwQixPQUFPQTtJQUNYO0lBQ0FDLHdCQUF3QjtRQUNwQixPQUFPQTtJQUNYO0lBQ0FDLFFBQVE7UUFDSixPQUFPQTtJQUNYO0FBQ0o7QUFDQSxTQUFTRix1QkFBdUJTLFlBQVk7SUFDeEMsTUFBTUMsUUFBUSxDQUFDO0lBQ2ZELGFBQWFFLE9BQU8sQ0FBQyxDQUFDYixPQUFPYztRQUN6QixJQUFJLE9BQU9GLEtBQUssQ0FBQ0UsSUFBSSxLQUFLLGFBQWE7WUFDbkNGLEtBQUssQ0FBQ0UsSUFBSSxHQUFHZDtRQUNqQixPQUFPLElBQUllLE1BQU1DLE9BQU8sQ0FBQ0osS0FBSyxDQUFDRSxJQUFJLEdBQUc7WUFDbENGLEtBQUssQ0FBQ0UsSUFBSSxDQUFDRyxJQUFJLENBQUNqQjtRQUNwQixPQUFPO1lBQ0hZLEtBQUssQ0FBQ0UsSUFBSSxHQUFHO2dCQUNURixLQUFLLENBQUNFLElBQUk7Z0JBQ1ZkO2FBQ0g7UUFDTDtJQUNKO0lBQ0EsT0FBT1k7QUFDWDtBQUNBLFNBQVNNLHVCQUF1QkMsS0FBSztJQUNqQyxJQUFJLE9BQU9BLFVBQVUsWUFBWSxPQUFPQSxVQUFVLFlBQVksQ0FBQ0MsTUFBTUQsVUFBVSxPQUFPQSxVQUFVLFdBQVc7UUFDdkcsT0FBT0UsT0FBT0Y7SUFDbEIsT0FBTztRQUNILE9BQU87SUFDWDtBQUNKO0FBQ0EsU0FBU2hCLHVCQUF1Qm1CLFFBQVE7SUFDcEMsTUFBTUMsU0FBUyxJQUFJQztJQUNuQjNCLE9BQU80QixPQUFPLENBQUNILFVBQVVULE9BQU8sQ0FBQyxDQUFDTTtRQUM5QixJQUFJLENBQUNMLEtBQUtkLE1BQU0sR0FBR21CO1FBQ25CLElBQUlKLE1BQU1DLE9BQU8sQ0FBQ2hCLFFBQVE7WUFDdEJBLE1BQU1hLE9BQU8sQ0FBQyxDQUFDYSxPQUFPSCxPQUFPSSxNQUFNLENBQUNiLEtBQUtJLHVCQUF1QlE7UUFDcEUsT0FBTztZQUNISCxPQUFPSyxHQUFHLENBQUNkLEtBQUtJLHVCQUF1QmxCO1FBQzNDO0lBQ0o7SUFDQSxPQUFPdUI7QUFDWDtBQUNBLFNBQVNuQixPQUFPRSxNQUFNO0lBQ2xCLElBQUksSUFBSXVCLE9BQU9DLFVBQVVDLE1BQU0sRUFBRUMsbUJBQW1CLElBQUlqQixNQUFNYyxPQUFPLElBQUlBLE9BQU8sSUFBSSxJQUFJSSxPQUFPLEdBQUdBLE9BQU9KLE1BQU1JLE9BQU87UUFDbEhELGdCQUFnQixDQUFDQyxPQUFPLEVBQUUsR0FBR0gsU0FBUyxDQUFDRyxLQUFLO0lBQ2hEO0lBQ0FELGlCQUFpQm5CLE9BQU8sQ0FBQyxDQUFDRjtRQUN0QkksTUFBTW1CLElBQUksQ0FBQ3ZCLGFBQWF3QixJQUFJLElBQUl0QixPQUFPLENBQUMsQ0FBQ0MsTUFBTVIsT0FBTzhCLE1BQU0sQ0FBQ3RCO1FBQzdESCxhQUFhRSxPQUFPLENBQUMsQ0FBQ2IsT0FBT2MsTUFBTVIsT0FBT3FCLE1BQU0sQ0FBQ2IsS0FBS2Q7SUFDMUQ7SUFDQSxPQUFPTTtBQUNYLEVBRUEsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcXVlcnlzdHJpbmcuanM/MDE0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIHNlYXJjaFBhcmFtc1RvVXJsUXVlcnk6IG51bGwsXG4gICAgdXJsUXVlcnlUb1NlYXJjaFBhcmFtczogbnVsbCxcbiAgICBhc3NpZ246IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgc2VhcmNoUGFyYW1zVG9VcmxRdWVyeTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzZWFyY2hQYXJhbXNUb1VybFF1ZXJ5O1xuICAgIH0sXG4gICAgdXJsUXVlcnlUb1NlYXJjaFBhcmFtczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB1cmxRdWVyeVRvU2VhcmNoUGFyYW1zO1xuICAgIH0sXG4gICAgYXNzaWduOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFzc2lnbjtcbiAgICB9XG59KTtcbmZ1bmN0aW9uIHNlYXJjaFBhcmFtc1RvVXJsUXVlcnkoc2VhcmNoUGFyYW1zKSB7XG4gICAgY29uc3QgcXVlcnkgPSB7fTtcbiAgICBzZWFyY2hQYXJhbXMuZm9yRWFjaCgodmFsdWUsIGtleSk9PntcbiAgICAgICAgaWYgKHR5cGVvZiBxdWVyeVtrZXldID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBxdWVyeVtrZXldID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShxdWVyeVtrZXldKSkge1xuICAgICAgICAgICAgcXVlcnlba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHF1ZXJ5W2tleV0gPSBbXG4gICAgICAgICAgICAgICAgcXVlcnlba2V5XSxcbiAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBxdWVyeTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeVVybFF1ZXJ5UGFyYW0ocGFyYW0pIHtcbiAgICBpZiAodHlwZW9mIHBhcmFtID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBwYXJhbSA9PT0gXCJudW1iZXJcIiAmJiAhaXNOYU4ocGFyYW0pIHx8IHR5cGVvZiBwYXJhbSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhwYXJhbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxufVxuZnVuY3Rpb24gdXJsUXVlcnlUb1NlYXJjaFBhcmFtcyh1cmxRdWVyeSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICBPYmplY3QuZW50cmllcyh1cmxRdWVyeSkuZm9yRWFjaCgocGFyYW0pPT57XG4gICAgICAgIGxldCBba2V5LCB2YWx1ZV0gPSBwYXJhbTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKChpdGVtKT0+cmVzdWx0LmFwcGVuZChrZXksIHN0cmluZ2lmeVVybFF1ZXJ5UGFyYW0oaXRlbSkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5zZXQoa2V5LCBzdHJpbmdpZnlVcmxRdWVyeVBhcmFtKHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gYXNzaWduKHRhcmdldCkge1xuICAgIGZvcih2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHNlYXJjaFBhcmFtc0xpc3QgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKyl7XG4gICAgICAgIHNlYXJjaFBhcmFtc0xpc3RbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICBzZWFyY2hQYXJhbXNMaXN0LmZvckVhY2goKHNlYXJjaFBhcmFtcyk9PntcbiAgICAgICAgQXJyYXkuZnJvbShzZWFyY2hQYXJhbXMua2V5cygpKS5mb3JFYWNoKChrZXkpPT50YXJnZXQuZGVsZXRlKGtleSkpO1xuICAgICAgICBzZWFyY2hQYXJhbXMuZm9yRWFjaCgodmFsdWUsIGtleSk9PnRhcmdldC5hcHBlbmQoa2V5LCB2YWx1ZSkpO1xuICAgIH0pO1xuICAgIHJldHVybiB0YXJnZXQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXJ5c3RyaW5nLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZHVsZSIsInNlYXJjaFBhcmFtc1RvVXJsUXVlcnkiLCJ1cmxRdWVyeVRvU2VhcmNoUGFyYW1zIiwiYXNzaWduIiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic2VhcmNoUGFyYW1zIiwicXVlcnkiLCJmb3JFYWNoIiwia2V5IiwiQXJyYXkiLCJpc0FycmF5IiwicHVzaCIsInN0cmluZ2lmeVVybFF1ZXJ5UGFyYW0iLCJwYXJhbSIsImlzTmFOIiwiU3RyaW5nIiwidXJsUXVlcnkiLCJyZXN1bHQiLCJVUkxTZWFyY2hQYXJhbXMiLCJlbnRyaWVzIiwiaXRlbSIsImFwcGVuZCIsInNldCIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzZWFyY2hQYXJhbXNMaXN0IiwiX2tleSIsImZyb20iLCJrZXlzIiwiZGVsZXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/querystring.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/route-matcher.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/route-matcher.js ***!
  \*************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getRouteMatcher\", ({\n    enumerable: true,\n    get: function() {\n        return getRouteMatcher;\n    }\n}));\nconst _utils = __webpack_require__(/*! ../../utils */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/utils.js\");\nfunction getRouteMatcher(param) {\n    let { re, groups } = param;\n    return (pathname)=>{\n        const routeMatch = re.exec(pathname);\n        if (!routeMatch) {\n            return false;\n        }\n        const decode = (param)=>{\n            try {\n                return decodeURIComponent(param);\n            } catch (_) {\n                throw new _utils.DecodeError(\"failed to decode param\");\n            }\n        };\n        const params = {};\n        Object.keys(groups).forEach((slugName)=>{\n            const g = groups[slugName];\n            const m = routeMatch[g.pos];\n            if (m !== undefined) {\n                params[slugName] = ~m.indexOf(\"/\") ? m.split(\"/\").map((entry)=>decode(entry)) : g.repeat ? [\n                    decode(m)\n                ] : decode(m);\n            }\n        });\n        return params;\n    };\n} //# sourceMappingURL=route-matcher.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcm91dGUtbWF0Y2hlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsbURBQWtEO0lBQzlDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsU0FBU0MsbUJBQU9BLENBQUMscUZBQWE7QUFDcEMsU0FBU0YsZ0JBQWdCRyxLQUFLO0lBQzFCLElBQUksRUFBRUMsRUFBRSxFQUFFQyxNQUFNLEVBQUUsR0FBR0Y7SUFDckIsT0FBTyxDQUFDRztRQUNKLE1BQU1DLGFBQWFILEdBQUdJLElBQUksQ0FBQ0Y7UUFDM0IsSUFBSSxDQUFDQyxZQUFZO1lBQ2IsT0FBTztRQUNYO1FBQ0EsTUFBTUUsU0FBUyxDQUFDTjtZQUNaLElBQUk7Z0JBQ0EsT0FBT08sbUJBQW1CUDtZQUM5QixFQUFFLE9BQU9RLEdBQUc7Z0JBQ1IsTUFBTSxJQUFJVixPQUFPVyxXQUFXLENBQUM7WUFDakM7UUFDSjtRQUNBLE1BQU1DLFNBQVMsQ0FBQztRQUNoQm5CLE9BQU9vQixJQUFJLENBQUNULFFBQVFVLE9BQU8sQ0FBQyxDQUFDQztZQUN6QixNQUFNQyxJQUFJWixNQUFNLENBQUNXLFNBQVM7WUFDMUIsTUFBTUUsSUFBSVgsVUFBVSxDQUFDVSxFQUFFRSxHQUFHLENBQUM7WUFDM0IsSUFBSUQsTUFBTUUsV0FBVztnQkFDakJQLE1BQU0sQ0FBQ0csU0FBUyxHQUFHLENBQUNFLEVBQUVHLE9BQU8sQ0FBQyxPQUFPSCxFQUFFSSxLQUFLLENBQUMsS0FBS0MsR0FBRyxDQUFDLENBQUNDLFFBQVFmLE9BQU9lLFVBQVVQLEVBQUVRLE1BQU0sR0FBRztvQkFDdkZoQixPQUFPUztpQkFDVixHQUFHVCxPQUFPUztZQUNmO1FBQ0o7UUFDQSxPQUFPTDtJQUNYO0FBQ0osRUFFQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9yb3V0ZS1tYXRjaGVyLmpzP2M4NmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRSb3V0ZU1hdGNoZXJcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldFJvdXRlTWF0Y2hlcjtcbiAgICB9XG59KTtcbmNvbnN0IF91dGlscyA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcbmZ1bmN0aW9uIGdldFJvdXRlTWF0Y2hlcihwYXJhbSkge1xuICAgIGxldCB7IHJlLCBncm91cHMgfSA9IHBhcmFtO1xuICAgIHJldHVybiAocGF0aG5hbWUpPT57XG4gICAgICAgIGNvbnN0IHJvdXRlTWF0Y2ggPSByZS5leGVjKHBhdGhuYW1lKTtcbiAgICAgICAgaWYgKCFyb3V0ZU1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVjb2RlID0gKHBhcmFtKT0+e1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHBhcmFtKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgX3V0aWxzLkRlY29kZUVycm9yKFwiZmFpbGVkIHRvIGRlY29kZSBwYXJhbVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcGFyYW1zID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKGdyb3VwcykuZm9yRWFjaCgoc2x1Z05hbWUpPT57XG4gICAgICAgICAgICBjb25zdCBnID0gZ3JvdXBzW3NsdWdOYW1lXTtcbiAgICAgICAgICAgIGNvbnN0IG0gPSByb3V0ZU1hdGNoW2cucG9zXTtcbiAgICAgICAgICAgIGlmIChtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwYXJhbXNbc2x1Z05hbWVdID0gfm0uaW5kZXhPZihcIi9cIikgPyBtLnNwbGl0KFwiL1wiKS5tYXAoKGVudHJ5KT0+ZGVjb2RlKGVudHJ5KSkgOiBnLnJlcGVhdCA/IFtcbiAgICAgICAgICAgICAgICAgICAgZGVjb2RlKG0pXG4gICAgICAgICAgICAgICAgXSA6IGRlY29kZShtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgfTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91dGUtbWF0Y2hlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZ2V0Um91dGVNYXRjaGVyIiwiX3V0aWxzIiwicmVxdWlyZSIsInBhcmFtIiwicmUiLCJncm91cHMiLCJwYXRobmFtZSIsInJvdXRlTWF0Y2giLCJleGVjIiwiZGVjb2RlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiXyIsIkRlY29kZUVycm9yIiwicGFyYW1zIiwia2V5cyIsImZvckVhY2giLCJzbHVnTmFtZSIsImciLCJtIiwicG9zIiwidW5kZWZpbmVkIiwiaW5kZXhPZiIsInNwbGl0IiwibWFwIiwiZW50cnkiLCJyZXBlYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/route-matcher.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/route-regex.js":
/*!***********************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/route-regex.js ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    getRouteRegex: function() {\n        return getRouteRegex;\n    },\n    getNamedRouteRegex: function() {\n        return getNamedRouteRegex;\n    },\n    getNamedMiddlewareRegex: function() {\n        return getNamedMiddlewareRegex;\n    }\n});\nconst _interceptionroutes = __webpack_require__(/*! ../../../../server/future/helpers/interception-routes */ \"(app-pages-browser)/./node_modules/next/dist/server/future/helpers/interception-routes.js\");\nconst _escaperegexp = __webpack_require__(/*! ../../escape-regexp */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/escape-regexp.js\");\nconst _removetrailingslash = __webpack_require__(/*! ./remove-trailing-slash */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js\");\nconst NEXT_QUERY_PARAM_PREFIX = \"nxtP\";\nconst NEXT_INTERCEPTION_MARKER_PREFIX = \"nxtI\";\n/**\n * Parses a given parameter from a route to a data structure that can be used\n * to generate the parametrized route. Examples:\n *   - `[...slug]` -> `{ key: 'slug', repeat: true, optional: true }`\n *   - `...slug` -> `{ key: 'slug', repeat: true, optional: false }`\n *   - `[foo]` -> `{ key: 'foo', repeat: false, optional: true }`\n *   - `bar` -> `{ key: 'bar', repeat: false, optional: false }`\n */ function parseParameter(param) {\n    const optional = param.startsWith(\"[\") && param.endsWith(\"]\");\n    if (optional) {\n        param = param.slice(1, -1);\n    }\n    const repeat = param.startsWith(\"...\");\n    if (repeat) {\n        param = param.slice(3);\n    }\n    return {\n        key: param,\n        repeat,\n        optional\n    };\n}\nfunction getParametrizedRoute(route) {\n    const segments = (0, _removetrailingslash.removeTrailingSlash)(route).slice(1).split(\"/\");\n    const groups = {};\n    let groupIndex = 1;\n    return {\n        parameterizedRoute: segments.map((segment)=>{\n            const markerMatch = _interceptionroutes.INTERCEPTION_ROUTE_MARKERS.find((m)=>segment.startsWith(m));\n            const paramMatches = segment.match(/\\[((?:\\[.*\\])|.+)\\]/) // Check for parameters\n            ;\n            if (markerMatch && paramMatches) {\n                const { key, optional, repeat } = parseParameter(paramMatches[1]);\n                groups[key] = {\n                    pos: groupIndex++,\n                    repeat,\n                    optional\n                };\n                return \"/\" + (0, _escaperegexp.escapeStringRegexp)(markerMatch) + \"([^/]+?)\";\n            } else if (paramMatches) {\n                const { key, repeat, optional } = parseParameter(paramMatches[1]);\n                groups[key] = {\n                    pos: groupIndex++,\n                    repeat,\n                    optional\n                };\n                return repeat ? optional ? \"(?:/(.+?))?\" : \"/(.+?)\" : \"/([^/]+?)\";\n            } else {\n                return \"/\" + (0, _escaperegexp.escapeStringRegexp)(segment);\n            }\n        }).join(\"\"),\n        groups\n    };\n}\nfunction getRouteRegex(normalizedRoute) {\n    const { parameterizedRoute, groups } = getParametrizedRoute(normalizedRoute);\n    return {\n        re: new RegExp(\"^\" + parameterizedRoute + \"(?:/)?$\"),\n        groups: groups\n    };\n}\n/**\n * Builds a function to generate a minimal routeKey using only a-z and minimal\n * number of characters.\n */ function buildGetSafeRouteKey() {\n    let i = 0;\n    return ()=>{\n        let routeKey = \"\";\n        let j = ++i;\n        while(j > 0){\n            routeKey += String.fromCharCode(97 + (j - 1) % 26);\n            j = Math.floor((j - 1) / 26);\n        }\n        return routeKey;\n    };\n}\nfunction getSafeKeyFromSegment(param) {\n    let { interceptionMarker, getSafeRouteKey, segment, routeKeys, keyPrefix } = param;\n    const { key, optional, repeat } = parseParameter(segment);\n    // replace any non-word characters since they can break\n    // the named regex\n    let cleanedKey = key.replace(/\\W/g, \"\");\n    if (keyPrefix) {\n        cleanedKey = \"\" + keyPrefix + cleanedKey;\n    }\n    let invalidKey = false;\n    // check if the key is still invalid and fallback to using a known\n    // safe key\n    if (cleanedKey.length === 0 || cleanedKey.length > 30) {\n        invalidKey = true;\n    }\n    if (!isNaN(parseInt(cleanedKey.slice(0, 1)))) {\n        invalidKey = true;\n    }\n    if (invalidKey) {\n        cleanedKey = getSafeRouteKey();\n    }\n    if (keyPrefix) {\n        routeKeys[cleanedKey] = \"\" + keyPrefix + key;\n    } else {\n        routeKeys[cleanedKey] = key;\n    }\n    // if the segment has an interception marker, make sure that's part of the regex pattern\n    // this is to ensure that the route with the interception marker doesn't incorrectly match\n    // the non-intercepted route (ie /app/(.)[username] should not match /app/[username])\n    const interceptionPrefix = interceptionMarker ? (0, _escaperegexp.escapeStringRegexp)(interceptionMarker) : \"\";\n    return repeat ? optional ? \"(?:/\" + interceptionPrefix + \"(?<\" + cleanedKey + \">.+?))?\" : \"/\" + interceptionPrefix + \"(?<\" + cleanedKey + \">.+?)\" : \"/\" + interceptionPrefix + \"(?<\" + cleanedKey + \">[^/]+?)\";\n}\nfunction getNamedParametrizedRoute(route, prefixRouteKeys) {\n    const segments = (0, _removetrailingslash.removeTrailingSlash)(route).slice(1).split(\"/\");\n    const getSafeRouteKey = buildGetSafeRouteKey();\n    const routeKeys = {};\n    return {\n        namedParameterizedRoute: segments.map((segment)=>{\n            const hasInterceptionMarker = _interceptionroutes.INTERCEPTION_ROUTE_MARKERS.some((m)=>segment.startsWith(m));\n            const paramMatches = segment.match(/\\[((?:\\[.*\\])|.+)\\]/) // Check for parameters\n            ;\n            if (hasInterceptionMarker && paramMatches) {\n                const [usedMarker] = segment.split(paramMatches[0]);\n                return getSafeKeyFromSegment({\n                    getSafeRouteKey,\n                    interceptionMarker: usedMarker,\n                    segment: paramMatches[1],\n                    routeKeys,\n                    keyPrefix: prefixRouteKeys ? NEXT_INTERCEPTION_MARKER_PREFIX : undefined\n                });\n            } else if (paramMatches) {\n                return getSafeKeyFromSegment({\n                    getSafeRouteKey,\n                    segment: paramMatches[1],\n                    routeKeys,\n                    keyPrefix: prefixRouteKeys ? NEXT_QUERY_PARAM_PREFIX : undefined\n                });\n            } else {\n                return \"/\" + (0, _escaperegexp.escapeStringRegexp)(segment);\n            }\n        }).join(\"\"),\n        routeKeys\n    };\n}\nfunction getNamedRouteRegex(normalizedRoute, prefixRouteKey) {\n    const result = getNamedParametrizedRoute(normalizedRoute, prefixRouteKey);\n    return {\n        ...getRouteRegex(normalizedRoute),\n        namedRegex: \"^\" + result.namedParameterizedRoute + \"(?:/)?$\",\n        routeKeys: result.routeKeys\n    };\n}\nfunction getNamedMiddlewareRegex(normalizedRoute, options) {\n    const { parameterizedRoute } = getParametrizedRoute(normalizedRoute);\n    const { catchAll = true } = options;\n    if (parameterizedRoute === \"/\") {\n        let catchAllRegex = catchAll ? \".*\" : \"\";\n        return {\n            namedRegex: \"^/\" + catchAllRegex + \"$\"\n        };\n    }\n    const { namedParameterizedRoute } = getNamedParametrizedRoute(normalizedRoute, false);\n    let catchAllGroupedRegex = catchAll ? \"(?:(/.*)?)\" : \"\";\n    return {\n        namedRegex: \"^\" + namedParameterizedRoute + catchAllGroupedRegex + \"$\"\n    };\n} //# sourceMappingURL=route-regex.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/route-regex.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/sorted-routes.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/sorted-routes.js ***!
  \*************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getSortedRoutes\", ({\n    enumerable: true,\n    get: function() {\n        return getSortedRoutes;\n    }\n}));\nclass UrlNode {\n    insert(urlPath) {\n        this._insert(urlPath.split(\"/\").filter(Boolean), [], false);\n    }\n    smoosh() {\n        return this._smoosh();\n    }\n    _smoosh(prefix) {\n        if (prefix === void 0) prefix = \"/\";\n        const childrenPaths = [\n            ...this.children.keys()\n        ].sort();\n        if (this.slugName !== null) {\n            childrenPaths.splice(childrenPaths.indexOf(\"[]\"), 1);\n        }\n        if (this.restSlugName !== null) {\n            childrenPaths.splice(childrenPaths.indexOf(\"[...]\"), 1);\n        }\n        if (this.optionalRestSlugName !== null) {\n            childrenPaths.splice(childrenPaths.indexOf(\"[[...]]\"), 1);\n        }\n        const routes = childrenPaths.map((c)=>this.children.get(c)._smoosh(\"\" + prefix + c + \"/\")).reduce((prev, curr)=>[\n                ...prev,\n                ...curr\n            ], []);\n        if (this.slugName !== null) {\n            routes.push(...this.children.get(\"[]\")._smoosh(prefix + \"[\" + this.slugName + \"]/\"));\n        }\n        if (!this.placeholder) {\n            const r = prefix === \"/\" ? \"/\" : prefix.slice(0, -1);\n            if (this.optionalRestSlugName != null) {\n                throw new Error('You cannot define a route with the same specificity as a optional catch-all route (\"' + r + '\" and \"' + r + \"[[...\" + this.optionalRestSlugName + ']]\").');\n            }\n            routes.unshift(r);\n        }\n        if (this.restSlugName !== null) {\n            routes.push(...this.children.get(\"[...]\")._smoosh(prefix + \"[...\" + this.restSlugName + \"]/\"));\n        }\n        if (this.optionalRestSlugName !== null) {\n            routes.push(...this.children.get(\"[[...]]\")._smoosh(prefix + \"[[...\" + this.optionalRestSlugName + \"]]/\"));\n        }\n        return routes;\n    }\n    _insert(urlPaths, slugNames, isCatchAll) {\n        if (urlPaths.length === 0) {\n            this.placeholder = false;\n            return;\n        }\n        if (isCatchAll) {\n            throw new Error(\"Catch-all must be the last part of the URL.\");\n        }\n        // The next segment in the urlPaths list\n        let nextSegment = urlPaths[0];\n        // Check if the segment matches `[something]`\n        if (nextSegment.startsWith(\"[\") && nextSegment.endsWith(\"]\")) {\n            // Strip `[` and `]`, leaving only `something`\n            let segmentName = nextSegment.slice(1, -1);\n            let isOptional = false;\n            if (segmentName.startsWith(\"[\") && segmentName.endsWith(\"]\")) {\n                // Strip optional `[` and `]`, leaving only `something`\n                segmentName = segmentName.slice(1, -1);\n                isOptional = true;\n            }\n            if (segmentName.startsWith(\"...\")) {\n                // Strip `...`, leaving only `something`\n                segmentName = segmentName.substring(3);\n                isCatchAll = true;\n            }\n            if (segmentName.startsWith(\"[\") || segmentName.endsWith(\"]\")) {\n                throw new Error(\"Segment names may not start or end with extra brackets ('\" + segmentName + \"').\");\n            }\n            if (segmentName.startsWith(\".\")) {\n                throw new Error(\"Segment names may not start with erroneous periods ('\" + segmentName + \"').\");\n            }\n            function handleSlug(previousSlug, nextSlug) {\n                if (previousSlug !== null) {\n                    // If the specific segment already has a slug but the slug is not `something`\n                    // This prevents collisions like:\n                    // pages/[post]/index.js\n                    // pages/[id]/index.js\n                    // Because currently multiple dynamic params on the same segment level are not supported\n                    if (previousSlug !== nextSlug) {\n                        // TODO: This error seems to be confusing for users, needs an error link, the description can be based on above comment.\n                        throw new Error(\"You cannot use different slug names for the same dynamic path ('\" + previousSlug + \"' !== '\" + nextSlug + \"').\");\n                    }\n                }\n                slugNames.forEach((slug)=>{\n                    if (slug === nextSlug) {\n                        throw new Error('You cannot have the same slug name \"' + nextSlug + '\" repeat within a single dynamic path');\n                    }\n                    if (slug.replace(/\\W/g, \"\") === nextSegment.replace(/\\W/g, \"\")) {\n                        throw new Error('You cannot have the slug names \"' + slug + '\" and \"' + nextSlug + '\" differ only by non-word symbols within a single dynamic path');\n                    }\n                });\n                slugNames.push(nextSlug);\n            }\n            if (isCatchAll) {\n                if (isOptional) {\n                    if (this.restSlugName != null) {\n                        throw new Error('You cannot use both an required and optional catch-all route at the same level (\"[...' + this.restSlugName + ']\" and \"' + urlPaths[0] + '\" ).');\n                    }\n                    handleSlug(this.optionalRestSlugName, segmentName);\n                    // slugName is kept as it can only be one particular slugName\n                    this.optionalRestSlugName = segmentName;\n                    // nextSegment is overwritten to [[...]] so that it can later be sorted specifically\n                    nextSegment = \"[[...]]\";\n                } else {\n                    if (this.optionalRestSlugName != null) {\n                        throw new Error('You cannot use both an optional and required catch-all route at the same level (\"[[...' + this.optionalRestSlugName + ']]\" and \"' + urlPaths[0] + '\").');\n                    }\n                    handleSlug(this.restSlugName, segmentName);\n                    // slugName is kept as it can only be one particular slugName\n                    this.restSlugName = segmentName;\n                    // nextSegment is overwritten to [...] so that it can later be sorted specifically\n                    nextSegment = \"[...]\";\n                }\n            } else {\n                if (isOptional) {\n                    throw new Error('Optional route parameters are not yet supported (\"' + urlPaths[0] + '\").');\n                }\n                handleSlug(this.slugName, segmentName);\n                // slugName is kept as it can only be one particular slugName\n                this.slugName = segmentName;\n                // nextSegment is overwritten to [] so that it can later be sorted specifically\n                nextSegment = \"[]\";\n            }\n        }\n        // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode\n        if (!this.children.has(nextSegment)) {\n            this.children.set(nextSegment, new UrlNode());\n        }\n        this.children.get(nextSegment)._insert(urlPaths.slice(1), slugNames, isCatchAll);\n    }\n    constructor(){\n        this.placeholder = true;\n        this.children = new Map();\n        this.slugName = null;\n        this.restSlugName = null;\n        this.optionalRestSlugName = null;\n    }\n}\nfunction getSortedRoutes(normalizedPages) {\n    // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment\n    // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js\n    // Only 1 dynamic segment per nesting level\n    // So in the case that is test/integration/dynamic-routing it'll be this:\n    // pages/[post]/comments.js\n    // pages/blog/[post]/comment/[id].js\n    // Both are fine because `pages/[post]` and `pages/blog` are on the same level\n    // So in this case `UrlNode` created here has `this.slugName === 'post'`\n    // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities\n    // Instead what has to be passed through is the upwards path's dynamic names\n    const root = new UrlNode();\n    // Here the `root` gets injected multiple paths, and insert will break them up into sublevels\n    normalizedPages.forEach((pagePath)=>root.insert(pagePath));\n    // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority\n    return root.smoosh();\n} //# sourceMappingURL=sorted-routes.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/sorted-routes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/utils.js":
/*!****************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/utils.js ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    WEB_VITALS: function() {\n        return WEB_VITALS;\n    },\n    execOnce: function() {\n        return execOnce;\n    },\n    isAbsoluteUrl: function() {\n        return isAbsoluteUrl;\n    },\n    getLocationOrigin: function() {\n        return getLocationOrigin;\n    },\n    getURL: function() {\n        return getURL;\n    },\n    getDisplayName: function() {\n        return getDisplayName;\n    },\n    isResSent: function() {\n        return isResSent;\n    },\n    normalizeRepeatedSlashes: function() {\n        return normalizeRepeatedSlashes;\n    },\n    loadGetInitialProps: function() {\n        return loadGetInitialProps;\n    },\n    SP: function() {\n        return SP;\n    },\n    ST: function() {\n        return ST;\n    },\n    DecodeError: function() {\n        return DecodeError;\n    },\n    NormalizeError: function() {\n        return NormalizeError;\n    },\n    PageNotFoundError: function() {\n        return PageNotFoundError;\n    },\n    MissingStaticPage: function() {\n        return MissingStaticPage;\n    },\n    MiddlewareNotFoundError: function() {\n        return MiddlewareNotFoundError;\n    },\n    stringifyError: function() {\n        return stringifyError;\n    }\n});\nconst WEB_VITALS = [\n    \"CLS\",\n    \"FCP\",\n    \"FID\",\n    \"INP\",\n    \"LCP\",\n    \"TTFB\"\n];\nfunction execOnce(fn) {\n    let used = false;\n    let result;\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (!used) {\n            used = true;\n            result = fn(...args);\n        }\n        return result;\n    };\n}\n// Scheme: https://tools.ietf.org/html/rfc3986#section-3.1\n// Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\nconst ABSOLUTE_URL_REGEX = /^[a-zA-Z][a-zA-Z\\d+\\-.]*?:/;\nconst isAbsoluteUrl = (url)=>ABSOLUTE_URL_REGEX.test(url);\nfunction getLocationOrigin() {\n    const { protocol, hostname, port } = window.location;\n    return protocol + \"//\" + hostname + (port ? \":\" + port : \"\");\n}\nfunction getURL() {\n    const { href } = window.location;\n    const origin = getLocationOrigin();\n    return href.substring(origin.length);\n}\nfunction getDisplayName(Component) {\n    return typeof Component === \"string\" ? Component : Component.displayName || Component.name || \"Unknown\";\n}\nfunction isResSent(res) {\n    return res.finished || res.headersSent;\n}\nfunction normalizeRepeatedSlashes(url) {\n    const urlParts = url.split(\"?\");\n    const urlNoQuery = urlParts[0];\n    return urlNoQuery // first we replace any non-encoded backslashes with forward\n    // then normalize repeated forward slashes\n    .replace(/\\\\/g, \"/\").replace(/\\/\\/+/g, \"/\") + (urlParts[1] ? \"?\" + urlParts.slice(1).join(\"?\") : \"\");\n}\nasync function loadGetInitialProps(App, ctx) {\n    if (true) {\n        var _App_prototype;\n        if ((_App_prototype = App.prototype) == null ? void 0 : _App_prototype.getInitialProps) {\n            const message = '\"' + getDisplayName(App) + '.getInitialProps()\" is defined as an instance method - visit https://nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.';\n            throw new Error(message);\n        }\n    }\n    // when called from _app `ctx` is nested in `ctx`\n    const res = ctx.res || ctx.ctx && ctx.ctx.res;\n    if (!App.getInitialProps) {\n        if (ctx.ctx && ctx.Component) {\n            // @ts-ignore pageProps default\n            return {\n                pageProps: await loadGetInitialProps(ctx.Component, ctx.ctx)\n            };\n        }\n        return {};\n    }\n    const props = await App.getInitialProps(ctx);\n    if (res && isResSent(res)) {\n        return props;\n    }\n    if (!props) {\n        const message = '\"' + getDisplayName(App) + '.getInitialProps()\" should resolve to an object. But found \"' + props + '\" instead.';\n        throw new Error(message);\n    }\n    if (true) {\n        if (Object.keys(props).length === 0 && !ctx.ctx) {\n            console.warn(\"\" + getDisplayName(App) + \" returned an empty object from `getInitialProps`. This de-optimizes and prevents automatic static optimization. https://nextjs.org/docs/messages/empty-object-getInitialProps\");\n        }\n    }\n    return props;\n}\nconst SP = typeof performance !== \"undefined\";\nconst ST = SP && [\n    \"mark\",\n    \"measure\",\n    \"getEntriesByName\"\n].every((method)=>typeof performance[method] === \"function\");\nclass DecodeError extends Error {\n}\nclass NormalizeError extends Error {\n}\nclass PageNotFoundError extends Error {\n    constructor(page){\n        super();\n        this.code = \"ENOENT\";\n        this.name = \"PageNotFoundError\";\n        this.message = \"Cannot find module for page: \" + page;\n    }\n}\nclass MissingStaticPage extends Error {\n    constructor(page, message){\n        super();\n        this.message = \"Failed to load static file for page: \" + page + \" \" + message;\n    }\n}\nclass MiddlewareNotFoundError extends Error {\n    constructor(){\n        super();\n        this.code = \"ENOENT\";\n        this.message = \"Cannot find the middleware module\";\n    }\n}\nfunction stringifyError(error) {\n    return JSON.stringify({\n        message: error.message,\n        stack: error.stack\n    });\n} //# sourceMappingURL=utils.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRixLQUFNQyxDQUFBQSxDQWtCTjtBQUNBLFNBQVNrQixRQUFRQyxNQUFNLEVBQUVDLEdBQUc7SUFDeEIsSUFBSSxJQUFJQyxRQUFRRCxJQUFJeEIsT0FBT0MsY0FBYyxDQUFDc0IsUUFBUUUsTUFBTTtRQUNwREMsWUFBWTtRQUNaQyxLQUFLSCxHQUFHLENBQUNDLEtBQUs7SUFDbEI7QUFDSjtBQUNBSCxRQUFRcEIsU0FBUztJQUNiRyxZQUFZO1FBQ1IsT0FBT0E7SUFDWDtJQUNBQyxVQUFVO1FBQ04sT0FBT0E7SUFDWDtJQUNBQyxlQUFlO1FBQ1gsT0FBT0E7SUFDWDtJQUNBQyxtQkFBbUI7UUFDZixPQUFPQTtJQUNYO0lBQ0FDLFFBQVE7UUFDSixPQUFPQTtJQUNYO0lBQ0FDLGdCQUFnQjtRQUNaLE9BQU9BO0lBQ1g7SUFDQUMsV0FBVztRQUNQLE9BQU9BO0lBQ1g7SUFDQUMsMEJBQTBCO1FBQ3RCLE9BQU9BO0lBQ1g7SUFDQUMscUJBQXFCO1FBQ2pCLE9BQU9BO0lBQ1g7SUFDQUMsSUFBSTtRQUNBLE9BQU9BO0lBQ1g7SUFDQUMsSUFBSTtRQUNBLE9BQU9BO0lBQ1g7SUFDQUMsYUFBYTtRQUNULE9BQU9BO0lBQ1g7SUFDQUMsZ0JBQWdCO1FBQ1osT0FBT0E7SUFDWDtJQUNBQyxtQkFBbUI7UUFDZixPQUFPQTtJQUNYO0lBQ0FDLG1CQUFtQjtRQUNmLE9BQU9BO0lBQ1g7SUFDQUMseUJBQXlCO1FBQ3JCLE9BQU9BO0lBQ1g7SUFDQUMsZ0JBQWdCO1FBQ1osT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTWhCLGFBQWE7SUFDZjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDSDtBQUNELFNBQVNDLFNBQVNzQixFQUFFO0lBQ2hCLElBQUlDLE9BQU87SUFDWCxJQUFJQztJQUNKLE9BQU87UUFDSCxJQUFJLElBQUlDLE9BQU9DLFVBQVVDLE1BQU0sRUFBRUMsT0FBTyxJQUFJQyxNQUFNSixPQUFPSyxPQUFPLEdBQUdBLE9BQU9MLE1BQU1LLE9BQU87WUFDbkZGLElBQUksQ0FBQ0UsS0FBSyxHQUFHSixTQUFTLENBQUNJLEtBQUs7UUFDaEM7UUFDQSxJQUFJLENBQUNQLE1BQU07WUFDUEEsT0FBTztZQUNQQyxTQUFTRixNQUFNTTtRQUNuQjtRQUNBLE9BQU9KO0lBQ1g7QUFDSjtBQUNBLDBEQUEwRDtBQUMxRCxnRUFBZ0U7QUFDaEUsTUFBTU8scUJBQXFCO0FBQzNCLE1BQU05QixnQkFBZ0IsQ0FBQytCLE1BQU1ELG1CQUFtQkUsSUFBSSxDQUFDRDtBQUNyRCxTQUFTOUI7SUFDTCxNQUFNLEVBQUVnQyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFFLEdBQUdDLE9BQU9DLFFBQVE7SUFDcEQsT0FBT0osV0FBVyxPQUFPQyxXQUFZQyxDQUFBQSxPQUFPLE1BQU1BLE9BQU8sRUFBQztBQUM5RDtBQUNBLFNBQVNqQztJQUNMLE1BQU0sRUFBRW9DLElBQUksRUFBRSxHQUFHRixPQUFPQyxRQUFRO0lBQ2hDLE1BQU1FLFNBQVN0QztJQUNmLE9BQU9xQyxLQUFLRSxTQUFTLENBQUNELE9BQU9iLE1BQU07QUFDdkM7QUFDQSxTQUFTdkIsZUFBZXNDLFNBQVM7SUFDN0IsT0FBTyxPQUFPQSxjQUFjLFdBQVdBLFlBQVlBLFVBQVVDLFdBQVcsSUFBSUQsVUFBVXZCLElBQUksSUFBSTtBQUNsRztBQUNBLFNBQVNkLFVBQVV1QyxHQUFHO0lBQ2xCLE9BQU9BLElBQUlDLFFBQVEsSUFBSUQsSUFBSUUsV0FBVztBQUMxQztBQUNBLFNBQVN4Qyx5QkFBeUIwQixHQUFHO0lBQ2pDLE1BQU1lLFdBQVdmLElBQUlnQixLQUFLLENBQUM7SUFDM0IsTUFBTUMsYUFBYUYsUUFBUSxDQUFDLEVBQUU7SUFDOUIsT0FBT0UsV0FBVSw0REFBNEQ7SUFDN0UsMENBQTBDO0tBQ3pDQyxPQUFPLENBQUMsT0FBTyxLQUFLQSxPQUFPLENBQUMsVUFBVSxPQUFRSCxDQUFBQSxRQUFRLENBQUMsRUFBRSxHQUFHLE1BQU1BLFNBQVNJLEtBQUssQ0FBQyxHQUFHQyxJQUFJLENBQUMsT0FBTyxFQUFDO0FBQ3RHO0FBQ0EsZUFBZTdDLG9CQUFvQjhDLEdBQUcsRUFBRUMsR0FBRztJQUN2QyxJQUFJQyxJQUFxQyxFQUFFO1FBQ3ZDLElBQUlDO1FBQ0osSUFBSSxDQUFDQSxpQkFBaUJILElBQUlJLFNBQVMsS0FBSyxPQUFPLEtBQUssSUFBSUQsZUFBZUUsZUFBZSxFQUFFO1lBQ3BGLE1BQU1DLFVBQVUsTUFBTXZELGVBQWVpRCxPQUFPO1lBQzVDLE1BQU0sSUFBSU8sTUFBTUQ7UUFDcEI7SUFDSjtJQUNBLGlEQUFpRDtJQUNqRCxNQUFNZixNQUFNVSxJQUFJVixHQUFHLElBQUlVLElBQUlBLEdBQUcsSUFBSUEsSUFBSUEsR0FBRyxDQUFDVixHQUFHO0lBQzdDLElBQUksQ0FBQ1MsSUFBSUssZUFBZSxFQUFFO1FBQ3RCLElBQUlKLElBQUlBLEdBQUcsSUFBSUEsSUFBSVosU0FBUyxFQUFFO1lBQzFCLCtCQUErQjtZQUMvQixPQUFPO2dCQUNIbUIsV0FBVyxNQUFNdEQsb0JBQW9CK0MsSUFBSVosU0FBUyxFQUFFWSxJQUFJQSxHQUFHO1lBQy9EO1FBQ0o7UUFDQSxPQUFPLENBQUM7SUFDWjtJQUNBLE1BQU1RLFFBQVEsTUFBTVQsSUFBSUssZUFBZSxDQUFDSjtJQUN4QyxJQUFJVixPQUFPdkMsVUFBVXVDLE1BQU07UUFDdkIsT0FBT2tCO0lBQ1g7SUFDQSxJQUFJLENBQUNBLE9BQU87UUFDUixNQUFNSCxVQUFVLE1BQU12RCxlQUFlaUQsT0FBTyxpRUFBaUVTLFFBQVE7UUFDckgsTUFBTSxJQUFJRixNQUFNRDtJQUNwQjtJQUNBLElBQUlKLElBQXFDLEVBQUU7UUFDdkMsSUFBSTdELE9BQU9xRSxJQUFJLENBQUNELE9BQU9uQyxNQUFNLEtBQUssS0FBSyxDQUFDMkIsSUFBSUEsR0FBRyxFQUFFO1lBQzdDVSxRQUFRQyxJQUFJLENBQUMsS0FBSzdELGVBQWVpRCxPQUFPO1FBQzVDO0lBQ0o7SUFDQSxPQUFPUztBQUNYO0FBQ0EsTUFBTXRELEtBQUssT0FBTzBELGdCQUFnQjtBQUNsQyxNQUFNekQsS0FBS0QsTUFBTTtJQUNiO0lBQ0E7SUFDQTtDQUNILENBQUMyRCxLQUFLLENBQUMsQ0FBQ0MsU0FBUyxPQUFPRixXQUFXLENBQUNFLE9BQU8sS0FBSztBQUNqRCxNQUFNMUQsb0JBQW9Ca0Q7QUFDMUI7QUFDQSxNQUFNakQsdUJBQXVCaUQ7QUFDN0I7QUFDQSxNQUFNaEQsMEJBQTBCZ0Q7SUFDNUJTLFlBQVlDLElBQUksQ0FBQztRQUNiLEtBQUs7UUFDTCxJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ3BELElBQUksR0FBRztRQUNaLElBQUksQ0FBQ3dDLE9BQU8sR0FBRyxrQ0FBa0NXO0lBQ3JEO0FBQ0o7QUFDQSxNQUFNekQsMEJBQTBCK0M7SUFDNUJTLFlBQVlDLElBQUksRUFBRVgsT0FBTyxDQUFDO1FBQ3RCLEtBQUs7UUFDTCxJQUFJLENBQUNBLE9BQU8sR0FBRywwQ0FBMENXLE9BQU8sTUFBTVg7SUFDMUU7QUFDSjtBQUNBLE1BQU03QyxnQ0FBZ0M4QztJQUNsQ1MsYUFBYTtRQUNULEtBQUs7UUFDTCxJQUFJLENBQUNFLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ1osT0FBTyxHQUFHO0lBQ25CO0FBQ0o7QUFDQSxTQUFTNUMsZUFBZXlELEtBQUs7SUFDekIsT0FBT0MsS0FBS0MsU0FBUyxDQUFDO1FBQ2xCZixTQUFTYSxNQUFNYixPQUFPO1FBQ3RCZ0IsT0FBT0gsTUFBTUcsS0FBSztJQUN0QjtBQUNKLEVBRUEsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi91dGlscy5qcz9lN2ZmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgV0VCX1ZJVEFMUzogbnVsbCxcbiAgICBleGVjT25jZTogbnVsbCxcbiAgICBpc0Fic29sdXRlVXJsOiBudWxsLFxuICAgIGdldExvY2F0aW9uT3JpZ2luOiBudWxsLFxuICAgIGdldFVSTDogbnVsbCxcbiAgICBnZXREaXNwbGF5TmFtZTogbnVsbCxcbiAgICBpc1Jlc1NlbnQ6IG51bGwsXG4gICAgbm9ybWFsaXplUmVwZWF0ZWRTbGFzaGVzOiBudWxsLFxuICAgIGxvYWRHZXRJbml0aWFsUHJvcHM6IG51bGwsXG4gICAgU1A6IG51bGwsXG4gICAgU1Q6IG51bGwsXG4gICAgRGVjb2RlRXJyb3I6IG51bGwsXG4gICAgTm9ybWFsaXplRXJyb3I6IG51bGwsXG4gICAgUGFnZU5vdEZvdW5kRXJyb3I6IG51bGwsXG4gICAgTWlzc2luZ1N0YXRpY1BhZ2U6IG51bGwsXG4gICAgTWlkZGxld2FyZU5vdEZvdW5kRXJyb3I6IG51bGwsXG4gICAgc3RyaW5naWZ5RXJyb3I6IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgV0VCX1ZJVEFMUzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBXRUJfVklUQUxTO1xuICAgIH0sXG4gICAgZXhlY09uY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZXhlY09uY2U7XG4gICAgfSxcbiAgICBpc0Fic29sdXRlVXJsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGlzQWJzb2x1dGVVcmw7XG4gICAgfSxcbiAgICBnZXRMb2NhdGlvbk9yaWdpbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRMb2NhdGlvbk9yaWdpbjtcbiAgICB9LFxuICAgIGdldFVSTDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRVUkw7XG4gICAgfSxcbiAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXREaXNwbGF5TmFtZTtcbiAgICB9LFxuICAgIGlzUmVzU2VudDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpc1Jlc1NlbnQ7XG4gICAgfSxcbiAgICBub3JtYWxpemVSZXBlYXRlZFNsYXNoZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplUmVwZWF0ZWRTbGFzaGVzO1xuICAgIH0sXG4gICAgbG9hZEdldEluaXRpYWxQcm9wczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBsb2FkR2V0SW5pdGlhbFByb3BzO1xuICAgIH0sXG4gICAgU1A6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gU1A7XG4gICAgfSxcbiAgICBTVDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBTVDtcbiAgICB9LFxuICAgIERlY29kZUVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIERlY29kZUVycm9yO1xuICAgIH0sXG4gICAgTm9ybWFsaXplRXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gTm9ybWFsaXplRXJyb3I7XG4gICAgfSxcbiAgICBQYWdlTm90Rm91bmRFcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBQYWdlTm90Rm91bmRFcnJvcjtcbiAgICB9LFxuICAgIE1pc3NpbmdTdGF0aWNQYWdlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIE1pc3NpbmdTdGF0aWNQYWdlO1xuICAgIH0sXG4gICAgTWlkZGxld2FyZU5vdEZvdW5kRXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gTWlkZGxld2FyZU5vdEZvdW5kRXJyb3I7XG4gICAgfSxcbiAgICBzdHJpbmdpZnlFcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdpZnlFcnJvcjtcbiAgICB9XG59KTtcbmNvbnN0IFdFQl9WSVRBTFMgPSBbXG4gICAgXCJDTFNcIixcbiAgICBcIkZDUFwiLFxuICAgIFwiRklEXCIsXG4gICAgXCJJTlBcIixcbiAgICBcIkxDUFwiLFxuICAgIFwiVFRGQlwiXG5dO1xuZnVuY3Rpb24gZXhlY09uY2UoZm4pIHtcbiAgICBsZXQgdXNlZCA9IGZhbHNlO1xuICAgIGxldCByZXN1bHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKyl7XG4gICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdXNlZCkge1xuICAgICAgICAgICAgdXNlZCA9IHRydWU7XG4gICAgICAgICAgICByZXN1bHQgPSBmbiguLi5hcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59XG4vLyBTY2hlbWU6IGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tMy4xXG4vLyBBYnNvbHV0ZSBVUkw6IGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tNC4zXG5jb25zdCBBQlNPTFVURV9VUkxfUkVHRVggPSAvXlthLXpBLVpdW2EtekEtWlxcZCtcXC0uXSo/Oi87XG5jb25zdCBpc0Fic29sdXRlVXJsID0gKHVybCk9PkFCU09MVVRFX1VSTF9SRUdFWC50ZXN0KHVybCk7XG5mdW5jdGlvbiBnZXRMb2NhdGlvbk9yaWdpbigpIHtcbiAgICBjb25zdCB7IHByb3RvY29sLCBob3N0bmFtZSwgcG9ydCB9ID0gd2luZG93LmxvY2F0aW9uO1xuICAgIHJldHVybiBwcm90b2NvbCArIFwiLy9cIiArIGhvc3RuYW1lICsgKHBvcnQgPyBcIjpcIiArIHBvcnQgOiBcIlwiKTtcbn1cbmZ1bmN0aW9uIGdldFVSTCgpIHtcbiAgICBjb25zdCB7IGhyZWYgfSA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICBjb25zdCBvcmlnaW4gPSBnZXRMb2NhdGlvbk9yaWdpbigpO1xuICAgIHJldHVybiBocmVmLnN1YnN0cmluZyhvcmlnaW4ubGVuZ3RoKTtcbn1cbmZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKENvbXBvbmVudCkge1xuICAgIHJldHVybiB0eXBlb2YgQ29tcG9uZW50ID09PSBcInN0cmluZ1wiID8gQ29tcG9uZW50IDogQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8IFwiVW5rbm93blwiO1xufVxuZnVuY3Rpb24gaXNSZXNTZW50KHJlcykge1xuICAgIHJldHVybiByZXMuZmluaXNoZWQgfHwgcmVzLmhlYWRlcnNTZW50O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplUmVwZWF0ZWRTbGFzaGVzKHVybCkge1xuICAgIGNvbnN0IHVybFBhcnRzID0gdXJsLnNwbGl0KFwiP1wiKTtcbiAgICBjb25zdCB1cmxOb1F1ZXJ5ID0gdXJsUGFydHNbMF07XG4gICAgcmV0dXJuIHVybE5vUXVlcnkvLyBmaXJzdCB3ZSByZXBsYWNlIGFueSBub24tZW5jb2RlZCBiYWNrc2xhc2hlcyB3aXRoIGZvcndhcmRcbiAgICAvLyB0aGVuIG5vcm1hbGl6ZSByZXBlYXRlZCBmb3J3YXJkIHNsYXNoZXNcbiAgICAucmVwbGFjZSgvXFxcXC9nLCBcIi9cIikucmVwbGFjZSgvXFwvXFwvKy9nLCBcIi9cIikgKyAodXJsUGFydHNbMV0gPyBcIj9cIiArIHVybFBhcnRzLnNsaWNlKDEpLmpvaW4oXCI/XCIpIDogXCJcIik7XG59XG5hc3luYyBmdW5jdGlvbiBsb2FkR2V0SW5pdGlhbFByb3BzKEFwcCwgY3R4KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICB2YXIgX0FwcF9wcm90b3R5cGU7XG4gICAgICAgIGlmICgoX0FwcF9wcm90b3R5cGUgPSBBcHAucHJvdG90eXBlKSA9PSBudWxsID8gdm9pZCAwIDogX0FwcF9wcm90b3R5cGUuZ2V0SW5pdGlhbFByb3BzKSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gJ1wiJyArIGdldERpc3BsYXlOYW1lKEFwcCkgKyAnLmdldEluaXRpYWxQcm9wcygpXCIgaXMgZGVmaW5lZCBhcyBhbiBpbnN0YW5jZSBtZXRob2QgLSB2aXNpdCBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9nZXQtaW5pdGlhbC1wcm9wcy1hcy1hbi1pbnN0YW5jZS1tZXRob2QgZm9yIG1vcmUgaW5mb3JtYXRpb24uJztcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyB3aGVuIGNhbGxlZCBmcm9tIF9hcHAgYGN0eGAgaXMgbmVzdGVkIGluIGBjdHhgXG4gICAgY29uc3QgcmVzID0gY3R4LnJlcyB8fCBjdHguY3R4ICYmIGN0eC5jdHgucmVzO1xuICAgIGlmICghQXBwLmdldEluaXRpYWxQcm9wcykge1xuICAgICAgICBpZiAoY3R4LmN0eCAmJiBjdHguQ29tcG9uZW50KSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIHBhZ2VQcm9wcyBkZWZhdWx0XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHBhZ2VQcm9wczogYXdhaXQgbG9hZEdldEluaXRpYWxQcm9wcyhjdHguQ29tcG9uZW50LCBjdHguY3R4KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGNvbnN0IHByb3BzID0gYXdhaXQgQXBwLmdldEluaXRpYWxQcm9wcyhjdHgpO1xuICAgIGlmIChyZXMgJiYgaXNSZXNTZW50KHJlcykpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH1cbiAgICBpZiAoIXByb3BzKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnXCInICsgZ2V0RGlzcGxheU5hbWUoQXBwKSArICcuZ2V0SW5pdGlhbFByb3BzKClcIiBzaG91bGQgcmVzb2x2ZSB0byBhbiBvYmplY3QuIEJ1dCBmb3VuZCBcIicgKyBwcm9wcyArICdcIiBpbnN0ZWFkLic7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMocHJvcHMpLmxlbmd0aCA9PT0gMCAmJiAhY3R4LmN0eCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiXCIgKyBnZXREaXNwbGF5TmFtZShBcHApICsgXCIgcmV0dXJuZWQgYW4gZW1wdHkgb2JqZWN0IGZyb20gYGdldEluaXRpYWxQcm9wc2AuIFRoaXMgZGUtb3B0aW1pemVzIGFuZCBwcmV2ZW50cyBhdXRvbWF0aWMgc3RhdGljIG9wdGltaXphdGlvbi4gaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvZW1wdHktb2JqZWN0LWdldEluaXRpYWxQcm9wc1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvcHM7XG59XG5jb25zdCBTUCA9IHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gXCJ1bmRlZmluZWRcIjtcbmNvbnN0IFNUID0gU1AgJiYgW1xuICAgIFwibWFya1wiLFxuICAgIFwibWVhc3VyZVwiLFxuICAgIFwiZ2V0RW50cmllc0J5TmFtZVwiXG5dLmV2ZXJ5KChtZXRob2QpPT50eXBlb2YgcGVyZm9ybWFuY2VbbWV0aG9kXSA9PT0gXCJmdW5jdGlvblwiKTtcbmNsYXNzIERlY29kZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xufVxuY2xhc3MgTm9ybWFsaXplRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG59XG5jbGFzcyBQYWdlTm90Rm91bmRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihwYWdlKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jb2RlID0gXCJFTk9FTlRcIjtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJQYWdlTm90Rm91bmRFcnJvclwiO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBcIkNhbm5vdCBmaW5kIG1vZHVsZSBmb3IgcGFnZTogXCIgKyBwYWdlO1xuICAgIH1cbn1cbmNsYXNzIE1pc3NpbmdTdGF0aWNQYWdlIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHBhZ2UsIG1lc3NhZ2Upe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBcIkZhaWxlZCB0byBsb2FkIHN0YXRpYyBmaWxlIGZvciBwYWdlOiBcIiArIHBhZ2UgKyBcIiBcIiArIG1lc3NhZ2U7XG4gICAgfVxufVxuY2xhc3MgTWlkZGxld2FyZU5vdEZvdW5kRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jb2RlID0gXCJFTk9FTlRcIjtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gXCJDYW5ub3QgZmluZCB0aGUgbWlkZGxld2FyZSBtb2R1bGVcIjtcbiAgICB9XG59XG5mdW5jdGlvbiBzdHJpbmdpZnlFcnJvcihlcnJvcikge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgIHN0YWNrOiBlcnJvci5zdGFja1xuICAgIH0pO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtb2R1bGUiLCJXRUJfVklUQUxTIiwiZXhlY09uY2UiLCJpc0Fic29sdXRlVXJsIiwiZ2V0TG9jYXRpb25PcmlnaW4iLCJnZXRVUkwiLCJnZXREaXNwbGF5TmFtZSIsImlzUmVzU2VudCIsIm5vcm1hbGl6ZVJlcGVhdGVkU2xhc2hlcyIsImxvYWRHZXRJbml0aWFsUHJvcHMiLCJTUCIsIlNUIiwiRGVjb2RlRXJyb3IiLCJOb3JtYWxpemVFcnJvciIsIlBhZ2VOb3RGb3VuZEVycm9yIiwiTWlzc2luZ1N0YXRpY1BhZ2UiLCJNaWRkbGV3YXJlTm90Rm91bmRFcnJvciIsInN0cmluZ2lmeUVycm9yIiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZm4iLCJ1c2VkIiwicmVzdWx0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJBQlNPTFVURV9VUkxfUkVHRVgiLCJ1cmwiLCJ0ZXN0IiwicHJvdG9jb2wiLCJob3N0bmFtZSIsInBvcnQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJvcmlnaW4iLCJzdWJzdHJpbmciLCJDb21wb25lbnQiLCJkaXNwbGF5TmFtZSIsInJlcyIsImZpbmlzaGVkIiwiaGVhZGVyc1NlbnQiLCJ1cmxQYXJ0cyIsInNwbGl0IiwidXJsTm9RdWVyeSIsInJlcGxhY2UiLCJzbGljZSIsImpvaW4iLCJBcHAiLCJjdHgiLCJwcm9jZXNzIiwiX0FwcF9wcm90b3R5cGUiLCJwcm90b3R5cGUiLCJnZXRJbml0aWFsUHJvcHMiLCJtZXNzYWdlIiwiRXJyb3IiLCJwYWdlUHJvcHMiLCJwcm9wcyIsImtleXMiLCJjb25zb2xlIiwid2FybiIsInBlcmZvcm1hbmNlIiwiZXZlcnkiLCJtZXRob2QiLCJjb25zdHJ1Y3RvciIsInBhZ2UiLCJjb2RlIiwiZXJyb3IiLCJKU09OIiwic3RyaW5naWZ5Iiwic3RhY2siXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/Navbar.tsx":
/*!***********************************!*\
  !*** ./src/components/Navbar.tsx ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Navbar; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/link */ \"(app-pages-browser)/./node_modules/next/dist/api/link.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nconst calculatorCategories = [\n    {\n        title: \"Financial Calculators\",\n        items: [\n            {\n                name: \"Mortgage Calculator\",\n                path: \"/mortgage\"\n            },\n            {\n                name: \"Loan Calculator\",\n                path: \"/loan\"\n            },\n            {\n                name: \"Auto Loan Calculator\",\n                path: \"/auto-loan\"\n            },\n            {\n                name: \"Interest Calculator\",\n                path: \"/interest\"\n            },\n            {\n                name: \"Payment Calculator\",\n                path: \"/payment\"\n            },\n            {\n                name: \"Retirement Calculator\",\n                path: \"/retirement\"\n            },\n            {\n                name: \"Amortization Calculator\",\n                path: \"/amortization\"\n            },\n            {\n                name: \"Investment Calculator\",\n                path: \"/investment\"\n            },\n            {\n                name: \"Inflation Calculator\",\n                path: \"/inflation\"\n            },\n            {\n                name: \"Finance Calculator\",\n                path: \"/finance\"\n            },\n            {\n                name: \"Income Tax Calculator\",\n                path: \"/income-tax\"\n            },\n            {\n                name: \"Compound Interest Calculator\",\n                path: \"/compound-interest\"\n            },\n            {\n                name: \"Salary Calculator\",\n                path: \"/salary\"\n            },\n            {\n                name: \"Interest Rate Calculator\",\n                path: \"/interest-rate\"\n            },\n            {\n                name: \"Sales Tax Calculator\",\n                path: \"/sales-tax\"\n            }\n        ]\n    },\n    {\n        title: \"Fitness & Health Calculators\",\n        items: [\n            {\n                name: \"BMI Calculator\",\n                path: \"/bmi\"\n            },\n            {\n                name: \"Calorie Calculator\",\n                path: \"/calorie\"\n            },\n            {\n                name: \"Body Fat Calculator\",\n                path: \"/body-fat\"\n            },\n            {\n                name: \"BMR Calculator\",\n                path: \"/bmr\"\n            },\n            {\n                name: \"Ideal Weight Calculator\",\n                path: \"/ideal-weight\"\n            },\n            {\n                name: \"Pace Calculator\",\n                path: \"/pace\"\n            },\n            {\n                name: \"Pregnancy Calculator\",\n                path: \"/pregnancy\"\n            },\n            {\n                name: \"Pregnancy Conception Calculator\",\n                path: \"/conception\"\n            },\n            {\n                name: \"Due Date Calculator\",\n                path: \"/due-date\"\n            }\n        ]\n    },\n    {\n        title: \"Math Calculators\",\n        items: [\n            {\n                name: \"Scientific Calculator\",\n                path: \"/scientific\"\n            },\n            {\n                name: \"Fraction Calculator\",\n                path: \"/fraction\"\n            },\n            {\n                name: \"Percentage Calculator\",\n                path: \"/percentage\"\n            },\n            {\n                name: \"Random Number Generator\",\n                path: \"/random\"\n            },\n            {\n                name: \"Triangle Calculator\",\n                path: \"/triangle\"\n            },\n            {\n                name: \"Standard Deviation Calculator\",\n                path: \"/standard-deviation\"\n            }\n        ]\n    },\n    {\n        title: \"Other Calculators\",\n        items: [\n            {\n                name: \"Age Calculator\",\n                path: \"/age\"\n            },\n            {\n                name: \"Date Calculator\",\n                path: \"/date\"\n            },\n            {\n                name: \"Time Calculator\",\n                path: \"/time\"\n            },\n            {\n                name: \"Hours Calculator\",\n                path: \"/hours\"\n            },\n            {\n                name: \"GPA Calculator\",\n                path: \"/gpa\"\n            },\n            {\n                name: \"Grade Calculator\",\n                path: \"/grade\"\n            },\n            {\n                name: \"Concrete Calculator\",\n                path: \"/concrete\"\n            },\n            {\n                name: \"Subnet Calculator\",\n                path: \"/subnet\"\n            },\n            {\n                name: \"Password Generator\",\n                path: \"/password\"\n            },\n            {\n                name: \"Conversion Calculator\",\n                path: \"/conversion\"\n            }\n        ]\n    }\n];\nfunction Navbar() {\n    _s();\n    const [openCategory, setOpenCategory] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [mobileMenuOpen, setMobileMenuOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [mobileOpenCategory, setMobileOpenCategory] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const toggleCategory = (title)=>{\n        setOpenCategory(openCategory === title ? null : title);\n    };\n    const toggleMobileCategory = (title)=>{\n        setMobileOpenCategory(mobileOpenCategory === title ? null : title);\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"nav\", {\n        className: \"bg-white shadow-md\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex justify-between h-16\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex-shrink-0 flex items-center\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_link__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                                    href: \"/\",\n                                    className: \"text-2xl font-bold text-blue-600\",\n                                    children: \"Calcy.net\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                                    lineNumber: 98,\n                                    columnNumber: 15\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                                lineNumber: 97,\n                                columnNumber: 13\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                            lineNumber: 96,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"hidden md:flex items-center space-x-6\",\n                            children: calculatorCategories.map((category)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"relative group\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                            onClick: ()=>toggleCategory(category.title),\n                                            className: \"px-3 py-2 text-gray-700 hover:text-blue-600 transition-colors\",\n                                            children: [\n                                                category.title,\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                                    className: \"ml-1 inline-block w-4 h-4 transition-transform \".concat(openCategory === category.title ? \"rotate-180\" : \"\"),\n                                                    fill: \"none\",\n                                                    viewBox: \"0 0 24 24\",\n                                                    stroke: \"currentColor\",\n                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                        strokeLinecap: \"round\",\n                                                        strokeLinejoin: \"round\",\n                                                        strokeWidth: 2,\n                                                        d: \"M19 9l-7 7-7-7\"\n                                                    }, void 0, false, {\n                                                        fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                                                        lineNumber: 120,\n                                                        columnNumber: 21\n                                                    }, this)\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                                                    lineNumber: 112,\n                                                    columnNumber: 19\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                                            lineNumber: 107,\n                                            columnNumber: 17\n                                        }, this),\n                                        openCategory === category.title && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"absolute z-10 left-0 mt-2 w-56 bg-white rounded-md shadow-lg py-1\",\n                                            children: category.items.map((item)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_link__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                                                    href: item.path,\n                                                    className: \"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-blue-600\",\n                                                    onClick: ()=>setOpenCategory(null),\n                                                    children: item.name\n                                                }, item.name, false, {\n                                                    fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                                                    lineNumber: 132,\n                                                    columnNumber: 23\n                                                }, this))\n                                        }, void 0, false, {\n                                            fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                                            lineNumber: 130,\n                                            columnNumber: 19\n                                        }, this)\n                                    ]\n                                }, category.title, true, {\n                                    fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                                    lineNumber: 106,\n                                    columnNumber: 15\n                                }, this))\n                        }, void 0, false, {\n                            fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                            lineNumber: 104,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"md:hidden flex items-center\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>setMobileMenuOpen(!mobileMenuOpen),\n                                className: \"inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500\",\n                                \"aria-expanded\": mobileMenuOpen,\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"sr-only\",\n                                        children: \"Open main menu\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                                        lineNumber: 154,\n                                        columnNumber: 15\n                                    }, this),\n                                    mobileMenuOpen ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                        className: \"block h-6 w-6\",\n                                        xmlns: \"http://www.w3.org/2000/svg\",\n                                        fill: \"none\",\n                                        viewBox: \"0 0 24 24\",\n                                        stroke: \"currentColor\",\n                                        \"aria-hidden\": \"true\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                            strokeLinecap: \"round\",\n                                            strokeLinejoin: \"round\",\n                                            strokeWidth: \"2\",\n                                            d: \"M6 18L18 6M6 6l12 12\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                                            lineNumber: 164,\n                                            columnNumber: 19\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                                        lineNumber: 156,\n                                        columnNumber: 17\n                                    }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                        className: \"block h-6 w-6\",\n                                        xmlns: \"http://www.w3.org/2000/svg\",\n                                        fill: \"none\",\n                                        viewBox: \"0 0 24 24\",\n                                        stroke: \"currentColor\",\n                                        \"aria-hidden\": \"true\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                            strokeLinecap: \"round\",\n                                            strokeLinejoin: \"round\",\n                                            strokeWidth: \"2\",\n                                            d: \"M4 6h16M4 12h16M4 18h16\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                                            lineNumber: 180,\n                                            columnNumber: 19\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                                        lineNumber: 172,\n                                        columnNumber: 17\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                                lineNumber: 149,\n                                columnNumber: 13\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                            lineNumber: 148,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                    lineNumber: 95,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                lineNumber: 94,\n                columnNumber: 7\n            }, this),\n            mobileMenuOpen && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"md:hidden\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"pt-2 pb-3 space-y-1\",\n                    children: calculatorCategories.map((category)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"px-4\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                    onClick: ()=>toggleMobileCategory(category.title),\n                                    className: \"w-full flex justify-between items-center py-2 text-base font-medium text-gray-700\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                            children: category.title\n                                        }, void 0, false, {\n                                            fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                                            lineNumber: 203,\n                                            columnNumber: 19\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                            className: \"w-5 h-5 transition-transform \".concat(mobileOpenCategory === category.title ? \"rotate-180\" : \"\"),\n                                            fill: \"none\",\n                                            viewBox: \"0 0 24 24\",\n                                            stroke: \"currentColor\",\n                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                strokeLinecap: \"round\",\n                                                strokeLinejoin: \"round\",\n                                                strokeWidth: 2,\n                                                d: \"M19 9l-7 7-7-7\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                                                lineNumber: 212,\n                                                columnNumber: 21\n                                            }, this)\n                                        }, void 0, false, {\n                                            fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                                            lineNumber: 204,\n                                            columnNumber: 19\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                                    lineNumber: 199,\n                                    columnNumber: 17\n                                }, this),\n                                mobileOpenCategory === category.title && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"pl-4 mt-2 space-y-1\",\n                                    children: category.items.map((item)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_link__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                                            href: item.path,\n                                            className: \"block py-2 text-base text-gray-600 hover:text-blue-600\",\n                                            children: item.name\n                                        }, item.name, false, {\n                                            fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                                            lineNumber: 224,\n                                            columnNumber: 23\n                                        }, this))\n                                }, void 0, false, {\n                                    fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                                    lineNumber: 222,\n                                    columnNumber: 19\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"mt-2 border-t border-gray-200\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                                    lineNumber: 235,\n                                    columnNumber: 17\n                                }, this)\n                            ]\n                        }, category.title, true, {\n                            fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                            lineNumber: 198,\n                            columnNumber: 15\n                        }, this))\n                }, void 0, false, {\n                    fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                    lineNumber: 196,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n                lineNumber: 195,\n                columnNumber: 9\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/Navbar.tsx\",\n        lineNumber: 93,\n        columnNumber: 5\n    }, this);\n}\n_s(Navbar, \"KTJrioORR3KgascRQOqcyN/suzM=\");\n_c = Navbar;\nvar _c;\n$RefreshReg$(_c, \"Navbar\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/Navbar.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/PostHogProvider.tsx":
/*!********************************************!*\
  !*** ./src/components/PostHogProvider.tsx ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PostHogProvider: function() { return /* binding */ PostHogProvider; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var posthog_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! posthog-js */ \"(app-pages-browser)/./node_modules/posthog-js/dist/module.js\");\n/* harmony import */ var posthog_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! posthog-js/react */ \"(app-pages-browser)/./node_modules/posthog-js/react/dist/esm/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/navigation */ \"(app-pages-browser)/./node_modules/next/dist/api/navigation.js\");\n/* __next_internal_client_entry_do_not_use__ PostHogProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\nfunction PostHogProvider(param) {\n    let { children } = param;\n    _s();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        posthog_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].init(\"phc_EX4BxorXnG7detXL7XEp1zJ6lCZbbUr4cH0YY4YVeCs\", {\n            api_host: \"/ingest\",\n            ui_host: \"https://us.posthog.com\",\n            capture_pageview: false,\n            capture_pageleave: true,\n            capture_exceptions: true,\n            debug: \"development\" === \"development\"\n        });\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(posthog_js_react__WEBPACK_IMPORTED_MODULE_2__.PostHogProvider, {\n        client: posthog_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SuspendedPostHogPageView, {}, void 0, false, {\n                fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/PostHogProvider.tsx\",\n                lineNumber: 22,\n                columnNumber: 7\n            }, this),\n            children\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/PostHogProvider.tsx\",\n        lineNumber: 21,\n        columnNumber: 5\n    }, this);\n}\n_s(PostHogProvider, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = PostHogProvider;\nfunction PostHogPageView() {\n    _s1();\n    const pathname = (0,next_navigation__WEBPACK_IMPORTED_MODULE_4__.usePathname)();\n    const searchParams = (0,next_navigation__WEBPACK_IMPORTED_MODULE_4__.useSearchParams)();\n    const posthog = (0,posthog_js_react__WEBPACK_IMPORTED_MODULE_2__.usePostHog)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        if (pathname && posthog) {\n            let url = window.origin + pathname;\n            const search = searchParams.toString();\n            if (search) {\n                url += \"?\" + search;\n            }\n            posthog.capture(\"$pageview\", {\n                \"$current_url\": url\n            });\n        }\n    }, [\n        pathname,\n        searchParams,\n        posthog\n    ]);\n    return null;\n}\n_s1(PostHogPageView, \"7kj4bB2OgHwjcmUcGuRWsM2O5pE=\", false, function() {\n    return [\n        next_navigation__WEBPACK_IMPORTED_MODULE_4__.usePathname,\n        next_navigation__WEBPACK_IMPORTED_MODULE_4__.useSearchParams,\n        posthog_js_react__WEBPACK_IMPORTED_MODULE_2__.usePostHog\n    ];\n});\n_c1 = PostHogPageView;\nfunction SuspendedPostHogPageView() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react__WEBPACK_IMPORTED_MODULE_3__.Suspense, {\n        fallback: null,\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(PostHogPageView, {}, void 0, false, {\n            fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/PostHogProvider.tsx\",\n            lineNumber: 50,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/alexlarcheveque/Coding/calculator/src/components/PostHogProvider.tsx\",\n        lineNumber: 49,\n        columnNumber: 5\n    }, this);\n}\n_c2 = SuspendedPostHogPageView;\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"PostHogProvider\");\n$RefreshReg$(_c1, \"PostHogPageView\");\n$RefreshReg$(_c2, \"SuspendedPostHogPageView\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL1Bvc3RIb2dQcm92aWRlci50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBRWdDO0FBQzRDO0FBQ2pDO0FBQ21CO0FBRXZELFNBQVNDLGdCQUFnQixLQUEyQztRQUEzQyxFQUFFTyxRQUFRLEVBQWlDLEdBQTNDOztJQUM5QkgsZ0RBQVNBLENBQUM7UUFDUkwsa0RBQU9BLENBQUNTLElBQUksQ0FBQ0MsaURBQW1DLEVBQUc7WUFDakRHLFVBQVU7WUFDVkMsU0FBUztZQUNUQyxrQkFBa0I7WUFDbEJDLG1CQUFtQjtZQUNuQkMsb0JBQW9CO1lBQ3BCQyxPQUFPUixrQkFBeUI7UUFDbEM7SUFDRixHQUFHLEVBQUU7SUFFTCxxQkFDRSw4REFBQ1IsNkRBQVVBO1FBQUNpQixRQUFRbkIsa0RBQU9BOzswQkFDekIsOERBQUNvQjs7Ozs7WUFDQVo7Ozs7Ozs7QUFHUDtHQWxCZ0JQO0tBQUFBO0FBb0JoQixTQUFTb0I7O0lBQ1AsTUFBTUMsV0FBV2hCLDREQUFXQTtJQUM1QixNQUFNaUIsZUFBZWhCLGdFQUFlQTtJQUNwQyxNQUFNUCxVQUFVRyw0REFBVUE7SUFFMUJFLGdEQUFTQSxDQUFDO1FBQ1IsSUFBSWlCLFlBQVl0QixTQUFTO1lBQ3ZCLElBQUl3QixNQUFNQyxPQUFPQyxNQUFNLEdBQUdKO1lBQzFCLE1BQU1LLFNBQVNKLGFBQWFLLFFBQVE7WUFDcEMsSUFBSUQsUUFBUTtnQkFDVkgsT0FBTyxNQUFNRztZQUNmO1lBQ0EzQixRQUFRNkIsT0FBTyxDQUFDLGFBQWE7Z0JBQUUsZ0JBQWdCTDtZQUFJO1FBQ3JEO0lBQ0YsR0FBRztRQUFDRjtRQUFVQztRQUFjdkI7S0FBUTtJQUVwQyxPQUFPO0FBQ1Q7SUFqQlNxQjs7UUFDVWYsd0RBQVdBO1FBQ1BDLDREQUFlQTtRQUNwQkosd0RBQVVBOzs7TUFIbkJrQjtBQW1CVCxTQUFTRDtJQUNQLHFCQUNFLDhEQUFDaEIsMkNBQVFBO1FBQUMwQixVQUFVO2tCQUNsQiw0RUFBQ1Q7Ozs7Ozs7Ozs7QUFHUDtNQU5TRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9Qb3N0SG9nUHJvdmlkZXIudHN4P2Y0MjYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCJcblxuaW1wb3J0IHBvc3Rob2cgZnJvbSBcInBvc3Rob2ctanNcIlxuaW1wb3J0IHsgUG9zdEhvZ1Byb3ZpZGVyIGFzIFBIUHJvdmlkZXIsIHVzZVBvc3RIb2cgfSBmcm9tIFwicG9zdGhvZy1qcy9yZWFjdFwiXG5pbXBvcnQgeyBTdXNwZW5zZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IHVzZVBhdGhuYW1lLCB1c2VTZWFyY2hQYXJhbXMgfSBmcm9tIFwibmV4dC9uYXZpZ2F0aW9uXCJcblxuZXhwb3J0IGZ1bmN0aW9uIFBvc3RIb2dQcm92aWRlcih7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9KSB7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcG9zdGhvZy5pbml0KHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1BPU1RIT0dfS0VZISwge1xuICAgICAgYXBpX2hvc3Q6IFwiL2luZ2VzdFwiLFxuICAgICAgdWlfaG9zdDogXCJodHRwczovL3VzLnBvc3Rob2cuY29tXCIsXG4gICAgICBjYXB0dXJlX3BhZ2V2aWV3OiBmYWxzZSwgLy8gV2UgY2FwdHVyZSBwYWdldmlld3MgbWFudWFsbHlcbiAgICAgIGNhcHR1cmVfcGFnZWxlYXZlOiB0cnVlLCAvLyBFbmFibGUgcGFnZWxlYXZlIGNhcHR1cmVcbiAgICAgIGNhcHR1cmVfZXhjZXB0aW9uczogdHJ1ZSwgLy8gVGhpcyBlbmFibGVzIGNhcHR1cmluZyBleGNlcHRpb25zIHVzaW5nIEVycm9yIFRyYWNraW5nLCBzZXQgdG8gZmFsc2UgaWYgeW91IGRvbid0IHdhbnQgdGhpc1xuICAgICAgZGVidWc6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIsXG4gICAgfSlcbiAgfSwgW10pXG5cbiAgcmV0dXJuIChcbiAgICA8UEhQcm92aWRlciBjbGllbnQ9e3Bvc3Rob2d9PlxuICAgICAgPFN1c3BlbmRlZFBvc3RIb2dQYWdlVmlldyAvPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvUEhQcm92aWRlcj5cbiAgKVxufVxuXG5mdW5jdGlvbiBQb3N0SG9nUGFnZVZpZXcoKSB7XG4gIGNvbnN0IHBhdGhuYW1lID0gdXNlUGF0aG5hbWUoKVxuICBjb25zdCBzZWFyY2hQYXJhbXMgPSB1c2VTZWFyY2hQYXJhbXMoKVxuICBjb25zdCBwb3N0aG9nID0gdXNlUG9zdEhvZygpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocGF0aG5hbWUgJiYgcG9zdGhvZykge1xuICAgICAgbGV0IHVybCA9IHdpbmRvdy5vcmlnaW4gKyBwYXRobmFtZVxuICAgICAgY29uc3Qgc2VhcmNoID0gc2VhcmNoUGFyYW1zLnRvU3RyaW5nKClcbiAgICAgIGlmIChzZWFyY2gpIHtcbiAgICAgICAgdXJsICs9IFwiP1wiICsgc2VhcmNoXG4gICAgICB9XG4gICAgICBwb3N0aG9nLmNhcHR1cmUoXCIkcGFnZXZpZXdcIiwgeyBcIiRjdXJyZW50X3VybFwiOiB1cmwgfSlcbiAgICB9XG4gIH0sIFtwYXRobmFtZSwgc2VhcmNoUGFyYW1zLCBwb3N0aG9nXSlcblxuICByZXR1cm4gbnVsbFxufVxuXG5mdW5jdGlvbiBTdXNwZW5kZWRQb3N0SG9nUGFnZVZpZXcoKSB7XG4gIHJldHVybiAoXG4gICAgPFN1c3BlbnNlIGZhbGxiYWNrPXtudWxsfT5cbiAgICAgIDxQb3N0SG9nUGFnZVZpZXcgLz5cbiAgICA8L1N1c3BlbnNlPlxuICApXG59Il0sIm5hbWVzIjpbInBvc3Rob2ciLCJQb3N0SG9nUHJvdmlkZXIiLCJQSFByb3ZpZGVyIiwidXNlUG9zdEhvZyIsIlN1c3BlbnNlIiwidXNlRWZmZWN0IiwidXNlUGF0aG5hbWUiLCJ1c2VTZWFyY2hQYXJhbXMiLCJjaGlsZHJlbiIsImluaXQiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfUE9TVEhPR19LRVkiLCJhcGlfaG9zdCIsInVpX2hvc3QiLCJjYXB0dXJlX3BhZ2V2aWV3IiwiY2FwdHVyZV9wYWdlbGVhdmUiLCJjYXB0dXJlX2V4Y2VwdGlvbnMiLCJkZWJ1ZyIsImNsaWVudCIsIlN1c3BlbmRlZFBvc3RIb2dQYWdlVmlldyIsIlBvc3RIb2dQYWdlVmlldyIsInBhdGhuYW1lIiwic2VhcmNoUGFyYW1zIiwidXJsIiwid2luZG93Iiwib3JpZ2luIiwic2VhcmNoIiwidG9TdHJpbmciLCJjYXB0dXJlIiwiZmFsbGJhY2siXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/PostHogProvider.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/font/google/target.css?{\"path\":\"src/app/layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"],\"display\":\"swap\",\"variable\":\"--font-inter\"}],\"variableName\":\"inter\"}":
/*!*******************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/font/google/target.css?{"path":"src/app/layout.tsx","import":"Inter","arguments":[{"subsets":["latin"],"display":"swap","variable":"--font-inter"}],"variableName":"inter"} ***!
  \*******************************************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// extracted by mini-css-extract-plugin\nmodule.exports = {\"style\":{\"fontFamily\":\"'__Inter_d65c78', '__Inter_Fallback_d65c78'\",\"fontStyle\":\"normal\"},\"className\":\"__className_d65c78\",\"variable\":\"__variable_d65c78\"};\n    if(true) {\n      // 1748048789642\n      var cssReload = __webpack_require__(/*! ./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\")(module.id, {\"publicPath\":\"/_next/\",\"esModule\":false,\"locals\":true});\n      module.hot.dispose(cssReload);\n      \n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2ZvbnQvZ29vZ2xlL3RhcmdldC5jc3M/e1wicGF0aFwiOlwic3JjL2FwcC9sYXlvdXQudHN4XCIsXCJpbXBvcnRcIjpcIkludGVyXCIsXCJhcmd1bWVudHNcIjpbe1wic3Vic2V0c1wiOltcImxhdGluXCJdLFwiZGlzcGxheVwiOlwic3dhcFwiLFwidmFyaWFibGVcIjpcIi0tZm9udC1pbnRlclwifV0sXCJ2YXJpYWJsZU5hbWVcIjpcImludGVyXCJ9IiwibWFwcGluZ3MiOiJBQUFBO0FBQ0Esa0JBQWtCLFNBQVMsZ0ZBQWdGO0FBQzNHLE9BQU8sSUFBVTtBQUNqQjtBQUNBLHNCQUFzQixtQkFBTyxDQUFDLHdNQUE4SCxjQUFjLHNEQUFzRDtBQUNoTyxNQUFNLFVBQVU7QUFDaEI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2ZvbnQvZ29vZ2xlL3RhcmdldC5jc3M/YTFmZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wic3R5bGVcIjp7XCJmb250RmFtaWx5XCI6XCInX19JbnRlcl9kNjVjNzgnLCAnX19JbnRlcl9GYWxsYmFja19kNjVjNzgnXCIsXCJmb250U3R5bGVcIjpcIm5vcm1hbFwifSxcImNsYXNzTmFtZVwiOlwiX19jbGFzc05hbWVfZDY1Yzc4XCIsXCJ2YXJpYWJsZVwiOlwiX192YXJpYWJsZV9kNjVjNzhcIn07XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTc0ODA0ODc4OTY0MlxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIvVXNlcnMvYWxleGxhcmNoZXZlcXVlL0NvZGluZy9jYWxjdWxhdG9yL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wicHVibGljUGF0aFwiOlwiL19uZXh0L1wiLFwiZXNNb2R1bGVcIjpmYWxzZSxcImxvY2Fsc1wiOnRydWV9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgXG4gICAgfVxuICAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/font/google/target.css?{\"path\":\"src/app/layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"],\"display\":\"swap\",\"variable\":\"--font-inter\"}],\"variableName\":\"inter\"}\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Falexlarcheveque%2FCoding%2Fcalculator%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%22path%22%3A%22src%2Fapp%2Flayout.tsx%22%2C%22import%22%3A%22Inter%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%2C%22display%22%3A%22swap%22%2C%22variable%22%3A%22--font-inter%22%7D%5D%2C%22variableName%22%3A%22inter%22%7D&modules=%2FUsers%2Falexlarcheveque%2FCoding%2Fcalculator%2Fsrc%2Fapp%2Fglobals.css&modules=%2FUsers%2Falexlarcheveque%2FCoding%2Fcalculator%2Fsrc%2Fcomponents%2FNavbar.tsx&modules=%2FUsers%2Falexlarcheveque%2FCoding%2Fcalculator%2Fsrc%2Fcomponents%2FPostHogProvider.tsx&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);