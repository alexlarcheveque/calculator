"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/posthog-js";
exports.ids = ["vendor-chunks/posthog-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/posthog-js/dist/module.js":
/*!************************************************!*\
  !*** ./node_modules/posthog-js/dist/module.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   COPY_AUTOCAPTURE_EVENT: () => (/* binding */ f),\n/* harmony export */   Compression: () => (/* binding */ g),\n/* harmony export */   PostHog: () => (/* binding */ Yo),\n/* harmony export */   SurveyPosition: () => (/* binding */ Zo),\n/* harmony export */   SurveyQuestionBranchingType: () => (/* binding */ ea),\n/* harmony export */   SurveyQuestionType: () => (/* binding */ ia),\n/* harmony export */   SurveySchedule: () => (/* binding */ ra),\n/* harmony export */   SurveyType: () => (/* binding */ ta),\n/* harmony export */   SurveyWidgetType: () => (/* binding */ Qo),\n/* harmony export */   \"default\": () => (/* binding */ sa),\n/* harmony export */   knownUnsafeEditableEvent: () => (/* binding */ p),\n/* harmony export */   posthog: () => (/* binding */ sa),\n/* harmony export */   severityLevels: () => (/* binding */ _)\n/* harmony export */ });\nvar t =  false ? 0 : void 0, i = \"undefined\" != typeof globalThis ? globalThis : t, e = Array.prototype, r = e.forEach, s = e.indexOf, n = null == i ? void 0 : i.navigator, o = null == i ? void 0 : i.document, a = null == i ? void 0 : i.location, l = null == i ? void 0 : i.fetch, u = null != i && i.XMLHttpRequest && \"withCredentials\" in new i.XMLHttpRequest ? i.XMLHttpRequest : void 0, h = null == i ? void 0 : i.AbortController, d = null == n ? void 0 : n.userAgent, v = null != t ? t : {}, c = {\n    DEBUG: !1,\n    LIB_VERSION: \"1.246.0\"\n}, f = \"$copy_autocapture\", p = [\n    \"$snapshot\",\n    \"$pageview\",\n    \"$pageleave\",\n    \"$set\",\n    \"survey dismissed\",\n    \"survey sent\",\n    \"survey shown\",\n    \"$identify\",\n    \"$groupidentify\",\n    \"$create_alias\",\n    \"$$client_ingestion_warning\",\n    \"$web_experiment_applied\",\n    \"$feature_enrollment_update\",\n    \"$feature_flag_called\"\n], g = function(t) {\n    return t.GZipJS = \"gzip-js\", t.Base64 = \"base64\", t;\n}({}), _ = [\n    \"fatal\",\n    \"error\",\n    \"warning\",\n    \"log\",\n    \"info\",\n    \"debug\"\n];\nfunction m(t, i) {\n    return -1 !== t.indexOf(i);\n}\nvar b = function(t) {\n    return t.trim();\n}, w = function(t) {\n    return t.replace(/^\\$/, \"\");\n};\nvar y = Array.isArray, S = Object.prototype, $ = S.hasOwnProperty, k = S.toString, x = y || function(t) {\n    return \"[object Array]\" === k.call(t);\n}, E = (t)=>\"function\" == typeof t, I = (t)=>t === Object(t) && !x(t), P = (t)=>{\n    if (I(t)) {\n        for(var i in t)if ($.call(t, i)) return !1;\n        return !0;\n    }\n    return !1;\n}, R = (t)=>void 0 === t, T = (t)=>\"[object String]\" == k.call(t), M = (t)=>T(t) && 0 === t.trim().length, C = (t)=>null === t, O = (t)=>R(t) || C(t), F = (t)=>\"[object Number]\" == k.call(t), A = (t)=>\"[object Boolean]\" === k.call(t), D = (t)=>t instanceof FormData, L = (t)=>m(p, t), N = (i)=>{\n    var e = {\n        t: function(e) {\n            if (t && (c.DEBUG || v.POSTHOG_DEBUG) && !R(t.console) && t.console) {\n                for(var r = (\"__rrweb_original__\" in t.console[e]) ? t.console[e].__rrweb_original__ : t.console[e], s = arguments.length, n = new Array(s > 1 ? s - 1 : 0), o = 1; o < s; o++)n[o - 1] = arguments[o];\n                r(i, ...n);\n            }\n        },\n        info: function() {\n            for(var t = arguments.length, i = new Array(t), r = 0; r < t; r++)i[r] = arguments[r];\n            e.t(\"log\", ...i);\n        },\n        warn: function() {\n            for(var t = arguments.length, i = new Array(t), r = 0; r < t; r++)i[r] = arguments[r];\n            e.t(\"warn\", ...i);\n        },\n        error: function() {\n            for(var t = arguments.length, i = new Array(t), r = 0; r < t; r++)i[r] = arguments[r];\n            e.t(\"error\", ...i);\n        },\n        critical: function() {\n            for(var t = arguments.length, e = new Array(t), r = 0; r < t; r++)e[r] = arguments[r];\n            console.error(i, ...e);\n        },\n        uninitializedWarning: (t)=>{\n            e.error(\"You must initialize PostHog before calling \" + t);\n        },\n        createLogger: (t)=>N(i + \" \" + t)\n    };\n    return e;\n}, j = N(\"[PostHog.js]\"), z = j.createLogger, U = z(\"[ExternalScriptsLoader]\"), q = (t, i, e)=>{\n    if (t.config.disable_external_dependency_loading) return U.warn(i + \" was requested but loading of external scripts is disabled.\"), e(\"Loading of external scripts is disabled\");\n    var r = null == o ? void 0 : o.querySelectorAll(\"script\");\n    if (r) {\n        for(var s = 0; s < r.length; s++)if (r[s].src === i) return e();\n    }\n    var n = ()=>{\n        if (!o) return e(\"document not found\");\n        var r = o.createElement(\"script\");\n        if (r.type = \"text/javascript\", r.crossOrigin = \"anonymous\", r.src = i, r.onload = (t)=>e(void 0, t), r.onerror = (t)=>e(t), t.config.prepare_external_dependency_script && (r = t.config.prepare_external_dependency_script(r)), !r) return e(\"prepare_external_dependency_script returned null\");\n        var s, n = o.querySelectorAll(\"body > script\");\n        n.length > 0 ? null == (s = n[0].parentNode) || s.insertBefore(r, n[0]) : o.body.appendChild(r);\n    };\n    null != o && o.body ? n() : null == o || o.addEventListener(\"DOMContentLoaded\", n);\n};\nfunction B() {\n    return B = Object.assign ? Object.assign.bind() : function(t) {\n        for(var i = 1; i < arguments.length; i++){\n            var e = arguments[i];\n            for(var r in e)({}).hasOwnProperty.call(e, r) && (t[r] = e[r]);\n        }\n        return t;\n    }, B.apply(null, arguments);\n}\nfunction H(t, i) {\n    if (null == t) return {};\n    var e = {};\n    for(var r in t)if (({}).hasOwnProperty.call(t, r)) {\n        if (-1 !== i.indexOf(r)) continue;\n        e[r] = t[r];\n    }\n    return e;\n}\nv.__PosthogExtensions__ = v.__PosthogExtensions__ || {}, v.__PosthogExtensions__.loadExternalDependency = (t, i, e)=>{\n    var r = \"/static/\" + i + \".js?v=\" + t.version;\n    if (\"remote-config\" === i && (r = \"/array/\" + t.config.token + \"/config.js\"), \"toolbar\" === i) {\n        var s = 3e5;\n        r = r + \"&t=\" + Math.floor(Date.now() / s) * s;\n    }\n    var n = t.requestRouter.endpointFor(\"assets\", r);\n    q(t, n, e);\n}, v.__PosthogExtensions__.loadSiteApp = (t, i, e)=>{\n    var r = t.requestRouter.endpointFor(\"api\", i);\n    q(t, r, e);\n};\nvar W = {};\nfunction G(t, i, e) {\n    if (x(t)) {\n        if (r && t.forEach === r) t.forEach(i, e);\n        else if (\"length\" in t && t.length === +t.length) {\n            for(var s = 0, n = t.length; s < n; s++)if (s in t && i.call(e, t[s], s) === W) return;\n        }\n    }\n}\nfunction J(t, i, e) {\n    if (!O(t)) {\n        if (x(t)) return G(t, i, e);\n        if (D(t)) {\n            for (var r of t.entries())if (i.call(e, r[1], r[0]) === W) return;\n        } else for(var s in t)if ($.call(t, s) && i.call(e, t[s], s) === W) return;\n    }\n}\nvar V = function(t) {\n    for(var i = arguments.length, e = new Array(i > 1 ? i - 1 : 0), r = 1; r < i; r++)e[r - 1] = arguments[r];\n    return G(e, function(i) {\n        for(var e in i)void 0 !== i[e] && (t[e] = i[e]);\n    }), t;\n}, K = function(t) {\n    for(var i = arguments.length, e = new Array(i > 1 ? i - 1 : 0), r = 1; r < i; r++)e[r - 1] = arguments[r];\n    return G(e, function(i) {\n        G(i, function(i) {\n            t.push(i);\n        });\n    }), t;\n};\nfunction Y(t) {\n    for(var i = Object.keys(t), e = i.length, r = new Array(e); e--;)r[e] = [\n        i[e],\n        t[i[e]]\n    ];\n    return r;\n}\nvar X = function(t) {\n    try {\n        return t();\n    } catch (t) {\n        return;\n    }\n}, Q = function(t) {\n    return function() {\n        try {\n            for(var i = arguments.length, e = new Array(i), r = 0; r < i; r++)e[r] = arguments[r];\n            return t.apply(this, e);\n        } catch (t) {\n            j.critical(\"Implementation error. Please turn on debug mode and open a ticket on https://app.posthog.com/home#panel=support%3Asupport%3A.\"), j.critical(t);\n        }\n    };\n}, Z = function(t) {\n    var i = {};\n    return J(t, function(t, e) {\n        (T(t) && t.length > 0 || F(t)) && (i[e] = t);\n    }), i;\n};\nfunction tt(t, i) {\n    return e = t, r = (t)=>T(t) && !C(i) ? t.slice(0, i) : t, s = new Set, function t(i, e) {\n        return i !== Object(i) ? r ? r(i, e) : i : s.has(i) ? void 0 : (s.add(i), x(i) ? (n = [], G(i, (i)=>{\n            n.push(t(i));\n        })) : (n = {}, J(i, (i, e)=>{\n            s.has(i) || (n[e] = t(i, e));\n        })), n);\n        var n;\n    }(e);\n    var e, r, s;\n}\nvar it = [\n    \"herokuapp.com\",\n    \"vercel.app\",\n    \"netlify.app\"\n];\nfunction et(t) {\n    var i = null == t ? void 0 : t.hostname;\n    if (!T(i)) return !1;\n    var e = i.split(\".\").slice(-2).join(\".\");\n    for (var r of it)if (e === r) return !1;\n    return !0;\n}\nfunction rt(t, i) {\n    for(var e = 0; e < t.length; e++)if (i(t[e])) return t[e];\n}\nfunction st(t, i, e, r) {\n    var { capture: s = !1, passive: n = !0 } = null != r ? r : {};\n    null == t || t.addEventListener(i, e, {\n        capture: s,\n        passive: n\n    });\n}\nvar nt = \"$people_distinct_id\", ot = \"__alias\", at = \"__timers\", lt = \"$autocapture_disabled_server_side\", ut = \"$heatmaps_enabled_server_side\", ht = \"$exception_capture_enabled_server_side\", dt = \"$error_tracking_suppression_rules\", vt = \"$web_vitals_enabled_server_side\", ct = \"$dead_clicks_enabled_server_side\", ft = \"$web_vitals_allowed_metrics\", pt = \"$session_recording_enabled_server_side\", gt = \"$console_log_recording_enabled_server_side\", _t = \"$session_recording_network_payload_capture\", mt = \"$session_recording_masking\", bt = \"$session_recording_canvas_recording\", wt = \"$replay_sample_rate\", yt = \"$replay_minimum_duration\", St = \"$replay_script_config\", $t = \"$sesid\", kt = \"$session_is_sampled\", xt = \"$session_recording_url_trigger_activated_session\", Et = \"$session_recording_event_trigger_activated_session\", It = \"$enabled_feature_flags\", Pt = \"$early_access_features\", Rt = \"$feature_flag_details\", Tt = \"$stored_person_properties\", Mt = \"$stored_group_properties\", Ct = \"$surveys\", Ot = \"$surveys_activated\", Ft = \"$flag_call_reported\", At = \"$user_state\", Dt = \"$client_session_props\", Lt = \"$capture_rate_limit\", Nt = \"$initial_campaign_params\", jt = \"$initial_referrer_info\", zt = \"$initial_person_info\", Ut = \"$epp\", qt = \"__POSTHOG_TOOLBAR__\", Bt = \"$posthog_cookieless\", Ht = [\n    nt,\n    ot,\n    \"__cmpns\",\n    at,\n    pt,\n    ut,\n    $t,\n    It,\n    dt,\n    At,\n    Pt,\n    Rt,\n    Mt,\n    Tt,\n    Ct,\n    Ft,\n    Dt,\n    Lt,\n    Nt,\n    jt,\n    Ut,\n    zt\n];\nfunction Wt(t) {\n    return t instanceof Element && (t.id === qt || !(null == t.closest || !t.closest(\".toolbar-global-fade-container\")));\n}\nfunction Gt(t) {\n    return !!t && 1 === t.nodeType;\n}\nfunction Jt(t, i) {\n    return !!t && !!t.tagName && t.tagName.toLowerCase() === i.toLowerCase();\n}\nfunction Vt(t) {\n    return !!t && 3 === t.nodeType;\n}\nfunction Kt(t) {\n    return !!t && 11 === t.nodeType;\n}\nfunction Yt(t) {\n    return t ? b(t).split(/\\s+/) : [];\n}\nfunction Xt(i) {\n    var e = null == t ? void 0 : t.location.href;\n    return !!(e && i && i.some((t)=>e.match(t)));\n}\nfunction Qt(t) {\n    var i = \"\";\n    switch(typeof t.className){\n        case \"string\":\n            i = t.className;\n            break;\n        case \"object\":\n            i = (t.className && \"baseVal\" in t.className ? t.className.baseVal : null) || t.getAttribute(\"class\") || \"\";\n            break;\n        default:\n            i = \"\";\n    }\n    return Yt(i);\n}\nfunction Zt(t) {\n    return O(t) ? null : b(t).split(/(\\s+)/).filter((t)=>ci(t)).join(\"\").replace(/[\\r\\n]/g, \" \").replace(/[ ]+/g, \" \").substring(0, 255);\n}\nfunction ti(t) {\n    var i = \"\";\n    return ni(t) && !oi(t) && t.childNodes && t.childNodes.length && J(t.childNodes, function(t) {\n        var e;\n        Vt(t) && t.textContent && (i += null !== (e = Zt(t.textContent)) && void 0 !== e ? e : \"\");\n    }), b(i);\n}\nfunction ii(t) {\n    return R(t.target) ? t.srcElement || null : null != (i = t.target) && i.shadowRoot ? t.composedPath()[0] || null : t.target || null;\n    var i;\n}\nvar ei = [\n    \"a\",\n    \"button\",\n    \"form\",\n    \"input\",\n    \"select\",\n    \"textarea\",\n    \"label\"\n];\nfunction ri(t) {\n    var i = t.parentNode;\n    return !(!i || !Gt(i)) && i;\n}\nfunction si(i, e, r, s, n) {\n    var o, a, l;\n    if (void 0 === r && (r = void 0), !t || !i || Jt(i, \"html\") || !Gt(i)) return !1;\n    if (null != (o = r) && o.url_allowlist && !Xt(r.url_allowlist)) return !1;\n    if (null != (a = r) && a.url_ignorelist && Xt(r.url_ignorelist)) return !1;\n    if (null != (l = r) && l.dom_event_allowlist) {\n        var u = r.dom_event_allowlist;\n        if (u && !u.some((t)=>e.type === t)) return !1;\n    }\n    for(var h = !1, d = [\n        i\n    ], v = !0, c = i; c.parentNode && !Jt(c, \"body\");)if (Kt(c.parentNode)) d.push(c.parentNode.host), c = c.parentNode.host;\n    else {\n        if (!(v = ri(c))) break;\n        if (s || ei.indexOf(v.tagName.toLowerCase()) > -1) h = !0;\n        else {\n            var f = t.getComputedStyle(v);\n            f && \"pointer\" === f.getPropertyValue(\"cursor\") && (h = !0);\n        }\n        d.push(v), c = v;\n    }\n    if (!function(t, i) {\n        var e = null == i ? void 0 : i.element_allowlist;\n        if (R(e)) return !0;\n        var r, s = function(t) {\n            if (e.some((i)=>t.tagName.toLowerCase() === i)) return {\n                v: !0\n            };\n        };\n        for (var n of t)if (r = s(n)) return r.v;\n        return !1;\n    }(d, r)) return !1;\n    if (!function(t, i) {\n        var e = null == i ? void 0 : i.css_selector_allowlist;\n        if (R(e)) return !0;\n        var r, s = function(t) {\n            if (e.some((i)=>t.matches(i))) return {\n                v: !0\n            };\n        };\n        for (var n of t)if (r = s(n)) return r.v;\n        return !1;\n    }(d, r)) return !1;\n    var p = t.getComputedStyle(i);\n    if (p && \"pointer\" === p.getPropertyValue(\"cursor\") && \"click\" === e.type) return !0;\n    var g = i.tagName.toLowerCase();\n    switch(g){\n        case \"html\":\n            return !1;\n        case \"form\":\n            return (n || [\n                \"submit\"\n            ]).indexOf(e.type) >= 0;\n        case \"input\":\n        case \"select\":\n        case \"textarea\":\n            return (n || [\n                \"change\",\n                \"click\"\n            ]).indexOf(e.type) >= 0;\n        default:\n            return h ? (n || [\n                \"click\"\n            ]).indexOf(e.type) >= 0 : (n || [\n                \"click\"\n            ]).indexOf(e.type) >= 0 && (ei.indexOf(g) > -1 || \"true\" === i.getAttribute(\"contenteditable\"));\n    }\n}\nfunction ni(t) {\n    for(var i = t; i.parentNode && !Jt(i, \"body\"); i = i.parentNode){\n        var e = Qt(i);\n        if (m(e, \"ph-sensitive\") || m(e, \"ph-no-capture\")) return !1;\n    }\n    if (m(Qt(t), \"ph-include\")) return !0;\n    var r = t.type || \"\";\n    if (T(r)) switch(r.toLowerCase()){\n        case \"hidden\":\n        case \"password\":\n            return !1;\n    }\n    var s = t.name || t.id || \"\";\n    if (T(s)) {\n        if (/^cc|cardnum|ccnum|creditcard|csc|cvc|cvv|exp|pass|pwd|routing|seccode|securitycode|securitynum|socialsec|socsec|ssn/i.test(s.replace(/[^a-zA-Z0-9]/g, \"\"))) return !1;\n    }\n    return !0;\n}\nfunction oi(t) {\n    return !!(Jt(t, \"input\") && ![\n        \"button\",\n        \"checkbox\",\n        \"submit\",\n        \"reset\"\n    ].includes(t.type) || Jt(t, \"select\") || Jt(t, \"textarea\") || \"true\" === t.getAttribute(\"contenteditable\"));\n}\nvar ai = \"(4[0-9]{12}(?:[0-9]{3})?)|(5[1-5][0-9]{14})|(6(?:011|5[0-9]{2})[0-9]{12})|(3[47][0-9]{13})|(3(?:0[0-5]|[68][0-9])[0-9]{11})|((?:2131|1800|35[0-9]{3})[0-9]{11})\", li = new RegExp(\"^(?:\" + ai + \")$\"), ui = new RegExp(ai), hi = \"\\\\d{3}-?\\\\d{2}-?\\\\d{4}\", di = new RegExp(\"^(\" + hi + \")$\"), vi = new RegExp(\"(\" + hi + \")\");\nfunction ci(t, i) {\n    if (void 0 === i && (i = !0), O(t)) return !1;\n    if (T(t)) {\n        if (t = b(t), (i ? li : ui).test((t || \"\").replace(/[- ]/g, \"\"))) return !1;\n        if ((i ? di : vi).test(t)) return !1;\n    }\n    return !0;\n}\nfunction fi(t) {\n    var i = ti(t);\n    return ci(i = (i + \" \" + pi(t)).trim()) ? i : \"\";\n}\nfunction pi(t) {\n    var i = \"\";\n    return t && t.childNodes && t.childNodes.length && J(t.childNodes, function(t) {\n        var e;\n        if (t && \"span\" === (null == (e = t.tagName) ? void 0 : e.toLowerCase())) try {\n            var r = ti(t);\n            i = (i + \" \" + r).trim(), t.childNodes && t.childNodes.length && (i = (i + \" \" + pi(t)).trim());\n        } catch (t) {\n            j.error(\"[AutoCapture]\", t);\n        }\n    }), i;\n}\nfunction gi(t) {\n    return function(t) {\n        var i = t.map((t)=>{\n            var i, e, r = \"\";\n            if (t.tag_name && (r += t.tag_name), t.attr_class) for (var s of (t.attr_class.sort(), t.attr_class))r += \".\" + s.replace(/\"/g, \"\");\n            var n = B({}, t.text ? {\n                text: t.text\n            } : {}, {\n                \"nth-child\": null !== (i = t.nth_child) && void 0 !== i ? i : 0,\n                \"nth-of-type\": null !== (e = t.nth_of_type) && void 0 !== e ? e : 0\n            }, t.href ? {\n                href: t.href\n            } : {}, t.attr_id ? {\n                attr_id: t.attr_id\n            } : {}, t.attributes), o = {};\n            return Y(n).sort((t, i)=>{\n                var [e] = t, [r] = i;\n                return e.localeCompare(r);\n            }).forEach((t)=>{\n                var [i, e] = t;\n                return o[_i(i.toString())] = _i(e.toString());\n            }), r += \":\", r += Y(o).map((t)=>{\n                var [i, e] = t;\n                return i + '=\"' + e + '\"';\n            }).join(\"\");\n        });\n        return i.join(\";\");\n    }(function(t) {\n        return t.map((t)=>{\n            var i, e, r = {\n                text: null == (i = t.$el_text) ? void 0 : i.slice(0, 400),\n                tag_name: t.tag_name,\n                href: null == (e = t.attr__href) ? void 0 : e.slice(0, 2048),\n                attr_class: mi(t),\n                attr_id: t.attr__id,\n                nth_child: t.nth_child,\n                nth_of_type: t.nth_of_type,\n                attributes: {}\n            };\n            return Y(t).filter((t)=>{\n                var [i] = t;\n                return 0 === i.indexOf(\"attr__\");\n            }).forEach((t)=>{\n                var [i, e] = t;\n                return r.attributes[i] = e;\n            }), r;\n        });\n    }(t));\n}\nfunction _i(t) {\n    return t.replace(/\"|\\\\\"/g, '\\\\\"');\n}\nfunction mi(t) {\n    var i = t.attr__class;\n    return i ? x(i) ? i : Yt(i) : void 0;\n}\nclass bi {\n    constructor(){\n        this.clicks = [];\n    }\n    isRageClick(t, i, e) {\n        var r = this.clicks[this.clicks.length - 1];\n        if (r && Math.abs(t - r.x) + Math.abs(i - r.y) < 30 && e - r.timestamp < 1e3) {\n            if (this.clicks.push({\n                x: t,\n                y: i,\n                timestamp: e\n            }), 3 === this.clicks.length) return !0;\n        } else this.clicks = [\n            {\n                x: t,\n                y: i,\n                timestamp: e\n            }\n        ];\n        return !1;\n    }\n}\nvar wi = [\n    \"localhost\",\n    \"127.0.0.1\"\n], yi = (t)=>{\n    var i = null == o ? void 0 : o.createElement(\"a\");\n    return R(i) ? null : (i.href = t, i);\n}, Si = function(t, i) {\n    var e, r;\n    void 0 === i && (i = \"&\");\n    var s = [];\n    return J(t, function(t, i) {\n        R(t) || R(i) || \"undefined\" === i || (e = encodeURIComponent(((t)=>t instanceof File)(t) ? t.name : t.toString()), r = encodeURIComponent(i), s[s.length] = r + \"=\" + e);\n    }), s.join(i);\n}, $i = function(t, i) {\n    for(var e, r = ((t.split(\"#\")[0] || \"\").split(/\\?(.*)/)[1] || \"\").replace(/^\\?+/g, \"\").split(\"&\"), s = 0; s < r.length; s++){\n        var n = r[s].split(\"=\");\n        if (n[0] === i) {\n            e = n;\n            break;\n        }\n    }\n    if (!x(e) || e.length < 2) return \"\";\n    var o = e[1];\n    try {\n        o = decodeURIComponent(o);\n    } catch (t) {\n        j.error(\"Skipping decoding for malformed query param: \" + o);\n    }\n    return o.replace(/\\+/g, \" \");\n}, ki = function(t, i, e) {\n    if (!t || !i || !i.length) return t;\n    for(var r = t.split(\"#\"), s = r[0] || \"\", n = r[1], o = s.split(\"?\"), a = o[1], l = o[0], u = (a || \"\").split(\"&\"), h = [], d = 0; d < u.length; d++){\n        var v = u[d].split(\"=\");\n        x(v) && (i.includes(v[0]) ? h.push(v[0] + \"=\" + e) : h.push(u[d]));\n    }\n    var c = l;\n    return null != a && (c += \"?\" + h.join(\"&\")), null != n && (c += \"#\" + n), c;\n}, xi = function(t, i) {\n    var e = t.match(new RegExp(i + \"=([^&]*)\"));\n    return e ? e[1] : null;\n}, Ei = z(\"[AutoCapture]\");\nfunction Ii(t, i) {\n    return i.length > t ? i.slice(0, t) + \"...\" : i;\n}\nfunction Pi(t) {\n    if (t.previousElementSibling) return t.previousElementSibling;\n    var i = t;\n    do {\n        i = i.previousSibling;\n    }while (i && !Gt(i));\n    return i;\n}\nfunction Ri(t, i, e, r) {\n    var s = t.tagName.toLowerCase(), n = {\n        tag_name: s\n    };\n    ei.indexOf(s) > -1 && !e && (\"a\" === s.toLowerCase() || \"button\" === s.toLowerCase() ? n.$el_text = Ii(1024, fi(t)) : n.$el_text = Ii(1024, ti(t)));\n    var o = Qt(t);\n    o.length > 0 && (n.classes = o.filter(function(t) {\n        return \"\" !== t;\n    })), J(t.attributes, function(e) {\n        var s;\n        if ((!oi(t) || -1 !== [\n            \"name\",\n            \"id\",\n            \"class\",\n            \"aria-label\"\n        ].indexOf(e.name)) && (null == r || !r.includes(e.name)) && !i && ci(e.value) && (s = e.name, !T(s) || \"_ngcontent\" !== s.substring(0, 10) && \"_nghost\" !== s.substring(0, 7))) {\n            var o = e.value;\n            \"class\" === e.name && (o = Yt(o).join(\" \")), n[\"attr__\" + e.name] = Ii(1024, o);\n        }\n    });\n    for(var a = 1, l = 1, u = t; u = Pi(u);)a++, u.tagName === t.tagName && l++;\n    return n.nth_child = a, n.nth_of_type = l, n;\n}\nfunction Ti(i, e) {\n    for(var r, s, { e: n, maskAllElementAttributes: o, maskAllText: a, elementAttributeIgnoreList: l, elementsChainAsString: u } = e, h = [\n        i\n    ], d = i; d.parentNode && !Jt(d, \"body\");)Kt(d.parentNode) ? (h.push(d.parentNode.host), d = d.parentNode.host) : (h.push(d.parentNode), d = d.parentNode);\n    var v, c = [], f = {}, p = !1, g = !1;\n    if (J(h, (t)=>{\n        var i = ni(t);\n        \"a\" === t.tagName.toLowerCase() && (p = t.getAttribute(\"href\"), p = i && p && ci(p) && p), m(Qt(t), \"ph-no-capture\") && (g = !0), c.push(Ri(t, o, a, l));\n        var e = function(t) {\n            if (!ni(t)) return {};\n            var i = {};\n            return J(t.attributes, function(t) {\n                if (t.name && 0 === t.name.indexOf(\"data-ph-capture-attribute\")) {\n                    var e = t.name.replace(\"data-ph-capture-attribute-\", \"\"), r = t.value;\n                    e && r && ci(r) && (i[e] = r);\n                }\n            }), i;\n        }(t);\n        V(f, e);\n    }), g) return {\n        props: {},\n        explicitNoCapture: g\n    };\n    if (a || (\"a\" === i.tagName.toLowerCase() || \"button\" === i.tagName.toLowerCase() ? c[0].$el_text = fi(i) : c[0].$el_text = ti(i)), p) {\n        var _, b;\n        c[0].attr__href = p;\n        var w = null == (_ = yi(p)) ? void 0 : _.host, y = null == t || null == (b = t.location) ? void 0 : b.host;\n        w && y && w !== y && (v = p);\n    }\n    return {\n        props: V({\n            $event_type: n.type,\n            $ce_version: 1\n        }, u ? {} : {\n            $elements: c\n        }, {\n            $elements_chain: gi(c)\n        }, null != (r = c[0]) && r.$el_text ? {\n            $el_text: null == (s = c[0]) ? void 0 : s.$el_text\n        } : {}, v && \"click\" === n.type ? {\n            $external_click_url: v\n        } : {}, f)\n    };\n}\nclass Mi {\n    constructor(t){\n        this.i = !1, this.o = null, this.rageclicks = new bi, this.h = !1, this.instance = t, this.m = null;\n    }\n    get S() {\n        var t, i, e = I(this.instance.config.autocapture) ? this.instance.config.autocapture : {};\n        return e.url_allowlist = null == (t = e.url_allowlist) ? void 0 : t.map((t)=>new RegExp(t)), e.url_ignorelist = null == (i = e.url_ignorelist) ? void 0 : i.map((t)=>new RegExp(t)), e;\n    }\n    $() {\n        if (this.isBrowserSupported()) {\n            if (t && o) {\n                var i = (i)=>{\n                    i = i || (null == t ? void 0 : t.event);\n                    try {\n                        this.k(i);\n                    } catch (t) {\n                        Ei.error(\"Failed to capture event\", t);\n                    }\n                };\n                if (st(o, \"submit\", i, {\n                    capture: !0\n                }), st(o, \"change\", i, {\n                    capture: !0\n                }), st(o, \"click\", i, {\n                    capture: !0\n                }), this.S.capture_copied_text) {\n                    var e = (i)=>{\n                        i = i || (null == t ? void 0 : t.event), this.k(i, f);\n                    };\n                    st(o, \"copy\", e, {\n                        capture: !0\n                    }), st(o, \"cut\", e, {\n                        capture: !0\n                    });\n                }\n            }\n        } else Ei.info(\"Disabling Automatic Event Collection because this browser is not supported\");\n    }\n    startIfEnabled() {\n        this.isEnabled && !this.i && (this.$(), this.i = !0);\n    }\n    onRemoteConfig(t) {\n        t.elementsChainAsString && (this.h = t.elementsChainAsString), this.instance.persistence && this.instance.persistence.register({\n            [lt]: !!t.autocapture_opt_out\n        }), this.o = !!t.autocapture_opt_out, this.startIfEnabled();\n    }\n    setElementSelectors(t) {\n        this.m = t;\n    }\n    getElementSelectors(t) {\n        var i, e = [];\n        return null == (i = this.m) || i.forEach((i)=>{\n            var r = null == o ? void 0 : o.querySelectorAll(i);\n            null == r || r.forEach((r)=>{\n                t === r && e.push(i);\n            });\n        }), e;\n    }\n    get isEnabled() {\n        var t, i, e = null == (t = this.instance.persistence) ? void 0 : t.props[lt], r = this.o;\n        if (C(r) && !A(e) && !this.instance.config.advanced_disable_decide) return !1;\n        var s = null !== (i = this.o) && void 0 !== i ? i : !!e;\n        return !!this.instance.config.autocapture && !s;\n    }\n    k(i, e) {\n        if (void 0 === e && (e = \"$autocapture\"), this.isEnabled) {\n            var r, s = ii(i);\n            if (Vt(s) && (s = s.parentNode || null), \"$autocapture\" === e && \"click\" === i.type && i instanceof MouseEvent) this.instance.config.rageclick && null != (r = this.rageclicks) && r.isRageClick(i.clientX, i.clientY, (new Date).getTime()) && this.k(i, \"$rageclick\");\n            var n = e === f;\n            if (s && si(s, i, this.S, n, n ? [\n                \"copy\",\n                \"cut\"\n            ] : void 0)) {\n                var { props: o, explicitNoCapture: a } = Ti(s, {\n                    e: i,\n                    maskAllElementAttributes: this.instance.config.mask_all_element_attributes,\n                    maskAllText: this.instance.config.mask_all_text,\n                    elementAttributeIgnoreList: this.S.element_attribute_ignorelist,\n                    elementsChainAsString: this.h\n                });\n                if (a) return !1;\n                var l = this.getElementSelectors(s);\n                if (l && l.length > 0 && (o.$element_selectors = l), e === f) {\n                    var u, h = Zt(null == t || null == (u = t.getSelection()) ? void 0 : u.toString()), d = i.type || \"clipboard\";\n                    if (!h) return !1;\n                    o.$selected_content = h, o.$copy_type = d;\n                }\n                return this.instance.capture(e, o), !0;\n            }\n        }\n    }\n    isBrowserSupported() {\n        return E(null == o ? void 0 : o.querySelectorAll);\n    }\n}\nMath.trunc || (Math.trunc = function(t) {\n    return t < 0 ? Math.ceil(t) : Math.floor(t);\n}), Number.isInteger || (Number.isInteger = function(t) {\n    return F(t) && isFinite(t) && Math.floor(t) === t;\n});\nvar Ci = \"0123456789abcdef\";\nclass Oi {\n    constructor(t){\n        if (this.bytes = t, 16 !== t.length) throw new TypeError(\"not 128-bit length\");\n    }\n    static fromFieldsV7(t, i, e, r) {\n        if (!Number.isInteger(t) || !Number.isInteger(i) || !Number.isInteger(e) || !Number.isInteger(r) || t < 0 || i < 0 || e < 0 || r < 0 || t > 0xffffffffffff || i > 4095 || e > 1073741823 || r > 4294967295) throw new RangeError(\"invalid field value\");\n        var s = new Uint8Array(16);\n        return s[0] = t / Math.pow(2, 40), s[1] = t / Math.pow(2, 32), s[2] = t / Math.pow(2, 24), s[3] = t / Math.pow(2, 16), s[4] = t / Math.pow(2, 8), s[5] = t, s[6] = 112 | i >>> 8, s[7] = i, s[8] = 128 | e >>> 24, s[9] = e >>> 16, s[10] = e >>> 8, s[11] = e, s[12] = r >>> 24, s[13] = r >>> 16, s[14] = r >>> 8, s[15] = r, new Oi(s);\n    }\n    toString() {\n        for(var t = \"\", i = 0; i < this.bytes.length; i++)t = t + Ci.charAt(this.bytes[i] >>> 4) + Ci.charAt(15 & this.bytes[i]), 3 !== i && 5 !== i && 7 !== i && 9 !== i || (t += \"-\");\n        if (36 !== t.length) throw new Error(\"Invalid UUIDv7 was generated\");\n        return t;\n    }\n    clone() {\n        return new Oi(this.bytes.slice(0));\n    }\n    equals(t) {\n        return 0 === this.compareTo(t);\n    }\n    compareTo(t) {\n        for(var i = 0; i < 16; i++){\n            var e = this.bytes[i] - t.bytes[i];\n            if (0 !== e) return Math.sign(e);\n        }\n        return 0;\n    }\n}\nclass Fi {\n    constructor(){\n        this.I = 0, this.P = 0, this.R = new Li;\n    }\n    generate() {\n        var t = this.generateOrAbort();\n        if (R(t)) {\n            this.I = 0;\n            var i = this.generateOrAbort();\n            if (R(i)) throw new Error(\"Could not generate UUID after timestamp reset\");\n            return i;\n        }\n        return t;\n    }\n    generateOrAbort() {\n        var t = Date.now();\n        if (t > this.I) this.I = t, this.T();\n        else {\n            if (!(t + 1e4 > this.I)) return;\n            this.P++, this.P > 4398046511103 && (this.I++, this.T());\n        }\n        return Oi.fromFieldsV7(this.I, Math.trunc(this.P / Math.pow(2, 30)), this.P & Math.pow(2, 30) - 1, this.R.nextUint32());\n    }\n    T() {\n        this.P = 1024 * this.R.nextUint32() + (1023 & this.R.nextUint32());\n    }\n}\nvar Ai, Di = (t)=>{\n    if (\"undefined\" != typeof UUIDV7_DENY_WEAK_RNG && UUIDV7_DENY_WEAK_RNG) throw new Error(\"no cryptographically strong RNG available\");\n    for(var i = 0; i < t.length; i++)t[i] = 65536 * Math.trunc(65536 * Math.random()) + Math.trunc(65536 * Math.random());\n    return t;\n};\nt && !R(t.crypto) && crypto.getRandomValues && (Di = (t)=>crypto.getRandomValues(t));\nclass Li {\n    constructor(){\n        this.M = new Uint32Array(8), this.C = 1 / 0;\n    }\n    nextUint32() {\n        return this.C >= this.M.length && (Di(this.M), this.C = 0), this.M[this.C++];\n    }\n}\nvar Ni = ()=>ji().toString(), ji = ()=>(Ai || (Ai = new Fi)).generate(), zi = \"\";\nvar Ui = /[a-z0-9][a-z0-9-]+\\.[a-z]{2,}$/i;\nfunction qi(t, i) {\n    if (i) {\n        var e = function(t, i) {\n            if (void 0 === i && (i = o), zi) return zi;\n            if (!i) return \"\";\n            if ([\n                \"localhost\",\n                \"127.0.0.1\"\n            ].includes(t)) return \"\";\n            for(var e = t.split(\".\"), r = Math.min(e.length, 8), s = \"dmn_chk_\" + Ni(); !zi && r--;){\n                var n = e.slice(r).join(\".\"), a = s + \"=1;domain=.\" + n + \";path=/\";\n                i.cookie = a + \";max-age=3\", i.cookie.includes(s) && (i.cookie = a + \";max-age=0\", zi = n);\n            }\n            return zi;\n        }(t);\n        if (!e) {\n            var r = ((t)=>{\n                var i = t.match(Ui);\n                return i ? i[0] : \"\";\n            })(t);\n            r !== e && j.info(\"Warning: cookie subdomain discovery mismatch\", r, e), e = r;\n        }\n        return e ? \"; domain=.\" + e : \"\";\n    }\n    return \"\";\n}\nvar Bi = {\n    O: ()=>!!o,\n    F: function(t) {\n        j.error(\"cookieStore error: \" + t);\n    },\n    A: function(t) {\n        if (o) {\n            try {\n                for(var i = t + \"=\", e = o.cookie.split(\";\").filter((t)=>t.length), r = 0; r < e.length; r++){\n                    for(var s = e[r]; \" \" == s.charAt(0);)s = s.substring(1, s.length);\n                    if (0 === s.indexOf(i)) return decodeURIComponent(s.substring(i.length, s.length));\n                }\n            } catch (t) {}\n            return null;\n        }\n    },\n    D: function(t) {\n        var i;\n        try {\n            i = JSON.parse(Bi.A(t)) || {};\n        } catch (t) {}\n        return i;\n    },\n    L: function(t, i, e, r, s) {\n        if (o) try {\n            var n = \"\", a = \"\", l = qi(o.location.hostname, r);\n            if (e) {\n                var u = new Date;\n                u.setTime(u.getTime() + 24 * e * 60 * 60 * 1e3), n = \"; expires=\" + u.toUTCString();\n            }\n            s && (a = \"; secure\");\n            var h = t + \"=\" + encodeURIComponent(JSON.stringify(i)) + n + \"; SameSite=Lax; path=/\" + l + a;\n            return h.length > 3686.4 && j.warn(\"cookieStore warning: large cookie, len=\" + h.length), o.cookie = h, h;\n        } catch (t) {\n            return;\n        }\n    },\n    N: function(t, i) {\n        try {\n            Bi.L(t, \"\", -1, i);\n        } catch (t) {\n            return;\n        }\n    }\n}, Hi = null, Wi = {\n    O: function() {\n        if (!C(Hi)) return Hi;\n        var i = !0;\n        if (R(t)) i = !1;\n        else try {\n            var e = \"__mplssupport__\";\n            Wi.L(e, \"xyz\"), '\"xyz\"' !== Wi.A(e) && (i = !1), Wi.N(e);\n        } catch (t) {\n            i = !1;\n        }\n        return i || j.error(\"localStorage unsupported; falling back to cookie store\"), Hi = i, i;\n    },\n    F: function(t) {\n        j.error(\"localStorage error: \" + t);\n    },\n    A: function(i) {\n        try {\n            return null == t ? void 0 : t.localStorage.getItem(i);\n        } catch (t) {\n            Wi.F(t);\n        }\n        return null;\n    },\n    D: function(t) {\n        try {\n            return JSON.parse(Wi.A(t)) || {};\n        } catch (t) {}\n        return null;\n    },\n    L: function(i, e) {\n        try {\n            null == t || t.localStorage.setItem(i, JSON.stringify(e));\n        } catch (t) {\n            Wi.F(t);\n        }\n    },\n    N: function(i) {\n        try {\n            null == t || t.localStorage.removeItem(i);\n        } catch (t) {\n            Wi.F(t);\n        }\n    }\n}, Gi = [\n    \"distinct_id\",\n    $t,\n    kt,\n    Ut,\n    zt\n], Ji = B({}, Wi, {\n    D: function(t) {\n        try {\n            var i = {};\n            try {\n                i = Bi.D(t) || {};\n            } catch (t) {}\n            var e = V(i, JSON.parse(Wi.A(t) || \"{}\"));\n            return Wi.L(t, e), e;\n        } catch (t) {}\n        return null;\n    },\n    L: function(t, i, e, r, s, n) {\n        try {\n            Wi.L(t, i, void 0, void 0, n);\n            var o = {};\n            Gi.forEach((t)=>{\n                i[t] && (o[t] = i[t]);\n            }), Object.keys(o).length && Bi.L(t, o, e, r, s, n);\n        } catch (t) {\n            Wi.F(t);\n        }\n    },\n    N: function(i, e) {\n        try {\n            null == t || t.localStorage.removeItem(i), Bi.N(i, e);\n        } catch (t) {\n            Wi.F(t);\n        }\n    }\n}), Vi = {}, Ki = {\n    O: function() {\n        return !0;\n    },\n    F: function(t) {\n        j.error(\"memoryStorage error: \" + t);\n    },\n    A: function(t) {\n        return Vi[t] || null;\n    },\n    D: function(t) {\n        return Vi[t] || null;\n    },\n    L: function(t, i) {\n        Vi[t] = i;\n    },\n    N: function(t) {\n        delete Vi[t];\n    }\n}, Yi = null, Xi = {\n    O: function() {\n        if (!C(Yi)) return Yi;\n        if (Yi = !0, R(t)) Yi = !1;\n        else try {\n            var i = \"__support__\";\n            Xi.L(i, \"xyz\"), '\"xyz\"' !== Xi.A(i) && (Yi = !1), Xi.N(i);\n        } catch (t) {\n            Yi = !1;\n        }\n        return Yi;\n    },\n    F: function(t) {\n        j.error(\"sessionStorage error: \", t);\n    },\n    A: function(i) {\n        try {\n            return null == t ? void 0 : t.sessionStorage.getItem(i);\n        } catch (t) {\n            Xi.F(t);\n        }\n        return null;\n    },\n    D: function(t) {\n        try {\n            return JSON.parse(Xi.A(t)) || null;\n        } catch (t) {}\n        return null;\n    },\n    L: function(i, e) {\n        try {\n            null == t || t.sessionStorage.setItem(i, JSON.stringify(e));\n        } catch (t) {\n            Xi.F(t);\n        }\n    },\n    N: function(i) {\n        try {\n            null == t || t.sessionStorage.removeItem(i);\n        } catch (t) {\n            Xi.F(t);\n        }\n    }\n}, Qi = function(t) {\n    return t[t.PENDING = -1] = \"PENDING\", t[t.DENIED = 0] = \"DENIED\", t[t.GRANTED = 1] = \"GRANTED\", t;\n}({});\nclass Zi {\n    constructor(t){\n        this._instance = t;\n    }\n    get S() {\n        return this._instance.config;\n    }\n    get consent() {\n        return this.j() ? Qi.DENIED : this.U;\n    }\n    isOptedOut() {\n        return this.consent === Qi.DENIED || this.consent === Qi.PENDING && this.S.opt_out_capturing_by_default;\n    }\n    isOptedIn() {\n        return !this.isOptedOut();\n    }\n    optInOut(t) {\n        this.q.L(this.B, t ? 1 : 0, this.S.cookie_expiration, this.S.cross_subdomain_cookie, this.S.secure_cookie);\n    }\n    reset() {\n        this.q.N(this.B, this.S.cross_subdomain_cookie);\n    }\n    get B() {\n        var { token: t, opt_out_capturing_cookie_prefix: i } = this._instance.config;\n        return (i || \"__ph_opt_in_out_\") + t;\n    }\n    get U() {\n        var t = this.q.A(this.B);\n        return \"1\" === t ? Qi.GRANTED : \"0\" === t ? Qi.DENIED : Qi.PENDING;\n    }\n    get q() {\n        if (!this.H) {\n            var t = this.S.opt_out_capturing_persistence_type;\n            this.H = \"localStorage\" === t ? Wi : Bi;\n            var i = \"localStorage\" === t ? Bi : Wi;\n            i.A(this.B) && (this.H.A(this.B) || this.optInOut(\"1\" === i.A(this.B)), i.N(this.B, this.S.cross_subdomain_cookie));\n        }\n        return this.H;\n    }\n    j() {\n        return !!this.S.respect_dnt && !!rt([\n            null == n ? void 0 : n.doNotTrack,\n            null == n ? void 0 : n.msDoNotTrack,\n            v.doNotTrack\n        ], (t)=>m([\n                !0,\n                1,\n                \"1\",\n                \"yes\"\n            ], t));\n    }\n}\nvar te = z(\"[Dead Clicks]\"), ie = ()=>!0, ee = (t)=>{\n    var i, e = !(null == (i = t.instance.persistence) || !i.get_property(ct)), r = t.instance.config.capture_dead_clicks;\n    return A(r) ? r : e;\n};\nclass re {\n    get lazyLoadedDeadClicksAutocapture() {\n        return this.W;\n    }\n    constructor(t, i, e){\n        this.instance = t, this.isEnabled = i, this.onCapture = e, this.startIfEnabled();\n    }\n    onRemoteConfig(t) {\n        this.instance.persistence && this.instance.persistence.register({\n            [ct]: null == t ? void 0 : t.captureDeadClicks\n        }), this.startIfEnabled();\n    }\n    startIfEnabled() {\n        this.isEnabled(this) && this.G(()=>{\n            this.J();\n        });\n    }\n    G(t) {\n        var i, e;\n        null != (i = v.__PosthogExtensions__) && i.initDeadClicksAutocapture && t(), null == (e = v.__PosthogExtensions__) || null == e.loadExternalDependency || e.loadExternalDependency(this.instance, \"dead-clicks-autocapture\", (i)=>{\n            i ? te.error(\"failed to load script\", i) : t();\n        });\n    }\n    J() {\n        var t;\n        if (o) {\n            if (!this.W && null != (t = v.__PosthogExtensions__) && t.initDeadClicksAutocapture) {\n                var i = I(this.instance.config.capture_dead_clicks) ? this.instance.config.capture_dead_clicks : {};\n                i.__onCapture = this.onCapture, this.W = v.__PosthogExtensions__.initDeadClicksAutocapture(this.instance, i), this.W.start(o), te.info(\"starting...\");\n            }\n        } else te.error(\"`document` not found. Cannot start.\");\n    }\n    stop() {\n        this.W && (this.W.stop(), this.W = void 0, te.info(\"stopping...\"));\n    }\n}\nvar se = z(\"[ExceptionAutocapture]\");\nclass ne {\n    constructor(i){\n        var e;\n        this.V = ()=>{\n            var i;\n            if (t && this.isEnabled && null != (i = v.__PosthogExtensions__) && i.errorWrappingFunctions) {\n                var e = v.__PosthogExtensions__.errorWrappingFunctions.wrapOnError, r = v.__PosthogExtensions__.errorWrappingFunctions.wrapUnhandledRejection, s = v.__PosthogExtensions__.errorWrappingFunctions.wrapConsoleError;\n                try {\n                    !this.K && this.S.capture_unhandled_errors && (this.K = e(this.captureException.bind(this))), !this.Y && this.S.capture_unhandled_rejections && (this.Y = r(this.captureException.bind(this))), !this.X && this.S.capture_console_errors && (this.X = s(this.captureException.bind(this)));\n                } catch (t) {\n                    se.error(\"failed to start\", t), this.Z();\n                }\n            }\n        }, this._instance = i, this.tt = !(null == (e = this._instance.persistence) || !e.props[ht]), this.S = this.it(), this.startIfEnabled();\n    }\n    it() {\n        var t = this._instance.config.capture_exceptions, i = {\n            capture_unhandled_errors: !1,\n            capture_unhandled_rejections: !1,\n            capture_console_errors: !1\n        };\n        return I(t) ? i = B({}, i, t) : (R(t) ? this.tt : t) && (i = B({}, i, {\n            capture_unhandled_errors: !0,\n            capture_unhandled_rejections: !0\n        })), i;\n    }\n    get isEnabled() {\n        return this.S.capture_console_errors || this.S.capture_unhandled_errors || this.S.capture_unhandled_rejections;\n    }\n    startIfEnabled() {\n        this.isEnabled && (se.info(\"enabled\"), this.G(this.V));\n    }\n    G(t) {\n        var i, e;\n        null != (i = v.__PosthogExtensions__) && i.errorWrappingFunctions && t(), null == (e = v.__PosthogExtensions__) || null == e.loadExternalDependency || e.loadExternalDependency(this._instance, \"exception-autocapture\", (i)=>{\n            if (i) return se.error(\"failed to load script\", i);\n            t();\n        });\n    }\n    Z() {\n        var t, i, e;\n        null == (t = this.K) || t.call(this), this.K = void 0, null == (i = this.Y) || i.call(this), this.Y = void 0, null == (e = this.X) || e.call(this), this.X = void 0;\n    }\n    onRemoteConfig(t) {\n        var i = t.autocaptureExceptions;\n        this.tt = !!i || !1, this.S = this.it(), this._instance.persistence && this._instance.persistence.register({\n            [ht]: this.tt\n        }), this.startIfEnabled();\n    }\n    captureException(t) {\n        var i = this._instance.requestRouter.endpointFor(\"ui\");\n        t.$exception_personURL = i + \"/project/\" + this._instance.config.token + \"/person/\" + this._instance.get_distinct_id(), this._instance.exceptions.sendExceptionEvent(t);\n    }\n}\nfunction oe(t) {\n    return !R(Event) && ae(t, Event);\n}\nfunction ae(t, i) {\n    try {\n        return t instanceof i;\n    } catch (t) {\n        return !1;\n    }\n}\nfunction le(t) {\n    switch(Object.prototype.toString.call(t)){\n        case \"[object Error]\":\n        case \"[object Exception]\":\n        case \"[object DOMException]\":\n        case \"[object DOMError]\":\n            return !0;\n        default:\n            return ae(t, Error);\n    }\n}\nfunction ue(t, i) {\n    return Object.prototype.toString.call(t) === \"[object \" + i + \"]\";\n}\nfunction he(t) {\n    return ue(t, \"DOMError\");\n}\nvar de = /\\(error: (.*)\\)/, ve = 50, ce = \"?\";\nfunction fe(t, i, e, r) {\n    var s = {\n        platform: \"web:javascript\",\n        filename: t,\n        function: \"<anonymous>\" === i ? ce : i,\n        in_app: !0\n    };\n    return R(e) || (s.lineno = e), R(r) || (s.colno = r), s;\n}\nvar pe = /^\\s*at (\\S+?)(?::(\\d+))(?::(\\d+))\\s*$/i, ge = /^\\s*at (?:(.+?\\)(?: \\[.+\\])?|.*?) ?\\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\\/)?.*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i, _e = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/, me = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:[-a-z]+)?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i, be = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i, we = function() {\n    for(var t = arguments.length, i = new Array(t), e = 0; e < t; e++)i[e] = arguments[e];\n    var r = i.sort((t, i)=>t[0] - i[0]).map((t)=>t[1]);\n    return function(t, i) {\n        void 0 === i && (i = 0);\n        for(var e = [], s = t.split(\"\\n\"), n = i; n < s.length; n++){\n            var o = s[n];\n            if (!(o.length > 1024)) {\n                var a = de.test(o) ? o.replace(de, \"$1\") : o;\n                if (!a.match(/\\S*Error: /)) {\n                    for (var l of r){\n                        var u = l(a);\n                        if (u) {\n                            e.push(u);\n                            break;\n                        }\n                    }\n                    if (e.length >= ve) break;\n                }\n            }\n        }\n        return function(t) {\n            if (!t.length) return [];\n            var i = Array.from(t);\n            return i.reverse(), i.slice(0, ve).map((t)=>B({}, t, {\n                    filename: t.filename || ye(i).filename,\n                    function: t.function || ce\n                }));\n        }(e);\n    };\n}(...[\n    [\n        30,\n        (t)=>{\n            var i = pe.exec(t);\n            if (i) {\n                var [, e, r, s] = i;\n                return fe(e, ce, +r, +s);\n            }\n            var n = ge.exec(t);\n            if (n) {\n                if (n[2] && 0 === n[2].indexOf(\"eval\")) {\n                    var o = _e.exec(n[2]);\n                    o && (n[2] = o[1], n[3] = o[2], n[4] = o[3]);\n                }\n                var [a, l] = xe(n[1] || ce, n[2]);\n                return fe(l, a, n[3] ? +n[3] : void 0, n[4] ? +n[4] : void 0);\n            }\n        }\n    ],\n    [\n        50,\n        (t)=>{\n            var i = me.exec(t);\n            if (i) {\n                if (i[3] && i[3].indexOf(\" > eval\") > -1) {\n                    var e = be.exec(i[3]);\n                    e && (i[1] = i[1] || \"eval\", i[3] = e[1], i[4] = e[2], i[5] = \"\");\n                }\n                var r = i[3], s = i[1] || ce;\n                return [s, r] = xe(s, r), fe(r, s, i[4] ? +i[4] : void 0, i[5] ? +i[5] : void 0);\n            }\n        }\n    ]\n]);\nfunction ye(t) {\n    return t[t.length - 1] || {};\n}\nvar Se, $e, ke, xe = (t, i)=>{\n    var e = -1 !== t.indexOf(\"safari-extension\"), r = -1 !== t.indexOf(\"safari-web-extension\");\n    return e || r ? [\n        -1 !== t.indexOf(\"@\") ? t.split(\"@\")[0] : ce,\n        e ? \"safari-extension:\" + i : \"safari-web-extension:\" + i\n    ] : [\n        t,\n        i\n    ];\n};\nvar Ee = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\nfunction Ie(t, i) {\n    void 0 === i && (i = 0);\n    var e = t.stacktrace || t.stack || \"\", r = function(t) {\n        if (t && Pe.test(t.message)) return 1;\n        return 0;\n    }(t);\n    try {\n        var s = we, n = function(t, i) {\n            var e = function(t) {\n                var i = globalThis._posthogChunkIds;\n                if (!i) return {};\n                var e = Object.keys(i);\n                return ke && e.length === $e || ($e = e.length, ke = e.reduce((e, r)=>{\n                    Se || (Se = {});\n                    var s = Se[r];\n                    if (s) e[s[0]] = s[1];\n                    else for(var n = t(r), o = n.length - 1; o >= 0; o--){\n                        var a = n[o], l = null == a ? void 0 : a.filename, u = i[r];\n                        if (l && u) {\n                            e[l] = u, Se[r] = [\n                                l,\n                                u\n                            ];\n                            break;\n                        }\n                    }\n                    return e;\n                }, {})), ke;\n            }(i);\n            return t.forEach((t)=>{\n                t.filename && (t.chunk_id = e[t.filename]);\n            }), t;\n        }(s(e, r), s);\n        return n.slice(0, n.length - i);\n    } catch (t) {}\n    return [];\n}\nvar Pe = /Minified React error #\\d+;/i;\nfunction Re(t, i) {\n    var e, r, s = Ie(t), n = null === (e = null == i ? void 0 : i.handled) || void 0 === e || e, o = null !== (r = null == i ? void 0 : i.synthetic) && void 0 !== r && r;\n    return {\n        type: null != i && i.overrideExceptionType ? i.overrideExceptionType : t.name,\n        value: function(t) {\n            var i = t.message;\n            if (i.error && \"string\" == typeof i.error.message) return String(i.error.message);\n            return String(i);\n        }(t),\n        stacktrace: {\n            frames: s,\n            type: \"raw\"\n        },\n        mechanism: {\n            handled: n,\n            synthetic: o\n        }\n    };\n}\nfunction Te(t, i) {\n    var e = Re(t, i);\n    return t.cause && le(t.cause) && t.cause !== t ? [\n        e,\n        ...Te(t.cause, {\n            handled: null == i ? void 0 : i.handled,\n            synthetic: null == i ? void 0 : i.synthetic\n        })\n    ] : [\n        e\n    ];\n}\nfunction Me(t, i) {\n    return {\n        $exception_list: Te(t, i),\n        $exception_level: \"error\"\n    };\n}\nfunction Ce(t, i) {\n    var e, r, s, n = null === (e = null == i ? void 0 : i.handled) || void 0 === e || e, o = null === (r = null == i ? void 0 : i.synthetic) || void 0 === r || r, a = {\n        type: null != i && i.overrideExceptionType ? i.overrideExceptionType : null !== (s = null == i ? void 0 : i.defaultExceptionType) && void 0 !== s ? s : \"Error\",\n        value: t || (null == i ? void 0 : i.defaultExceptionMessage),\n        mechanism: {\n            handled: n,\n            synthetic: o\n        }\n    };\n    if (null != i && i.syntheticException) {\n        var l = Ie(i.syntheticException, 1);\n        l.length && (a.stacktrace = {\n            frames: l,\n            type: \"raw\"\n        });\n    }\n    return {\n        $exception_list: [\n            a\n        ],\n        $exception_level: \"error\"\n    };\n}\nfunction Oe(t) {\n    return T(t) && !M(t) && _.indexOf(t) >= 0;\n}\nfunction Fe(t, i) {\n    var e, r, s = null === (e = null == i ? void 0 : i.handled) || void 0 === e || e, n = null === (r = null == i ? void 0 : i.synthetic) || void 0 === r || r, o = null != i && i.overrideExceptionType ? i.overrideExceptionType : oe(t) ? t.constructor.name : \"Error\", a = \"Non-Error 'exception' captured with keys: \" + function(t, i) {\n        void 0 === i && (i = 40);\n        var e = Object.keys(t);\n        if (e.sort(), !e.length) return \"[object has no keys]\";\n        for(var r = e.length; r > 0; r--){\n            var s = e.slice(0, r).join(\", \");\n            if (!(s.length > i)) return r === e.length || s.length <= i ? s : s.slice(0, i) + \"...\";\n        }\n        return \"\";\n    }(t), l = {\n        type: o,\n        value: a,\n        mechanism: {\n            handled: s,\n            synthetic: n\n        }\n    };\n    if (null != i && i.syntheticException) {\n        var u = Ie(null == i ? void 0 : i.syntheticException, 1);\n        u.length && (l.stacktrace = {\n            frames: u,\n            type: \"raw\"\n        });\n    }\n    return {\n        $exception_list: [\n            l\n        ],\n        $exception_level: Oe(t.level) ? t.level : \"error\"\n    };\n}\nfunction Ae(t, i) {\n    var { error: e, event: r } = t, s = {\n        $exception_list: []\n    }, n = e || r;\n    if (he(n) || function(t) {\n        return ue(t, \"DOMException\");\n    }(n)) {\n        var o = n;\n        if (function(t) {\n            return \"stack\" in t;\n        }(n)) s = Me(n, i);\n        else {\n            var a = o.name || (he(o) ? \"DOMError\" : \"DOMException\"), l = o.message ? a + \": \" + o.message : a;\n            s = Ce(l, B({}, i, {\n                overrideExceptionType: he(o) ? \"DOMError\" : \"DOMException\",\n                defaultExceptionMessage: l\n            }));\n        }\n        return \"code\" in o && (s.$exception_DOMException_code = \"\" + o.code), s;\n    }\n    if (function(t) {\n        return ue(t, \"ErrorEvent\");\n    }(n) && n.error) return Me(n.error, i);\n    if (le(n)) return Me(n, i);\n    if (function(t) {\n        return ue(t, \"Object\");\n    }(n) || oe(n)) return Fe(n, i);\n    if (R(e) && T(r)) {\n        var u = \"Error\", h = r, d = r.match(Ee);\n        return d && (u = d[1], h = d[2]), Ce(h, B({}, i, {\n            overrideExceptionType: u,\n            defaultExceptionMessage: h\n        }));\n    }\n    return Ce(n, i);\n}\nfunction De(t, i, e) {\n    try {\n        if (!(i in t)) return ()=>{};\n        var r = t[i], s = e(r);\n        return E(s) && (s.prototype = s.prototype || {}, Object.defineProperties(s, {\n            __posthog_wrapped__: {\n                enumerable: !1,\n                value: !0\n            }\n        })), t[i] = s, ()=>{\n            t[i] = r;\n        };\n    } catch (t) {\n        return ()=>{};\n    }\n}\nclass Le {\n    constructor(i){\n        var e;\n        this._instance = i, this.et = (null == t || null == (e = t.location) ? void 0 : e.pathname) || \"\";\n    }\n    get isEnabled() {\n        return \"history_change\" === this._instance.config.capture_pageview;\n    }\n    startIfEnabled() {\n        this.isEnabled && (j.info(\"History API monitoring enabled, starting...\"), this.monitorHistoryChanges());\n    }\n    stop() {\n        this.rt && this.rt(), this.rt = void 0, j.info(\"History API monitoring stopped\");\n    }\n    monitorHistoryChanges() {\n        var i, e;\n        if (t && t.history) {\n            var r = this;\n            null != (i = t.history.pushState) && i.__posthog_wrapped__ || De(t.history, \"pushState\", (t)=>function(i, e, s) {\n                    t.call(this, i, e, s), r.st(\"pushState\");\n                }), null != (e = t.history.replaceState) && e.__posthog_wrapped__ || De(t.history, \"replaceState\", (t)=>function(i, e, s) {\n                    t.call(this, i, e, s), r.st(\"replaceState\");\n                }), this.nt();\n        }\n    }\n    st(i) {\n        try {\n            var e, r = null == t || null == (e = t.location) ? void 0 : e.pathname;\n            if (!r) return;\n            r !== this.et && this.isEnabled && this._instance.capture(\"$pageview\", {\n                navigation_type: i\n            }), this.et = r;\n        } catch (t) {\n            j.error(\"Error capturing \" + i + \" pageview\", t);\n        }\n    }\n    nt() {\n        if (!this.rt) {\n            var i = ()=>{\n                this.st(\"popstate\");\n            };\n            st(t, \"popstate\", i), this.rt = ()=>{\n                t && t.removeEventListener(\"popstate\", i);\n            };\n        }\n    }\n}\nfunction Ne(t) {\n    var i, e;\n    return (null == (i = JSON.stringify(t, (e = [], function(t, i) {\n        if (I(i)) {\n            for(; e.length > 0 && e[e.length - 1] !== this;)e.pop();\n            return e.includes(i) ? \"[Circular]\" : (e.push(i), i);\n        }\n        return i;\n    }))) ? void 0 : i.length) || 0;\n}\nfunction je(t, i) {\n    if (void 0 === i && (i = 6606028.8), t.size >= i && t.data.length > 1) {\n        var e = Math.floor(t.data.length / 2), r = t.data.slice(0, e), s = t.data.slice(e);\n        return [\n            je({\n                size: Ne(r),\n                data: r,\n                sessionId: t.sessionId,\n                windowId: t.windowId\n            }),\n            je({\n                size: Ne(s),\n                data: s,\n                sessionId: t.sessionId,\n                windowId: t.windowId\n            })\n        ].flatMap((t)=>t);\n    }\n    return [\n        t\n    ];\n}\nvar ze = ((t)=>(t[t.DomContentLoaded = 0] = \"DomContentLoaded\", t[t.Load = 1] = \"Load\", t[t.FullSnapshot = 2] = \"FullSnapshot\", t[t.IncrementalSnapshot = 3] = \"IncrementalSnapshot\", t[t.Meta = 4] = \"Meta\", t[t.Custom = 5] = \"Custom\", t[t.Plugin = 6] = \"Plugin\", t))(ze || {}), Ue = ((t)=>(t[t.Mutation = 0] = \"Mutation\", t[t.MouseMove = 1] = \"MouseMove\", t[t.MouseInteraction = 2] = \"MouseInteraction\", t[t.Scroll = 3] = \"Scroll\", t[t.ViewportResize = 4] = \"ViewportResize\", t[t.Input = 5] = \"Input\", t[t.TouchMove = 6] = \"TouchMove\", t[t.MediaInteraction = 7] = \"MediaInteraction\", t[t.StyleSheetRule = 8] = \"StyleSheetRule\", t[t.CanvasMutation = 9] = \"CanvasMutation\", t[t.Font = 10] = \"Font\", t[t.Log = 11] = \"Log\", t[t.Drag = 12] = \"Drag\", t[t.StyleDeclaration = 13] = \"StyleDeclaration\", t[t.Selection = 14] = \"Selection\", t[t.AdoptedStyleSheet = 15] = \"AdoptedStyleSheet\", t[t.CustomElement = 16] = \"CustomElement\", t))(Ue || {}), qe = \"[SessionRecording]\", Be = \"redacted\", He = {\n    initiatorTypes: [\n        \"audio\",\n        \"beacon\",\n        \"body\",\n        \"css\",\n        \"early-hint\",\n        \"embed\",\n        \"fetch\",\n        \"frame\",\n        \"iframe\",\n        \"icon\",\n        \"image\",\n        \"img\",\n        \"input\",\n        \"link\",\n        \"navigation\",\n        \"object\",\n        \"ping\",\n        \"script\",\n        \"track\",\n        \"video\",\n        \"xmlhttprequest\"\n    ],\n    maskRequestFn: (t)=>t,\n    recordHeaders: !1,\n    recordBody: !1,\n    recordInitialRequests: !1,\n    recordPerformance: !1,\n    performanceEntryTypeToObserve: [\n        \"first-input\",\n        \"navigation\",\n        \"paint\",\n        \"resource\"\n    ],\n    payloadSizeLimitBytes: 1e6,\n    payloadHostDenyList: [\n        \".lr-ingest.io\",\n        \".ingest.sentry.io\",\n        \".clarity.ms\",\n        \"analytics.google.com\",\n        \"bam.nr-data.net\"\n    ]\n}, We = [\n    \"authorization\",\n    \"x-forwarded-for\",\n    \"authorization\",\n    \"cookie\",\n    \"set-cookie\",\n    \"x-api-key\",\n    \"x-real-ip\",\n    \"remote-addr\",\n    \"forwarded\",\n    \"proxy-authorization\",\n    \"x-csrf-token\",\n    \"x-csrftoken\",\n    \"x-xsrf-token\"\n], Ge = [\n    \"password\",\n    \"secret\",\n    \"passwd\",\n    \"api_key\",\n    \"apikey\",\n    \"auth\",\n    \"credentials\",\n    \"mysql_pwd\",\n    \"privatekey\",\n    \"private_key\",\n    \"token\"\n], Je = [\n    \"/s/\",\n    \"/e/\",\n    \"/i/\"\n];\nfunction Ve(t, i, e, r) {\n    if (O(t)) return t;\n    var s = (null == i ? void 0 : i[\"content-length\"]) || function(t) {\n        return new Blob([\n            t\n        ]).size;\n    }(t);\n    return T(s) && (s = parseInt(s)), s > e ? qe + \" \" + r + \" body too large to record (\" + s + \" bytes)\" : t;\n}\nfunction Ke(t, i) {\n    if (O(t)) return t;\n    var e = t;\n    return ci(e, !1) || (e = qe + \" \" + i + \" body \" + Be), J(Ge, (t)=>{\n        var r, s;\n        null != (r = e) && r.length && -1 !== (null == (s = e) ? void 0 : s.indexOf(t)) && (e = qe + \" \" + i + \" body \" + Be + \" as might contain: \" + t);\n    }), e;\n}\nvar Ye = (t, i)=>{\n    var e, r, s, n = {\n        payloadSizeLimitBytes: He.payloadSizeLimitBytes,\n        performanceEntryTypeToObserve: [\n            ...He.performanceEntryTypeToObserve\n        ],\n        payloadHostDenyList: [\n            ...i.payloadHostDenyList || [],\n            ...He.payloadHostDenyList\n        ]\n    }, o = !1 !== t.session_recording.recordHeaders && i.recordHeaders, a = !1 !== t.session_recording.recordBody && i.recordBody, l = !1 !== t.capture_performance && i.recordPerformance, u = (e = n, s = Math.min(1e6, null !== (r = e.payloadSizeLimitBytes) && void 0 !== r ? r : 1e6), (t)=>(null != t && t.requestBody && (t.requestBody = Ve(t.requestBody, t.requestHeaders, s, \"Request\")), null != t && t.responseBody && (t.responseBody = Ve(t.responseBody, t.responseHeaders, s, \"Response\")), t)), h = (i)=>{\n        return u(((t, i)=>{\n            var e, r = yi(t.name), s = 0 === i.indexOf(\"http\") ? null == (e = yi(i)) ? void 0 : e.pathname : i;\n            \"/\" === s && (s = \"\");\n            var n = null == r ? void 0 : r.pathname.replace(s || \"\", \"\");\n            if (!(r && n && Je.some((t)=>0 === n.indexOf(t)))) return t;\n        })((r = (e = i).requestHeaders, O(r) || J(Object.keys(null != r ? r : {}), (t)=>{\n            We.includes(t.toLowerCase()) && (r[t] = Be);\n        }), e), t.api_host));\n        var e, r;\n    }, d = E(t.session_recording.maskNetworkRequestFn);\n    return d && E(t.session_recording.maskCapturedNetworkRequestFn) && j.warn(\"Both `maskNetworkRequestFn` and `maskCapturedNetworkRequestFn` are defined. `maskNetworkRequestFn` will be ignored.\"), d && (t.session_recording.maskCapturedNetworkRequestFn = (i)=>{\n        var e = t.session_recording.maskNetworkRequestFn({\n            url: i.name\n        });\n        return B({}, i, {\n            name: null == e ? void 0 : e.url\n        });\n    }), n.maskRequestFn = E(t.session_recording.maskCapturedNetworkRequestFn) ? (i)=>{\n        var e, r = h(i);\n        return r && null !== (e = null == t.session_recording.maskCapturedNetworkRequestFn ? void 0 : t.session_recording.maskCapturedNetworkRequestFn(r)) && void 0 !== e ? e : void 0;\n    } : (t)=>(function(t) {\n            if (!R(t)) return t.requestBody = Ke(t.requestBody, \"Request\"), t.responseBody = Ke(t.responseBody, \"Response\"), t;\n        })(h(t)), B({}, He, n, {\n        recordHeaders: o,\n        recordBody: a,\n        recordPerformance: l,\n        recordInitialRequests: l\n    });\n};\nfunction Xe(t, i, e, r, s) {\n    return i > e && (j.warn(\"min cannot be greater than max.\"), i = e), F(t) ? t > e ? (r && j.warn(r + \" cannot be  greater than max: \" + e + \". Using max value instead.\"), e) : t < i ? (r && j.warn(r + \" cannot be less than min: \" + i + \". Using min value instead.\"), i) : t : (r && j.warn(r + \" must be a number. using max or fallback. max: \" + e + \", fallback: \" + s), Xe(s || e, i, e, r));\n}\nclass Qe {\n    constructor(t, i){\n        var e, r;\n        void 0 === i && (i = {}), this.ot = 100, this.lt = 10, this.ut = {}, this.ht = {}, this.dt = ()=>{\n            Object.keys(this.ut).forEach((t)=>{\n                this.ut[t] = this.ut[t] + this.lt, this.ut[t] >= this.ot && delete this.ut[t];\n            });\n        }, this.vt = (t)=>{\n            var i = this._rrweb.mirror.getNode(t);\n            if (\"svg\" !== (null == i ? void 0 : i.nodeName) && i instanceof Element) {\n                var e = i.closest(\"svg\");\n                if (e) return [\n                    this._rrweb.mirror.getId(e),\n                    e\n                ];\n            }\n            return [\n                t,\n                i\n            ];\n        }, this.ct = (t)=>{\n            var i, e, r, s, n, o, a, l;\n            return (null !== (i = null == (e = t.removes) ? void 0 : e.length) && void 0 !== i ? i : 0) + (null !== (r = null == (s = t.attributes) ? void 0 : s.length) && void 0 !== r ? r : 0) + (null !== (n = null == (o = t.texts) ? void 0 : o.length) && void 0 !== n ? n : 0) + (null !== (a = null == (l = t.adds) ? void 0 : l.length) && void 0 !== a ? a : 0);\n        }, this.throttleMutations = (t)=>{\n            if (3 !== t.type || 0 !== t.data.source) return t;\n            var i = t.data, e = this.ct(i);\n            i.attributes && (i.attributes = i.attributes.filter((t)=>{\n                var i, e, r, [s, n] = this.vt(t.id);\n                if (0 === this.ut[s]) return !1;\n                (this.ut[s] = null !== (i = this.ut[s]) && void 0 !== i ? i : this.ot, this.ut[s] = Math.max(this.ut[s] - 1, 0), 0 === this.ut[s]) && (this.ht[s] || (this.ht[s] = !0, null == (e = (r = this.ft).onBlockedNode) || e.call(r, s, n)));\n                return t;\n            }));\n            var r = this.ct(i);\n            return 0 !== r || e === r ? t : void 0;\n        }, this._rrweb = t, this.ft = i, this.lt = Xe(null !== (e = this.ft.refillRate) && void 0 !== e ? e : this.lt, 0, 100, \"mutation throttling refill rate\"), this.ot = Xe(null !== (r = this.ft.bucketSize) && void 0 !== r ? r : this.ot, 0, 100, \"mutation throttling bucket size\"), setInterval(()=>{\n            this.dt();\n        }, 1e3);\n    }\n}\nvar Ze = Uint8Array, tr = Uint16Array, ir = Uint32Array, er = new Ze([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    2,\n    2,\n    2,\n    2,\n    3,\n    3,\n    3,\n    3,\n    4,\n    4,\n    4,\n    4,\n    5,\n    5,\n    5,\n    5,\n    0,\n    0,\n    0,\n    0\n]), rr = new Ze([\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    2,\n    2,\n    3,\n    3,\n    4,\n    4,\n    5,\n    5,\n    6,\n    6,\n    7,\n    7,\n    8,\n    8,\n    9,\n    9,\n    10,\n    10,\n    11,\n    11,\n    12,\n    12,\n    13,\n    13,\n    0,\n    0\n]), sr = new Ze([\n    16,\n    17,\n    18,\n    0,\n    8,\n    7,\n    9,\n    6,\n    10,\n    5,\n    11,\n    4,\n    12,\n    3,\n    13,\n    2,\n    14,\n    1,\n    15\n]), nr = function(t, i) {\n    for(var e = new tr(31), r = 0; r < 31; ++r)e[r] = i += 1 << t[r - 1];\n    var s = new ir(e[30]);\n    for(r = 1; r < 30; ++r)for(var n = e[r]; n < e[r + 1]; ++n)s[n] = n - e[r] << 5 | r;\n    return [\n        e,\n        s\n    ];\n}, or = nr(er, 2), ar = or[0], lr = or[1];\nar[28] = 258, lr[258] = 28;\nfor(var ur = nr(rr, 0)[1], hr = new tr(32768), dr = 0; dr < 32768; ++dr){\n    var vr = (43690 & dr) >>> 1 | (21845 & dr) << 1;\n    vr = (61680 & (vr = (52428 & vr) >>> 2 | (13107 & vr) << 2)) >>> 4 | (3855 & vr) << 4, hr[dr] = ((65280 & vr) >>> 8 | (255 & vr) << 8) >>> 1;\n}\nvar cr = function(t, i, e) {\n    for(var r = t.length, s = 0, n = new tr(i); s < r; ++s)++n[t[s] - 1];\n    var o, a = new tr(i);\n    for(s = 0; s < i; ++s)a[s] = a[s - 1] + n[s - 1] << 1;\n    if (e) {\n        o = new tr(1 << i);\n        var l = 15 - i;\n        for(s = 0; s < r; ++s)if (t[s]) for(var u = s << 4 | t[s], h = i - t[s], d = a[t[s] - 1]++ << h, v = d | (1 << h) - 1; d <= v; ++d)o[hr[d] >>> l] = u;\n    } else for(o = new tr(r), s = 0; s < r; ++s)o[s] = hr[a[t[s] - 1]++] >>> 15 - t[s];\n    return o;\n}, fr = new Ze(288);\nfor(dr = 0; dr < 144; ++dr)fr[dr] = 8;\nfor(dr = 144; dr < 256; ++dr)fr[dr] = 9;\nfor(dr = 256; dr < 280; ++dr)fr[dr] = 7;\nfor(dr = 280; dr < 288; ++dr)fr[dr] = 8;\nvar pr = new Ze(32);\nfor(dr = 0; dr < 32; ++dr)pr[dr] = 5;\nvar gr = cr(fr, 9, 0), _r = cr(pr, 5, 0), mr = function(t) {\n    return (t / 8 >> 0) + (7 & t && 1);\n}, br = function(t, i, e) {\n    (null == e || e > t.length) && (e = t.length);\n    var r = new (t instanceof tr ? tr : t instanceof ir ? ir : Ze)(e - i);\n    return r.set(t.subarray(i, e)), r;\n}, wr = function(t, i, e) {\n    e <<= 7 & i;\n    var r = i / 8 >> 0;\n    t[r] |= e, t[r + 1] |= e >>> 8;\n}, yr = function(t, i, e) {\n    e <<= 7 & i;\n    var r = i / 8 >> 0;\n    t[r] |= e, t[r + 1] |= e >>> 8, t[r + 2] |= e >>> 16;\n}, Sr = function(t, i) {\n    for(var e = [], r = 0; r < t.length; ++r)t[r] && e.push({\n        s: r,\n        f: t[r]\n    });\n    var s = e.length, n = e.slice();\n    if (!s) return [\n        new Ze(0),\n        0\n    ];\n    if (1 == s) {\n        var o = new Ze(e[0].s + 1);\n        return o[e[0].s] = 1, [\n            o,\n            1\n        ];\n    }\n    e.sort(function(t, i) {\n        return t.f - i.f;\n    }), e.push({\n        s: -1,\n        f: 25001\n    });\n    var a = e[0], l = e[1], u = 0, h = 1, d = 2;\n    for(e[0] = {\n        s: -1,\n        f: a.f + l.f,\n        l: a,\n        r: l\n    }; h != s - 1;)a = e[e[u].f < e[d].f ? u++ : d++], l = e[u != h && e[u].f < e[d].f ? u++ : d++], e[h++] = {\n        s: -1,\n        f: a.f + l.f,\n        l: a,\n        r: l\n    };\n    var v = n[0].s;\n    for(r = 1; r < s; ++r)n[r].s > v && (v = n[r].s);\n    var c = new tr(v + 1), f = $r(e[h - 1], c, 0);\n    if (f > i) {\n        r = 0;\n        var p = 0, g = f - i, _ = 1 << g;\n        for(n.sort(function(t, i) {\n            return c[i.s] - c[t.s] || t.f - i.f;\n        }); r < s; ++r){\n            var m = n[r].s;\n            if (!(c[m] > i)) break;\n            p += _ - (1 << f - c[m]), c[m] = i;\n        }\n        for(p >>>= g; p > 0;){\n            var b = n[r].s;\n            c[b] < i ? p -= 1 << i - c[b]++ - 1 : ++r;\n        }\n        for(; r >= 0 && p; --r){\n            var w = n[r].s;\n            c[w] == i && (--c[w], ++p);\n        }\n        f = i;\n    }\n    return [\n        new Ze(c),\n        f\n    ];\n}, $r = function(t, i, e) {\n    return -1 == t.s ? Math.max($r(t.l, i, e + 1), $r(t.r, i, e + 1)) : i[t.s] = e;\n}, kr = function(t) {\n    for(var i = t.length; i && !t[--i];);\n    for(var e = new tr(++i), r = 0, s = t[0], n = 1, o = function(t) {\n        e[r++] = t;\n    }, a = 1; a <= i; ++a)if (t[a] == s && a != i) ++n;\n    else {\n        if (!s && n > 2) {\n            for(; n > 138; n -= 138)o(32754);\n            n > 2 && (o(n > 10 ? n - 11 << 5 | 28690 : n - 3 << 5 | 12305), n = 0);\n        } else if (n > 3) {\n            for(o(s), --n; n > 6; n -= 6)o(8304);\n            n > 2 && (o(n - 3 << 5 | 8208), n = 0);\n        }\n        for(; n--;)o(s);\n        n = 1, s = t[a];\n    }\n    return [\n        e.subarray(0, r),\n        i\n    ];\n}, xr = function(t, i) {\n    for(var e = 0, r = 0; r < i.length; ++r)e += t[r] * i[r];\n    return e;\n}, Er = function(t, i, e) {\n    var r = e.length, s = mr(i + 2);\n    t[s] = 255 & r, t[s + 1] = r >>> 8, t[s + 2] = 255 ^ t[s], t[s + 3] = 255 ^ t[s + 1];\n    for(var n = 0; n < r; ++n)t[s + n + 4] = e[n];\n    return 8 * (s + 4 + r);\n}, Ir = function(t, i, e, r, s, n, o, a, l, u, h) {\n    wr(i, h++, e), ++s[256];\n    for(var d = Sr(s, 15), v = d[0], c = d[1], f = Sr(n, 15), p = f[0], g = f[1], _ = kr(v), m = _[0], b = _[1], w = kr(p), y = w[0], S = w[1], $ = new tr(19), k = 0; k < m.length; ++k)$[31 & m[k]]++;\n    for(k = 0; k < y.length; ++k)$[31 & y[k]]++;\n    for(var x = Sr($, 7), E = x[0], I = x[1], P = 19; P > 4 && !E[sr[P - 1]]; --P);\n    var R, T, M, C, O = u + 5 << 3, F = xr(s, fr) + xr(n, pr) + o, A = xr(s, v) + xr(n, p) + o + 14 + 3 * P + xr($, E) + (2 * $[16] + 3 * $[17] + 7 * $[18]);\n    if (O <= F && O <= A) return Er(i, h, t.subarray(l, l + u));\n    if (wr(i, h, 1 + (A < F)), h += 2, A < F) {\n        R = cr(v, c, 0), T = v, M = cr(p, g, 0), C = p;\n        var D = cr(E, I, 0);\n        wr(i, h, b - 257), wr(i, h + 5, S - 1), wr(i, h + 10, P - 4), h += 14;\n        for(k = 0; k < P; ++k)wr(i, h + 3 * k, E[sr[k]]);\n        h += 3 * P;\n        for(var L = [\n            m,\n            y\n        ], N = 0; N < 2; ++N){\n            var j = L[N];\n            for(k = 0; k < j.length; ++k){\n                var z = 31 & j[k];\n                wr(i, h, D[z]), h += E[z], z > 15 && (wr(i, h, j[k] >>> 5 & 127), h += j[k] >>> 12);\n            }\n        }\n    } else R = gr, T = fr, M = _r, C = pr;\n    for(k = 0; k < a; ++k)if (r[k] > 255) {\n        z = r[k] >>> 18 & 31;\n        yr(i, h, R[z + 257]), h += T[z + 257], z > 7 && (wr(i, h, r[k] >>> 23 & 31), h += er[z]);\n        var U = 31 & r[k];\n        yr(i, h, M[U]), h += C[U], U > 3 && (yr(i, h, r[k] >>> 5 & 8191), h += rr[U]);\n    } else yr(i, h, R[r[k]]), h += T[r[k]];\n    return yr(i, h, R[256]), h + T[256];\n}, Pr = new ir([\n    65540,\n    131080,\n    131088,\n    131104,\n    262176,\n    1048704,\n    1048832,\n    2114560,\n    2117632\n]), Rr = function() {\n    for(var t = new ir(256), i = 0; i < 256; ++i){\n        for(var e = i, r = 9; --r;)e = (1 & e && 3988292384) ^ e >>> 1;\n        t[i] = e;\n    }\n    return t;\n}(), Tr = function() {\n    var t = 4294967295;\n    return {\n        p: function(i) {\n            for(var e = t, r = 0; r < i.length; ++r)e = Rr[255 & e ^ i[r]] ^ e >>> 8;\n            t = e;\n        },\n        d: function() {\n            return 4294967295 ^ t;\n        }\n    };\n}, Mr = function(t, i, e, r, s) {\n    return function(t, i, e, r, s, n) {\n        var o = t.length, a = new Ze(r + o + 5 * (1 + Math.floor(o / 7e3)) + s), l = a.subarray(r, a.length - s), u = 0;\n        if (!i || o < 8) for(var h = 0; h <= o; h += 65535){\n            var d = h + 65535;\n            d < o ? u = Er(l, u, t.subarray(h, d)) : (l[h] = n, u = Er(l, u, t.subarray(h, o)));\n        }\n        else {\n            for(var v = Pr[i - 1], c = v >>> 13, f = 8191 & v, p = (1 << e) - 1, g = new tr(32768), _ = new tr(p + 1), m = Math.ceil(e / 3), b = 2 * m, w = function(i) {\n                return (t[i] ^ t[i + 1] << m ^ t[i + 2] << b) & p;\n            }, y = new ir(25e3), S = new tr(288), $ = new tr(32), k = 0, x = 0, E = (h = 0, 0), I = 0, P = 0; h < o; ++h){\n                var R = w(h), T = 32767 & h, M = _[R];\n                if (g[T] = M, _[R] = T, I <= h) {\n                    var C = o - h;\n                    if ((k > 7e3 || E > 24576) && C > 423) {\n                        u = Ir(t, l, 0, y, S, $, x, E, P, h - P, u), E = k = x = 0, P = h;\n                        for(var O = 0; O < 286; ++O)S[O] = 0;\n                        for(O = 0; O < 30; ++O)$[O] = 0;\n                    }\n                    var F = 2, A = 0, D = f, L = T - M & 32767;\n                    if (C > 2 && R == w(h - L)) for(var N = Math.min(c, C) - 1, j = Math.min(32767, h), z = Math.min(258, C); L <= j && --D && T != M;){\n                        if (t[h + F] == t[h + F - L]) {\n                            for(var U = 0; U < z && t[h + U] == t[h + U - L]; ++U);\n                            if (U > F) {\n                                if (F = U, A = L, U > N) break;\n                                var q = Math.min(L, U - 2), B = 0;\n                                for(O = 0; O < q; ++O){\n                                    var H = h - L + O + 32768 & 32767, W = H - g[H] + 32768 & 32767;\n                                    W > B && (B = W, M = H);\n                                }\n                            }\n                        }\n                        L += (T = M) - (M = g[T]) + 32768 & 32767;\n                    }\n                    if (A) {\n                        y[E++] = 268435456 | lr[F] << 18 | ur[A];\n                        var G = 31 & lr[F], J = 31 & ur[A];\n                        x += er[G] + rr[J], ++S[257 + G], ++$[J], I = h + F, ++k;\n                    } else y[E++] = t[h], ++S[t[h]];\n                }\n            }\n            u = Ir(t, l, n, y, S, $, x, E, P, h - P, u);\n        }\n        return br(a, 0, r + mr(u) + s);\n    }(t, null == i.level ? 6 : i.level, null == i.mem ? Math.ceil(1.5 * Math.max(8, Math.min(13, Math.log(t.length)))) : 12 + i.mem, e, r, !s);\n}, Cr = function(t, i, e) {\n    for(; e; ++i)t[i] = e, e >>>= 8;\n}, Or = function(t, i) {\n    var e = i.filename;\n    if (t[0] = 31, t[1] = 139, t[2] = 8, t[8] = i.level < 2 ? 4 : 9 == i.level ? 2 : 0, t[9] = 3, 0 != i.mtime && Cr(t, 4, Math.floor(new Date(i.mtime || Date.now()) / 1e3)), e) {\n        t[3] = 8;\n        for(var r = 0; r <= e.length; ++r)t[r + 10] = e.charCodeAt(r);\n    }\n}, Fr = function(t) {\n    return 10 + (t.filename && t.filename.length + 1 || 0);\n};\nfunction Ar(t, i) {\n    void 0 === i && (i = {});\n    var e = Tr(), r = t.length;\n    e.p(t);\n    var s = Mr(t, i, Fr(i), 8), n = s.length;\n    return Or(s, i), Cr(s, n - 8, e.d()), Cr(s, n - 4, r), s;\n}\nfunction Dr(t, i) {\n    var e = t.length;\n    if (\"undefined\" != typeof TextEncoder) return (new TextEncoder).encode(t);\n    for(var r = new Ze(t.length + (t.length >>> 1)), s = 0, n = function(t) {\n        r[s++] = t;\n    }, o = 0; o < e; ++o){\n        if (s + 5 > r.length) {\n            var a = new Ze(s + 8 + (e - o << 1));\n            a.set(r), r = a;\n        }\n        var l = t.charCodeAt(o);\n        l < 128 || i ? n(l) : l < 2048 ? (n(192 | l >>> 6), n(128 | 63 & l)) : l > 55295 && l < 57344 ? (n(240 | (l = 65536 + (1047552 & l) | 1023 & t.charCodeAt(++o)) >>> 18), n(128 | l >>> 12 & 63), n(128 | l >>> 6 & 63), n(128 | 63 & l)) : (n(224 | l >>> 12), n(128 | l >>> 6 & 63), n(128 | 63 & l));\n    }\n    return br(r, 0, s);\n}\nfunction Lr(t, i) {\n    return function(t) {\n        for(var i = 0, e = 0; e < t.length; e++)i = (i << 5) - i + t.charCodeAt(e), i |= 0;\n        return Math.abs(i);\n    }(t) % 100 < Xe(100 * i, 0, 100);\n}\nvar Nr = \"disabled\", jr = \"sampled\", zr = \"active\", Ur = \"buffering\", qr = \"paused\", Br = \"trigger\", Hr = Br + \"_activated\", Wr = Br + \"_pending\", Gr = Br + \"_\" + Nr;\nfunction Jr(t, i) {\n    return i.some((i)=>\"regex\" === i.matching && new RegExp(i.url).test(t));\n}\nclass Vr {\n    constructor(t){\n        this.gt = t;\n    }\n    triggerStatus(t) {\n        var i = this.gt.map((i)=>i.triggerStatus(t));\n        return i.includes(Hr) ? Hr : i.includes(Wr) ? Wr : Gr;\n    }\n    stop() {\n        this.gt.forEach((t)=>t.stop());\n    }\n}\nclass Kr {\n    constructor(t){\n        this.gt = t;\n    }\n    triggerStatus(t) {\n        var i = new Set;\n        for (var e of this.gt)i.add(e.triggerStatus(t));\n        switch(i.delete(Gr), i.size){\n            case 0:\n                return Gr;\n            case 1:\n                return Array.from(i)[0];\n            default:\n                return Wr;\n        }\n    }\n    stop() {\n        this.gt.forEach((t)=>t.stop());\n    }\n}\nclass Yr {\n    triggerStatus() {\n        return Wr;\n    }\n    stop() {}\n}\nclass Xr {\n    constructor(t){\n        this._t = [], this.bt = [], this.urlBlocked = !1, this._instance = t;\n    }\n    onRemoteConfig(t) {\n        var i, e;\n        this._t = (null == (i = t.sessionRecording) ? void 0 : i.urlTriggers) || [], this.bt = (null == (e = t.sessionRecording) ? void 0 : e.urlBlocklist) || [];\n    }\n    wt(t) {\n        var i;\n        return 0 === this._t.length ? Gr : (null == (i = this._instance) ? void 0 : i.get_property(xt)) === t ? Hr : Wr;\n    }\n    triggerStatus(t) {\n        var i = this.wt(t), e = i === Hr ? Hr : i === Wr ? Wr : Gr;\n        return this._instance.register_for_session({\n            $sdk_debug_replay_url_trigger_status: e\n        }), e;\n    }\n    checkUrlTriggerConditions(i, e, r) {\n        if (void 0 !== t && t.location.href) {\n            var s = t.location.href, n = this.urlBlocked, o = Jr(s, this.bt);\n            n && o || (o && !n ? i() : !o && n && e(), Jr(s, this._t) && r(\"url\"));\n        }\n    }\n    stop() {}\n}\nclass Qr {\n    constructor(t){\n        this.linkedFlag = null, this.linkedFlagSeen = !1, this.yt = ()=>{}, this._instance = t;\n    }\n    triggerStatus() {\n        var t = Wr;\n        return O(this.linkedFlag) && (t = Gr), this.linkedFlagSeen && (t = Hr), this._instance.register_for_session({\n            $sdk_debug_replay_linked_flag_trigger_status: t\n        }), t;\n    }\n    onRemoteConfig(t, i) {\n        var e;\n        if (this.linkedFlag = (null == (e = t.sessionRecording) ? void 0 : e.linkedFlag) || null, !O(this.linkedFlag) && !this.linkedFlagSeen) {\n            var r = T(this.linkedFlag) ? this.linkedFlag : this.linkedFlag.flag, s = T(this.linkedFlag) ? null : this.linkedFlag.variant;\n            this.yt = this._instance.onFeatureFlags((t, e)=>{\n                var n = !1;\n                if (I(e) && r in e) {\n                    var o = e[r];\n                    n = A(o) ? !0 === o : s ? o === s : !!o;\n                }\n                this.linkedFlagSeen = n, n && i(r, s);\n            });\n        }\n    }\n    stop() {\n        this.yt();\n    }\n}\nclass Zr {\n    constructor(t){\n        this.St = [], this._instance = t;\n    }\n    onRemoteConfig(t) {\n        var i;\n        this.St = (null == (i = t.sessionRecording) ? void 0 : i.eventTriggers) || [];\n    }\n    $t(t) {\n        var i;\n        return 0 === this.St.length ? Gr : (null == (i = this._instance) ? void 0 : i.get_property(Et)) === t ? Hr : Wr;\n    }\n    triggerStatus(t) {\n        var i = this.$t(t), e = i === Hr ? Hr : i === Wr ? Wr : Gr;\n        return this._instance.register_for_session({\n            $sdk_debug_replay_event_trigger_status: e\n        }), e;\n    }\n    stop() {}\n}\nfunction ts(t) {\n    return t.isRecordingEnabled ? Ur : Nr;\n}\nfunction is(t) {\n    if (!t.receivedDecide) return Ur;\n    if (!t.isRecordingEnabled) return Nr;\n    if (t.urlTriggerMatching.urlBlocked) return qr;\n    var i = !0 === t.isSampled, e = new Vr([\n        t.eventTriggerMatching,\n        t.urlTriggerMatching,\n        t.linkedFlagMatching\n    ]).triggerStatus(t.sessionId);\n    return i ? jr : e === Hr ? zr : e === Wr ? Ur : !1 === t.isSampled ? Nr : zr;\n}\nfunction es(t) {\n    if (!t.receivedDecide) return Ur;\n    if (!t.isRecordingEnabled) return Nr;\n    if (t.urlTriggerMatching.urlBlocked) return qr;\n    var i = new Kr([\n        t.eventTriggerMatching,\n        t.urlTriggerMatching,\n        t.linkedFlagMatching\n    ]).triggerStatus(t.sessionId), e = i !== Gr, r = A(t.isSampled);\n    return e && i === Wr ? Ur : e && i === Gr || r && !t.isSampled ? Nr : !0 === t.isSampled ? jr : zr;\n}\nvar rs = \"[SessionRecording]\", ss = z(rs);\nfunction ns() {\n    var t;\n    return null == v || null == (t = v.__PosthogExtensions__) || null == (t = t.rrweb) ? void 0 : t.record;\n}\nvar os = 3e5, as = [\n    Ue.MouseMove,\n    Ue.MouseInteraction,\n    Ue.Scroll,\n    Ue.ViewportResize,\n    Ue.Input,\n    Ue.TouchMove,\n    Ue.MediaInteraction,\n    Ue.Drag\n], ls = (t)=>({\n        rrwebMethod: t,\n        enqueuedAt: Date.now(),\n        attempt: 1\n    });\nfunction us(t) {\n    return function(t, i) {\n        for(var e = \"\", r = 0; r < t.length;){\n            var s = t[r++];\n            s < 128 || i ? e += String.fromCharCode(s) : s < 224 ? e += String.fromCharCode((31 & s) << 6 | 63 & t[r++]) : s < 240 ? e += String.fromCharCode((15 & s) << 12 | (63 & t[r++]) << 6 | 63 & t[r++]) : (s = ((15 & s) << 18 | (63 & t[r++]) << 12 | (63 & t[r++]) << 6 | 63 & t[r++]) - 65536, e += String.fromCharCode(55296 | s >> 10, 56320 | 1023 & s));\n        }\n        return e;\n    }(Ar(Dr(JSON.stringify(t))), !0);\n}\nfunction hs(t) {\n    return t.type === ze.Custom && \"sessionIdle\" === t.data.tag;\n}\nclass ds {\n    get sessionId() {\n        return this.kt;\n    }\n    get xt() {\n        return this._instance.config.session_recording.session_idle_threshold_ms || 3e5;\n    }\n    get started() {\n        return this.Et;\n    }\n    get It() {\n        if (!this._instance.sessionManager) throw new Error(rs + \" must be started with a valid sessionManager.\");\n        return this._instance.sessionManager;\n    }\n    get Pt() {\n        var t, i;\n        return this.Rt.triggerStatus(this.sessionId) === Wr ? 6e4 : null !== (t = null == (i = this._instance.config.session_recording) ? void 0 : i.full_snapshot_interval_millis) && void 0 !== t ? t : os;\n    }\n    get Tt() {\n        var t = this._instance.get_property(kt);\n        return A(t) ? t : null;\n    }\n    get Mt() {\n        var t, i, e = null == (t = this.M) ? void 0 : t.data[(null == (i = this.M) ? void 0 : i.data.length) - 1], { sessionStartTimestamp: r } = this.It.checkAndGetSessionAndWindowId(!0);\n        return e ? e.timestamp - r : null;\n    }\n    get Ct() {\n        var i = !!this._instance.get_property(pt), e = !this._instance.config.disable_session_recording;\n        return t && i && e;\n    }\n    get Ot() {\n        var t = !!this._instance.get_property(gt), i = this._instance.config.enable_recording_console_log;\n        return null != i ? i : t;\n    }\n    get Ft() {\n        var t, i, e, r, s, n, o = this._instance.config.session_recording.captureCanvas, a = this._instance.get_property(bt), l = null !== (t = null !== (i = null == o ? void 0 : o.recordCanvas) && void 0 !== i ? i : null == a ? void 0 : a.enabled) && void 0 !== t && t, u = null !== (e = null !== (r = null == o ? void 0 : o.canvasFps) && void 0 !== r ? r : null == a ? void 0 : a.fps) && void 0 !== e ? e : 4, h = null !== (s = null !== (n = null == o ? void 0 : o.canvasQuality) && void 0 !== n ? n : null == a ? void 0 : a.quality) && void 0 !== s ? s : .4;\n        if (\"string\" == typeof h) {\n            var d = parseFloat(h);\n            h = isNaN(d) ? .4 : d;\n        }\n        return {\n            enabled: l,\n            fps: Xe(u, 0, 12, \"canvas recording fps\", 4),\n            quality: Xe(h, 0, 1, \"canvas recording quality\", .4)\n        };\n    }\n    get At() {\n        var t, i, e = this._instance.get_property(_t), r = {\n            recordHeaders: null == (t = this._instance.config.session_recording) ? void 0 : t.recordHeaders,\n            recordBody: null == (i = this._instance.config.session_recording) ? void 0 : i.recordBody\n        }, s = (null == r ? void 0 : r.recordHeaders) || (null == e ? void 0 : e.recordHeaders), n = (null == r ? void 0 : r.recordBody) || (null == e ? void 0 : e.recordBody), o = I(this._instance.config.capture_performance) ? this._instance.config.capture_performance.network_timing : this._instance.config.capture_performance, a = !!(A(o) ? o : null == e ? void 0 : e.capturePerformance);\n        return s || n || a ? {\n            recordHeaders: s,\n            recordBody: n,\n            recordPerformance: a\n        } : void 0;\n    }\n    get Dt() {\n        var t, i, e, r, s, n, o = this._instance.get_property(mt), a = {\n            maskAllInputs: null == (t = this._instance.config.session_recording) ? void 0 : t.maskAllInputs,\n            maskTextSelector: null == (i = this._instance.config.session_recording) ? void 0 : i.maskTextSelector,\n            blockSelector: null == (e = this._instance.config.session_recording) ? void 0 : e.blockSelector\n        }, l = null !== (r = null == a ? void 0 : a.maskAllInputs) && void 0 !== r ? r : null == o ? void 0 : o.maskAllInputs, u = null !== (s = null == a ? void 0 : a.maskTextSelector) && void 0 !== s ? s : null == o ? void 0 : o.maskTextSelector, h = null !== (n = null == a ? void 0 : a.blockSelector) && void 0 !== n ? n : null == o ? void 0 : o.blockSelector;\n        return R(l) && R(u) && R(h) ? void 0 : {\n            maskAllInputs: null == l || l,\n            maskTextSelector: u,\n            blockSelector: h\n        };\n    }\n    get Lt() {\n        var t = this._instance.get_property(wt);\n        return F(t) ? t : null;\n    }\n    get Nt() {\n        var t = this._instance.get_property(yt);\n        return F(t) ? t : null;\n    }\n    get status() {\n        return this.jt ? this.zt({\n            receivedDecide: this.jt,\n            isRecordingEnabled: this.Ct,\n            isSampled: this.Tt,\n            urlTriggerMatching: this.Ut,\n            eventTriggerMatching: this.qt,\n            linkedFlagMatching: this.Bt,\n            sessionId: this.sessionId\n        }) : Ur;\n    }\n    constructor(t){\n        if (this.zt = ts, this.jt = !1, this.Ht = [], this.Wt = \"unknown\", this.Gt = Date.now(), this.Rt = new Yr, this.Jt = void 0, this.Vt = void 0, this.Kt = void 0, this.Yt = void 0, this.Xt = void 0, this._forceAllowLocalhostNetworkCapture = !1, this.Qt = ()=>{\n            this.Zt();\n        }, this.ti = ()=>{\n            this.ii(\"browser offline\", {});\n        }, this.ei = ()=>{\n            this.ii(\"browser online\", {});\n        }, this.ri = ()=>{\n            if (null != o && o.visibilityState) {\n                var t = \"window \" + o.visibilityState;\n                this.ii(t, {});\n            }\n        }, this._instance = t, this.Et = !1, this.si = \"/s/\", this.ni = void 0, this.jt = !1, !this._instance.sessionManager) throw ss.error(\"started without valid sessionManager\"), new Error(rs + \" started without valid sessionManager. This is a bug.\");\n        if (this._instance.config.__preview_experimental_cookieless_mode) throw new Error(rs + \" cannot be used with __preview_experimental_cookieless_mode.\");\n        this.Bt = new Qr(this._instance), this.Ut = new Xr(this._instance), this.qt = new Zr(this._instance);\n        var { sessionId: i, windowId: e } = this.It.checkAndGetSessionAndWindowId();\n        this.kt = i, this.oi = e, this.M = this.ai(), this.xt >= this.It.sessionTimeoutMs && ss.warn(\"session_idle_threshold_ms (\" + this.xt + \") is greater than the session timeout (\" + this.It.sessionTimeoutMs + \"). Session will never be detected as idle\");\n    }\n    startIfEnabledOrStop(i) {\n        this.Ct ? (this.li(i), st(t, \"beforeunload\", this.Qt), st(t, \"offline\", this.ti), st(t, \"online\", this.ei), st(t, \"visibilitychange\", this.ri), this.ui(), this.hi(), O(this.Jt) && (this.Jt = this._instance.on(\"eventCaptured\", (t)=>{\n            try {\n                if (\"$pageview\" === t.event) {\n                    var i = null != t && t.properties.$current_url ? this.di(null == t ? void 0 : t.properties.$current_url) : \"\";\n                    if (!i) return;\n                    this.ii(\"$pageview\", {\n                        href: i\n                    });\n                }\n            } catch (t) {\n                ss.error(\"Could not add $pageview to rrweb session\", t);\n            }\n        })), this.Vt || (this.Vt = this.It.onSessionId((t, i, e)=>{\n            var r, s;\n            e && (this.ii(\"$session_id_change\", {\n                sessionId: t,\n                windowId: i,\n                changeReason: e\n            }), null == (r = this._instance) || null == (r = r.persistence) || r.unregister(Et), null == (s = this._instance) || null == (s = s.persistence) || s.unregister(xt));\n        }))) : this.stopRecording();\n    }\n    stopRecording() {\n        var i, e, r, s;\n        this.Et && this.ni && (this.ni(), this.ni = void 0, this.Et = !1, null == t || t.removeEventListener(\"beforeunload\", this.Qt), null == t || t.removeEventListener(\"offline\", this.ti), null == t || t.removeEventListener(\"online\", this.ei), null == t || t.removeEventListener(\"visibilitychange\", this.ri), this.ai(), clearInterval(this.vi), null == (i = this.Jt) || i.call(this), this.Jt = void 0, null == (e = this.Xt) || e.call(this), this.Xt = void 0, null == (r = this.Vt) || r.call(this), this.Vt = void 0, null == (s = this.Yt) || s.call(this), this.Yt = void 0, this.qt.stop(), this.Ut.stop(), this.Bt.stop(), ss.info(\"stopped\"));\n    }\n    ci() {\n        var t;\n        null == (t = this._instance.persistence) || t.unregister(kt);\n    }\n    fi(t) {\n        var i, e = this.kt !== t, r = this.Lt;\n        if (F(r)) {\n            var s = this.Tt, n = e || !A(s), o = n ? Lr(t, r) : s;\n            n && (o ? this.pi(jr) : ss.warn(\"Sample rate (\" + r + \") has determined that this sessionId (\" + t + \") will not be sent to the server.\"), this.ii(\"samplingDecisionMade\", {\n                sampleRate: r,\n                isSampled: o\n            })), null == (i = this._instance.persistence) || i.register({\n                [kt]: o\n            });\n        } else this.ci();\n    }\n    onRemoteConfig(t) {\n        var i, e, r, s;\n        (this.ii(\"$remote_config_received\", t), this.gi(t), null != (i = t.sessionRecording) && i.endpoint) && (this.si = null == (s = t.sessionRecording) ? void 0 : s.endpoint);\n        this.ui(), \"any\" === (null == (e = t.sessionRecording) ? void 0 : e.triggerMatchType) ? (this.zt = is, this.Rt = new Vr([\n            this.qt,\n            this.Ut\n        ])) : (this.zt = es, this.Rt = new Kr([\n            this.qt,\n            this.Ut\n        ])), this._instance.register_for_session({\n            $sdk_debug_replay_remote_trigger_matching_config: null == (r = t.sessionRecording) ? void 0 : r.triggerMatchType\n        }), this.Ut.onRemoteConfig(t), this.qt.onRemoteConfig(t), this.Bt.onRemoteConfig(t, (t, i)=>{\n            this.pi(\"linked_flag_matched\", {\n                flag: t,\n                variant: i\n            });\n        }), this.jt = !0, this.startIfEnabledOrStop();\n    }\n    ui() {\n        F(this.Lt) && O(this.Yt) && (this.Yt = this.It.onSessionId((t)=>{\n            this.fi(t);\n        }));\n    }\n    gi(t) {\n        if (this._instance.persistence) {\n            var i, e = this._instance.persistence, r = ()=>{\n                var i, r, s, n, o, a, l, u, h, d = null == (i = t.sessionRecording) ? void 0 : i.sampleRate, v = O(d) ? null : parseFloat(d);\n                O(v) && this.ci();\n                var c = null == (r = t.sessionRecording) ? void 0 : r.minimumDurationMilliseconds;\n                e.register({\n                    [pt]: !!t.sessionRecording,\n                    [gt]: null == (s = t.sessionRecording) ? void 0 : s.consoleLogRecordingEnabled,\n                    [_t]: B({\n                        capturePerformance: t.capturePerformance\n                    }, null == (n = t.sessionRecording) ? void 0 : n.networkPayloadCapture),\n                    [mt]: null == (o = t.sessionRecording) ? void 0 : o.masking,\n                    [bt]: {\n                        enabled: null == (a = t.sessionRecording) ? void 0 : a.recordCanvas,\n                        fps: null == (l = t.sessionRecording) ? void 0 : l.canvasFps,\n                        quality: null == (u = t.sessionRecording) ? void 0 : u.canvasQuality\n                    },\n                    [wt]: v,\n                    [yt]: R(c) ? null : c,\n                    [St]: null == (h = t.sessionRecording) ? void 0 : h.scriptConfig\n                });\n            };\n            r(), null == (i = this.Kt) || i.call(this), this.Kt = this.It.onSessionId(r);\n        }\n    }\n    log(t, i) {\n        var e;\n        void 0 === i && (i = \"log\"), null == (e = this._instance.sessionRecording) || e.onRRwebEmit({\n            type: 6,\n            data: {\n                plugin: \"rrweb/console@1\",\n                payload: {\n                    level: i,\n                    trace: [],\n                    payload: [\n                        JSON.stringify(t)\n                    ]\n                }\n            },\n            timestamp: Date.now()\n        });\n    }\n    li(t) {\n        if (!R(Object.assign) && !R(Array.from) && !(this.Et || this._instance.config.disable_session_recording || this._instance.consent.isOptedOut())) {\n            var i;\n            if (this.Et = !0, this.It.checkAndGetSessionAndWindowId(), ns()) this.mi();\n            else null == (i = v.__PosthogExtensions__) || null == i.loadExternalDependency || i.loadExternalDependency(this._instance, this.bi, (t)=>{\n                if (t) return ss.error(\"could not load recorder\", t);\n                this.mi();\n            });\n            ss.info(\"starting\"), this.status === zr && this.pi(t || \"recording_initialized\");\n        }\n    }\n    get bi() {\n        var t;\n        return (null == (t = this._instance) || null == (t = t.persistence) || null == (t = t.get_property(St)) ? void 0 : t.script) || \"recorder\";\n    }\n    wi(t) {\n        var i;\n        return 3 === t.type && -1 !== as.indexOf(null == (i = t.data) ? void 0 : i.source);\n    }\n    yi(t) {\n        var i = this.wi(t);\n        i || this.Wt || t.timestamp - this.Gt > this.xt && (this.Wt = !0, clearInterval(this.vi), this.ii(\"sessionIdle\", {\n            eventTimestamp: t.timestamp,\n            lastActivityTimestamp: this.Gt,\n            threshold: this.xt,\n            bufferLength: this.M.data.length,\n            bufferSize: this.M.size\n        }), this.Zt());\n        var e = !1;\n        if (i && (this.Gt = t.timestamp, this.Wt)) {\n            var r = \"unknown\" === this.Wt;\n            this.Wt = !1, r || (this.ii(\"sessionNoLongerIdle\", {\n                reason: \"user activity\",\n                type: t.type\n            }), e = !0);\n        }\n        if (!this.Wt) {\n            var { windowId: s, sessionId: n } = this.It.checkAndGetSessionAndWindowId(!i, t.timestamp), o = this.kt !== n, a = this.oi !== s;\n            this.oi = s, this.kt = n, o || a ? (this.stopRecording(), this.startIfEnabledOrStop(\"session_id_changed\")) : e && this.Si();\n        }\n    }\n    $i(t) {\n        try {\n            return t.rrwebMethod(), !0;\n        } catch (i) {\n            return this.Ht.length < 10 ? this.Ht.push({\n                enqueuedAt: t.enqueuedAt || Date.now(),\n                attempt: t.attempt++,\n                rrwebMethod: t.rrwebMethod\n            }) : ss.warn(\"could not emit queued rrweb event.\", i, t), !1;\n        }\n    }\n    ii(t, i) {\n        return this.$i(ls(()=>ns().addCustomEvent(t, i)));\n    }\n    ki() {\n        return this.$i(ls(()=>ns().takeFullSnapshot()));\n    }\n    mi() {\n        var t, i, e, r, s = {\n            blockClass: \"ph-no-capture\",\n            blockSelector: void 0,\n            ignoreClass: \"ph-ignore-input\",\n            maskTextClass: \"ph-mask\",\n            maskTextSelector: void 0,\n            maskTextFn: void 0,\n            maskAllInputs: !0,\n            maskInputOptions: {\n                password: !0\n            },\n            maskInputFn: void 0,\n            slimDOMOptions: {},\n            collectFonts: !1,\n            inlineStylesheet: !0,\n            recordCrossOriginIframes: !1\n        }, n = this._instance.config.session_recording;\n        for (var [o, a] of Object.entries(n || {}))o in s && (\"maskInputOptions\" === o ? s.maskInputOptions = B({\n            password: !0\n        }, a) : s[o] = a);\n        (this.Ft && this.Ft.enabled && (s.recordCanvas = !0, s.sampling = {\n            canvas: this.Ft.fps\n        }, s.dataURLOptions = {\n            type: \"image/webp\",\n            quality: this.Ft.quality\n        }), this.Dt) && (s.maskAllInputs = null === (i = this.Dt.maskAllInputs) || void 0 === i || i, s.maskTextSelector = null !== (e = this.Dt.maskTextSelector) && void 0 !== e ? e : void 0, s.blockSelector = null !== (r = this.Dt.blockSelector) && void 0 !== r ? r : void 0);\n        var l = ns();\n        if (l) {\n            this.xi = null !== (t = this.xi) && void 0 !== t ? t : new Qe(l, {\n                refillRate: this._instance.config.session_recording.__mutationRateLimiterRefillRate,\n                bucketSize: this._instance.config.session_recording.__mutationRateLimiterBucketSize,\n                onBlockedNode: (t, i)=>{\n                    var e = \"Too many mutations on node '\" + t + \"'. Rate limiting. This could be due to SVG animations or something similar\";\n                    ss.info(e, {\n                        node: i\n                    }), this.log(rs + \" \" + e, \"warn\");\n                }\n            });\n            var u = this.Ei();\n            this.ni = l(B({\n                emit: (t)=>{\n                    this.onRRwebEmit(t);\n                },\n                plugins: u\n            }, s)), this.Gt = Date.now(), this.Wt = A(this.Wt) ? this.Wt : \"unknown\", this.ii(\"$session_options\", {\n                sessionRecordingOptions: s,\n                activePlugins: u.map((t)=>null == t ? void 0 : t.name)\n            }), this.ii(\"$posthog_config\", {\n                config: this._instance.config\n            });\n        } else ss.error(\"onScriptLoaded was called but rrwebRecord is not available. This indicates something has gone wrong.\");\n    }\n    Si() {\n        if (this.vi && clearInterval(this.vi), !0 !== this.Wt) {\n            var t = this.Pt;\n            t && (this.vi = setInterval(()=>{\n                this.ki();\n            }, t));\n        }\n    }\n    Ei() {\n        var t, i, e = [], r = null == (t = v.__PosthogExtensions__) || null == (t = t.rrwebPlugins) ? void 0 : t.getRecordConsolePlugin;\n        r && this.Ot && e.push(r());\n        var s = null == (i = v.__PosthogExtensions__) || null == (i = i.rrwebPlugins) ? void 0 : i.getRecordNetworkPlugin;\n        this.At && E(s) && (!wi.includes(location.hostname) || this._forceAllowLocalhostNetworkCapture ? e.push(s(Ye(this._instance.config, this.At))) : ss.info(\"NetworkCapture not started because we are on localhost.\"));\n        return e;\n    }\n    onRRwebEmit(t) {\n        var i;\n        if (this.Ii(), t && I(t)) {\n            if (t.type === ze.Meta) {\n                var e = this.di(t.data.href);\n                if (this.Pi = e, !e) return;\n                t.data.href = e;\n            } else this.Ri();\n            if (this.Ut.checkUrlTriggerConditions(()=>this.Ti(), ()=>this.Mi(), (t)=>this.Ci(t)), !this.Ut.urlBlocked || (r = t).type === ze.Custom && \"recording paused\" === r.data.tag) {\n                var r;\n                t.type === ze.FullSnapshot && this.Si(), t.type === ze.FullSnapshot && this.jt && this.Rt.triggerStatus(this.sessionId) === Wr && this.ai();\n                var s = this.xi ? this.xi.throttleMutations(t) : t;\n                if (s) {\n                    var n = function(t) {\n                        var i = t;\n                        if (i && I(i) && 6 === i.type && I(i.data) && \"rrweb/console@1\" === i.data.plugin) {\n                            i.data.payload.payload.length > 10 && (i.data.payload.payload = i.data.payload.payload.slice(0, 10), i.data.payload.payload.push(\"...[truncated]\"));\n                            for(var e = [], r = 0; r < i.data.payload.payload.length; r++)i.data.payload.payload[r] && i.data.payload.payload[r].length > 2e3 ? e.push(i.data.payload.payload[r].slice(0, 2e3) + \"...[truncated]\") : e.push(i.data.payload.payload[r]);\n                            return i.data.payload.payload = e, t;\n                        }\n                        return t;\n                    }(s);\n                    if (this.yi(n), !0 !== this.Wt || hs(n)) {\n                        if (hs(n)) {\n                            var o = n.data.payload;\n                            if (o) {\n                                var a = o.lastActivityTimestamp, l = o.threshold;\n                                n.timestamp = a + l;\n                            }\n                        }\n                        var u = null === (i = this._instance.config.session_recording.compress_events) || void 0 === i || i ? function(t) {\n                            if (Ne(t) < 1024) return t;\n                            try {\n                                if (t.type === ze.FullSnapshot) return B({}, t, {\n                                    data: us(t.data),\n                                    cv: \"2024-10\"\n                                });\n                                if (t.type === ze.IncrementalSnapshot && t.data.source === Ue.Mutation) return B({}, t, {\n                                    cv: \"2024-10\",\n                                    data: B({}, t.data, {\n                                        texts: us(t.data.texts),\n                                        attributes: us(t.data.attributes),\n                                        removes: us(t.data.removes),\n                                        adds: us(t.data.adds)\n                                    })\n                                });\n                                if (t.type === ze.IncrementalSnapshot && t.data.source === Ue.StyleSheetRule) return B({}, t, {\n                                    cv: \"2024-10\",\n                                    data: B({}, t.data, {\n                                        adds: t.data.adds ? us(t.data.adds) : void 0,\n                                        removes: t.data.removes ? us(t.data.removes) : void 0\n                                    })\n                                });\n                            } catch (t) {\n                                ss.error(\"could not compress event - will use uncompressed event\", t);\n                            }\n                            return t;\n                        }(n) : n, h = {\n                            $snapshot_bytes: Ne(u),\n                            $snapshot_data: u,\n                            $session_id: this.kt,\n                            $window_id: this.oi\n                        };\n                        this.status !== Nr ? this.Oi(h) : this.ai();\n                    }\n                }\n            }\n        }\n    }\n    Ri() {\n        if (!this._instance.config.capture_pageview && t) {\n            var i = this.di(t.location.href);\n            this.Pi !== i && (this.ii(\"$url_changed\", {\n                href: i\n            }), this.Pi = i);\n        }\n    }\n    Ii() {\n        if (this.Ht.length) {\n            var t = [\n                ...this.Ht\n            ];\n            this.Ht = [], t.forEach((t)=>{\n                Date.now() - t.enqueuedAt <= 2e3 && this.$i(t);\n            });\n        }\n    }\n    di(t) {\n        var i = this._instance.config.session_recording;\n        if (i.maskNetworkRequestFn) {\n            var e, r = {\n                url: t\n            };\n            return null == (e = r = i.maskNetworkRequestFn(r)) ? void 0 : e.url;\n        }\n        return t;\n    }\n    ai() {\n        return this.M = {\n            size: 0,\n            data: [],\n            sessionId: this.kt,\n            windowId: this.oi\n        }, this.M;\n    }\n    Zt() {\n        this.Fi && (clearTimeout(this.Fi), this.Fi = void 0);\n        var t = this.Nt, i = this.Mt, e = F(i) && i >= 0, r = F(t) && e && i < t;\n        if (this.status === Ur || this.status === qr || this.status === Nr || r) return this.Fi = setTimeout(()=>{\n            this.Zt();\n        }, 2e3), this.M;\n        this.M.data.length > 0 && je(this.M).forEach((t)=>{\n            this.Ai({\n                $snapshot_bytes: t.size,\n                $snapshot_data: t.data,\n                $session_id: t.sessionId,\n                $window_id: t.windowId,\n                $lib: \"web\",\n                $lib_version: c.LIB_VERSION\n            });\n        });\n        return this.ai();\n    }\n    Oi(t) {\n        var i, e = 2 + ((null == (i = this.M) ? void 0 : i.data.length) || 0);\n        !this.Wt && (this.M.size + t.$snapshot_bytes + e > 943718.4 || this.M.sessionId !== this.kt) && (this.M = this.Zt()), this.M.size += t.$snapshot_bytes, this.M.data.push(t.$snapshot_data), this.Fi || this.Wt || (this.Fi = setTimeout(()=>{\n            this.Zt();\n        }, 2e3));\n    }\n    Ai(t) {\n        this._instance.capture(\"$snapshot\", t, {\n            _url: this._instance.requestRouter.endpointFor(\"api\", this.si),\n            _noTruncate: !0,\n            _batchKey: \"recordings\",\n            skip_client_rate_limiting: !0\n        });\n    }\n    Ci(t) {\n        var i;\n        this.Rt.triggerStatus(this.sessionId) === Wr && (null == (i = this._instance) || null == (i = i.persistence) || i.register({\n            [\"url\" === t ? xt : Et]: this.kt\n        }), this.Zt(), this.pi(t + \"_trigger_matched\"));\n    }\n    Ti() {\n        this.Ut.urlBlocked || (this.Ut.urlBlocked = !0, clearInterval(this.vi), ss.info(\"recording paused due to URL blocker\"), this.ii(\"recording paused\", {\n            reason: \"url blocker\"\n        }));\n    }\n    Mi() {\n        this.Ut.urlBlocked && (this.Ut.urlBlocked = !1, this.ki(), this.Si(), this.ii(\"recording resumed\", {\n            reason: \"left blocked url\"\n        }), ss.info(\"recording resumed\"));\n    }\n    hi() {\n        0 !== this.qt.St.length && O(this.Xt) && (this.Xt = this._instance.on(\"eventCaptured\", (t)=>{\n            try {\n                this.qt.St.includes(t.event) && this.Ci(\"event\");\n            } catch (t) {\n                ss.error(\"Could not activate event trigger\", t);\n            }\n        }));\n    }\n    overrideLinkedFlag() {\n        this.Bt.linkedFlagSeen = !0, this.ki(), this.pi(\"linked_flag_overridden\");\n    }\n    overrideSampling() {\n        var t;\n        null == (t = this._instance.persistence) || t.register({\n            [kt]: !0\n        }), this.ki(), this.pi(\"sampling_overridden\");\n    }\n    overrideTrigger(t) {\n        this.Ci(t);\n    }\n    pi(t, i) {\n        this._instance.register_for_session({\n            $session_recording_start_reason: t\n        }), ss.info(t.replace(\"_\", \" \"), i), m([\n            \"recording_initialized\",\n            \"session_id_changed\"\n        ], t) || this.ii(t, i);\n    }\n    get sdkDebugProperties() {\n        var { sessionStartTimestamp: t } = this.It.checkAndGetSessionAndWindowId(!0);\n        return {\n            $recording_status: this.status,\n            $sdk_debug_replay_internal_buffer_length: this.M.data.length,\n            $sdk_debug_replay_internal_buffer_size: this.M.size,\n            $sdk_debug_current_session_duration: this.Mt,\n            $sdk_debug_session_start: t\n        };\n    }\n}\nvar vs = z(\"[SegmentIntegration]\");\nfunction cs(t, i) {\n    var e = t.config.segment;\n    if (!e) return i();\n    !function(t, i) {\n        var e = t.config.segment;\n        if (!e) return i();\n        var r = (e)=>{\n            var r = ()=>e.anonymousId() || Ni();\n            t.config.get_device_id = r, e.id() && (t.register({\n                distinct_id: e.id(),\n                $device_id: r()\n            }), t.persistence.set_property(At, \"identified\")), i();\n        }, s = e.user();\n        \"then\" in s && E(s.then) ? s.then((t)=>r(t)) : r(s);\n    }(t, ()=>{\n        e.register(((t)=>{\n            Promise && Promise.resolve || vs.warn(\"This browser does not have Promise support, and can not use the segment integration\");\n            var i = (i, e)=>{\n                if (!e) return i;\n                i.event.userId || i.event.anonymousId === t.get_distinct_id() || (vs.info(\"No userId set, resetting PostHog\"), t.reset()), i.event.userId && i.event.userId !== t.get_distinct_id() && (vs.info(\"UserId set, identifying with PostHog\"), t.identify(i.event.userId));\n                var r = t.calculateEventProperties(e, i.event.properties);\n                return i.event.properties = Object.assign({}, r, i.event.properties), i;\n            };\n            return {\n                name: \"PostHog JS\",\n                type: \"enrichment\",\n                version: \"1.0.0\",\n                isLoaded: ()=>!0,\n                load: ()=>Promise.resolve(),\n                track: (t)=>i(t, t.event.event),\n                page: (t)=>i(t, \"$pageview\"),\n                identify: (t)=>i(t, \"$identify\"),\n                screen: (t)=>i(t, \"$screen\")\n            };\n        })(t)).then(()=>{\n            i();\n        });\n    });\n}\nvar fs = \"posthog-js\";\nfunction ps(t, i) {\n    var { organization: e, projectId: r, prefix: s, severityAllowList: n = [\n        \"error\"\n    ] } = void 0 === i ? {} : i;\n    return (i)=>{\n        var o, a, l, u, h;\n        if (!(\"*\" === n || n.includes(i.level)) || !t.__loaded) return i;\n        i.tags || (i.tags = {});\n        var d = t.requestRouter.endpointFor(\"ui\", \"/project/\" + t.config.token + \"/person/\" + t.get_distinct_id());\n        i.tags[\"PostHog Person URL\"] = d, t.sessionRecordingStarted() && (i.tags[\"PostHog Recording URL\"] = t.get_session_replay_url({\n            withTimestamp: !0\n        }));\n        var v = (null == (o = i.exception) ? void 0 : o.values) || [], c = v.map((t)=>B({}, t, {\n                stacktrace: t.stacktrace ? B({}, t.stacktrace, {\n                    type: \"raw\",\n                    frames: (t.stacktrace.frames || []).map((t)=>B({}, t, {\n                            platform: \"web:javascript\"\n                        }))\n                }) : void 0\n            })), f = {\n            $exception_message: (null == (a = v[0]) ? void 0 : a.value) || i.message,\n            $exception_type: null == (l = v[0]) ? void 0 : l.type,\n            $exception_personURL: d,\n            $exception_level: i.level,\n            $exception_list: c,\n            $sentry_event_id: i.event_id,\n            $sentry_exception: i.exception,\n            $sentry_exception_message: (null == (u = v[0]) ? void 0 : u.value) || i.message,\n            $sentry_exception_type: null == (h = v[0]) ? void 0 : h.type,\n            $sentry_tags: i.tags\n        };\n        return e && r && (f.$sentry_url = (s || \"https://sentry.io/organizations/\") + e + \"/issues/?project=\" + r + \"&query=\" + i.event_id), t.exceptions.sendExceptionEvent(f), i;\n    };\n}\nclass gs {\n    constructor(t, i, e, r, s){\n        this.name = fs, this.setupOnce = function(n) {\n            n(ps(t, {\n                organization: i,\n                projectId: e,\n                prefix: r,\n                severityAllowList: s\n            }));\n        };\n    }\n}\nvar _s = null != t && t.location ? xi(t.location.hash, \"__posthog\") || xi(location.hash, \"state\") : null, ms = \"_postHogToolbarParams\", bs = z(\"[Toolbar]\"), ws = function(t) {\n    return t[t.UNINITIALIZED = 0] = \"UNINITIALIZED\", t[t.LOADING = 1] = \"LOADING\", t[t.LOADED = 2] = \"LOADED\", t;\n}(ws || {});\nclass ys {\n    constructor(t){\n        this.instance = t;\n    }\n    Di(t) {\n        v.ph_toolbar_state = t;\n    }\n    Li() {\n        var t;\n        return null !== (t = v.ph_toolbar_state) && void 0 !== t ? t : ws.UNINITIALIZED;\n    }\n    maybeLoadToolbar(i, e, r) {\n        if (void 0 === i && (i = void 0), void 0 === e && (e = void 0), void 0 === r && (r = void 0), !t || !o) return !1;\n        i = null != i ? i : t.location, r = null != r ? r : t.history;\n        try {\n            if (!e) {\n                try {\n                    t.localStorage.setItem(\"test\", \"test\"), t.localStorage.removeItem(\"test\");\n                } catch (t) {\n                    return !1;\n                }\n                e = null == t ? void 0 : t.localStorage;\n            }\n            var s, n = _s || xi(i.hash, \"__posthog\") || xi(i.hash, \"state\"), a = n ? X(()=>JSON.parse(atob(decodeURIComponent(n)))) || X(()=>JSON.parse(decodeURIComponent(n))) : null;\n            return a && \"ph_authorize\" === a.action ? ((s = a).source = \"url\", s && Object.keys(s).length > 0 && (a.desiredHash ? i.hash = a.desiredHash : r ? r.replaceState(r.state, \"\", i.pathname + i.search) : i.hash = \"\")) : ((s = JSON.parse(e.getItem(ms) || \"{}\")).source = \"localstorage\", delete s.userIntent), !(!s.token || this.instance.config.token !== s.token) && (this.loadToolbar(s), !0);\n        } catch (t) {\n            return !1;\n        }\n    }\n    Ni(t) {\n        var i = v.ph_load_toolbar || v.ph_load_editor;\n        !O(i) && E(i) ? i(t, this.instance) : bs.warn(\"No toolbar load function found\");\n    }\n    loadToolbar(i) {\n        var e = !(null == o || !o.getElementById(qt));\n        if (!t || e) return !1;\n        var r = \"custom\" === this.instance.requestRouter.region && this.instance.config.advanced_disable_toolbar_metrics, s = B({\n            token: this.instance.config.token\n        }, i, {\n            apiURL: this.instance.requestRouter.endpointFor(\"ui\")\n        }, r ? {\n            instrument: !1\n        } : {});\n        if (t.localStorage.setItem(ms, JSON.stringify(B({}, s, {\n            source: void 0\n        }))), this.Li() === ws.LOADED) this.Ni(s);\n        else if (this.Li() === ws.UNINITIALIZED) {\n            var n;\n            this.Di(ws.LOADING), null == (n = v.__PosthogExtensions__) || null == n.loadExternalDependency || n.loadExternalDependency(this.instance, \"toolbar\", (t)=>{\n                if (t) return bs.error(\"[Toolbar] Failed to load\", t), void this.Di(ws.UNINITIALIZED);\n                this.Di(ws.LOADED), this.Ni(s);\n            }), st(t, \"turbolinks:load\", ()=>{\n                this.Di(ws.UNINITIALIZED), this.loadToolbar(s);\n            });\n        }\n        return !0;\n    }\n    ji(t) {\n        return this.loadToolbar(t);\n    }\n    maybeLoadEditor(t, i, e) {\n        return void 0 === t && (t = void 0), void 0 === i && (i = void 0), void 0 === e && (e = void 0), this.maybeLoadToolbar(t, i, e);\n    }\n}\nvar Ss = z(\"[TracingHeaders]\");\nclass $s {\n    constructor(t){\n        this.zi = void 0, this.Ui = void 0, this.V = ()=>{\n            var t, i;\n            R(this.zi) && (null == (t = v.__PosthogExtensions__) || null == (t = t.tracingHeadersPatchFns) || t._patchXHR(this._instance.sessionManager));\n            R(this.Ui) && (null == (i = v.__PosthogExtensions__) || null == (i = i.tracingHeadersPatchFns) || i._patchFetch(this._instance.sessionManager));\n        }, this._instance = t;\n    }\n    G(t) {\n        var i, e;\n        null != (i = v.__PosthogExtensions__) && i.tracingHeadersPatchFns && t(), null == (e = v.__PosthogExtensions__) || null == e.loadExternalDependency || e.loadExternalDependency(this._instance, \"tracing-headers\", (i)=>{\n            if (i) return Ss.error(\"failed to load script\", i);\n            t();\n        });\n    }\n    startIfEnabledOrStop() {\n        var t, i;\n        this._instance.config.__add_tracing_headers ? this.G(this.V) : (null == (t = this.zi) || t.call(this), null == (i = this.Ui) || i.call(this), this.zi = void 0, this.Ui = void 0);\n    }\n}\nvar ks = z(\"[Web Vitals]\"), xs = 9e5;\nclass Es {\n    constructor(t){\n        var i;\n        this.qi = !1, this.i = !1, this.M = {\n            url: void 0,\n            metrics: [],\n            firstMetricTimestamp: void 0\n        }, this.Bi = ()=>{\n            clearTimeout(this.Hi), 0 !== this.M.metrics.length && (this._instance.capture(\"$web_vitals\", this.M.metrics.reduce((t, i)=>B({}, t, {\n                    [\"$web_vitals_\" + i.name + \"_event\"]: B({}, i),\n                    [\"$web_vitals_\" + i.name + \"_value\"]: i.value\n                }), {})), this.M = {\n                url: void 0,\n                metrics: [],\n                firstMetricTimestamp: void 0\n            });\n        }, this.Wi = (t)=>{\n            var i, e = null == (i = this._instance.sessionManager) ? void 0 : i.checkAndGetSessionAndWindowId(!0);\n            if (R(e)) ks.error(\"Could not read session ID. Dropping metrics!\");\n            else {\n                this.M = this.M || {\n                    url: void 0,\n                    metrics: [],\n                    firstMetricTimestamp: void 0\n                };\n                var r = this.Gi();\n                if (!R(r)) if (O(null == t ? void 0 : t.name) || O(null == t ? void 0 : t.value)) ks.error(\"Invalid metric received\", t);\n                else if (this.Ji && t.value >= this.Ji) ks.error(\"Ignoring metric with value >= \" + this.Ji, t);\n                else this.M.url !== r && (this.Bi(), this.Hi = setTimeout(this.Bi, this.flushToCaptureTimeoutMs)), R(this.M.url) && (this.M.url = r), this.M.firstMetricTimestamp = R(this.M.firstMetricTimestamp) ? Date.now() : this.M.firstMetricTimestamp, t.attribution && t.attribution.interactionTargetElement && (t.attribution.interactionTargetElement = void 0), this.M.metrics.push(B({}, t, {\n                    $current_url: r,\n                    $session_id: e.sessionId,\n                    $window_id: e.windowId,\n                    timestamp: Date.now()\n                })), this.M.metrics.length === this.allowedMetrics.length && this.Bi();\n            }\n        }, this.V = ()=>{\n            var t, i, e, r, s = v.__PosthogExtensions__;\n            R(s) || R(s.postHogWebVitalsCallbacks) || ({ onLCP: t, onCLS: i, onFCP: e, onINP: r } = s.postHogWebVitalsCallbacks), t && i && e && r ? (this.allowedMetrics.indexOf(\"LCP\") > -1 && t(this.Wi.bind(this)), this.allowedMetrics.indexOf(\"CLS\") > -1 && i(this.Wi.bind(this)), this.allowedMetrics.indexOf(\"FCP\") > -1 && e(this.Wi.bind(this)), this.allowedMetrics.indexOf(\"INP\") > -1 && r(this.Wi.bind(this)), this.i = !0) : ks.error(\"web vitals callbacks not loaded - not starting\");\n        }, this._instance = t, this.qi = !(null == (i = this._instance.persistence) || !i.props[vt]), this.startIfEnabled();\n    }\n    get allowedMetrics() {\n        var t, i, e = I(this._instance.config.capture_performance) ? null == (t = this._instance.config.capture_performance) ? void 0 : t.web_vitals_allowed_metrics : void 0;\n        return R(e) ? (null == (i = this._instance.persistence) ? void 0 : i.props[ft]) || [\n            \"CLS\",\n            \"FCP\",\n            \"INP\",\n            \"LCP\"\n        ] : e;\n    }\n    get flushToCaptureTimeoutMs() {\n        return (I(this._instance.config.capture_performance) ? this._instance.config.capture_performance.web_vitals_delayed_flush_ms : void 0) || 5e3;\n    }\n    get Ji() {\n        var t = I(this._instance.config.capture_performance) && F(this._instance.config.capture_performance.__web_vitals_max_value) ? this._instance.config.capture_performance.__web_vitals_max_value : xs;\n        return 0 < t && t <= 6e4 ? xs : t;\n    }\n    get isEnabled() {\n        var t = null == a ? void 0 : a.protocol;\n        if (\"http:\" !== t && \"https:\" !== t) return ks.info(\"Web Vitals are disabled on non-http/https protocols\"), !1;\n        var i = I(this._instance.config.capture_performance) ? this._instance.config.capture_performance.web_vitals : A(this._instance.config.capture_performance) ? this._instance.config.capture_performance : void 0;\n        return A(i) ? i : this.qi;\n    }\n    startIfEnabled() {\n        this.isEnabled && !this.i && (ks.info(\"enabled, starting...\"), this.G(this.V));\n    }\n    onRemoteConfig(t) {\n        var i = I(t.capturePerformance) && !!t.capturePerformance.web_vitals, e = I(t.capturePerformance) ? t.capturePerformance.web_vitals_allowed_metrics : void 0;\n        this._instance.persistence && (this._instance.persistence.register({\n            [vt]: i\n        }), this._instance.persistence.register({\n            [ft]: e\n        })), this.qi = i, this.startIfEnabled();\n    }\n    G(t) {\n        var i, e;\n        null != (i = v.__PosthogExtensions__) && i.postHogWebVitalsCallbacks && t(), null == (e = v.__PosthogExtensions__) || null == e.loadExternalDependency || e.loadExternalDependency(this._instance, \"web-vitals\", (i)=>{\n            i ? ks.error(\"failed to load script\", i) : t();\n        });\n    }\n    Gi() {\n        var i = t ? t.location.href : void 0;\n        return i || ks.error(\"Could not determine current URL\"), i;\n    }\n}\nvar Is = z(\"[Heatmaps]\");\nfunction Ps(t) {\n    return I(t) && \"clientX\" in t && \"clientY\" in t && F(t.clientX) && F(t.clientY);\n}\nclass Rs {\n    constructor(t){\n        var i;\n        this.rageclicks = new bi, this.qi = !1, this.i = !1, this.Vi = null, this.instance = t, this.qi = !(null == (i = this.instance.persistence) || !i.props[ut]);\n    }\n    get flushIntervalMilliseconds() {\n        var t = 5e3;\n        return I(this.instance.config.capture_heatmaps) && this.instance.config.capture_heatmaps.flush_interval_milliseconds && (t = this.instance.config.capture_heatmaps.flush_interval_milliseconds), t;\n    }\n    get isEnabled() {\n        return R(this.instance.config.capture_heatmaps) ? R(this.instance.config.enable_heatmaps) ? this.qi : this.instance.config.enable_heatmaps : !1 !== this.instance.config.capture_heatmaps;\n    }\n    startIfEnabled() {\n        if (this.isEnabled) {\n            if (this.i) return;\n            Is.info(\"starting...\"), this.Ki(), this.Vi = setInterval(this.Yi.bind(this), this.flushIntervalMilliseconds);\n        } else {\n            var t, i;\n            clearInterval(null !== (t = this.Vi) && void 0 !== t ? t : void 0), null == (i = this.Xi) || i.stop(), this.getAndClearBuffer();\n        }\n    }\n    onRemoteConfig(t) {\n        var i = !!t.heatmaps;\n        this.instance.persistence && this.instance.persistence.register({\n            [ut]: i\n        }), this.qi = i, this.startIfEnabled();\n    }\n    getAndClearBuffer() {\n        var t = this.M;\n        return this.M = void 0, t;\n    }\n    Qi(t) {\n        this.Zi(t.originalEvent, \"deadclick\");\n    }\n    Ki() {\n        t && o && (st(t, \"beforeunload\", this.Yi.bind(this)), st(o, \"click\", (i)=>this.Zi(i || (null == t ? void 0 : t.event)), {\n            capture: !0\n        }), st(o, \"mousemove\", (i)=>this.te(i || (null == t ? void 0 : t.event)), {\n            capture: !0\n        }), this.Xi = new re(this.instance, ie, this.Qi.bind(this)), this.Xi.startIfEnabled(), this.i = !0);\n    }\n    ie(i, e) {\n        var r = this.instance.scrollManager.scrollY(), s = this.instance.scrollManager.scrollX(), n = this.instance.scrollManager.scrollElement(), o = function(i, e, r) {\n            for(var s = i; s && Gt(s) && !Jt(s, \"body\");){\n                if (s === r) return !1;\n                if (m(e, null == t ? void 0 : t.getComputedStyle(s).position)) return !0;\n                s = ri(s);\n            }\n            return !1;\n        }(ii(i), [\n            \"fixed\",\n            \"sticky\"\n        ], n);\n        return {\n            x: i.clientX + (o ? 0 : s),\n            y: i.clientY + (o ? 0 : r),\n            target_fixed: o,\n            type: e\n        };\n    }\n    Zi(t, i) {\n        var e;\n        if (void 0 === i && (i = \"click\"), !Wt(t.target) && Ps(t)) {\n            var r = this.ie(t, i);\n            null != (e = this.rageclicks) && e.isRageClick(t.clientX, t.clientY, (new Date).getTime()) && this.ee(B({}, r, {\n                type: \"rageclick\"\n            })), this.ee(r);\n        }\n    }\n    te(t) {\n        !Wt(t.target) && Ps(t) && (clearTimeout(this.re), this.re = setTimeout(()=>{\n            this.ee(this.ie(t, \"mousemove\"));\n        }, 500));\n    }\n    ee(i) {\n        if (t) {\n            var e = t.location.href;\n            this.M = this.M || {}, this.M[e] || (this.M[e] = []), this.M[e].push(i);\n        }\n    }\n    Yi() {\n        this.M && !P(this.M) && this.instance.capture(\"$$heatmap\", {\n            $heatmap_data: this.getAndClearBuffer()\n        });\n    }\n}\nclass Ts {\n    constructor(t){\n        this._instance = t;\n    }\n    doPageView(i, e) {\n        var r, s = this.se(i, e);\n        return this.ne = {\n            pathname: null !== (r = null == t ? void 0 : t.location.pathname) && void 0 !== r ? r : \"\",\n            pageViewId: e,\n            timestamp: i\n        }, this._instance.scrollManager.resetContext(), s;\n    }\n    doPageLeave(t) {\n        var i;\n        return this.se(t, null == (i = this.ne) ? void 0 : i.pageViewId);\n    }\n    doEvent() {\n        var t;\n        return {\n            $pageview_id: null == (t = this.ne) ? void 0 : t.pageViewId\n        };\n    }\n    se(t, i) {\n        var e = this.ne;\n        if (!e) return {\n            $pageview_id: i\n        };\n        var r = {\n            $pageview_id: i,\n            $prev_pageview_id: e.pageViewId\n        }, s = this._instance.scrollManager.getContext();\n        if (s && !this._instance.config.disable_scroll_properties) {\n            var { maxScrollHeight: n, lastScrollY: o, maxScrollY: a, maxContentHeight: l, lastContentY: u, maxContentY: h } = s;\n            if (!(R(n) || R(o) || R(a) || R(l) || R(u) || R(h))) {\n                n = Math.ceil(n), o = Math.ceil(o), a = Math.ceil(a), l = Math.ceil(l), u = Math.ceil(u), h = Math.ceil(h);\n                var d = n <= 1 ? 1 : Xe(o / n, 0, 1), v = n <= 1 ? 1 : Xe(a / n, 0, 1), c = l <= 1 ? 1 : Xe(u / l, 0, 1), f = l <= 1 ? 1 : Xe(h / l, 0, 1);\n                r = V(r, {\n                    $prev_pageview_last_scroll: o,\n                    $prev_pageview_last_scroll_percentage: d,\n                    $prev_pageview_max_scroll: a,\n                    $prev_pageview_max_scroll_percentage: v,\n                    $prev_pageview_last_content: u,\n                    $prev_pageview_last_content_percentage: c,\n                    $prev_pageview_max_content: h,\n                    $prev_pageview_max_content_percentage: f\n                });\n            }\n        }\n        return e.pathname && (r.$prev_pageview_pathname = e.pathname), e.timestamp && (r.$prev_pageview_duration = (t.getTime() - e.timestamp.getTime()) / 1e3), r;\n    }\n}\nvar Ms = function(t) {\n    var i, e, r, s, n = \"\";\n    for(i = e = 0, r = (t = (t + \"\").replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\")).length, s = 0; s < r; s++){\n        var o = t.charCodeAt(s), a = null;\n        o < 128 ? e++ : a = o > 127 && o < 2048 ? String.fromCharCode(o >> 6 | 192, 63 & o | 128) : String.fromCharCode(o >> 12 | 224, o >> 6 & 63 | 128, 63 & o | 128), C(a) || (e > i && (n += t.substring(i, e)), n += a, i = e = s + 1);\n    }\n    return e > i && (n += t.substring(i, t.length)), n;\n}, Cs = !!u || !!l, Os = \"text/plain\", Fs = (t, i)=>{\n    var [e, r] = t.split(\"?\"), s = B({}, i);\n    null == r || r.split(\"&\").forEach((t)=>{\n        var [i] = t.split(\"=\");\n        delete s[i];\n    });\n    var n = Si(s);\n    return e + \"?\" + (n = n ? (r ? r + \"&\" : \"\") + n : r);\n}, As = (t, i)=>JSON.stringify(t, (t, i)=>\"bigint\" == typeof i ? i.toString() : i, i), Ds = (t)=>{\n    var { data: i, compression: e } = t;\n    if (i) {\n        if (e === g.GZipJS) {\n            var r = Ar(Dr(As(i)), {\n                mtime: 0\n            }), s = new Blob([\n                r\n            ], {\n                type: Os\n            });\n            return {\n                contentType: Os,\n                body: s,\n                estimatedSize: s.size\n            };\n        }\n        if (e === g.Base64) {\n            var n = function(t) {\n                var i, e, r, s, n, o = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\", a = 0, l = 0, u = \"\", h = [];\n                if (!t) return t;\n                t = Ms(t);\n                do {\n                    i = (n = t.charCodeAt(a++) << 16 | t.charCodeAt(a++) << 8 | t.charCodeAt(a++)) >> 18 & 63, e = n >> 12 & 63, r = n >> 6 & 63, s = 63 & n, h[l++] = o.charAt(i) + o.charAt(e) + o.charAt(r) + o.charAt(s);\n                }while (a < t.length);\n                switch(u = h.join(\"\"), t.length % 3){\n                    case 1:\n                        u = u.slice(0, -2) + \"==\";\n                        break;\n                    case 2:\n                        u = u.slice(0, -1) + \"=\";\n                }\n                return u;\n            }(As(i)), o = ((t)=>\"data=\" + encodeURIComponent(\"string\" == typeof t ? t : As(t)))(n);\n            return {\n                contentType: \"application/x-www-form-urlencoded\",\n                body: o,\n                estimatedSize: new Blob([\n                    o\n                ]).size\n            };\n        }\n        var a = As(i);\n        return {\n            contentType: \"application/json\",\n            body: a,\n            estimatedSize: new Blob([\n                a\n            ]).size\n        };\n    }\n}, Ls = [];\nl && Ls.push({\n    transport: \"fetch\",\n    method: (t)=>{\n        var i, e, { contentType: r, body: s, estimatedSize: n } = null !== (i = Ds(t)) && void 0 !== i ? i : {}, o = new Headers;\n        J(t.headers, function(t, i) {\n            o.append(i, t);\n        }), r && o.append(\"Content-Type\", r);\n        var a = t.url, u = null;\n        if (h) {\n            var d = new h;\n            u = {\n                signal: d.signal,\n                timeout: setTimeout(()=>d.abort(), t.timeout)\n            };\n        }\n        l(a, B({\n            method: (null == t ? void 0 : t.method) || \"GET\",\n            headers: o,\n            keepalive: \"POST\" === t.method && (n || 0) < 52428.8,\n            body: s,\n            signal: null == (e = u) ? void 0 : e.signal\n        }, t.fetchOptions)).then((i)=>i.text().then((e)=>{\n                var r = {\n                    statusCode: i.status,\n                    text: e\n                };\n                if (200 === i.status) try {\n                    r.json = JSON.parse(e);\n                } catch (t) {\n                    j.error(t);\n                }\n                null == t.callback || t.callback(r);\n            })).catch((i)=>{\n            j.error(i), null == t.callback || t.callback({\n                statusCode: 0,\n                text: i\n            });\n        }).finally(()=>u ? clearTimeout(u.timeout) : null);\n    }\n}), u && Ls.push({\n    transport: \"XHR\",\n    method: (t)=>{\n        var i, e = new u;\n        e.open(t.method || \"GET\", t.url, !0);\n        var { contentType: r, body: s } = null !== (i = Ds(t)) && void 0 !== i ? i : {};\n        J(t.headers, function(t, i) {\n            e.setRequestHeader(i, t);\n        }), r && e.setRequestHeader(\"Content-Type\", r), t.timeout && (e.timeout = t.timeout), e.withCredentials = !0, e.onreadystatechange = ()=>{\n            if (4 === e.readyState) {\n                var i = {\n                    statusCode: e.status,\n                    text: e.responseText\n                };\n                if (200 === e.status) try {\n                    i.json = JSON.parse(e.responseText);\n                } catch (t) {}\n                null == t.callback || t.callback(i);\n            }\n        }, e.send(s);\n    }\n}), null != n && n.sendBeacon && Ls.push({\n    transport: \"sendBeacon\",\n    method: (t)=>{\n        var i = Fs(t.url, {\n            beacon: \"1\"\n        });\n        try {\n            var e, { contentType: r, body: s } = null !== (e = Ds(t)) && void 0 !== e ? e : {}, o = \"string\" == typeof s ? new Blob([\n                s\n            ], {\n                type: r\n            }) : s;\n            n.sendBeacon(i, o);\n        } catch (t) {}\n    }\n});\nvar Ns = function(t, i) {\n    if (!function(t) {\n        try {\n            new RegExp(t);\n        } catch (t) {\n            return !1;\n        }\n        return !0;\n    }(i)) return !1;\n    try {\n        return new RegExp(i).test(t);\n    } catch (t) {\n        return !1;\n    }\n};\nfunction js(t, i, e) {\n    return As({\n        distinct_id: t,\n        userPropertiesToSet: i,\n        userPropertiesToSetOnce: e\n    });\n}\nvar zs = {\n    exact: (t, i)=>i.some((i)=>t.some((t)=>i === t)),\n    is_not: (t, i)=>i.every((i)=>t.every((t)=>i !== t)),\n    regex: (t, i)=>i.some((i)=>t.some((t)=>Ns(i, t))),\n    not_regex: (t, i)=>i.every((i)=>t.every((t)=>!Ns(i, t))),\n    icontains: (t, i)=>i.map(Us).some((i)=>t.map(Us).some((t)=>i.includes(t))),\n    not_icontains: (t, i)=>i.map(Us).every((i)=>t.map(Us).every((t)=>!i.includes(t)))\n}, Us = (t)=>t.toLowerCase(), qs = z(\"[Error tracking]\");\nclass Bs {\n    constructor(t){\n        var i, e;\n        this.oe = [], this._instance = t, this.oe = null !== (i = null == (e = this._instance.persistence) ? void 0 : e.get_property(dt)) && void 0 !== i ? i : [];\n    }\n    onRemoteConfig(t) {\n        var i, e, r = null !== (i = null == (e = t.errorTracking) ? void 0 : e.suppressionRules) && void 0 !== i ? i : [];\n        this.oe = r, this._instance.persistence && this._instance.persistence.register({\n            [dt]: this.oe\n        });\n    }\n    sendExceptionEvent(t) {\n        this.ae(t) ? qs.info(\"Skipping exception capture because a suppression rule matched\") : this._instance.capture(\"$exception\", t, {\n            _noTruncate: !0,\n            _batchKey: \"exceptionEvent\"\n        });\n    }\n    ae(t) {\n        var i = t.$exception_list;\n        if (!i || !x(i) || 0 === i.length) return !1;\n        var e = i.reduce((t, i)=>{\n            var { type: e, value: r } = i;\n            return T(e) && e.length > 0 && t.$exception_types.push(e), T(r) && r.length > 0 && t.$exception_messages.push(r), t;\n        }, {\n            $exception_types: [],\n            $exception_messages: []\n        });\n        return this.oe.some((t)=>{\n            var i = t.values.map((t)=>{\n                var i = zs[t.operator], r = x(t.value) ? t.value : [\n                    t.value\n                ], s = e[t.key];\n                return r.length > 0 && i(r, s);\n            });\n            return \"OR\" === t.type ? i.some(Boolean) : i.every(Boolean);\n        });\n    }\n}\nvar Hs = \"Mobile\", Ws = \"iOS\", Gs = \"Android\", Js = \"Tablet\", Vs = Gs + \" \" + Js, Ks = \"iPad\", Ys = \"Apple\", Xs = Ys + \" Watch\", Qs = \"Safari\", Zs = \"BlackBerry\", tn = \"Samsung\", en = tn + \"Browser\", rn = tn + \" Internet\", sn = \"Chrome\", nn = sn + \" OS\", on = sn + \" \" + Ws, an = \"Internet Explorer\", ln = an + \" \" + Hs, un = \"Opera\", hn = un + \" Mini\", dn = \"Edge\", vn = \"Microsoft \" + dn, cn = \"Firefox\", fn = cn + \" \" + Ws, pn = \"Nintendo\", gn = \"PlayStation\", _n = \"Xbox\", mn = Gs + \" \" + Hs, bn = Hs + \" \" + Qs, wn = \"Windows\", yn = wn + \" Phone\", Sn = \"Nokia\", $n = \"Ouya\", kn = \"Generic\", xn = kn + \" \" + Hs.toLowerCase(), En = kn + \" \" + Js.toLowerCase(), In = \"Konqueror\", Pn = \"(\\\\d+(\\\\.\\\\d+)?)\", Rn = new RegExp(\"Version/\" + Pn), Tn = new RegExp(_n, \"i\"), Mn = new RegExp(gn + \" \\\\w+\", \"i\"), Cn = new RegExp(pn + \" \\\\w+\", \"i\"), On = new RegExp(Zs + \"|PlayBook|BB10\", \"i\"), Fn = {\n    \"NT3.51\": \"NT 3.11\",\n    \"NT4.0\": \"NT 4.0\",\n    \"5.0\": \"2000\",\n    5.1: \"XP\",\n    5.2: \"XP\",\n    \"6.0\": \"Vista\",\n    6.1: \"7\",\n    6.2: \"8\",\n    6.3: \"8.1\",\n    6.4: \"10\",\n    \"10.0\": \"10\"\n};\nvar An = (t, i)=>i && m(i, Ys) || function(t) {\n        return m(t, Qs) && !m(t, sn) && !m(t, Gs);\n    }(t), Dn = function(t, i) {\n    return i = i || \"\", m(t, \" OPR/\") && m(t, \"Mini\") ? hn : m(t, \" OPR/\") ? un : On.test(t) ? Zs : m(t, \"IE\" + Hs) || m(t, \"WPDesktop\") ? ln : m(t, en) ? rn : m(t, dn) || m(t, \"Edg/\") ? vn : m(t, \"FBIOS\") ? \"Facebook \" + Hs : m(t, \"UCWEB\") || m(t, \"UCBrowser\") ? \"UC Browser\" : m(t, \"CriOS\") ? on : m(t, \"CrMo\") || m(t, sn) ? sn : m(t, Gs) && m(t, Qs) ? mn : m(t, \"FxiOS\") ? fn : m(t.toLowerCase(), In.toLowerCase()) ? In : An(t, i) ? m(t, Hs) ? bn : Qs : m(t, cn) ? cn : m(t, \"MSIE\") || m(t, \"Trident/\") ? an : m(t, \"Gecko\") ? cn : \"\";\n}, Ln = {\n    [ln]: [\n        new RegExp(\"rv:\" + Pn)\n    ],\n    [vn]: [\n        new RegExp(dn + \"?\\\\/\" + Pn)\n    ],\n    [sn]: [\n        new RegExp(\"(\" + sn + \"|CrMo)\\\\/\" + Pn)\n    ],\n    [on]: [\n        new RegExp(\"CriOS\\\\/\" + Pn)\n    ],\n    \"UC Browser\": [\n        new RegExp(\"(UCBrowser|UCWEB)\\\\/\" + Pn)\n    ],\n    [Qs]: [\n        Rn\n    ],\n    [bn]: [\n        Rn\n    ],\n    [un]: [\n        new RegExp(\"(Opera|OPR)\\\\/\" + Pn)\n    ],\n    [cn]: [\n        new RegExp(cn + \"\\\\/\" + Pn)\n    ],\n    [fn]: [\n        new RegExp(\"FxiOS\\\\/\" + Pn)\n    ],\n    [In]: [\n        new RegExp(\"Konqueror[:/]?\" + Pn, \"i\")\n    ],\n    [Zs]: [\n        new RegExp(Zs + \" \" + Pn),\n        Rn\n    ],\n    [mn]: [\n        new RegExp(\"android\\\\s\" + Pn, \"i\")\n    ],\n    [rn]: [\n        new RegExp(en + \"\\\\/\" + Pn)\n    ],\n    [an]: [\n        new RegExp(\"(rv:|MSIE )\" + Pn)\n    ],\n    Mozilla: [\n        new RegExp(\"rv:\" + Pn)\n    ]\n}, Nn = function(t, i) {\n    var e = Dn(t, i), r = Ln[e];\n    if (R(r)) return null;\n    for(var s = 0; s < r.length; s++){\n        var n = r[s], o = t.match(n);\n        if (o) return parseFloat(o[o.length - 2]);\n    }\n    return null;\n}, jn = [\n    [\n        new RegExp(_n + \"; \" + _n + \" (.*?)[);]\", \"i\"),\n        (t)=>[\n                _n,\n                t && t[1] || \"\"\n            ]\n    ],\n    [\n        new RegExp(pn, \"i\"),\n        [\n            pn,\n            \"\"\n        ]\n    ],\n    [\n        new RegExp(gn, \"i\"),\n        [\n            gn,\n            \"\"\n        ]\n    ],\n    [\n        On,\n        [\n            Zs,\n            \"\"\n        ]\n    ],\n    [\n        new RegExp(wn, \"i\"),\n        (t, i)=>{\n            if (/Phone/.test(i) || /WPDesktop/.test(i)) return [\n                yn,\n                \"\"\n            ];\n            if (new RegExp(Hs).test(i) && !/IEMobile\\b/.test(i)) return [\n                wn + \" \" + Hs,\n                \"\"\n            ];\n            var e = /Windows NT ([0-9.]+)/i.exec(i);\n            if (e && e[1]) {\n                var r = e[1], s = Fn[r] || \"\";\n                return /arm/i.test(i) && (s = \"RT\"), [\n                    wn,\n                    s\n                ];\n            }\n            return [\n                wn,\n                \"\"\n            ];\n        }\n    ],\n    [\n        /((iPhone|iPad|iPod).*?OS (\\d+)_(\\d+)_?(\\d+)?|iPhone)/,\n        (t)=>{\n            if (t && t[3]) {\n                var i = [\n                    t[3],\n                    t[4],\n                    t[5] || \"0\"\n                ];\n                return [\n                    Ws,\n                    i.join(\".\")\n                ];\n            }\n            return [\n                Ws,\n                \"\"\n            ];\n        }\n    ],\n    [\n        /(watch.*\\/(\\d+\\.\\d+\\.\\d+)|watch os,(\\d+\\.\\d+),)/i,\n        (t)=>{\n            var i = \"\";\n            return t && t.length >= 3 && (i = R(t[2]) ? t[3] : t[2]), [\n                \"watchOS\",\n                i\n            ];\n        }\n    ],\n    [\n        new RegExp(\"(\" + Gs + \" (\\\\d+)\\\\.(\\\\d+)\\\\.?(\\\\d+)?|\" + Gs + \")\", \"i\"),\n        (t)=>{\n            if (t && t[2]) {\n                var i = [\n                    t[2],\n                    t[3],\n                    t[4] || \"0\"\n                ];\n                return [\n                    Gs,\n                    i.join(\".\")\n                ];\n            }\n            return [\n                Gs,\n                \"\"\n            ];\n        }\n    ],\n    [\n        /Mac OS X (\\d+)[_.](\\d+)[_.]?(\\d+)?/i,\n        (t)=>{\n            var i = [\n                \"Mac OS X\",\n                \"\"\n            ];\n            if (t && t[1]) {\n                var e = [\n                    t[1],\n                    t[2],\n                    t[3] || \"0\"\n                ];\n                i[1] = e.join(\".\");\n            }\n            return i;\n        }\n    ],\n    [\n        /Mac/i,\n        [\n            \"Mac OS X\",\n            \"\"\n        ]\n    ],\n    [\n        /CrOS/,\n        [\n            nn,\n            \"\"\n        ]\n    ],\n    [\n        /Linux|debian/i,\n        [\n            \"Linux\",\n            \"\"\n        ]\n    ]\n], zn = function(t) {\n    return Cn.test(t) ? pn : Mn.test(t) ? gn : Tn.test(t) ? _n : new RegExp($n, \"i\").test(t) ? $n : new RegExp(\"(\" + yn + \"|WPDesktop)\", \"i\").test(t) ? yn : /iPad/.test(t) ? Ks : /iPod/.test(t) ? \"iPod Touch\" : /iPhone/.test(t) ? \"iPhone\" : /(watch)(?: ?os[,/]|\\d,\\d\\/)[\\d.]+/i.test(t) ? Xs : On.test(t) ? Zs : /(kobo)\\s(ereader|touch)/i.test(t) ? \"Kobo\" : new RegExp(Sn, \"i\").test(t) ? Sn : /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\\))/i.test(t) || /(kf[a-z]+)( bui|\\)).+silk\\//i.test(t) ? \"Kindle Fire\" : /(Android|ZTE)/i.test(t) ? !new RegExp(Hs).test(t) || /(9138B|TB782B|Nexus [97]|pixel c|HUAWEISHT|BTV|noble nook|smart ultra 6)/i.test(t) ? /pixel[\\daxl ]{1,6}/i.test(t) && !/pixel c/i.test(t) || /(huaweimed-al00|tah-|APA|SM-G92|i980|zte|U304AA)/i.test(t) || /lmy47v/i.test(t) && !/QTAQZ3/i.test(t) ? Gs : Vs : Gs : new RegExp(\"(pda|\" + Hs + \")\", \"i\").test(t) ? xn : new RegExp(Js, \"i\").test(t) && !new RegExp(Js + \" pc\", \"i\").test(t) ? En : \"\";\n}, Un = \"https?://(.*)\", qn = [\n    \"gclid\",\n    \"gclsrc\",\n    \"dclid\",\n    \"gbraid\",\n    \"wbraid\",\n    \"fbclid\",\n    \"msclkid\",\n    \"twclid\",\n    \"li_fat_id\",\n    \"igshid\",\n    \"ttclid\",\n    \"rdt_cid\",\n    \"epik\",\n    \"qclid\",\n    \"sccid\",\n    \"irclid\",\n    \"_kx\"\n], Bn = K([\n    \"utm_source\",\n    \"utm_medium\",\n    \"utm_campaign\",\n    \"utm_content\",\n    \"utm_term\",\n    \"gad_source\",\n    \"mc_cid\"\n], qn), Hn = \"<masked>\";\nfunction Wn(t, i, e) {\n    if (!o) return {};\n    var r = i ? K([], qn, e || []) : [];\n    return Gn(ki(o.URL, r, Hn), t);\n}\nfunction Gn(t, i) {\n    var e = Bn.concat(i || []), r = {};\n    return J(e, function(i) {\n        var e = $i(t, i);\n        r[i] = e || null;\n    }), r;\n}\nfunction Jn(t) {\n    var i = function(t) {\n        return t ? 0 === t.search(Un + \"google.([^/?]*)\") ? \"google\" : 0 === t.search(Un + \"bing.com\") ? \"bing\" : 0 === t.search(Un + \"yahoo.com\") ? \"yahoo\" : 0 === t.search(Un + \"duckduckgo.com\") ? \"duckduckgo\" : null : null;\n    }(t), e = \"yahoo\" != i ? \"q\" : \"p\", r = {};\n    if (!C(i)) {\n        r.$search_engine = i;\n        var s = o ? $i(o.referrer, e) : \"\";\n        s.length && (r.ph_keyword = s);\n    }\n    return r;\n}\nfunction Vn() {\n    return navigator.language || navigator.userLanguage;\n}\nfunction Kn() {\n    return (null == o ? void 0 : o.referrer) || \"$direct\";\n}\nfunction Yn(t, i) {\n    var e = t ? K([], qn, i || []) : [], r = null == a ? void 0 : a.href.substring(0, 1e3);\n    return {\n        r: Kn().substring(0, 1e3),\n        u: r ? ki(r, e, Hn) : void 0\n    };\n}\nfunction Xn(t) {\n    var i, { r: e, u: r } = t, s = {\n        $referrer: e,\n        $referring_domain: null == e ? void 0 : \"$direct\" == e ? \"$direct\" : null == (i = yi(e)) ? void 0 : i.host\n    };\n    if (r) {\n        s.$current_url = r;\n        var n = yi(r);\n        s.$host = null == n ? void 0 : n.host, s.$pathname = null == n ? void 0 : n.pathname;\n        var o = Gn(r);\n        V(s, o);\n    }\n    if (e) {\n        var a = Jn(e);\n        V(s, a);\n    }\n    return s;\n}\nfunction Qn() {\n    try {\n        return Intl.DateTimeFormat().resolvedOptions().timeZone;\n    } catch (t) {\n        return;\n    }\n}\nfunction Zn() {\n    try {\n        return (new Date).getTimezoneOffset();\n    } catch (t) {\n        return;\n    }\n}\nfunction to(i, e) {\n    if (!d) return {};\n    var r, s, n, o = i ? K([], qn, e || []) : [], [l, u] = function(t) {\n        for(var i = 0; i < jn.length; i++){\n            var [e, r] = jn[i], s = e.exec(t), n = s && (E(r) ? r(s, t) : r);\n            if (n) return n;\n        }\n        return [\n            \"\",\n            \"\"\n        ];\n    }(d);\n    return V(Z({\n        $os: l,\n        $os_version: u,\n        $browser: Dn(d, navigator.vendor),\n        $device: zn(d),\n        $device_type: (s = d, n = zn(s), n === Ks || n === Vs || \"Kobo\" === n || \"Kindle Fire\" === n || n === En ? Js : n === pn || n === _n || n === gn || n === $n ? \"Console\" : n === Xs ? \"Wearable\" : n ? Hs : \"Desktop\"),\n        $timezone: Qn(),\n        $timezone_offset: Zn()\n    }), {\n        $current_url: ki(null == a ? void 0 : a.href, o, Hn),\n        $host: null == a ? void 0 : a.host,\n        $pathname: null == a ? void 0 : a.pathname,\n        $raw_user_agent: d.length > 1e3 ? d.substring(0, 997) + \"...\" : d,\n        $browser_version: Nn(d, navigator.vendor),\n        $browser_language: Vn(),\n        $browser_language_prefix: (r = Vn(), \"string\" == typeof r ? r.split(\"-\")[0] : void 0),\n        $screen_height: null == t ? void 0 : t.screen.height,\n        $screen_width: null == t ? void 0 : t.screen.width,\n        $viewport_height: null == t ? void 0 : t.innerHeight,\n        $viewport_width: null == t ? void 0 : t.innerWidth,\n        $lib: \"web\",\n        $lib_version: c.LIB_VERSION,\n        $insert_id: Math.random().toString(36).substring(2, 10) + Math.random().toString(36).substring(2, 10),\n        $time: Date.now() / 1e3\n    });\n}\nvar io = z(\"[FeatureFlags]\"), eo = \"$active_feature_flags\", ro = \"$override_feature_flags\", so = \"$feature_flag_payloads\", no = \"$override_feature_flag_payloads\", oo = \"$feature_flag_request_id\", ao = (t)=>{\n    var i = {};\n    for (var [e, r] of Y(t || {}))r && (i[e] = r);\n    return i;\n}, lo = (t)=>{\n    var i = t.flags;\n    return i ? (t.featureFlags = Object.fromEntries(Object.keys(i).map((t)=>{\n        var e;\n        return [\n            t,\n            null !== (e = i[t].variant) && void 0 !== e ? e : i[t].enabled\n        ];\n    })), t.featureFlagPayloads = Object.fromEntries(Object.keys(i).filter((t)=>i[t].enabled).filter((t)=>{\n        var e;\n        return null == (e = i[t].metadata) ? void 0 : e.payload;\n    }).map((t)=>{\n        var e;\n        return [\n            t,\n            null == (e = i[t].metadata) ? void 0 : e.payload\n        ];\n    }))) : io.warn(\"Using an older version of the feature flags endpoint. Please upgrade your PostHog server to the latest version\"), t;\n}, uo = function(t) {\n    return t.FeatureFlags = \"feature_flags\", t.Recordings = \"recordings\", t;\n}({});\nclass ho {\n    constructor(t){\n        this.le = !1, this.ue = !1, this.he = !1, this.de = !1, this.ve = !1, this.ce = !1, this.fe = !1, this._instance = t, this.featureFlagEventHandlers = [];\n    }\n    decide() {\n        if (this._instance.config.__preview_remote_config) this.ce = !0;\n        else {\n            var t = !this.pe && (this._instance.config.advanced_disable_feature_flags || this._instance.config.advanced_disable_feature_flags_on_first_load);\n            this.ge({\n                disableFlags: t\n            });\n        }\n    }\n    get hasLoadedFlags() {\n        return this.ue;\n    }\n    getFlags() {\n        return Object.keys(this.getFlagVariants());\n    }\n    getFlagsWithDetails() {\n        var t = this._instance.get_property(Rt), i = this._instance.get_property(ro), e = this._instance.get_property(no);\n        if (!e && !i) return t || {};\n        var r = V({}, t || {}), s = [\n            ...new Set([\n                ...Object.keys(e || {}),\n                ...Object.keys(i || {})\n            ])\n        ];\n        for (var n of s){\n            var o, a, l = r[n], u = null == i ? void 0 : i[n], h = R(u) ? null !== (o = null == l ? void 0 : l.enabled) && void 0 !== o && o : !!u, d = R(u) ? l.variant : \"string\" == typeof u ? u : void 0, v = null == e ? void 0 : e[n], c = B({}, l, {\n                enabled: h,\n                variant: h ? null != d ? d : null == l ? void 0 : l.variant : void 0\n            });\n            if (h !== (null == l ? void 0 : l.enabled) && (c.original_enabled = null == l ? void 0 : l.enabled), d !== (null == l ? void 0 : l.variant) && (c.original_variant = null == l ? void 0 : l.variant), v) c.metadata = B({}, null == l ? void 0 : l.metadata, {\n                payload: v,\n                original_payload: null == l || null == (a = l.metadata) ? void 0 : a.payload\n            });\n            r[n] = c;\n        }\n        return this.le || (io.warn(\" Overriding feature flag details!\", {\n            flagDetails: t,\n            overriddenPayloads: e,\n            finalDetails: r\n        }), this.le = !0), r;\n    }\n    getFlagVariants() {\n        var t = this._instance.get_property(It), i = this._instance.get_property(ro);\n        if (!i) return t || {};\n        for(var e = V({}, t), r = Object.keys(i), s = 0; s < r.length; s++)e[r[s]] = i[r[s]];\n        return this.le || (io.warn(\" Overriding feature flags!\", {\n            enabledFlags: t,\n            overriddenFlags: i,\n            finalFlags: e\n        }), this.le = !0), e;\n    }\n    getFlagPayloads() {\n        var t = this._instance.get_property(so), i = this._instance.get_property(no);\n        if (!i) return t || {};\n        for(var e = V({}, t || {}), r = Object.keys(i), s = 0; s < r.length; s++)e[r[s]] = i[r[s]];\n        return this.le || (io.warn(\" Overriding feature flag payloads!\", {\n            flagPayloads: t,\n            overriddenPayloads: i,\n            finalPayloads: e\n        }), this.le = !0), e;\n    }\n    reloadFeatureFlags() {\n        this.de || this._instance.config.advanced_disable_feature_flags || this.pe || (this.pe = setTimeout(()=>{\n            this.ge();\n        }, 5));\n    }\n    _e() {\n        clearTimeout(this.pe), this.pe = void 0;\n    }\n    ensureFlagsLoaded() {\n        this.ue || this.he || this.pe || this.reloadFeatureFlags();\n    }\n    setAnonymousDistinctId(t) {\n        this.$anon_distinct_id = t;\n    }\n    setReloadingPaused(t) {\n        this.de = t;\n    }\n    ge(t) {\n        var i;\n        if (this._e(), !this._instance.config.advanced_disable_decide) if (this.he) this.ve = !0;\n        else {\n            var e = {\n                token: this._instance.config.token,\n                distinct_id: this._instance.get_distinct_id(),\n                groups: this._instance.getGroups(),\n                $anon_distinct_id: this.$anon_distinct_id,\n                person_properties: B({}, (null == (i = this._instance.persistence) ? void 0 : i.get_initial_props()) || {}, this._instance.get_property(Tt) || {}),\n                group_properties: this._instance.get_property(Mt)\n            };\n            (null != t && t.disableFlags || this._instance.config.advanced_disable_feature_flags) && (e.disable_flags = !0);\n            var r = this._instance.config.__preview_flags_v2 && this._instance.config.__preview_remote_config;\n            r && (e.timezone = Qn()), this.he = !0, this._instance.me({\n                method: \"POST\",\n                url: this._instance.requestRouter.endpointFor(\"api\", r ? \"/flags/?v=2\" : \"/decide/?v=4\"),\n                data: e,\n                compression: this._instance.config.disable_compression ? void 0 : g.Base64,\n                timeout: this._instance.config.feature_flag_request_timeout_ms,\n                callback: (t)=>{\n                    var i, r, s = !0;\n                    (200 === t.statusCode && (this.ve || (this.$anon_distinct_id = void 0), s = !1), this.he = !1, this.ce) || (this.ce = !0, this._instance.be(null !== (r = t.json) && void 0 !== r ? r : {}));\n                    if (!e.disable_flags || this.ve) if (this.fe = !s, t.json && null != (i = t.json.quotaLimited) && i.includes(uo.FeatureFlags)) io.warn(\"You have hit your feature flags quota limit, and will not be able to load feature flags until the quota is reset.  Please visit https://posthog.com/docs/billing/limits-alerts to learn more.\");\n                    else {\n                        var n;\n                        if (!e.disable_flags) this.receivedFeatureFlags(null !== (n = t.json) && void 0 !== n ? n : {}, s);\n                        this.ve && (this.ve = !1, this.ge());\n                    }\n                }\n            });\n        }\n    }\n    getFeatureFlag(t, i) {\n        if (void 0 === i && (i = {}), this.ue || this.getFlags() && this.getFlags().length > 0) {\n            var e = this.getFlagVariants()[t], r = \"\" + e, s = this._instance.get_property(oo) || void 0, n = this._instance.get_property(Ft) || {};\n            if ((i.send_event || !(\"send_event\" in i)) && (!(t in n) || !n[t].includes(r))) {\n                var o, a, l, u, h, d, v, c, f;\n                x(n[t]) ? n[t].push(r) : n[t] = [\n                    r\n                ], null == (o = this._instance.persistence) || o.register({\n                    [Ft]: n\n                });\n                var p = this.getFeatureFlagDetails(t), g = {\n                    $feature_flag: t,\n                    $feature_flag_response: e,\n                    $feature_flag_payload: this.getFeatureFlagPayload(t) || null,\n                    $feature_flag_request_id: s,\n                    $feature_flag_bootstrapped_response: (null == (a = this._instance.config.bootstrap) || null == (a = a.featureFlags) ? void 0 : a[t]) || null,\n                    $feature_flag_bootstrapped_payload: (null == (l = this._instance.config.bootstrap) || null == (l = l.featureFlagPayloads) ? void 0 : l[t]) || null,\n                    $used_bootstrap_value: !this.fe\n                };\n                R(null == p || null == (u = p.metadata) ? void 0 : u.version) || (g.$feature_flag_version = p.metadata.version);\n                var _, m = null !== (h = null == p || null == (d = p.reason) ? void 0 : d.description) && void 0 !== h ? h : null == p || null == (v = p.reason) ? void 0 : v.code;\n                if (m && (g.$feature_flag_reason = m), null != p && null != (c = p.metadata) && c.id && (g.$feature_flag_id = p.metadata.id), R(null == p ? void 0 : p.original_variant) && R(null == p ? void 0 : p.original_enabled) || (g.$feature_flag_original_response = R(p.original_variant) ? p.original_enabled : p.original_variant), null != p && null != (f = p.metadata) && f.original_payload) g.$feature_flag_original_payload = null == p || null == (_ = p.metadata) ? void 0 : _.original_payload;\n                this._instance.capture(\"$feature_flag_called\", g);\n            }\n            return e;\n        }\n        io.warn('getFeatureFlag for key \"' + t + \"\\\" failed. Feature flags didn't load in time.\");\n    }\n    getFeatureFlagDetails(t) {\n        return this.getFlagsWithDetails()[t];\n    }\n    getFeatureFlagPayload(t) {\n        return this.getFlagPayloads()[t];\n    }\n    getRemoteConfigPayload(t, i) {\n        var e = this._instance.config.token;\n        this._instance.me({\n            method: \"POST\",\n            url: this._instance.requestRouter.endpointFor(\"api\", \"/decide/?v=4\"),\n            data: {\n                distinct_id: this._instance.get_distinct_id(),\n                token: e\n            },\n            compression: this._instance.config.disable_compression ? void 0 : g.Base64,\n            timeout: this._instance.config.feature_flag_request_timeout_ms,\n            callback: (e)=>{\n                var r, s = null == (r = e.json) ? void 0 : r.featureFlagPayloads;\n                i((null == s ? void 0 : s[t]) || void 0);\n            }\n        });\n    }\n    isFeatureEnabled(t, i) {\n        if (void 0 === i && (i = {}), this.ue || this.getFlags() && this.getFlags().length > 0) return !!this.getFeatureFlag(t, i);\n        io.warn('isFeatureEnabled for key \"' + t + \"\\\" failed. Feature flags didn't load in time.\");\n    }\n    addFeatureFlagsHandler(t) {\n        this.featureFlagEventHandlers.push(t);\n    }\n    removeFeatureFlagsHandler(t) {\n        this.featureFlagEventHandlers = this.featureFlagEventHandlers.filter((i)=>i !== t);\n    }\n    receivedFeatureFlags(t, i) {\n        if (this._instance.persistence) {\n            this.ue = !0;\n            var e = this.getFlagVariants(), r = this.getFlagPayloads(), s = this.getFlagsWithDetails();\n            !function(t, i, e, r, s) {\n                void 0 === e && (e = {}), void 0 === r && (r = {}), void 0 === s && (s = {});\n                var n = lo(t), o = n.flags, a = n.featureFlags, l = n.featureFlagPayloads;\n                if (a) {\n                    var u = t.requestId;\n                    if (x(a)) {\n                        io.warn(\"v1 of the feature flags endpoint is deprecated. Please use the latest version.\");\n                        var h = {};\n                        if (a) for(var d = 0; d < a.length; d++)h[a[d]] = !0;\n                        i && i.register({\n                            [eo]: a,\n                            [It]: h\n                        });\n                    } else {\n                        var v = a, c = l, f = o;\n                        t.errorsWhileComputingFlags && (v = B({}, e, v), c = B({}, r, c), f = B({}, s, f)), i && i.register(B({\n                            [eo]: Object.keys(ao(v)),\n                            [It]: v || {},\n                            [so]: c || {},\n                            [Rt]: f || {}\n                        }, u ? {\n                            [oo]: u\n                        } : {}));\n                    }\n                }\n            }(t, this._instance.persistence, e, r, s), this.we(i);\n        }\n    }\n    override(t, i) {\n        void 0 === i && (i = !1), io.warn(\"override is deprecated. Please use overrideFeatureFlags instead.\"), this.overrideFeatureFlags({\n            flags: t,\n            suppressWarning: i\n        });\n    }\n    overrideFeatureFlags(t) {\n        if (!this._instance.__loaded || !this._instance.persistence) return io.uninitializedWarning(\"posthog.featureFlags.overrideFeatureFlags\");\n        if (!1 === t) return this._instance.persistence.unregister(ro), this._instance.persistence.unregister(no), void this.we();\n        if (t && \"object\" == typeof t && (\"flags\" in t || \"payloads\" in t)) {\n            var i, e = t;\n            if (this.le = Boolean(null !== (i = e.suppressWarning) && void 0 !== i && i), \"flags\" in e) {\n                if (!1 === e.flags) this._instance.persistence.unregister(ro);\n                else if (e.flags) if (x(e.flags)) {\n                    for(var r = {}, s = 0; s < e.flags.length; s++)r[e.flags[s]] = !0;\n                    this._instance.persistence.register({\n                        [ro]: r\n                    });\n                } else this._instance.persistence.register({\n                    [ro]: e.flags\n                });\n            }\n            return \"payloads\" in e && (!1 === e.payloads ? this._instance.persistence.unregister(no) : e.payloads && this._instance.persistence.register({\n                [no]: e.payloads\n            })), void this.we();\n        }\n        this.we();\n    }\n    onFeatureFlags(t) {\n        if (this.addFeatureFlagsHandler(t), this.ue) {\n            var { flags: i, flagVariants: e } = this.ye();\n            t(i, e);\n        }\n        return ()=>this.removeFeatureFlagsHandler(t);\n    }\n    updateEarlyAccessFeatureEnrollment(t, i) {\n        var e, r = (this._instance.get_property(Pt) || []).find((i)=>i.flagKey === t), s = {\n            [\"$feature_enrollment/\" + t]: i\n        }, n = {\n            $feature_flag: t,\n            $feature_enrollment: i,\n            $set: s\n        };\n        r && (n.$early_access_feature_name = r.name), this._instance.capture(\"$feature_enrollment_update\", n), this.setPersonPropertiesForFlags(s, !1);\n        var o = B({}, this.getFlagVariants(), {\n            [t]: i\n        });\n        null == (e = this._instance.persistence) || e.register({\n            [eo]: Object.keys(ao(o)),\n            [It]: o\n        }), this.we();\n    }\n    getEarlyAccessFeatures(t, i, e) {\n        void 0 === i && (i = !1);\n        var r = this._instance.get_property(Pt), s = e ? \"&\" + e.map((t)=>\"stage=\" + t).join(\"&\") : \"\";\n        if (r && !i) return t(r);\n        this._instance.me({\n            url: this._instance.requestRouter.endpointFor(\"api\", \"/api/early_access_features/?token=\" + this._instance.config.token + s),\n            method: \"GET\",\n            callback: (i)=>{\n                var e;\n                if (i.json) {\n                    var r = i.json.earlyAccessFeatures;\n                    return null == (e = this._instance.persistence) || e.register({\n                        [Pt]: r\n                    }), t(r);\n                }\n            }\n        });\n    }\n    ye() {\n        var t = this.getFlags(), i = this.getFlagVariants();\n        return {\n            flags: t.filter((t)=>i[t]),\n            flagVariants: Object.keys(i).filter((t)=>i[t]).reduce((t, e)=>(t[e] = i[e], t), {})\n        };\n    }\n    we(t) {\n        var { flags: i, flagVariants: e } = this.ye();\n        this.featureFlagEventHandlers.forEach((r)=>r(i, e, {\n                errorsLoading: t\n            }));\n    }\n    setPersonPropertiesForFlags(t, i) {\n        void 0 === i && (i = !0);\n        var e = this._instance.get_property(Tt) || {};\n        this._instance.register({\n            [Tt]: B({}, e, t)\n        }), i && this._instance.reloadFeatureFlags();\n    }\n    resetPersonPropertiesForFlags() {\n        this._instance.unregister(Tt);\n    }\n    setGroupPropertiesForFlags(t, i) {\n        void 0 === i && (i = !0);\n        var e = this._instance.get_property(Mt) || {};\n        0 !== Object.keys(e).length && Object.keys(e).forEach((i)=>{\n            e[i] = B({}, e[i], t[i]), delete t[i];\n        }), this._instance.register({\n            [Mt]: B({}, e, t)\n        }), i && this._instance.reloadFeatureFlags();\n    }\n    resetGroupPropertiesForFlags(t) {\n        if (t) {\n            var i = this._instance.get_property(Mt) || {};\n            this._instance.register({\n                [Mt]: B({}, i, {\n                    [t]: {}\n                })\n            });\n        } else this._instance.unregister(Mt);\n    }\n}\nvar vo = [\n    \"cookie\",\n    \"localstorage\",\n    \"localstorage+cookie\",\n    \"sessionstorage\",\n    \"memory\"\n];\nclass co {\n    constructor(t){\n        this.S = t, this.props = {}, this.Se = !1, this.$e = ((t)=>{\n            var i = \"\";\n            return t.token && (i = t.token.replace(/\\+/g, \"PL\").replace(/\\//g, \"SL\").replace(/=/g, \"EQ\")), t.persistence_name ? \"ph_\" + t.persistence_name : \"ph_\" + i + \"_posthog\";\n        })(t), this.q = this.ke(t), this.load(), t.debug && j.info(\"Persistence loaded\", t.persistence, B({}, this.props)), this.update_config(t, t), this.save();\n    }\n    ke(t) {\n        -1 === vo.indexOf(t.persistence.toLowerCase()) && (j.critical(\"Unknown persistence type \" + t.persistence + \"; falling back to localStorage+cookie\"), t.persistence = \"localStorage+cookie\");\n        var i = t.persistence.toLowerCase();\n        return \"localstorage\" === i && Wi.O() ? Wi : \"localstorage+cookie\" === i && Ji.O() ? Ji : \"sessionstorage\" === i && Xi.O() ? Xi : \"memory\" === i ? Ki : \"cookie\" === i ? Bi : Ji.O() ? Ji : Bi;\n    }\n    properties() {\n        var t = {};\n        return J(this.props, function(i, e) {\n            if (e === It && I(i)) for(var r = Object.keys(i), n = 0; n < r.length; n++)t[\"$feature/\" + r[n]] = i[r[n]];\n            else a = e, l = !1, (C(o = Ht) ? l : s && o.indexOf === s ? -1 != o.indexOf(a) : (J(o, function(t) {\n                if (l || (l = t === a)) return W;\n            }), l)) || (t[e] = i);\n            var o, a, l;\n        }), t;\n    }\n    load() {\n        if (!this.xe) {\n            var t = this.q.D(this.$e);\n            t && (this.props = V({}, t));\n        }\n    }\n    save() {\n        this.xe || this.q.L(this.$e, this.props, this.Ee, this.Ie, this.Pe, this.S.debug);\n    }\n    remove() {\n        this.q.N(this.$e, !1), this.q.N(this.$e, !0);\n    }\n    clear() {\n        this.remove(), this.props = {};\n    }\n    register_once(t, i, e) {\n        if (I(t)) {\n            R(i) && (i = \"None\"), this.Ee = R(e) ? this.Re : e;\n            var r = !1;\n            if (J(t, (t, e)=>{\n                this.props.hasOwnProperty(e) && this.props[e] !== i || (this.props[e] = t, r = !0);\n            }), r) return this.save(), !0;\n        }\n        return !1;\n    }\n    register(t, i) {\n        if (I(t)) {\n            this.Ee = R(i) ? this.Re : i;\n            var e = !1;\n            if (J(t, (i, r)=>{\n                t.hasOwnProperty(r) && this.props[r] !== i && (this.props[r] = i, e = !0);\n            }), e) return this.save(), !0;\n        }\n        return !1;\n    }\n    unregister(t) {\n        t in this.props && (delete this.props[t], this.save());\n    }\n    update_campaign_params() {\n        if (!this.Se) {\n            var t = Wn(this.S.custom_campaign_params, this.S.mask_personal_data_properties, this.S.custom_personal_data_properties);\n            P(Z(t)) || this.register(t), this.Se = !0;\n        }\n    }\n    update_search_keyword() {\n        var t;\n        this.register((t = null == o ? void 0 : o.referrer) ? Jn(t) : {});\n    }\n    update_referrer_info() {\n        var t;\n        this.register_once({\n            $referrer: Kn(),\n            $referring_domain: null != o && o.referrer && (null == (t = yi(o.referrer)) ? void 0 : t.host) || \"$direct\"\n        }, void 0);\n    }\n    set_initial_person_info() {\n        this.props[Nt] || this.props[jt] || this.register_once({\n            [zt]: Yn(this.S.mask_personal_data_properties, this.S.custom_personal_data_properties)\n        }, void 0);\n    }\n    get_initial_props() {\n        var t = {};\n        J([\n            jt,\n            Nt\n        ], (i)=>{\n            var e = this.props[i];\n            e && J(e, function(i, e) {\n                t[\"$initial_\" + w(e)] = i;\n            });\n        });\n        var i, e, r = this.props[zt];\n        if (r) {\n            var s = (i = Xn(r), e = {}, J(i, function(t, i) {\n                e[\"$initial_\" + w(i)] = t;\n            }), e);\n            V(t, s);\n        }\n        return t;\n    }\n    safe_merge(t) {\n        return J(this.props, function(i, e) {\n            e in t || (t[e] = i);\n        }), t;\n    }\n    update_config(t, i) {\n        if (this.Re = this.Ee = t.cookie_expiration, this.set_disabled(t.disable_persistence), this.set_cross_subdomain(t.cross_subdomain_cookie), this.set_secure(t.secure_cookie), t.persistence !== i.persistence) {\n            var e = this.ke(t), r = this.props;\n            this.clear(), this.q = e, this.props = r, this.save();\n        }\n    }\n    set_disabled(t) {\n        this.xe = t, this.xe ? this.remove() : this.save();\n    }\n    set_cross_subdomain(t) {\n        t !== this.Ie && (this.Ie = t, this.remove(), this.save());\n    }\n    set_secure(t) {\n        t !== this.Pe && (this.Pe = t, this.remove(), this.save());\n    }\n    set_event_timer(t, i) {\n        var e = this.props[at] || {};\n        e[t] = i, this.props[at] = e, this.save();\n    }\n    remove_event_timer(t) {\n        var i = (this.props[at] || {})[t];\n        return R(i) || (delete this.props[at][t], this.save()), i;\n    }\n    get_property(t) {\n        return this.props[t];\n    }\n    set_property(t, i) {\n        this.props[t] = i, this.save();\n    }\n}\nclass fo {\n    constructor(){\n        this.Te = {}, this.Te = {};\n    }\n    on(t, i) {\n        return this.Te[t] || (this.Te[t] = []), this.Te[t].push(i), ()=>{\n            this.Te[t] = this.Te[t].filter((t)=>t !== i);\n        };\n    }\n    emit(t, i) {\n        for (var e of this.Te[t] || [])e(i);\n        for (var r of this.Te[\"*\"] || [])r(t, i);\n    }\n}\nclass po {\n    constructor(t){\n        this.Me = new fo, this.Ce = (t, i)=>this.Oe(t, i) && this.Fe(t, i) && this.Ae(t, i), this.Oe = (t, i)=>null == i || !i.event || (null == t ? void 0 : t.event) === (null == i ? void 0 : i.event), this._instance = t, this.De = new Set, this.Le = new Set;\n    }\n    init() {\n        var t;\n        if (!R(null == (t = this._instance) ? void 0 : t.Ne)) {\n            var i;\n            null == (i = this._instance) || i.Ne((t, i)=>{\n                this.on(t, i);\n            });\n        }\n    }\n    register(t) {\n        var i, e;\n        if (!R(null == (i = this._instance) ? void 0 : i.Ne) && (t.forEach((t)=>{\n            var i, e;\n            null == (i = this.Le) || i.add(t), null == (e = t.steps) || e.forEach((t)=>{\n                var i;\n                null == (i = this.De) || i.add((null == t ? void 0 : t.event) || \"\");\n            });\n        }), null != (e = this._instance) && e.autocapture)) {\n            var r, s = new Set;\n            t.forEach((t)=>{\n                var i;\n                null == (i = t.steps) || i.forEach((t)=>{\n                    null != t && t.selector && s.add(null == t ? void 0 : t.selector);\n                });\n            }), null == (r = this._instance) || r.autocapture.setElementSelectors(s);\n        }\n    }\n    on(t, i) {\n        var e;\n        null != i && 0 != t.length && (this.De.has(t) || this.De.has(null == i ? void 0 : i.event)) && this.Le && (null == (e = this.Le) ? void 0 : e.size) > 0 && this.Le.forEach((t)=>{\n            this.je(i, t) && this.Me.emit(\"actionCaptured\", t.name);\n        });\n    }\n    ze(t) {\n        this.onAction(\"actionCaptured\", (i)=>t(i));\n    }\n    je(t, i) {\n        if (null == (null == i ? void 0 : i.steps)) return !1;\n        for (var e of i.steps)if (this.Ce(t, e)) return !0;\n        return !1;\n    }\n    onAction(t, i) {\n        return this.Me.on(t, i);\n    }\n    Fe(t, i) {\n        if (null != i && i.url) {\n            var e, r = null == t || null == (e = t.properties) ? void 0 : e.$current_url;\n            if (!r || \"string\" != typeof r) return !1;\n            if (!po.Ue(r, null == i ? void 0 : i.url, (null == i ? void 0 : i.url_matching) || \"contains\")) return !1;\n        }\n        return !0;\n    }\n    static Ue(i, e, r) {\n        switch(r){\n            case \"regex\":\n                return !!t && Ns(i, e);\n            case \"exact\":\n                return e === i;\n            case \"contains\":\n                var s = po.qe(e).replace(/_/g, \".\").replace(/%/g, \".*\");\n                return Ns(i, s);\n            default:\n                return !1;\n        }\n    }\n    static qe(t) {\n        return t.replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\").replace(/-/g, \"\\\\x2d\");\n    }\n    Ae(t, i) {\n        if ((null != i && i.href || null != i && i.tag_name || null != i && i.text) && !this.Be(t).some((t)=>!(null != i && i.href && !po.Ue(t.href || \"\", null == i ? void 0 : i.href, (null == i ? void 0 : i.href_matching) || \"exact\")) && (null == i || !i.tag_name || t.tag_name === (null == i ? void 0 : i.tag_name)) && !(null != i && i.text && !po.Ue(t.text || \"\", null == i ? void 0 : i.text, (null == i ? void 0 : i.text_matching) || \"exact\") && !po.Ue(t.$el_text || \"\", null == i ? void 0 : i.text, (null == i ? void 0 : i.text_matching) || \"exact\")))) return !1;\n        if (null != i && i.selector) {\n            var e, r = null == t || null == (e = t.properties) ? void 0 : e.$element_selectors;\n            if (!r) return !1;\n            if (!r.includes(null == i ? void 0 : i.selector)) return !1;\n        }\n        return !0;\n    }\n    Be(t) {\n        return null == (null == t ? void 0 : t.properties.$elements) ? [] : null == t ? void 0 : t.properties.$elements;\n    }\n}\nvar go = z(\"[Surveys]\");\nclass _o {\n    constructor(t){\n        this._instance = t, this.He = new Map, this.We = new Map;\n    }\n    register(t) {\n        var i;\n        R(null == (i = this._instance) ? void 0 : i.Ne) || (this.Ge(t), this.Je(t));\n    }\n    Je(t) {\n        var i = t.filter((t)=>{\n            var i, e;\n            return (null == (i = t.conditions) ? void 0 : i.actions) && (null == (e = t.conditions) || null == (e = e.actions) || null == (e = e.values) ? void 0 : e.length) > 0;\n        });\n        if (0 !== i.length) {\n            if (null == this.Ve) {\n                this.Ve = new po(this._instance), this.Ve.init();\n                this.Ve.ze((t)=>{\n                    this.onAction(t);\n                });\n            }\n            i.forEach((t)=>{\n                var i, e, r, s, n;\n                t.conditions && null != (i = t.conditions) && i.actions && null != (e = t.conditions) && null != (e = e.actions) && e.values && (null == (r = t.conditions) || null == (r = r.actions) || null == (r = r.values) ? void 0 : r.length) > 0 && (null == (s = this.Ve) || s.register(t.conditions.actions.values), null == (n = t.conditions) || null == (n = n.actions) || null == (n = n.values) || n.forEach((i)=>{\n                    if (i && i.name) {\n                        var e = this.We.get(i.name);\n                        e && e.push(t.id), this.We.set(i.name, e || [\n                            t.id\n                        ]);\n                    }\n                }));\n            });\n        }\n    }\n    Ge(t) {\n        var i;\n        if (0 !== t.filter((t)=>{\n            var i, e;\n            return (null == (i = t.conditions) ? void 0 : i.events) && (null == (e = t.conditions) || null == (e = e.events) || null == (e = e.values) ? void 0 : e.length) > 0;\n        }).length) {\n            null == (i = this._instance) || i.Ne((t, i)=>{\n                this.onEvent(t, i);\n            }), t.forEach((t)=>{\n                var i;\n                null == (i = t.conditions) || null == (i = i.events) || null == (i = i.values) || i.forEach((i)=>{\n                    if (i && i.name) {\n                        var e = this.He.get(i.name);\n                        e && e.push(t.id), this.He.set(i.name, e || [\n                            t.id\n                        ]);\n                    }\n                });\n            });\n        }\n    }\n    onEvent(t, i) {\n        var e, r = (null == (e = this._instance) || null == (e = e.persistence) ? void 0 : e.props[Ot]) || [];\n        if (\"survey shown\" === t && i && r.length > 0) {\n            var s;\n            go.info(\"survey event matched, removing survey from activated surveys\", {\n                event: t,\n                eventPayload: i,\n                existingActivatedSurveys: r\n            });\n            var n = null == i || null == (s = i.properties) ? void 0 : s.$survey_id;\n            if (n) {\n                var o = r.indexOf(n);\n                o >= 0 && (r.splice(o, 1), this.Ke(r));\n            }\n        } else this.He.has(t) && (go.info(\"survey event matched, updating activated surveys\", {\n            event: t,\n            surveys: this.He.get(t)\n        }), this.Ke(r.concat(this.He.get(t) || [])));\n    }\n    onAction(t) {\n        var i, e = (null == (i = this._instance) || null == (i = i.persistence) ? void 0 : i.props[Ot]) || [];\n        this.We.has(t) && this.Ke(e.concat(this.We.get(t) || []));\n    }\n    Ke(t) {\n        var i;\n        null == (i = this._instance) || null == (i = i.persistence) || i.register({\n            [Ot]: [\n                ...new Set(t)\n            ]\n        });\n    }\n    getSurveys() {\n        var t, i = null == (t = this._instance) || null == (t = t.persistence) ? void 0 : t.props[Ot];\n        return i || [];\n    }\n    getEventToSurveys() {\n        return this.He;\n    }\n    Ye() {\n        return this.Ve;\n    }\n}\nclass mo {\n    constructor(t){\n        this.Xe = null, this.Qe = !1, this.Ze = !1, this.tr = [], this._instance = t, this._surveyEventReceiver = null;\n    }\n    onRemoteConfig(t) {\n        var i = t.surveys;\n        if (O(i)) return go.warn(\"Decide not loaded yet. Not loading surveys.\");\n        var e = x(i);\n        this.ir = e ? i.length > 0 : i, go.info(\"decide response received, hasSurveys: \" + this.ir), this.ir && this.loadIfEnabled();\n    }\n    reset() {\n        localStorage.removeItem(\"lastSeenSurveyDate\");\n        for(var t = [], i = 0; i < localStorage.length; i++){\n            var e = localStorage.key(i);\n            (null != e && e.startsWith(\"seenSurvey_\") || null != e && e.startsWith(\"inProgressSurvey_\")) && t.push(e);\n        }\n        t.forEach((t)=>localStorage.removeItem(t));\n    }\n    loadIfEnabled() {\n        if (!this.Xe) if (this.Ze) go.info(\"Already initializing surveys, skipping...\");\n        else if (this._instance.config.disable_surveys) go.info(\"Disabled. Not loading surveys.\");\n        else if (this.ir) {\n            var t = null == v ? void 0 : v.__PosthogExtensions__;\n            if (t) {\n                this.Ze = !0;\n                try {\n                    var i = t.generateSurveys;\n                    if (i) return void this.er(i);\n                    var e = t.loadExternalDependency;\n                    if (!e) return void this.rr(\"PostHog loadExternalDependency extension not found.\");\n                    e(this._instance, \"surveys\", (i)=>{\n                        i || !t.generateSurveys ? this.rr(\"Could not load surveys script\", i) : this.er(t.generateSurveys);\n                    });\n                } catch (t) {\n                    throw this.rr(\"Error initializing surveys\", t), t;\n                } finally{\n                    this.Ze = !1;\n                }\n            } else go.error(\"PostHog Extensions not found.\");\n        } else go.info(\"No surveys to load.\");\n    }\n    er(t) {\n        this.Xe = t(this._instance), this._surveyEventReceiver = new _o(this._instance), go.info(\"Surveys loaded successfully\"), this.sr({\n            isLoaded: !0\n        });\n    }\n    rr(t, i) {\n        go.error(t, i), this.sr({\n            isLoaded: !1,\n            error: t\n        });\n    }\n    onSurveysLoaded(t) {\n        return this.tr.push(t), this.Xe && this.sr({\n            isLoaded: !0\n        }), ()=>{\n            this.tr = this.tr.filter((i)=>i !== t);\n        };\n    }\n    getSurveys(t, i) {\n        if (void 0 === i && (i = !1), this._instance.config.disable_surveys) return go.info(\"Disabled. Not loading surveys.\"), t([]);\n        var e = this._instance.get_property(Ct);\n        if (e && !i) return t(e, {\n            isLoaded: !0\n        });\n        if (this.Qe) return t([], {\n            isLoaded: !1,\n            error: \"Surveys are already being loaded\"\n        });\n        try {\n            this.Qe = !0, this._instance.me({\n                url: this._instance.requestRouter.endpointFor(\"api\", \"/api/surveys/?token=\" + this._instance.config.token),\n                method: \"GET\",\n                timeout: this._instance.config.surveys_request_timeout_ms,\n                callback: (i)=>{\n                    var e;\n                    this.Qe = !1;\n                    var r = i.statusCode;\n                    if (200 !== r || !i.json) {\n                        var s = \"Surveys API could not be loaded, status: \" + r;\n                        return go.error(s), t([], {\n                            isLoaded: !1,\n                            error: s\n                        });\n                    }\n                    var n, o = i.json.surveys || [], a = o.filter((t)=>(function(t) {\n                            return !(!t.start_date || t.end_date);\n                        })(t) && (function(t) {\n                            var i;\n                            return !(null == (i = t.conditions) || null == (i = i.events) || null == (i = i.values) || !i.length);\n                        }(t) || function(t) {\n                            var i;\n                            return !(null == (i = t.conditions) || null == (i = i.actions) || null == (i = i.values) || !i.length);\n                        }(t)));\n                    a.length > 0 && (null == (n = this._surveyEventReceiver) || n.register(a));\n                    return null == (e = this._instance.persistence) || e.register({\n                        [Ct]: o\n                    }), t(o, {\n                        isLoaded: !0\n                    });\n                }\n            });\n        } catch (t) {\n            throw this.Qe = !1, t;\n        }\n    }\n    sr(t) {\n        for (var i of this.tr)try {\n            t.isLoaded ? this.getSurveys(i) : i([], t);\n        } catch (t) {\n            go.error(\"Error in survey callback\", t);\n        }\n    }\n    getActiveMatchingSurveys(t, i) {\n        if (void 0 === i && (i = !1), !O(this.Xe)) return this.Xe.getActiveMatchingSurveys(t, i);\n        go.warn(\"init was not called\");\n    }\n    nr(t) {\n        var i = null;\n        return this.getSurveys((e)=>{\n            var r;\n            i = null !== (r = e.find((i)=>i.id === t)) && void 0 !== r ? r : null;\n        }), i;\n    }\n    ar(t) {\n        if (O(this.Xe)) return {\n            eligible: !1,\n            reason: \"SDK is not enabled or survey functionality is not yet loaded\"\n        };\n        var i = \"string\" == typeof t ? this.nr(t) : t;\n        return i ? this.Xe.checkSurveyEligibility(i) : {\n            eligible: !1,\n            reason: \"Survey not found\"\n        };\n    }\n    canRenderSurvey(t) {\n        if (O(this.Xe)) return go.warn(\"init was not called\"), {\n            visible: !1,\n            disabledReason: \"SDK is not enabled or survey functionality is not yet loaded\"\n        };\n        var i = this.ar(t);\n        return {\n            visible: i.eligible,\n            disabledReason: i.reason\n        };\n    }\n    canRenderSurveyAsync(t, i) {\n        return O(this.Xe) ? (go.warn(\"init was not called\"), Promise.resolve({\n            visible: !1,\n            disabledReason: \"SDK is not enabled or survey functionality is not yet loaded\"\n        })) : new Promise((e)=>{\n            this.getSurveys((i)=>{\n                var r, s = null !== (r = i.find((i)=>i.id === t)) && void 0 !== r ? r : null;\n                if (s) {\n                    var n = this.ar(s);\n                    e({\n                        visible: n.eligible,\n                        disabledReason: n.reason\n                    });\n                } else e({\n                    visible: !1,\n                    disabledReason: \"Survey not found\"\n                });\n            }, i);\n        });\n    }\n    renderSurvey(t, i) {\n        if (O(this.Xe)) go.warn(\"init was not called\");\n        else {\n            var e = this.nr(t), r = null == o ? void 0 : o.querySelector(i);\n            e ? r ? this.Xe.renderSurvey(e, r) : go.warn(\"Survey element not found\") : go.warn(\"Survey not found\");\n        }\n    }\n}\nvar bo = z(\"[RateLimiter]\");\nclass wo {\n    constructor(t){\n        var i, e;\n        this.serverLimits = {}, this.lastEventRateLimited = !1, this.checkForLimiting = (t)=>{\n            var i = t.text;\n            if (i && i.length) try {\n                (JSON.parse(i).quota_limited || []).forEach((t)=>{\n                    bo.info((t || \"events\") + \" is quota limited.\"), this.serverLimits[t] = (new Date).getTime() + 6e4;\n                });\n            } catch (t) {\n                return void bo.warn('could not rate limit - continuing. Error: \"' + (null == t ? void 0 : t.message) + '\"', {\n                    text: i\n                });\n            }\n        }, this.instance = t, this.captureEventsPerSecond = (null == (i = t.config.rate_limiting) ? void 0 : i.events_per_second) || 10, this.captureEventsBurstLimit = Math.max((null == (e = t.config.rate_limiting) ? void 0 : e.events_burst_limit) || 10 * this.captureEventsPerSecond, this.captureEventsPerSecond), this.lastEventRateLimited = this.clientRateLimitContext(!0).isRateLimited;\n    }\n    clientRateLimitContext(t) {\n        var i, e, r;\n        void 0 === t && (t = !1);\n        var s = (new Date).getTime(), n = null !== (i = null == (e = this.instance.persistence) ? void 0 : e.get_property(Lt)) && void 0 !== i ? i : {\n            tokens: this.captureEventsBurstLimit,\n            last: s\n        };\n        n.tokens += (s - n.last) / 1e3 * this.captureEventsPerSecond, n.last = s, n.tokens > this.captureEventsBurstLimit && (n.tokens = this.captureEventsBurstLimit);\n        var o = n.tokens < 1;\n        return o || t || (n.tokens = Math.max(0, n.tokens - 1)), !o || this.lastEventRateLimited || t || this.instance.capture(\"$$client_ingestion_warning\", {\n            $$client_ingestion_warning_message: \"posthog-js client rate limited. Config is set to \" + this.captureEventsPerSecond + \" events per second and \" + this.captureEventsBurstLimit + \" events burst limit.\"\n        }, {\n            skip_client_rate_limiting: !0\n        }), this.lastEventRateLimited = o, null == (r = this.instance.persistence) || r.set_property(Lt, n), {\n            isRateLimited: o,\n            remainingTokens: n.tokens\n        };\n    }\n    isServerRateLimited(t) {\n        var i = this.serverLimits[t || \"events\"] || !1;\n        return !1 !== i && (new Date).getTime() < i;\n    }\n}\nvar yo = z(\"[RemoteConfig]\");\nclass So {\n    constructor(t){\n        this._instance = t;\n    }\n    get remoteConfig() {\n        var t;\n        return null == (t = v._POSTHOG_REMOTE_CONFIG) || null == (t = t[this._instance.config.token]) ? void 0 : t.config;\n    }\n    lr(t) {\n        var i, e;\n        null != (i = v.__PosthogExtensions__) && i.loadExternalDependency ? null == (e = v.__PosthogExtensions__) || null == e.loadExternalDependency || e.loadExternalDependency(this._instance, \"remote-config\", ()=>t(this.remoteConfig)) : (yo.error(\"PostHog Extensions not found. Cannot load remote config.\"), t());\n    }\n    ur(t) {\n        this._instance.me({\n            method: \"GET\",\n            url: this._instance.requestRouter.endpointFor(\"assets\", \"/array/\" + this._instance.config.token + \"/config\"),\n            callback: (i)=>{\n                t(i.json);\n            }\n        });\n    }\n    load() {\n        try {\n            if (this.remoteConfig) return yo.info(\"Using preloaded remote config\", this.remoteConfig), void this.be(this.remoteConfig);\n            if (this._instance.config.advanced_disable_decide) return void yo.warn(\"Remote config is disabled. Falling back to local config.\");\n            this.lr((t)=>{\n                if (!t) return yo.info(\"No config found after loading remote JS config. Falling back to JSON.\"), void this.ur((t)=>{\n                    this.be(t);\n                });\n                this.be(t);\n            });\n        } catch (t) {\n            yo.error(\"Error loading remote config\", t);\n        }\n    }\n    be(t) {\n        t ? this._instance.config.__preview_remote_config ? (this._instance.be(t), !1 !== t.hasFeatureFlags && this._instance.featureFlags.ensureFlagsLoaded()) : yo.info(\"__preview_remote_config is disabled. Logging config instead\", t) : yo.error(\"Failed to fetch remote config from PostHog.\");\n    }\n}\nvar $o = 3e3;\nclass ko {\n    constructor(t, i){\n        this.hr = !0, this.dr = [], this.vr = Xe((null == i ? void 0 : i.flush_interval_ms) || $o, 250, 5e3, \"flush interval\", $o), this.cr = t;\n    }\n    enqueue(t) {\n        this.dr.push(t), this.pr || this.gr();\n    }\n    unload() {\n        this._r();\n        var t = this.dr.length > 0 ? this.mr() : {}, i = Object.values(t);\n        [\n            ...i.filter((t)=>0 === t.url.indexOf(\"/e\")),\n            ...i.filter((t)=>0 !== t.url.indexOf(\"/e\"))\n        ].map((t)=>{\n            this.cr(B({}, t, {\n                transport: \"sendBeacon\"\n            }));\n        });\n    }\n    enable() {\n        this.hr = !1, this.gr();\n    }\n    gr() {\n        var t = this;\n        this.hr || (this.pr = setTimeout(()=>{\n            if (this._r(), this.dr.length > 0) {\n                var i = this.mr(), e = function() {\n                    var e = i[r], s = (new Date).getTime();\n                    e.data && x(e.data) && J(e.data, (t)=>{\n                        t.offset = Math.abs(t.timestamp - s), delete t.timestamp;\n                    }), t.cr(e);\n                };\n                for(var r in i)e();\n            }\n        }, this.vr));\n    }\n    _r() {\n        clearTimeout(this.pr), this.pr = void 0;\n    }\n    mr() {\n        var t = {};\n        return J(this.dr, (i)=>{\n            var e, r = i, s = (r ? r.batchKey : null) || r.url;\n            R(t[s]) && (t[s] = B({}, r, {\n                data: []\n            })), null == (e = t[s].data) || e.push(r.data);\n        }), this.dr = [], t;\n    }\n}\nvar xo = [\n    \"retriesPerformedSoFar\"\n];\nclass Eo {\n    constructor(i){\n        this.br = !1, this.wr = 3e3, this.dr = [], this._instance = i, this.dr = [], this.yr = !0, !R(t) && \"onLine\" in t.navigator && (this.yr = t.navigator.onLine, st(t, \"online\", ()=>{\n            this.yr = !0, this.Yi();\n        }), st(t, \"offline\", ()=>{\n            this.yr = !1;\n        }));\n    }\n    get length() {\n        return this.dr.length;\n    }\n    retriableRequest(t) {\n        var { retriesPerformedSoFar: i } = t, e = H(t, xo);\n        F(i) && i > 0 && (e.url = Fs(e.url, {\n            retry_count: i\n        })), this._instance.me(B({}, e, {\n            callback: (t)=>{\n                200 !== t.statusCode && (t.statusCode < 400 || t.statusCode >= 500) && (null != i ? i : 0) < 10 ? this.Sr(B({\n                    retriesPerformedSoFar: i\n                }, e)) : null == e.callback || e.callback(t);\n            }\n        }));\n    }\n    Sr(t) {\n        var i = t.retriesPerformedSoFar || 0;\n        t.retriesPerformedSoFar = i + 1;\n        var e = function(t) {\n            var i = 3e3 * Math.pow(2, t), e = i / 2, r = Math.min(18e5, i), s = (Math.random() - .5) * (r - e);\n            return Math.ceil(r + s);\n        }(i), r = Date.now() + e;\n        this.dr.push({\n            retryAt: r,\n            requestOptions: t\n        });\n        var s = \"Enqueued failed request for retry in \" + e;\n        navigator.onLine || (s += \" (Browser is offline)\"), j.warn(s), this.br || (this.br = !0, this.$r());\n    }\n    $r() {\n        this.kr && clearTimeout(this.kr), this.kr = setTimeout(()=>{\n            this.yr && this.dr.length > 0 && this.Yi(), this.$r();\n        }, this.wr);\n    }\n    Yi() {\n        var t = Date.now(), i = [], e = this.dr.filter((e)=>e.retryAt < t || (i.push(e), !1));\n        if (this.dr = i, e.length > 0) for (var { requestOptions: r } of e)this.retriableRequest(r);\n    }\n    unload() {\n        for (var { requestOptions: t } of (this.kr && (clearTimeout(this.kr), this.kr = void 0), this.dr))try {\n            this._instance.me(B({}, t, {\n                transport: \"sendBeacon\"\n            }));\n        } catch (t) {\n            j.error(t);\n        }\n        this.dr = [];\n    }\n}\nclass Io {\n    constructor(t){\n        this.Er = ()=>{\n            var t, i, e, r;\n            this.Ir || (this.Ir = {});\n            var s = this.scrollElement(), n = this.scrollY(), o = s ? Math.max(0, s.scrollHeight - s.clientHeight) : 0, a = n + ((null == s ? void 0 : s.clientHeight) || 0), l = (null == s ? void 0 : s.scrollHeight) || 0;\n            this.Ir.lastScrollY = Math.ceil(n), this.Ir.maxScrollY = Math.max(n, null !== (t = this.Ir.maxScrollY) && void 0 !== t ? t : 0), this.Ir.maxScrollHeight = Math.max(o, null !== (i = this.Ir.maxScrollHeight) && void 0 !== i ? i : 0), this.Ir.lastContentY = a, this.Ir.maxContentY = Math.max(a, null !== (e = this.Ir.maxContentY) && void 0 !== e ? e : 0), this.Ir.maxContentHeight = Math.max(l, null !== (r = this.Ir.maxContentHeight) && void 0 !== r ? r : 0);\n        }, this._instance = t;\n    }\n    getContext() {\n        return this.Ir;\n    }\n    resetContext() {\n        var t = this.Ir;\n        return setTimeout(this.Er, 0), t;\n    }\n    startMeasuringScrollPosition() {\n        st(t, \"scroll\", this.Er, {\n            capture: !0\n        }), st(t, \"scrollend\", this.Er, {\n            capture: !0\n        }), st(t, \"resize\", this.Er);\n    }\n    scrollElement() {\n        if (!this._instance.config.scroll_root_selector) return null == t ? void 0 : t.document.documentElement;\n        var i = x(this._instance.config.scroll_root_selector) ? this._instance.config.scroll_root_selector : [\n            this._instance.config.scroll_root_selector\n        ];\n        for (var e of i){\n            var r = null == t ? void 0 : t.document.querySelector(e);\n            if (r) return r;\n        }\n    }\n    scrollY() {\n        if (this._instance.config.scroll_root_selector) {\n            var i = this.scrollElement();\n            return i && i.scrollTop || 0;\n        }\n        return t && (t.scrollY || t.pageYOffset || t.document.documentElement.scrollTop) || 0;\n    }\n    scrollX() {\n        if (this._instance.config.scroll_root_selector) {\n            var i = this.scrollElement();\n            return i && i.scrollLeft || 0;\n        }\n        return t && (t.scrollX || t.pageXOffset || t.document.documentElement.scrollLeft) || 0;\n    }\n}\nvar Po = (t)=>Yn(null == t ? void 0 : t.config.mask_personal_data_properties, null == t ? void 0 : t.config.custom_personal_data_properties);\nclass Ro {\n    constructor(t, i, e, r){\n        this.Pr = (t)=>{\n            var i = this.Rr();\n            if (!i || i.sessionId !== t) {\n                var e = {\n                    sessionId: t,\n                    props: this.Tr(this._instance)\n                };\n                this.Mr.register({\n                    [Dt]: e\n                });\n            }\n        }, this._instance = t, this.Cr = i, this.Mr = e, this.Tr = r || Po, this.Cr.onSessionId(this.Pr);\n    }\n    Rr() {\n        return this.Mr.props[Dt];\n    }\n    getSetOnceProps() {\n        var t, i = null == (t = this.Rr()) ? void 0 : t.props;\n        return i ? \"r\" in i ? Xn(i) : {\n            $referring_domain: i.referringDomain,\n            $pathname: i.initialPathName,\n            utm_source: i.utm_source,\n            utm_campaign: i.utm_campaign,\n            utm_medium: i.utm_medium,\n            utm_content: i.utm_content,\n            utm_term: i.utm_term\n        } : {};\n    }\n    getSessionProps() {\n        var t = {};\n        return J(Z(this.getSetOnceProps()), (i, e)=>{\n            \"$current_url\" === e && (e = \"url\"), t[\"$session_entry_\" + w(e)] = i;\n        }), t;\n    }\n}\nvar To = z(\"[SessionId]\");\nclass Mo {\n    constructor(t, i, e){\n        var r;\n        if (this.Or = [], !t.persistence) throw new Error(\"SessionIdManager requires a PostHogPersistence instance\");\n        if (t.config.__preview_experimental_cookieless_mode) throw new Error(\"SessionIdManager cannot be used with __preview_experimental_cookieless_mode\");\n        this.S = t.config, this.Mr = t.persistence, this.oi = void 0, this.kt = void 0, this._sessionStartTimestamp = null, this._sessionActivityTimestamp = null, this.Fr = i || Ni, this.Ar = e || Ni;\n        var s = this.S.persistence_name || this.S.token, n = this.S.session_idle_timeout_seconds || 1800;\n        if (this._sessionTimeoutMs = 1e3 * Xe(n, 60, 36e3, \"session_idle_timeout_seconds\", 1800), t.register({\n            $configured_session_timeout_ms: this._sessionTimeoutMs\n        }), this.Dr(), this.Lr = \"ph_\" + s + \"_window_id\", this.Nr = \"ph_\" + s + \"_primary_window_exists\", this.jr()) {\n            var o = Xi.D(this.Lr), a = Xi.D(this.Nr);\n            o && !a ? this.oi = o : Xi.N(this.Lr), Xi.L(this.Nr, !0);\n        }\n        if (null != (r = this.S.bootstrap) && r.sessionID) try {\n            var l = ((t)=>{\n                var i = t.replace(/-/g, \"\");\n                if (32 !== i.length) throw new Error(\"Not a valid UUID\");\n                if (\"7\" !== i[12]) throw new Error(\"Not a UUIDv7\");\n                return parseInt(i.substring(0, 12), 16);\n            })(this.S.bootstrap.sessionID);\n            this.zr(this.S.bootstrap.sessionID, (new Date).getTime(), l);\n        } catch (t) {\n            To.error(\"Invalid sessionID in bootstrap\", t);\n        }\n        this.Ur();\n    }\n    get sessionTimeoutMs() {\n        return this._sessionTimeoutMs;\n    }\n    onSessionId(t) {\n        return R(this.Or) && (this.Or = []), this.Or.push(t), this.kt && t(this.kt, this.oi), ()=>{\n            this.Or = this.Or.filter((i)=>i !== t);\n        };\n    }\n    jr() {\n        return \"memory\" !== this.S.persistence && !this.Mr.xe && Xi.O();\n    }\n    qr(t) {\n        t !== this.oi && (this.oi = t, this.jr() && Xi.L(this.Lr, t));\n    }\n    Br() {\n        return this.oi ? this.oi : this.jr() ? Xi.D(this.Lr) : null;\n    }\n    zr(t, i, e) {\n        t === this.kt && i === this._sessionActivityTimestamp && e === this._sessionStartTimestamp || (this._sessionStartTimestamp = e, this._sessionActivityTimestamp = i, this.kt = t, this.Mr.register({\n            [$t]: [\n                i,\n                t,\n                e\n            ]\n        }));\n    }\n    Hr() {\n        if (this.kt && this._sessionActivityTimestamp && this._sessionStartTimestamp) return [\n            this._sessionActivityTimestamp,\n            this.kt,\n            this._sessionStartTimestamp\n        ];\n        var t = this.Mr.props[$t];\n        return x(t) && 2 === t.length && t.push(t[0]), t || [\n            0,\n            null,\n            0\n        ];\n    }\n    resetSessionId() {\n        this.zr(null, null, null);\n    }\n    Ur() {\n        st(t, \"beforeunload\", ()=>{\n            this.jr() && Xi.N(this.Nr);\n        }, {\n            capture: !1\n        });\n    }\n    checkAndGetSessionAndWindowId(t, i) {\n        if (void 0 === t && (t = !1), void 0 === i && (i = null), this.S.__preview_experimental_cookieless_mode) throw new Error(\"checkAndGetSessionAndWindowId should not be called in __preview_experimental_cookieless_mode\");\n        var e = i || (new Date).getTime(), [r, s, n] = this.Hr(), o = this.Br(), a = F(n) && n > 0 && Math.abs(e - n) > 864e5, l = !1, u = !s, h = !t && Math.abs(e - r) > this.sessionTimeoutMs;\n        u || h || a ? (s = this.Fr(), o = this.Ar(), To.info(\"new session ID generated\", {\n            sessionId: s,\n            windowId: o,\n            changeReason: {\n                noSessionId: u,\n                activityTimeout: h,\n                sessionPastMaximumLength: a\n            }\n        }), n = e, l = !0) : o || (o = this.Ar(), l = !0);\n        var d = 0 === r || !t || a ? e : r, v = 0 === n ? (new Date).getTime() : n;\n        return this.qr(o), this.zr(s, d, v), t || this.Dr(), l && this.Or.forEach((t)=>t(s, o, l ? {\n                noSessionId: u,\n                activityTimeout: h,\n                sessionPastMaximumLength: a\n            } : void 0)), {\n            sessionId: s,\n            windowId: o,\n            sessionStartTimestamp: v,\n            changeReason: l ? {\n                noSessionId: u,\n                activityTimeout: h,\n                sessionPastMaximumLength: a\n            } : void 0,\n            lastActivityTimestamp: r\n        };\n    }\n    Dr() {\n        clearTimeout(this.Wr), this.Wr = setTimeout(()=>{\n            this.resetSessionId();\n        }, 1.1 * this.sessionTimeoutMs);\n    }\n}\nvar Co = [\n    \"$set_once\",\n    \"$set\"\n], Oo = z(\"[SiteApps]\");\nclass Fo {\n    constructor(t){\n        this._instance = t, this.Gr = [], this.apps = {};\n    }\n    get isEnabled() {\n        return !!this._instance.config.opt_in_site_apps;\n    }\n    Jr(t, i) {\n        if (i) {\n            var e = this.globalsForEvent(i);\n            this.Gr.push(e), this.Gr.length > 1e3 && (this.Gr = this.Gr.slice(10));\n        }\n    }\n    get siteAppLoaders() {\n        var t;\n        return null == (t = v._POSTHOG_REMOTE_CONFIG) || null == (t = t[this._instance.config.token]) ? void 0 : t.siteApps;\n    }\n    init() {\n        if (this.isEnabled) {\n            var t = this._instance.Ne(this.Jr.bind(this));\n            this.Vr = ()=>{\n                t(), this.Gr = [], this.Vr = void 0;\n            };\n        }\n    }\n    globalsForEvent(t) {\n        var i, e, r, s, n, o, a;\n        if (!t) throw new Error(\"Event payload is required\");\n        var l = {}, u = this._instance.get_property(\"$groups\") || [], h = this._instance.get_property(\"$stored_group_properties\") || {};\n        for (var [d, v] of Object.entries(h))l[d] = {\n            id: u[d],\n            type: d,\n            properties: v\n        };\n        var { $set_once: c, $set: f } = t;\n        return {\n            event: B({}, H(t, Co), {\n                properties: B({}, t.properties, f ? {\n                    $set: B({}, null !== (i = null == (e = t.properties) ? void 0 : e.$set) && void 0 !== i ? i : {}, f)\n                } : {}, c ? {\n                    $set_once: B({}, null !== (r = null == (s = t.properties) ? void 0 : s.$set_once) && void 0 !== r ? r : {}, c)\n                } : {}),\n                elements_chain: null !== (n = null == (o = t.properties) ? void 0 : o.$elements_chain) && void 0 !== n ? n : \"\",\n                distinct_id: null == (a = t.properties) ? void 0 : a.distinct_id\n            }),\n            person: {\n                properties: this._instance.get_property(\"$stored_person_properties\")\n            },\n            groups: l\n        };\n    }\n    setupSiteApp(t) {\n        var i = this.apps[t.id], e = ()=>{\n            var e;\n            (!i.errored && this.Gr.length && (Oo.info(\"Processing \" + this.Gr.length + \" events for site app with id \" + t.id), this.Gr.forEach((t)=>null == i.processEvent ? void 0 : i.processEvent(t)), i.processedBuffer = !0), Object.values(this.apps).every((t)=>t.processedBuffer || t.errored)) && (null == (e = this.Vr) || e.call(this));\n        }, r = !1, s = (s)=>{\n            i.errored = !s, i.loaded = !0, Oo.info(\"Site app with id \" + t.id + \" \" + (s ? \"loaded\" : \"errored\")), r && e();\n        };\n        try {\n            var { processEvent: n } = t.init({\n                posthog: this._instance,\n                callback: (t)=>{\n                    s(t);\n                }\n            });\n            n && (i.processEvent = n), r = !0;\n        } catch (i) {\n            Oo.error(\"Error while initializing PostHog app with config id \" + t.id, i), s(!1);\n        }\n        if (r && i.loaded) try {\n            e();\n        } catch (e) {\n            Oo.error(\"Error while processing buffered events PostHog app with config id \" + t.id, e), i.errored = !0;\n        }\n    }\n    Kr() {\n        var t = this.siteAppLoaders || [];\n        for (var i of t)this.apps[i.id] = {\n            id: i.id,\n            loaded: !1,\n            errored: !1,\n            processedBuffer: !1\n        };\n        for (var e of t)this.setupSiteApp(e);\n    }\n    Yr(t) {\n        if (0 !== Object.keys(this.apps).length) {\n            var i = this.globalsForEvent(t);\n            for (var e of Object.values(this.apps))try {\n                null == e.processEvent || e.processEvent(i);\n            } catch (i) {\n                Oo.error(\"Error while processing event \" + t.event + \" for site app \" + e.id, i);\n            }\n        }\n    }\n    onRemoteConfig(t) {\n        var i, e, r, s = this;\n        if (null != (i = this.siteAppLoaders) && i.length) return this.isEnabled ? (this.Kr(), void this._instance.on(\"eventCaptured\", (t)=>this.Yr(t))) : void Oo.error('PostHog site apps are disabled. Enable the \"opt_in_site_apps\" config to proceed.');\n        if (null == (e = this.Vr) || e.call(this), null != (r = t.siteApps) && r.length) if (this.isEnabled) {\n            var n = function(t) {\n                var i;\n                v[\"__$$ph_site_app_\" + t] = s._instance, null == (i = v.__PosthogExtensions__) || null == i.loadSiteApp || i.loadSiteApp(s._instance, a, (i)=>{\n                    if (i) return Oo.error(\"Error while initializing PostHog app with config id \" + t, i);\n                });\n            };\n            for (var { id: o, url: a } of t.siteApps)n(o);\n        } else Oo.error('PostHog site apps are disabled. Enable the \"opt_in_site_apps\" config to proceed.');\n    }\n}\nvar Ao = [\n    \"amazonbot\",\n    \"amazonproductbot\",\n    \"app.hypefactors.com\",\n    \"applebot\",\n    \"archive.org_bot\",\n    \"awariobot\",\n    \"backlinksextendedbot\",\n    \"baiduspider\",\n    \"bingbot\",\n    \"bingpreview\",\n    \"chrome-lighthouse\",\n    \"dataforseobot\",\n    \"deepscan\",\n    \"duckduckbot\",\n    \"facebookexternal\",\n    \"facebookcatalog\",\n    \"http://yandex.com/bots\",\n    \"hubspot\",\n    \"ia_archiver\",\n    \"linkedinbot\",\n    \"meta-externalagent\",\n    \"mj12bot\",\n    \"msnbot\",\n    \"nessus\",\n    \"petalbot\",\n    \"pinterest\",\n    \"prerender\",\n    \"rogerbot\",\n    \"screaming frog\",\n    \"sebot-wa\",\n    \"sitebulb\",\n    \"slackbot\",\n    \"slurp\",\n    \"trendictionbot\",\n    \"turnitin\",\n    \"twitterbot\",\n    \"vercelbot\",\n    \"yahoo! slurp\",\n    \"yandexbot\",\n    \"zoombot\",\n    \"bot.htm\",\n    \"bot.php\",\n    \"(bot;\",\n    \"bot/\",\n    \"crawler\",\n    \"ahrefsbot\",\n    \"ahrefssiteaudit\",\n    \"semrushbot\",\n    \"siteauditbot\",\n    \"splitsignalbot\",\n    \"gptbot\",\n    \"oai-searchbot\",\n    \"chatgpt-user\",\n    \"perplexitybot\",\n    \"better uptime bot\",\n    \"sentryuptimebot\",\n    \"uptimerobot\",\n    \"headlesschrome\",\n    \"cypress\",\n    \"google-hoteladsverifier\",\n    \"adsbot-google\",\n    \"apis-google\",\n    \"duplexweb-google\",\n    \"feedfetcher-google\",\n    \"google favicon\",\n    \"google web preview\",\n    \"google-read-aloud\",\n    \"googlebot\",\n    \"googleother\",\n    \"google-cloudvertexbot\",\n    \"googleweblight\",\n    \"mediapartners-google\",\n    \"storebot-google\",\n    \"google-inspectiontool\",\n    \"bytespider\"\n], Do = function(t, i) {\n    if (!t) return !1;\n    var e = t.toLowerCase();\n    return Ao.concat(i || []).some((t)=>{\n        var i = t.toLowerCase();\n        return -1 !== e.indexOf(i);\n    });\n}, Lo = function(t, i) {\n    if (!t) return !1;\n    var e = t.userAgent;\n    if (e && Do(e, i)) return !0;\n    try {\n        var r = null == t ? void 0 : t.userAgentData;\n        if (null != r && r.brands && r.brands.some((t)=>Do(null == t ? void 0 : t.brand, i))) return !0;\n    } catch (t) {}\n    return !!t.webdriver;\n}, No = function(t) {\n    return t.US = \"us\", t.EU = \"eu\", t.CUSTOM = \"custom\", t;\n}({}), jo = \"i.posthog.com\";\nclass zo {\n    constructor(t){\n        this.Xr = {}, this.instance = t;\n    }\n    get apiHost() {\n        var t = this.instance.config.api_host.trim().replace(/\\/$/, \"\");\n        return \"https://app.posthog.com\" === t ? \"https://us.i.posthog.com\" : t;\n    }\n    get uiHost() {\n        var t, i = null == (t = this.instance.config.ui_host) ? void 0 : t.replace(/\\/$/, \"\");\n        return i || (i = this.apiHost.replace(\".\" + jo, \".posthog.com\")), \"https://app.posthog.com\" === i ? \"https://us.posthog.com\" : i;\n    }\n    get region() {\n        return this.Xr[this.apiHost] || (/https:\\/\\/(app|us|us-assets)(\\.i)?\\.posthog\\.com/i.test(this.apiHost) ? this.Xr[this.apiHost] = No.US : /https:\\/\\/(eu|eu-assets)(\\.i)?\\.posthog\\.com/i.test(this.apiHost) ? this.Xr[this.apiHost] = No.EU : this.Xr[this.apiHost] = No.CUSTOM), this.Xr[this.apiHost];\n    }\n    endpointFor(t, i) {\n        if (void 0 === i && (i = \"\"), i && (i = \"/\" === i[0] ? i : \"/\" + i), \"ui\" === t) return this.uiHost + i;\n        if (this.region === No.CUSTOM) return this.apiHost + i;\n        var e = jo + i;\n        switch(t){\n            case \"assets\":\n                return \"https://\" + this.region + \"-assets.\" + e;\n            case \"api\":\n                return \"https://\" + this.region + \".\" + e;\n        }\n    }\n}\nvar Uo = {\n    icontains: (i, e)=>!!t && e.href.toLowerCase().indexOf(i.toLowerCase()) > -1,\n    not_icontains: (i, e)=>!!t && -1 === e.href.toLowerCase().indexOf(i.toLowerCase()),\n    regex: (i, e)=>!!t && Ns(e.href, i),\n    not_regex: (i, e)=>!!t && !Ns(e.href, i),\n    exact: (t, i)=>i.href === t,\n    is_not: (t, i)=>i.href !== t\n};\nclass qo {\n    constructor(t){\n        var i = this;\n        this.getWebExperimentsAndEvaluateDisplayLogic = function(t) {\n            void 0 === t && (t = !1), i.getWebExperiments((t)=>{\n                qo.Qr(\"retrieved web experiments from the server\"), i.Zr = new Map, t.forEach((t)=>{\n                    if (t.feature_flag_key) {\n                        var e;\n                        if (i.Zr) qo.Qr(\"setting flag key \", t.feature_flag_key, \" to web experiment \", t), null == (e = i.Zr) || e.set(t.feature_flag_key, t);\n                        var r = i._instance.getFeatureFlag(t.feature_flag_key);\n                        T(r) && t.variants[r] && i.ts(t.name, r, t.variants[r].transforms);\n                    } else if (t.variants) for(var s in t.variants){\n                        var n = t.variants[s];\n                        qo.es(n) && i.ts(t.name, s, n.transforms);\n                    }\n                });\n            }, t);\n        }, this._instance = t, this._instance.onFeatureFlags((t)=>{\n            this.onFeatureFlags(t);\n        });\n    }\n    onFeatureFlags(t) {\n        if (this._is_bot()) qo.Qr(\"Refusing to render web experiment since the viewer is a likely bot\");\n        else if (!this._instance.config.disable_web_experiments) {\n            if (O(this.Zr)) return this.Zr = new Map, this.loadIfEnabled(), void this.previewWebExperiment();\n            qo.Qr(\"applying feature flags\", t), t.forEach((t)=>{\n                var i;\n                if (this.Zr && null != (i = this.Zr) && i.has(t)) {\n                    var e, r = this._instance.getFeatureFlag(t), s = null == (e = this.Zr) ? void 0 : e.get(t);\n                    r && null != s && s.variants[r] && this.ts(s.name, r, s.variants[r].transforms);\n                }\n            });\n        }\n    }\n    previewWebExperiment() {\n        var t = qo.getWindowLocation();\n        if (null != t && t.search) {\n            var i = $i(null == t ? void 0 : t.search, \"__experiment_id\"), e = $i(null == t ? void 0 : t.search, \"__experiment_variant\");\n            i && e && (qo.Qr(\"previewing web experiments \" + i + \" && \" + e), this.getWebExperiments((t)=>{\n                this.rs(parseInt(i), e, t);\n            }, !1, !0));\n        }\n    }\n    loadIfEnabled() {\n        this._instance.config.disable_web_experiments || this.getWebExperimentsAndEvaluateDisplayLogic();\n    }\n    getWebExperiments(t, i, e) {\n        if (this._instance.config.disable_web_experiments && !e) return t([]);\n        var r = this._instance.get_property(\"$web_experiments\");\n        if (r && !i) return t(r);\n        this._instance.me({\n            url: this._instance.requestRouter.endpointFor(\"api\", \"/api/web_experiments/?token=\" + this._instance.config.token),\n            method: \"GET\",\n            callback: (i)=>{\n                if (200 !== i.statusCode || !i.json) return t([]);\n                var e = i.json.experiments || [];\n                return t(e);\n            }\n        });\n    }\n    rs(t, i, e) {\n        var r = e.filter((i)=>i.id === t);\n        r && r.length > 0 && (qo.Qr(\"Previewing web experiment [\" + r[0].name + \"] with variant [\" + i + \"]\"), this.ts(r[0].name, i, r[0].variants[i].transforms));\n    }\n    static es(t) {\n        return !O(t.conditions) && qo.ss(t) && qo.ns(t);\n    }\n    static ss(t) {\n        var i;\n        if (O(t.conditions) || O(null == (i = t.conditions) ? void 0 : i.url)) return !0;\n        var e, r, s, n = qo.getWindowLocation();\n        return !!n && (null == (e = t.conditions) || !e.url || Uo[null !== (r = null == (s = t.conditions) ? void 0 : s.urlMatchType) && void 0 !== r ? r : \"icontains\"](t.conditions.url, n));\n    }\n    static getWindowLocation() {\n        return null == t ? void 0 : t.location;\n    }\n    static ns(t) {\n        var i;\n        if (O(t.conditions) || O(null == (i = t.conditions) ? void 0 : i.utm)) return !0;\n        var e = Wn();\n        if (e.utm_source) {\n            var r, s, n, o, a, l, u, h, d = null == (r = t.conditions) || null == (r = r.utm) || !r.utm_campaign || (null == (s = t.conditions) || null == (s = s.utm) ? void 0 : s.utm_campaign) == e.utm_campaign, v = null == (n = t.conditions) || null == (n = n.utm) || !n.utm_source || (null == (o = t.conditions) || null == (o = o.utm) ? void 0 : o.utm_source) == e.utm_source, c = null == (a = t.conditions) || null == (a = a.utm) || !a.utm_medium || (null == (l = t.conditions) || null == (l = l.utm) ? void 0 : l.utm_medium) == e.utm_medium, f = null == (u = t.conditions) || null == (u = u.utm) || !u.utm_term || (null == (h = t.conditions) || null == (h = h.utm) ? void 0 : h.utm_term) == e.utm_term;\n            return d && c && f && v;\n        }\n        return !1;\n    }\n    static Qr(t) {\n        for(var i = arguments.length, e = new Array(i > 1 ? i - 1 : 0), r = 1; r < i; r++)e[r - 1] = arguments[r];\n        j.info(\"[WebExperiments] \" + t, e);\n    }\n    ts(t, i, e) {\n        this._is_bot() ? qo.Qr(\"Refusing to render web experiment since the viewer is a likely bot\") : \"control\" !== i ? e.forEach((e)=>{\n            if (e.selector) {\n                var r;\n                qo.Qr(\"applying transform of variant \" + i + \" for experiment \" + t + \" \", e);\n                var s = null == (r = document) ? void 0 : r.querySelectorAll(e.selector);\n                null == s || s.forEach((t)=>{\n                    var i = t;\n                    e.html && (i.innerHTML = e.html), e.css && i.setAttribute(\"style\", e.css);\n                });\n            }\n        }) : qo.Qr(\"Control variants leave the page unmodified.\");\n    }\n    _is_bot() {\n        return n && this._instance ? Lo(n, this._instance.config.custom_blocked_useragents) : void 0;\n    }\n}\nvar Bo = {}, Ho = ()=>{}, Wo = \"posthog\", Go = !Cs && -1 === (null == d ? void 0 : d.indexOf(\"MSIE\")) && -1 === (null == d ? void 0 : d.indexOf(\"Mozilla\")), Jo = ()=>{\n    var i;\n    return {\n        api_host: \"https://us.i.posthog.com\",\n        ui_host: null,\n        token: \"\",\n        autocapture: !0,\n        rageclick: !0,\n        cross_subdomain_cookie: et(null == o ? void 0 : o.location),\n        persistence: \"localStorage+cookie\",\n        persistence_name: \"\",\n        loaded: Ho,\n        save_campaign_params: !0,\n        custom_campaign_params: [],\n        custom_blocked_useragents: [],\n        save_referrer: !0,\n        capture_pageview: !0,\n        capture_pageleave: \"if_capture_pageview\",\n        debug: a && T(null == a ? void 0 : a.search) && -1 !== a.search.indexOf(\"__posthog_debug=true\") || !1,\n        cookie_expiration: 365,\n        upgrade: !1,\n        disable_session_recording: !1,\n        disable_persistence: !1,\n        disable_web_experiments: !0,\n        disable_surveys: !1,\n        disable_external_dependency_loading: !1,\n        enable_recording_console_log: void 0,\n        secure_cookie: \"https:\" === (null == t || null == (i = t.location) ? void 0 : i.protocol),\n        ip: !0,\n        opt_out_capturing_by_default: !1,\n        opt_out_persistence_by_default: !1,\n        opt_out_useragent_filter: !1,\n        opt_out_capturing_persistence_type: \"localStorage\",\n        opt_out_capturing_cookie_prefix: null,\n        opt_in_site_apps: !1,\n        property_denylist: [],\n        respect_dnt: !1,\n        sanitize_properties: null,\n        request_headers: {},\n        request_batching: !0,\n        properties_string_max_length: 65535,\n        session_recording: {},\n        mask_all_element_attributes: !1,\n        mask_all_text: !1,\n        mask_personal_data_properties: !1,\n        custom_personal_data_properties: [],\n        advanced_disable_decide: !1,\n        advanced_disable_feature_flags: !1,\n        advanced_disable_feature_flags_on_first_load: !1,\n        advanced_disable_toolbar_metrics: !1,\n        feature_flag_request_timeout_ms: 3e3,\n        surveys_request_timeout_ms: 1e4,\n        on_request_error: (t)=>{\n            var i = \"Bad HTTP status: \" + t.statusCode + \" \" + t.text;\n            j.error(i);\n        },\n        get_device_id: (t)=>t,\n        capture_performance: void 0,\n        name: \"posthog\",\n        bootstrap: {},\n        disable_compression: !1,\n        session_idle_timeout_seconds: 1800,\n        person_profiles: \"identified_only\",\n        before_send: void 0,\n        request_queue_config: {\n            flush_interval_ms: $o\n        },\n        _onCapture: Ho\n    };\n}, Vo = (t)=>{\n    var i = {};\n    R(t.process_person) || (i.person_profiles = t.process_person), R(t.xhr_headers) || (i.request_headers = t.xhr_headers), R(t.cookie_name) || (i.persistence_name = t.cookie_name), R(t.disable_cookie) || (i.disable_persistence = t.disable_cookie), R(t.store_google) || (i.save_campaign_params = t.store_google), R(t.verbose) || (i.debug = t.verbose);\n    var e = V({}, i, t);\n    return x(t.property_blacklist) && (R(t.property_denylist) ? e.property_denylist = t.property_blacklist : x(t.property_denylist) ? e.property_denylist = [\n        ...t.property_blacklist,\n        ...t.property_denylist\n    ] : j.error(\"Invalid value for property_denylist config: \" + t.property_denylist)), e;\n};\nclass Ko {\n    constructor(){\n        this.__forceAllowLocalhost = !1;\n    }\n    get os() {\n        return this.__forceAllowLocalhost;\n    }\n    set os(t) {\n        j.error(\"WebPerformanceObserver is deprecated and has no impact on network capture. Use `_forceAllowLocalhostNetworkCapture` on `posthog.sessionRecording`\"), this.__forceAllowLocalhost = t;\n    }\n}\nclass Yo {\n    get decideEndpointWasHit() {\n        var t, i;\n        return null !== (t = null == (i = this.featureFlags) ? void 0 : i.hasLoadedFlags) && void 0 !== t && t;\n    }\n    constructor(){\n        this.webPerformance = new Ko, this.ls = !1, this.version = c.LIB_VERSION, this.us = new fo, this._calculate_event_properties = this.calculateEventProperties.bind(this), this.config = Jo(), this.SentryIntegration = gs, this.sentryIntegration = (t)=>(function(t, i) {\n                var e = ps(t, i);\n                return {\n                    name: fs,\n                    processEvent: (t)=>e(t)\n                };\n            })(this, t), this.__request_queue = [], this.__loaded = !1, this.analyticsDefaultEndpoint = \"/e/\", this.hs = !1, this.ds = null, this.vs = null, this.cs = null, this.featureFlags = new ho(this), this.toolbar = new ys(this), this.scrollManager = new Io(this), this.pageViewManager = new Ts(this), this.surveys = new mo(this), this.experiments = new qo(this), this.exceptions = new Bs(this), this.rateLimiter = new wo(this), this.requestRouter = new zo(this), this.consent = new Zi(this), this.people = {\n            set: (t, i, e)=>{\n                var r = T(t) ? {\n                    [t]: i\n                } : t;\n                this.setPersonProperties(r), null == e || e({});\n            },\n            set_once: (t, i, e)=>{\n                var r = T(t) ? {\n                    [t]: i\n                } : t;\n                this.setPersonProperties(void 0, r), null == e || e({});\n            }\n        }, this.on(\"eventCaptured\", (t)=>j.info('send \"' + (null == t ? void 0 : t.event) + '\"', t));\n    }\n    init(t, i, e) {\n        if (e && e !== Wo) {\n            var r, s = null !== (r = Bo[e]) && void 0 !== r ? r : new Yo;\n            return s._init(t, i, e), Bo[e] = s, Bo[Wo][e] = s, s;\n        }\n        return this._init(t, i, e);\n    }\n    _init(i, e, r) {\n        var s, n;\n        if (void 0 === e && (e = {}), R(i) || M(i)) return j.critical(\"PostHog was initialized without a token. This likely indicates a misconfiguration. Please check the first argument passed to posthog.init()\"), this;\n        if (this.__loaded) return j.warn(\"You have already initialized PostHog! Re-initializing is a no-op\"), this;\n        this.__loaded = !0, this.config = {}, this.fs = [], e.person_profiles && (this.vs = e.person_profiles), this.set_config(V({}, Jo(), Vo(e), {\n            name: r,\n            token: i\n        })), this.config.on_xhr_error && j.error(\"on_xhr_error is deprecated. Use on_request_error instead\"), this.compression = e.disable_compression ? void 0 : g.GZipJS, this.persistence = new co(this.config), this.sessionPersistence = \"sessionStorage\" === this.config.persistence || \"memory\" === this.config.persistence ? this.persistence : new co(B({}, this.config, {\n            persistence: \"sessionStorage\"\n        }));\n        var o = B({}, this.persistence.props), a = B({}, this.sessionPersistence.props);\n        if (this.ps = new ko((t)=>this.gs(t), this.config.request_queue_config), this._s = new Eo(this), this.__request_queue = [], this.config.__preview_experimental_cookieless_mode || (this.sessionManager = new Mo(this), this.sessionPropsManager = new Ro(this, this.sessionManager, this.persistence)), new $s(this).startIfEnabledOrStop(), this.siteApps = new Fo(this), null == (s = this.siteApps) || s.init(), this.config.__preview_experimental_cookieless_mode || (this.sessionRecording = new ds(this), this.sessionRecording.startIfEnabledOrStop()), this.config.disable_scroll_properties || this.scrollManager.startMeasuringScrollPosition(), this.autocapture = new Mi(this), this.autocapture.startIfEnabled(), this.surveys.loadIfEnabled(), this.heatmaps = new Rs(this), this.heatmaps.startIfEnabled(), this.webVitalsAutocapture = new Es(this), this.exceptionObserver = new ne(this), this.exceptionObserver.startIfEnabled(), this.deadClicksAutocapture = new re(this, ee), this.deadClicksAutocapture.startIfEnabled(), this.historyAutocapture = new Le(this), this.historyAutocapture.startIfEnabled(), c.DEBUG = c.DEBUG || this.config.debug, c.DEBUG && j.info(\"Starting in debug mode\", {\n            this: this,\n            config: e,\n            thisC: B({}, this.config),\n            p: o,\n            s: a\n        }), this.bs(), void 0 !== (null == (n = e.bootstrap) ? void 0 : n.distinctID)) {\n            var l, u, h = this.config.get_device_id(Ni()), d = null != (l = e.bootstrap) && l.isIdentifiedID ? h : e.bootstrap.distinctID;\n            this.persistence.set_property(At, null != (u = e.bootstrap) && u.isIdentifiedID ? \"identified\" : \"anonymous\"), this.register({\n                distinct_id: e.bootstrap.distinctID,\n                $device_id: d\n            });\n        }\n        if (this.ws()) {\n            var v, f, p = Object.keys((null == (v = e.bootstrap) ? void 0 : v.featureFlags) || {}).filter((t)=>{\n                var i;\n                return !(null == (i = e.bootstrap) || null == (i = i.featureFlags) || !i[t]);\n            }).reduce((t, i)=>{\n                var r;\n                return t[i] = (null == (r = e.bootstrap) || null == (r = r.featureFlags) ? void 0 : r[i]) || !1, t;\n            }, {}), _ = Object.keys((null == (f = e.bootstrap) ? void 0 : f.featureFlagPayloads) || {}).filter((t)=>p[t]).reduce((t, i)=>{\n                var r, s;\n                null != (r = e.bootstrap) && null != (r = r.featureFlagPayloads) && r[i] && (t[i] = null == (s = e.bootstrap) || null == (s = s.featureFlagPayloads) ? void 0 : s[i]);\n                return t;\n            }, {});\n            this.featureFlags.receivedFeatureFlags({\n                featureFlags: p,\n                featureFlagPayloads: _\n            });\n        }\n        if (this.config.__preview_experimental_cookieless_mode) this.register_once({\n            distinct_id: Bt,\n            $device_id: null\n        }, \"\");\n        else if (!this.get_distinct_id()) {\n            var m = this.config.get_device_id(Ni());\n            this.register_once({\n                distinct_id: m,\n                $device_id: m\n            }, \"\"), this.persistence.set_property(At, \"anonymous\");\n        }\n        return st(t, \"onpagehide\" in self ? \"pagehide\" : \"unload\", this._handle_unload.bind(this), {\n            passive: !1\n        }), this.toolbar.maybeLoadToolbar(), e.segment ? cs(this, ()=>this.ys()) : this.ys(), E(this.config._onCapture) && this.config._onCapture !== Ho && (j.warn(\"onCapture is deprecated. Please use `before_send` instead\"), this.on(\"eventCaptured\", (t)=>this.config._onCapture(t.event, t))), this;\n    }\n    be(t) {\n        var i, e, r, s, n, a, l, u;\n        if (!o || !o.body) return j.info(\"document not ready yet, trying again in 500 milliseconds...\"), void setTimeout(()=>{\n            this.be(t);\n        }, 500);\n        this.compression = void 0, t.supportedCompression && !this.config.disable_compression && (this.compression = m(t.supportedCompression, g.GZipJS) ? g.GZipJS : m(t.supportedCompression, g.Base64) ? g.Base64 : void 0), null != (i = t.analytics) && i.endpoint && (this.analyticsDefaultEndpoint = t.analytics.endpoint), this.set_config({\n            person_profiles: this.vs ? this.vs : \"identified_only\"\n        }), null == (e = this.siteApps) || e.onRemoteConfig(t), null == (r = this.sessionRecording) || r.onRemoteConfig(t), null == (s = this.autocapture) || s.onRemoteConfig(t), null == (n = this.heatmaps) || n.onRemoteConfig(t), this.surveys.onRemoteConfig(t), null == (a = this.webVitalsAutocapture) || a.onRemoteConfig(t), null == (l = this.exceptionObserver) || l.onRemoteConfig(t), this.exceptions.onRemoteConfig(t), null == (u = this.deadClicksAutocapture) || u.onRemoteConfig(t);\n    }\n    ys() {\n        try {\n            this.config.loaded(this);\n        } catch (t) {\n            j.critical(\"`loaded` function failed\", t);\n        }\n        this.Ss(), this.config.capture_pageview && setTimeout(()=>{\n            this.consent.isOptedIn() && this.$s();\n        }, 1), new So(this).load(), this.featureFlags.decide();\n    }\n    Ss() {\n        var t;\n        this.has_opted_out_capturing() || this.config.request_batching && (null == (t = this.ps) || t.enable());\n    }\n    _dom_loaded() {\n        this.has_opted_out_capturing() || G(this.__request_queue, (t)=>this.gs(t)), this.__request_queue = [], this.Ss();\n    }\n    _handle_unload() {\n        var t, i;\n        this.config.request_batching ? (this.ks() && this.capture(\"$pageleave\"), null == (t = this.ps) || t.unload(), null == (i = this._s) || i.unload()) : this.ks() && this.capture(\"$pageleave\", null, {\n            transport: \"sendBeacon\"\n        });\n    }\n    me(t) {\n        this.__loaded && (Go ? this.__request_queue.push(t) : this.rateLimiter.isServerRateLimited(t.batchKey) || (t.transport = t.transport || this.config.api_transport, t.url = Fs(t.url, {\n            ip: this.config.ip ? 1 : 0\n        }), t.headers = B({}, this.config.request_headers), t.compression = \"best-available\" === t.compression ? this.compression : t.compression, t.fetchOptions = t.fetchOptions || this.config.fetch_options, ((t)=>{\n            var i, e, r, s = B({}, t);\n            s.timeout = s.timeout || 6e4, s.url = Fs(s.url, {\n                _: (new Date).getTime().toString(),\n                ver: c.LIB_VERSION,\n                compression: s.compression\n            });\n            var n = null !== (i = s.transport) && void 0 !== i ? i : \"fetch\", o = null !== (e = null == (r = rt(Ls, (t)=>t.transport === n)) ? void 0 : r.method) && void 0 !== e ? e : Ls[0].method;\n            if (!o) throw new Error(\"No available transport method\");\n            o(s);\n        })(B({}, t, {\n            callback: (i)=>{\n                var e, r;\n                (this.rateLimiter.checkForLimiting(i), i.statusCode >= 400) && (null == (e = (r = this.config).on_request_error) || e.call(r, i));\n                null == t.callback || t.callback(i);\n            }\n        }))));\n    }\n    gs(t) {\n        this._s ? this._s.retriableRequest(t) : this.me(t);\n    }\n    _execute_array(t) {\n        var i, e = [], r = [], s = [];\n        G(t, (t)=>{\n            t && (i = t[0], x(i) ? s.push(t) : E(t) ? t.call(this) : x(t) && \"alias\" === i ? e.push(t) : x(t) && -1 !== i.indexOf(\"capture\") && E(this[i]) ? s.push(t) : r.push(t));\n        });\n        var n = function(t, i) {\n            G(t, function(t) {\n                if (x(t[0])) {\n                    var e = i;\n                    J(t, function(t) {\n                        e = e[t[0]].apply(e, t.slice(1));\n                    });\n                } else this[t[0]].apply(this, t.slice(1));\n            }, i);\n        };\n        n(e, this), n(r, this), n(s, this);\n    }\n    ws() {\n        var t, i;\n        return (null == (t = this.config.bootstrap) ? void 0 : t.featureFlags) && Object.keys(null == (i = this.config.bootstrap) ? void 0 : i.featureFlags).length > 0 || !1;\n    }\n    push(t) {\n        this._execute_array([\n            t\n        ]);\n    }\n    capture(t, i, e) {\n        var r;\n        if (this.__loaded && this.persistence && this.sessionPersistence && this.ps) {\n            if (!this.consent.isOptedOut()) if (!R(t) && T(t)) {\n                if (this.config.opt_out_useragent_filter || !this._is_bot()) {\n                    var s = null != e && e.skip_client_rate_limiting ? void 0 : this.rateLimiter.clientRateLimitContext();\n                    if (null == s || !s.isRateLimited) {\n                        null != i && i.$current_url && !T(null == i ? void 0 : i.$current_url) && (j.error(\"Invalid `$current_url` property provided to `posthog.capture`. Input must be a string. Ignoring provided value.\"), null == i || delete i.$current_url), this.sessionPersistence.update_search_keyword(), this.config.save_campaign_params && this.sessionPersistence.update_campaign_params(), this.config.save_referrer && this.sessionPersistence.update_referrer_info(), (this.config.save_campaign_params || this.config.save_referrer) && this.persistence.set_initial_person_info();\n                        var n = new Date, o = (null == e ? void 0 : e.timestamp) || n, a = Ni(), l = {\n                            uuid: a,\n                            event: t,\n                            properties: this.calculateEventProperties(t, i || {}, o, a)\n                        };\n                        s && (l.properties.$lib_rate_limit_remaining_tokens = s.remainingTokens), (null == e ? void 0 : e.$set) && (l.$set = null == e ? void 0 : e.$set);\n                        var u = this.xs(null == e ? void 0 : e.$set_once);\n                        u && (l.$set_once = u), (l = tt(l, null != e && e._noTruncate ? null : this.config.properties_string_max_length)).timestamp = o, R(null == e ? void 0 : e.timestamp) || (l.properties.$event_time_override_provided = !0, l.properties.$event_time_override_system_time = n);\n                        var h = B({}, l.properties.$set, l.$set);\n                        if (P(h) || this.setPersonPropertiesForFlags(h), !O(this.config.before_send)) {\n                            var d = this.Es(l);\n                            if (!d) return;\n                            l = d;\n                        }\n                        this.us.emit(\"eventCaptured\", l);\n                        var v = {\n                            method: \"POST\",\n                            url: null !== (r = null == e ? void 0 : e._url) && void 0 !== r ? r : this.requestRouter.endpointFor(\"api\", this.analyticsDefaultEndpoint),\n                            data: l,\n                            compression: \"best-available\",\n                            batchKey: null == e ? void 0 : e._batchKey\n                        };\n                        return !this.config.request_batching || e && (null == e || !e._batchKey) || null != e && e.send_instantly ? this.gs(v) : this.ps.enqueue(v), l;\n                    }\n                    j.critical(\"This capture call is ignored due to client rate limiting.\");\n                }\n            } else j.error(\"No event name provided to posthog.capture\");\n        } else j.uninitializedWarning(\"posthog.capture\");\n    }\n    Ne(t) {\n        return this.on(\"eventCaptured\", (i)=>t(i.event, i));\n    }\n    calculateEventProperties(t, i, e, r, s) {\n        if (e = e || new Date, !this.persistence || !this.sessionPersistence) return i;\n        var n = s ? void 0 : this.persistence.remove_event_timer(t), a = B({}, i);\n        if (a.token = this.config.token, this.config.__preview_experimental_cookieless_mode && (a.$cookieless_mode = !0), \"$snapshot\" === t) {\n            var l = B({}, this.persistence.properties(), this.sessionPersistence.properties());\n            return a.distinct_id = l.distinct_id, (!T(a.distinct_id) && !F(a.distinct_id) || M(a.distinct_id)) && j.error(\"Invalid distinct_id for replay event. This indicates a bug in your implementation\"), a;\n        }\n        var u, h = to(this.config.mask_personal_data_properties, this.config.custom_personal_data_properties);\n        if (this.sessionManager) {\n            var { sessionId: v, windowId: c } = this.sessionManager.checkAndGetSessionAndWindowId(s, e.getTime());\n            a.$session_id = v, a.$window_id = c;\n        }\n        this.sessionPropsManager && V(a, this.sessionPropsManager.getSessionProps());\n        try {\n            var f;\n            this.sessionRecording && V(a, this.sessionRecording.sdkDebugProperties), a.$sdk_debug_retry_queue_size = null == (f = this._s) ? void 0 : f.length;\n        } catch (t) {\n            a.$sdk_debug_error_capturing_properties = String(t);\n        }\n        if (this.requestRouter.region === No.CUSTOM && (a.$lib_custom_api_host = this.config.api_host), u = \"$pageview\" !== t || s ? \"$pageleave\" !== t || s ? this.pageViewManager.doEvent() : this.pageViewManager.doPageLeave(e) : this.pageViewManager.doPageView(e, r), a = V(a, u), \"$pageview\" === t && o && (a.title = o.title), !R(n)) {\n            var p = e.getTime() - n;\n            a.$duration = parseFloat((p / 1e3).toFixed(3));\n        }\n        d && this.config.opt_out_useragent_filter && (a.$browser_type = this._is_bot() ? \"bot\" : \"browser\"), (a = V({}, h, this.persistence.properties(), this.sessionPersistence.properties(), a)).$is_identified = this._isIdentified(), x(this.config.property_denylist) ? J(this.config.property_denylist, function(t) {\n            delete a[t];\n        }) : j.error(\"Invalid value for property_denylist config: \" + this.config.property_denylist + \" or property_blacklist config: \" + this.config.property_blacklist);\n        var g = this.config.sanitize_properties;\n        g && (j.error(\"sanitize_properties is deprecated. Use before_send instead\"), a = g(a, t));\n        var _ = this.Is();\n        return a.$process_person_profile = _, _ && !s && this.Ps(\"_calculate_event_properties\"), a;\n    }\n    xs(t) {\n        var i;\n        if (!this.persistence || !this.Is()) return t;\n        if (this.ls) return t;\n        var e = this.persistence.get_initial_props(), r = null == (i = this.sessionPropsManager) ? void 0 : i.getSetOnceProps(), s = V({}, e, r || {}, t || {}), n = this.config.sanitize_properties;\n        return n && (j.error(\"sanitize_properties is deprecated. Use before_send instead\"), s = n(s, \"$set_once\")), this.ls = !0, P(s) ? void 0 : s;\n    }\n    register(t, i) {\n        var e;\n        null == (e = this.persistence) || e.register(t, i);\n    }\n    register_once(t, i, e) {\n        var r;\n        null == (r = this.persistence) || r.register_once(t, i, e);\n    }\n    register_for_session(t) {\n        var i;\n        null == (i = this.sessionPersistence) || i.register(t);\n    }\n    unregister(t) {\n        var i;\n        null == (i = this.persistence) || i.unregister(t);\n    }\n    unregister_for_session(t) {\n        var i;\n        null == (i = this.sessionPersistence) || i.unregister(t);\n    }\n    Rs(t, i) {\n        this.register({\n            [t]: i\n        });\n    }\n    getFeatureFlag(t, i) {\n        return this.featureFlags.getFeatureFlag(t, i);\n    }\n    getFeatureFlagPayload(t) {\n        var i = this.featureFlags.getFeatureFlagPayload(t);\n        try {\n            return JSON.parse(i);\n        } catch (t) {\n            return i;\n        }\n    }\n    isFeatureEnabled(t, i) {\n        return this.featureFlags.isFeatureEnabled(t, i);\n    }\n    reloadFeatureFlags() {\n        this.featureFlags.reloadFeatureFlags();\n    }\n    updateEarlyAccessFeatureEnrollment(t, i) {\n        this.featureFlags.updateEarlyAccessFeatureEnrollment(t, i);\n    }\n    getEarlyAccessFeatures(t, i, e) {\n        return void 0 === i && (i = !1), this.featureFlags.getEarlyAccessFeatures(t, i, e);\n    }\n    on(t, i) {\n        return this.us.on(t, i);\n    }\n    onFeatureFlags(t) {\n        return this.featureFlags.onFeatureFlags(t);\n    }\n    onSurveysLoaded(t) {\n        return this.surveys.onSurveysLoaded(t);\n    }\n    onSessionId(t) {\n        var i, e;\n        return null !== (i = null == (e = this.sessionManager) ? void 0 : e.onSessionId(t)) && void 0 !== i ? i : ()=>{};\n    }\n    getSurveys(t, i) {\n        void 0 === i && (i = !1), this.surveys.getSurveys(t, i);\n    }\n    getActiveMatchingSurveys(t, i) {\n        void 0 === i && (i = !1), this.surveys.getActiveMatchingSurveys(t, i);\n    }\n    renderSurvey(t, i) {\n        this.surveys.renderSurvey(t, i);\n    }\n    canRenderSurvey(t) {\n        return this.surveys.canRenderSurvey(t);\n    }\n    canRenderSurveyAsync(t, i) {\n        return void 0 === i && (i = !1), this.surveys.canRenderSurveyAsync(t, i);\n    }\n    identify(t, i, e) {\n        if (!this.__loaded || !this.persistence) return j.uninitializedWarning(\"posthog.identify\");\n        if (F(t) && (t = t.toString(), j.warn(\"The first argument to posthog.identify was a number, but it should be a string. It has been converted to a string.\")), t) {\n            if ([\n                \"distinct_id\",\n                \"distinctid\"\n            ].includes(t.toLowerCase())) j.critical('The string \"' + t + '\" was set in posthog.identify which indicates an error. This ID should be unique to the user and not a hardcoded string.');\n            else if (this.Ps(\"posthog.identify\")) {\n                var r = this.get_distinct_id();\n                if (this.register({\n                    $user_id: t\n                }), !this.get_property(\"$device_id\")) {\n                    var s = r;\n                    this.register_once({\n                        $had_persisted_distinct_id: !0,\n                        $device_id: s\n                    }, \"\");\n                }\n                t !== r && t !== this.get_property(ot) && (this.unregister(ot), this.register({\n                    distinct_id: t\n                }));\n                var n = \"anonymous\" === (this.persistence.get_property(At) || \"anonymous\");\n                t !== r && n ? (this.persistence.set_property(At, \"identified\"), this.setPersonPropertiesForFlags(B({}, e || {}, i || {}), !1), this.capture(\"$identify\", {\n                    distinct_id: t,\n                    $anon_distinct_id: r\n                }, {\n                    $set: i || {},\n                    $set_once: e || {}\n                }), this.cs = js(t, i, e), this.featureFlags.setAnonymousDistinctId(r)) : (i || e) && this.setPersonProperties(i, e), t !== r && (this.reloadFeatureFlags(), this.unregister(Ft));\n            }\n        } else j.error(\"Unique user id has not been set in posthog.identify\");\n    }\n    setPersonProperties(t, i) {\n        if ((t || i) && this.Ps(\"posthog.setPersonProperties\")) {\n            var e = js(this.get_distinct_id(), t, i);\n            this.cs !== e ? (this.setPersonPropertiesForFlags(B({}, i || {}, t || {})), this.capture(\"$set\", {\n                $set: t || {},\n                $set_once: i || {}\n            }), this.cs = e) : j.info(\"A duplicate setPersonProperties call was made with the same properties. It has been ignored.\");\n        }\n    }\n    group(t, i, e) {\n        if (t && i) {\n            if (this.Ps(\"posthog.group\")) {\n                var r = this.getGroups();\n                r[t] !== i && this.resetGroupPropertiesForFlags(t), this.register({\n                    $groups: B({}, r, {\n                        [t]: i\n                    })\n                }), e && (this.capture(\"$groupidentify\", {\n                    $group_type: t,\n                    $group_key: i,\n                    $group_set: e\n                }), this.setGroupPropertiesForFlags({\n                    [t]: e\n                })), r[t] === i || e || this.reloadFeatureFlags();\n            }\n        } else j.error(\"posthog.group requires a group type and group key\");\n    }\n    resetGroups() {\n        this.register({\n            $groups: {}\n        }), this.resetGroupPropertiesForFlags(), this.reloadFeatureFlags();\n    }\n    setPersonPropertiesForFlags(t, i) {\n        void 0 === i && (i = !0), this.featureFlags.setPersonPropertiesForFlags(t, i);\n    }\n    resetPersonPropertiesForFlags() {\n        this.featureFlags.resetPersonPropertiesForFlags();\n    }\n    setGroupPropertiesForFlags(t, i) {\n        void 0 === i && (i = !0), this.Ps(\"posthog.setGroupPropertiesForFlags\") && this.featureFlags.setGroupPropertiesForFlags(t, i);\n    }\n    resetGroupPropertiesForFlags(t) {\n        this.featureFlags.resetGroupPropertiesForFlags(t);\n    }\n    reset(t) {\n        var i, e, r, s;\n        if (j.info(\"reset\"), !this.__loaded) return j.uninitializedWarning(\"posthog.reset\");\n        var n = this.get_property(\"$device_id\");\n        if (this.consent.reset(), null == (i = this.persistence) || i.clear(), null == (e = this.sessionPersistence) || e.clear(), this.surveys.reset(), null == (r = this.persistence) || r.set_property(At, \"anonymous\"), null == (s = this.sessionManager) || s.resetSessionId(), this.cs = null, this.config.__preview_experimental_cookieless_mode) this.register_once({\n            distinct_id: Bt,\n            $device_id: null\n        }, \"\");\n        else {\n            var o = this.config.get_device_id(Ni());\n            this.register_once({\n                distinct_id: o,\n                $device_id: t ? o : n\n            }, \"\");\n        }\n        this.register({\n            $last_posthog_reset: (new Date).toISOString()\n        }, 1);\n    }\n    get_distinct_id() {\n        return this.get_property(\"distinct_id\");\n    }\n    getGroups() {\n        return this.get_property(\"$groups\") || {};\n    }\n    get_session_id() {\n        var t, i;\n        return null !== (t = null == (i = this.sessionManager) ? void 0 : i.checkAndGetSessionAndWindowId(!0).sessionId) && void 0 !== t ? t : \"\";\n    }\n    get_session_replay_url(t) {\n        if (!this.sessionManager) return \"\";\n        var { sessionId: i, sessionStartTimestamp: e } = this.sessionManager.checkAndGetSessionAndWindowId(!0), r = this.requestRouter.endpointFor(\"ui\", \"/project/\" + this.config.token + \"/replay/\" + i);\n        if (null != t && t.withTimestamp && e) {\n            var s, n = null !== (s = t.timestampLookBack) && void 0 !== s ? s : 10;\n            if (!e) return r;\n            r += \"?t=\" + Math.max(Math.floor(((new Date).getTime() - e) / 1e3) - n, 0);\n        }\n        return r;\n    }\n    alias(t, i) {\n        return t === this.get_property(nt) ? (j.critical(\"Attempting to create alias for existing People user - aborting.\"), -2) : this.Ps(\"posthog.alias\") ? (R(i) && (i = this.get_distinct_id()), t !== i ? (this.Rs(ot, t), this.capture(\"$create_alias\", {\n            alias: t,\n            distinct_id: i\n        })) : (j.warn(\"alias matches current distinct_id - skipping api call.\"), this.identify(t), -1)) : void 0;\n    }\n    set_config(t) {\n        var i, e, r, s, n = B({}, this.config);\n        I(t) && (V(this.config, Vo(t)), null == (i = this.persistence) || i.update_config(this.config, n), this.sessionPersistence = \"sessionStorage\" === this.config.persistence || \"memory\" === this.config.persistence ? this.persistence : new co(B({}, this.config, {\n            persistence: \"sessionStorage\"\n        })), Wi.O() && \"true\" === Wi.A(\"ph_debug\") && (this.config.debug = !0), this.config.debug && (c.DEBUG = !0, j.info(\"set_config\", JSON.stringify({\n            config: t,\n            oldConfig: n,\n            newConfig: B({}, this.config)\n        }, null, 2))), null == (e = this.sessionRecording) || e.startIfEnabledOrStop(), null == (r = this.autocapture) || r.startIfEnabled(), null == (s = this.heatmaps) || s.startIfEnabled(), this.surveys.loadIfEnabled(), this.bs());\n    }\n    startSessionRecording(t) {\n        var i = !0 === t, e = {\n            sampling: i || !(null == t || !t.sampling),\n            linked_flag: i || !(null == t || !t.linked_flag),\n            url_trigger: i || !(null == t || !t.url_trigger),\n            event_trigger: i || !(null == t || !t.event_trigger)\n        };\n        if (Object.values(e).some(Boolean)) {\n            var r, s, n, o, a;\n            if (null == (r = this.sessionManager) || r.checkAndGetSessionAndWindowId(), e.sampling) null == (s = this.sessionRecording) || s.overrideSampling();\n            if (e.linked_flag) null == (n = this.sessionRecording) || n.overrideLinkedFlag();\n            if (e.url_trigger) null == (o = this.sessionRecording) || o.overrideTrigger(\"url\");\n            if (e.event_trigger) null == (a = this.sessionRecording) || a.overrideTrigger(\"event\");\n        }\n        this.set_config({\n            disable_session_recording: !1\n        });\n    }\n    stopSessionRecording() {\n        this.set_config({\n            disable_session_recording: !0\n        });\n    }\n    sessionRecordingStarted() {\n        var t;\n        return !(null == (t = this.sessionRecording) || !t.started);\n    }\n    captureException(t, i) {\n        var e = new Error(\"PostHog syntheticException\");\n        this.exceptions.sendExceptionEvent(B({}, Ae(((t)=>t instanceof Error)(t) ? {\n            error: t,\n            event: t.message\n        } : {\n            event: t\n        }, {\n            syntheticException: e\n        }), i));\n    }\n    loadToolbar(t) {\n        return this.toolbar.loadToolbar(t);\n    }\n    get_property(t) {\n        var i;\n        return null == (i = this.persistence) ? void 0 : i.props[t];\n    }\n    getSessionProperty(t) {\n        var i;\n        return null == (i = this.sessionPersistence) ? void 0 : i.props[t];\n    }\n    toString() {\n        var t, i = null !== (t = this.config.name) && void 0 !== t ? t : Wo;\n        return i !== Wo && (i = Wo + \".\" + i), i;\n    }\n    _isIdentified() {\n        var t, i;\n        return \"identified\" === (null == (t = this.persistence) ? void 0 : t.get_property(At)) || \"identified\" === (null == (i = this.sessionPersistence) ? void 0 : i.get_property(At));\n    }\n    Is() {\n        var t, i;\n        return !(\"never\" === this.config.person_profiles || \"identified_only\" === this.config.person_profiles && !this._isIdentified() && P(this.getGroups()) && (null == (t = this.persistence) || null == (t = t.props) || !t[ot]) && (null == (i = this.persistence) || null == (i = i.props) || !i[Ut]));\n    }\n    ks() {\n        return !0 === this.config.capture_pageleave || \"if_capture_pageview\" === this.config.capture_pageleave && (!0 === this.config.capture_pageview || \"history_change\" === this.config.capture_pageview);\n    }\n    createPersonProfile() {\n        this.Is() || this.Ps(\"posthog.createPersonProfile\") && this.setPersonProperties({}, {});\n    }\n    Ps(t) {\n        return \"never\" === this.config.person_profiles ? (j.error(t + ' was called, but process_person is set to \"never\". This call will be ignored.'), !1) : (this.Rs(Ut, !0), !0);\n    }\n    bs() {\n        var t, i, e, r, s = this.consent.isOptedOut(), n = this.config.opt_out_persistence_by_default, o = this.config.disable_persistence || s && !!n;\n        (null == (t = this.persistence) ? void 0 : t.xe) !== o && (null == (e = this.persistence) || e.set_disabled(o));\n        (null == (i = this.sessionPersistence) ? void 0 : i.xe) !== o && (null == (r = this.sessionPersistence) || r.set_disabled(o));\n    }\n    opt_in_capturing(t) {\n        var i;\n        (this.consent.optInOut(!0), this.bs(), R(null == t ? void 0 : t.captureEventName) || null != t && t.captureEventName) && this.capture(null !== (i = null == t ? void 0 : t.captureEventName) && void 0 !== i ? i : \"$opt_in\", null == t ? void 0 : t.captureProperties, {\n            send_instantly: !0\n        });\n        this.config.capture_pageview && this.$s();\n    }\n    opt_out_capturing() {\n        this.consent.optInOut(!1), this.bs();\n    }\n    has_opted_in_capturing() {\n        return this.consent.isOptedIn();\n    }\n    has_opted_out_capturing() {\n        return this.consent.isOptedOut();\n    }\n    clear_opt_in_out_capturing() {\n        this.consent.reset(), this.bs();\n    }\n    _is_bot() {\n        return n ? Lo(n, this.config.custom_blocked_useragents) : void 0;\n    }\n    $s() {\n        o && (\"visible\" === o.visibilityState ? this.hs || (this.hs = !0, this.capture(\"$pageview\", {\n            title: o.title\n        }, {\n            send_instantly: !0\n        }), this.ds && (o.removeEventListener(\"visibilitychange\", this.ds), this.ds = null)) : this.ds || (this.ds = this.$s.bind(this), st(o, \"visibilitychange\", this.ds)));\n    }\n    debug(i) {\n        !1 === i ? (null == t || t.console.log(\"You've disabled debug mode.\"), localStorage && localStorage.removeItem(\"ph_debug\"), this.set_config({\n            debug: !1\n        })) : (null == t || t.console.log(\"You're now in debug mode. All calls to PostHog will be logged in your console.\\nYou can disable this with `posthog.debug(false)`.\"), localStorage && localStorage.setItem(\"ph_debug\", \"true\"), this.set_config({\n            debug: !0\n        }));\n    }\n    Es(t) {\n        if (O(this.config.before_send)) return t;\n        var i = x(this.config.before_send) ? this.config.before_send : [\n            this.config.before_send\n        ], e = t;\n        for (var r of i){\n            if (e = r(e), O(e)) {\n                var s = \"Event '\" + t.event + \"' was rejected in beforeSend function\";\n                return L(t.event) ? j.warn(s + \". This can cause unexpected behavior.\") : j.info(s), null;\n            }\n            e.properties && !P(e.properties) || j.warn(\"Event '\" + t.event + \"' has no properties after beforeSend function, this is likely an error.\");\n        }\n        return e;\n    }\n    getPageViewId() {\n        var t;\n        return null == (t = this.pageViewManager.ne) ? void 0 : t.pageViewId;\n    }\n    captureTraceFeedback(t, i) {\n        this.capture(\"$ai_feedback\", {\n            $ai_trace_id: String(t),\n            $ai_feedback_text: i\n        });\n    }\n    captureTraceMetric(t, i, e) {\n        this.capture(\"$ai_metric\", {\n            $ai_trace_id: String(t),\n            $ai_metric_name: i,\n            $ai_metric_value: String(e)\n        });\n    }\n}\n!function(t, i) {\n    for(var e = 0; e < i.length; e++)t.prototype[i[e]] = Q(t.prototype[i[e]]);\n}(Yo, [\n    \"identify\"\n]);\nvar Xo, Qo = function(t) {\n    return t.Button = \"button\", t.Tab = \"tab\", t.Selector = \"selector\", t;\n}({}), Zo = function(t) {\n    return t.TopLeft = \"top_left\", t.TopRight = \"top_right\", t.TopCenter = \"top_center\", t.MiddleLeft = \"middle_left\", t.MiddleRight = \"middle_right\", t.MiddleCenter = \"middle_center\", t.Left = \"left\", t.Center = \"center\", t.Right = \"right\", t.NextToTrigger = \"next_to_trigger\", t;\n}({}), ta = function(t) {\n    return t.Popover = \"popover\", t.API = \"api\", t.Widget = \"widget\", t;\n}({}), ia = function(t) {\n    return t.Open = \"open\", t.MultipleChoice = \"multiple_choice\", t.SingleChoice = \"single_choice\", t.Rating = \"rating\", t.Link = \"link\", t;\n}({}), ea = function(t) {\n    return t.NextQuestion = \"next_question\", t.End = \"end\", t.ResponseBased = \"response_based\", t.SpecificQuestion = \"specific_question\", t;\n}({}), ra = function(t) {\n    return t.Once = \"once\", t.Recurring = \"recurring\", t.Always = \"always\", t;\n}({}), sa = (Xo = Bo[Wo] = new Yo, function() {\n    function i() {\n        i.done || (i.done = !0, Go = !1, J(Bo, function(t) {\n            t._dom_loaded();\n        }));\n    }\n    null != o && o.addEventListener ? \"complete\" === o.readyState ? i() : st(o, \"DOMContentLoaded\", i, {\n        capture: !1\n    }) : t && j.error(\"Browser doesn't support `document.addEventListener` so PostHog couldn't be initialized\");\n}(), Xo);\n //# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGhvZy1qcy9kaXN0L21vZHVsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsSUFBRSxNQUFhLEdBQWNDLENBQU1BLEdBQUMsS0FBSyxHQUFFQyxJQUFFLGVBQWEsT0FBT0MsYUFBV0EsYUFBV0gsR0FBRUksSUFBRUMsTUFBTUMsU0FBUyxFQUFDQyxJQUFFSCxFQUFFSSxPQUFPLEVBQUNDLElBQUVMLEVBQUVNLE9BQU8sRUFBQ0MsSUFBRSxRQUFNVCxJQUFFLEtBQUssSUFBRUEsRUFBRVUsU0FBUyxFQUFDQyxJQUFFLFFBQU1YLElBQUUsS0FBSyxJQUFFQSxFQUFFWSxRQUFRLEVBQUNDLElBQUUsUUFBTWIsSUFBRSxLQUFLLElBQUVBLEVBQUVjLFFBQVEsRUFBQ0MsSUFBRSxRQUFNZixJQUFFLEtBQUssSUFBRUEsRUFBRWdCLEtBQUssRUFBQ0MsSUFBRSxRQUFNakIsS0FBR0EsRUFBRWtCLGNBQWMsSUFBRSxxQkFBb0IsSUFBSWxCLEVBQUVrQixjQUFjLEdBQUNsQixFQUFFa0IsY0FBYyxHQUFDLEtBQUssR0FBRUMsSUFBRSxRQUFNbkIsSUFBRSxLQUFLLElBQUVBLEVBQUVvQixlQUFlLEVBQUNDLElBQUUsUUFBTVosSUFBRSxLQUFLLElBQUVBLEVBQUVhLFNBQVMsRUFBQ0MsSUFBRSxRQUFNekIsSUFBRUEsSUFBRSxDQUFDLEdBQUUwQixJQUFFO0lBQUNDLE9BQU0sQ0FBQztJQUFFQyxhQUFZO0FBQVMsR0FBRUMsSUFBRSxxQkFBb0JDLElBQUU7SUFBQztJQUFZO0lBQVk7SUFBYTtJQUFPO0lBQW1CO0lBQWM7SUFBZTtJQUFZO0lBQWlCO0lBQWdCO0lBQTZCO0lBQTBCO0lBQTZCO0NBQXVCLEVBQUNDLElBQUUsU0FBUy9CLENBQUM7SUFBRSxPQUFPQSxFQUFFZ0MsTUFBTSxHQUFDLFdBQVVoQyxFQUFFaUMsTUFBTSxHQUFDLFVBQVNqQztBQUFDLEVBQUUsQ0FBQyxJQUFHa0MsSUFBRTtJ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SUFBSThCLElBQUc7SUFBVyxTQUFTMTNDO1FBQUlBLEVBQUV1L0MsSUFBSSxJQUFHdi9DLENBQUFBLEVBQUV1L0MsSUFBSSxHQUFDLENBQUMsR0FBRTFKLEtBQUcsQ0FBQyxHQUFFL3VDLEVBQUU0dUMsSUFBSSxTQUFTNTFDLENBQUM7WUFBRUEsRUFBRTQ1QyxXQUFXO1FBQUUsRUFBRTtJQUFFO0lBQUMsUUFBTS80QyxLQUFHQSxFQUFFZ0YsZ0JBQWdCLEdBQUMsZUFBYWhGLEVBQUU4NkIsVUFBVSxHQUFDejdCLE1BQUltSSxHQUFHeEgsR0FBRSxvQkFBbUJYLEdBQUU7UUFBQ29JLFNBQVEsQ0FBQztJQUFDLEtBQUd0SSxLQUFHMkUsRUFBRUosS0FBSyxDQUFDO0FBQXlGLEtBQUk4NEMsRUFBQztBQUFpUyxDQUM5OGtLLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL21vcnRnYWdlLWNhbGN1bGF0b3IvLi9ub2RlX21vZHVsZXMvcG9zdGhvZy1qcy9kaXN0L21vZHVsZS5qcz9jNjNmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OnZvaWQgMCxpPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6dCxlPUFycmF5LnByb3RvdHlwZSxyPWUuZm9yRWFjaCxzPWUuaW5kZXhPZixuPW51bGw9PWk/dm9pZCAwOmkubmF2aWdhdG9yLG89bnVsbD09aT92b2lkIDA6aS5kb2N1bWVudCxhPW51bGw9PWk/dm9pZCAwOmkubG9jYXRpb24sbD1udWxsPT1pP3ZvaWQgMDppLmZldGNoLHU9bnVsbCE9aSYmaS5YTUxIdHRwUmVxdWVzdCYmXCJ3aXRoQ3JlZGVudGlhbHNcImluIG5ldyBpLlhNTEh0dHBSZXF1ZXN0P2kuWE1MSHR0cFJlcXVlc3Q6dm9pZCAwLGg9bnVsbD09aT92b2lkIDA6aS5BYm9ydENvbnRyb2xsZXIsZD1udWxsPT1uP3ZvaWQgMDpuLnVzZXJBZ2VudCx2PW51bGwhPXQ/dDp7fSxjPXtERUJVRzohMSxMSUJfVkVSU0lPTjpcIjEuMjQ2LjBcIn0sZj1cIiRjb3B5X2F1dG9jYXB0dXJlXCIscD1bXCIkc25hcHNob3RcIixcIiRwYWdldmlld1wiLFwiJHBhZ2VsZWF2ZVwiLFwiJHNldFwiLFwic3VydmV5IGRpc21pc3NlZFwiLFwic3VydmV5IHNlbnRcIixcInN1cnZleSBzaG93blwiLFwiJGlkZW50aWZ5XCIsXCIkZ3JvdXBpZGVudGlmeVwiLFwiJGNyZWF0ZV9hbGlhc1wiLFwiJCRjbGllbnRfaW5nZXN0aW9uX3dhcm5pbmdcIixcIiR3ZWJfZXhwZXJpbWVudF9hcHBsaWVkXCIsXCIkZmVhdHVyZV9lbnJvbGxtZW50X3VwZGF0ZVwiLFwiJGZlYXR1cmVfZmxhZ19jYWxsZWRcIl0sZz1mdW5jdGlvbih0KXtyZXR1cm4gdC5HWmlwSlM9XCJnemlwLWpzXCIsdC5CYXNlNjQ9XCJiYXNlNjRcIix0fSh7fSksXz1bXCJmYXRhbFwiLFwiZXJyb3JcIixcIndhcm5pbmdcIixcImxvZ1wiLFwiaW5mb1wiLFwiZGVidWdcIl07ZnVuY3Rpb24gbSh0LGkpe3JldHVybi0xIT09dC5pbmRleE9mKGkpfXZhciBiPWZ1bmN0aW9uKHQpe3JldHVybiB0LnRyaW0oKX0sdz1mdW5jdGlvbih0KXtyZXR1cm4gdC5yZXBsYWNlKC9eXFwkLyxcIlwiKX07dmFyIHk9QXJyYXkuaXNBcnJheSxTPU9iamVjdC5wcm90b3R5cGUsJD1TLmhhc093blByb3BlcnR5LGs9Uy50b1N0cmluZyx4PXl8fGZ1bmN0aW9uKHQpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09PWsuY2FsbCh0KX0sRT10PT5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0LEk9dD0+dD09PU9iamVjdCh0KSYmIXgodCksUD10PT57aWYoSSh0KSl7Zm9yKHZhciBpIGluIHQpaWYoJC5jYWxsKHQsaSkpcmV0dXJuITE7cmV0dXJuITB9cmV0dXJuITF9LFI9dD0+dm9pZCAwPT09dCxUPXQ9PlwiW29iamVjdCBTdHJpbmddXCI9PWsuY2FsbCh0KSxNPXQ9PlQodCkmJjA9PT10LnRyaW0oKS5sZW5ndGgsQz10PT5udWxsPT09dCxPPXQ9PlIodCl8fEModCksRj10PT5cIltvYmplY3QgTnVtYmVyXVwiPT1rLmNhbGwodCksQT10PT5cIltvYmplY3QgQm9vbGVhbl1cIj09PWsuY2FsbCh0KSxEPXQ9PnQgaW5zdGFuY2VvZiBGb3JtRGF0YSxMPXQ9Pm0ocCx0KSxOPWk9Pnt2YXIgZT17dDpmdW5jdGlvbihlKXtpZih0JiYoYy5ERUJVR3x8di5QT1NUSE9HX0RFQlVHKSYmIVIodC5jb25zb2xlKSYmdC5jb25zb2xlKXtmb3IodmFyIHI9KFwiX19ycndlYl9vcmlnaW5hbF9fXCJpbiB0LmNvbnNvbGVbZV0/dC5jb25zb2xlW2VdLl9fcnJ3ZWJfb3JpZ2luYWxfXzp0LmNvbnNvbGVbZV0pLHM9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheShzPjE/cy0xOjApLG89MTtvPHM7bysrKW5bby0xXT1hcmd1bWVudHNbb107cihpLC4uLm4pfX0saW5mbzpmdW5jdGlvbigpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLGk9bmV3IEFycmF5KHQpLHI9MDtyPHQ7cisrKWlbcl09YXJndW1lbnRzW3JdO2UudChcImxvZ1wiLC4uLmkpfSx3YXJuOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsaT1uZXcgQXJyYXkodCkscj0wO3I8dDtyKyspaVtyXT1hcmd1bWVudHNbcl07ZS50KFwid2FyblwiLC4uLmkpfSxlcnJvcjpmdW5jdGlvbigpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLGk9bmV3IEFycmF5KHQpLHI9MDtyPHQ7cisrKWlbcl09YXJndW1lbnRzW3JdO2UudChcImVycm9yXCIsLi4uaSl9LGNyaXRpY2FsOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsZT1uZXcgQXJyYXkodCkscj0wO3I8dDtyKyspZVtyXT1hcmd1bWVudHNbcl07Y29uc29sZS5lcnJvcihpLC4uLmUpfSx1bmluaXRpYWxpemVkV2FybmluZzp0PT57ZS5lcnJvcihcIllvdSBtdXN0IGluaXRpYWxpemUgUG9zdEhvZyBiZWZvcmUgY2FsbGluZyBcIit0KX0sY3JlYXRlTG9nZ2VyOnQ9Pk4oaStcIiBcIit0KX07cmV0dXJuIGV9LGo9TihcIltQb3N0SG9nLmpzXVwiKSx6PWouY3JlYXRlTG9nZ2VyLFU9eihcIltFeHRlcm5hbFNjcmlwdHNMb2FkZXJdXCIpLHE9KHQsaSxlKT0+e2lmKHQuY29uZmlnLmRpc2FibGVfZXh0ZXJuYWxfZGVwZW5kZW5jeV9sb2FkaW5nKXJldHVybiBVLndhcm4oaStcIiB3YXMgcmVxdWVzdGVkIGJ1dCBsb2FkaW5nIG9mIGV4dGVybmFsIHNjcmlwdHMgaXMgZGlzYWJsZWQuXCIpLGUoXCJMb2FkaW5nIG9mIGV4dGVybmFsIHNjcmlwdHMgaXMgZGlzYWJsZWRcIik7dmFyIHI9bnVsbD09bz92b2lkIDA6by5xdWVyeVNlbGVjdG9yQWxsKFwic2NyaXB0XCIpO2lmKHIpZm9yKHZhciBzPTA7czxyLmxlbmd0aDtzKyspaWYocltzXS5zcmM9PT1pKXJldHVybiBlKCk7dmFyIG49KCk9PntpZighbylyZXR1cm4gZShcImRvY3VtZW50IG5vdCBmb3VuZFwiKTt2YXIgcj1vLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7aWYoci50eXBlPVwidGV4dC9qYXZhc2NyaXB0XCIsci5jcm9zc09yaWdpbj1cImFub255bW91c1wiLHIuc3JjPWksci5vbmxvYWQ9dD0+ZSh2b2lkIDAsdCksci5vbmVycm9yPXQ9PmUodCksdC5jb25maWcucHJlcGFyZV9leHRlcm5hbF9kZXBlbmRlbmN5X3NjcmlwdCYmKHI9dC5jb25maWcucHJlcGFyZV9leHRlcm5hbF9kZXBlbmRlbmN5X3NjcmlwdChyKSksIXIpcmV0dXJuIGUoXCJwcmVwYXJlX2V4dGVybmFsX2RlcGVuZGVuY3lfc2NyaXB0IHJldHVybmVkIG51bGxcIik7dmFyIHMsbj1vLnF1ZXJ5U2VsZWN0b3JBbGwoXCJib2R5ID4gc2NyaXB0XCIpO24ubGVuZ3RoPjA/bnVsbD09KHM9blswXS5wYXJlbnROb2RlKXx8cy5pbnNlcnRCZWZvcmUocixuWzBdKTpvLmJvZHkuYXBwZW5kQ2hpbGQocil9O251bGwhPW8mJm8uYm9keT9uKCk6bnVsbD09b3x8by5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLG4pfTtmdW5jdGlvbiBCKCl7cmV0dXJuIEI9T2JqZWN0LmFzc2lnbj9PYmplY3QuYXNzaWduLmJpbmQoKTpmdW5jdGlvbih0KXtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXt2YXIgZT1hcmd1bWVudHNbaV07Zm9yKHZhciByIGluIGUpKHt9KS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscikmJih0W3JdPWVbcl0pfXJldHVybiB0fSxCLmFwcGx5KG51bGwsYXJndW1lbnRzKX1mdW5jdGlvbiBIKHQsaSl7aWYobnVsbD09dClyZXR1cm57fTt2YXIgZT17fTtmb3IodmFyIHIgaW4gdClpZih7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQscikpe2lmKC0xIT09aS5pbmRleE9mKHIpKWNvbnRpbnVlO2Vbcl09dFtyXX1yZXR1cm4gZX12Ll9fUG9zdGhvZ0V4dGVuc2lvbnNfXz12Ll9fUG9zdGhvZ0V4dGVuc2lvbnNfX3x8e30sdi5fX1Bvc3Rob2dFeHRlbnNpb25zX18ubG9hZEV4dGVybmFsRGVwZW5kZW5jeT0odCxpLGUpPT57dmFyIHI9XCIvc3RhdGljL1wiK2krXCIuanM/dj1cIit0LnZlcnNpb247aWYoXCJyZW1vdGUtY29uZmlnXCI9PT1pJiYocj1cIi9hcnJheS9cIit0LmNvbmZpZy50b2tlbitcIi9jb25maWcuanNcIiksXCJ0b29sYmFyXCI9PT1pKXt2YXIgcz0zZTU7cj1yK1wiJnQ9XCIrTWF0aC5mbG9vcihEYXRlLm5vdygpL3MpKnN9dmFyIG49dC5yZXF1ZXN0Um91dGVyLmVuZHBvaW50Rm9yKFwiYXNzZXRzXCIscik7cSh0LG4sZSl9LHYuX19Qb3N0aG9nRXh0ZW5zaW9uc19fLmxvYWRTaXRlQXBwPSh0LGksZSk9Pnt2YXIgcj10LnJlcXVlc3RSb3V0ZXIuZW5kcG9pbnRGb3IoXCJhcGlcIixpKTtxKHQscixlKX07dmFyIFc9e307ZnVuY3Rpb24gRyh0LGksZSl7aWYoeCh0KSlpZihyJiZ0LmZvckVhY2g9PT1yKXQuZm9yRWFjaChpLGUpO2Vsc2UgaWYoXCJsZW5ndGhcImluIHQmJnQubGVuZ3RoPT09K3QubGVuZ3RoKWZvcih2YXIgcz0wLG49dC5sZW5ndGg7czxuO3MrKylpZihzIGluIHQmJmkuY2FsbChlLHRbc10scyk9PT1XKXJldHVybn1mdW5jdGlvbiBKKHQsaSxlKXtpZighTyh0KSl7aWYoeCh0KSlyZXR1cm4gRyh0LGksZSk7aWYoRCh0KSl7Zm9yKHZhciByIG9mIHQuZW50cmllcygpKWlmKGkuY2FsbChlLHJbMV0sclswXSk9PT1XKXJldHVybn1lbHNlIGZvcih2YXIgcyBpbiB0KWlmKCQuY2FsbCh0LHMpJiZpLmNhbGwoZSx0W3NdLHMpPT09VylyZXR1cm59fXZhciBWPWZ1bmN0aW9uKHQpe2Zvcih2YXIgaT1hcmd1bWVudHMubGVuZ3RoLGU9bmV3IEFycmF5KGk+MT9pLTE6MCkscj0xO3I8aTtyKyspZVtyLTFdPWFyZ3VtZW50c1tyXTtyZXR1cm4gRyhlLChmdW5jdGlvbihpKXtmb3IodmFyIGUgaW4gaSl2b2lkIDAhPT1pW2VdJiYodFtlXT1pW2VdKX0pKSx0fSxLPWZ1bmN0aW9uKHQpe2Zvcih2YXIgaT1hcmd1bWVudHMubGVuZ3RoLGU9bmV3IEFycmF5KGk+MT9pLTE6MCkscj0xO3I8aTtyKyspZVtyLTFdPWFyZ3VtZW50c1tyXTtyZXR1cm4gRyhlLChmdW5jdGlvbihpKXtHKGksKGZ1bmN0aW9uKGkpe3QucHVzaChpKX0pKX0pKSx0fTtmdW5jdGlvbiBZKHQpe2Zvcih2YXIgaT1PYmplY3Qua2V5cyh0KSxlPWkubGVuZ3RoLHI9bmV3IEFycmF5KGUpO2UtLTspcltlXT1baVtlXSx0W2lbZV1dXTtyZXR1cm4gcn12YXIgWD1mdW5jdGlvbih0KXt0cnl7cmV0dXJuIHQoKX1jYXRjaCh0KXtyZXR1cm59fSxRPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3RyeXtmb3IodmFyIGk9YXJndW1lbnRzLmxlbmd0aCxlPW5ldyBBcnJheShpKSxyPTA7cjxpO3IrKyllW3JdPWFyZ3VtZW50c1tyXTtyZXR1cm4gdC5hcHBseSh0aGlzLGUpfWNhdGNoKHQpe2ouY3JpdGljYWwoXCJJbXBsZW1lbnRhdGlvbiBlcnJvci4gUGxlYXNlIHR1cm4gb24gZGVidWcgbW9kZSBhbmQgb3BlbiBhIHRpY2tldCBvbiBodHRwczovL2FwcC5wb3N0aG9nLmNvbS9ob21lI3BhbmVsPXN1cHBvcnQlM0FzdXBwb3J0JTNBLlwiKSxqLmNyaXRpY2FsKHQpfX19LFo9ZnVuY3Rpb24odCl7dmFyIGk9e307cmV0dXJuIEoodCwoZnVuY3Rpb24odCxlKXsoVCh0KSYmdC5sZW5ndGg+MHx8Rih0KSkmJihpW2VdPXQpfSkpLGl9O2Z1bmN0aW9uIHR0KHQsaSl7cmV0dXJuIGU9dCxyPXQ9PlQodCkmJiFDKGkpP3Quc2xpY2UoMCxpKTp0LHM9bmV3IFNldCxmdW5jdGlvbiB0KGksZSl7cmV0dXJuIGkhPT1PYmplY3QoaSk/cj9yKGksZSk6aTpzLmhhcyhpKT92b2lkIDA6KHMuYWRkKGkpLHgoaSk/KG49W10sRyhpLChpPT57bi5wdXNoKHQoaSkpfSkpKToobj17fSxKKGksKChpLGUpPT57cy5oYXMoaSl8fChuW2VdPXQoaSxlKSl9KSkpLG4pO3ZhciBufShlKTt2YXIgZSxyLHN9dmFyIGl0PVtcImhlcm9rdWFwcC5jb21cIixcInZlcmNlbC5hcHBcIixcIm5ldGxpZnkuYXBwXCJdO2Z1bmN0aW9uIGV0KHQpe3ZhciBpPW51bGw9PXQ/dm9pZCAwOnQuaG9zdG5hbWU7aWYoIVQoaSkpcmV0dXJuITE7dmFyIGU9aS5zcGxpdChcIi5cIikuc2xpY2UoLTIpLmpvaW4oXCIuXCIpO2Zvcih2YXIgciBvZiBpdClpZihlPT09cilyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBydCh0LGkpe2Zvcih2YXIgZT0wO2U8dC5sZW5ndGg7ZSsrKWlmKGkodFtlXSkpcmV0dXJuIHRbZV19ZnVuY3Rpb24gc3QodCxpLGUscil7dmFye2NhcHR1cmU6cz0hMSxwYXNzaXZlOm49ITB9PW51bGwhPXI/cjp7fTtudWxsPT10fHx0LmFkZEV2ZW50TGlzdGVuZXIoaSxlLHtjYXB0dXJlOnMscGFzc2l2ZTpufSl9dmFyIG50PVwiJHBlb3BsZV9kaXN0aW5jdF9pZFwiLG90PVwiX19hbGlhc1wiLGF0PVwiX190aW1lcnNcIixsdD1cIiRhdXRvY2FwdHVyZV9kaXNhYmxlZF9zZXJ2ZXJfc2lkZVwiLHV0PVwiJGhlYXRtYXBzX2VuYWJsZWRfc2VydmVyX3NpZGVcIixodD1cIiRleGNlcHRpb25fY2FwdHVyZV9lbmFibGVkX3NlcnZlcl9zaWRlXCIsZHQ9XCIkZXJyb3JfdHJhY2tpbmdfc3VwcHJlc3Npb25fcnVsZXNcIix2dD1cIiR3ZWJfdml0YWxzX2VuYWJsZWRfc2VydmVyX3NpZGVcIixjdD1cIiRkZWFkX2NsaWNrc19lbmFibGVkX3NlcnZlcl9zaWRlXCIsZnQ9XCIkd2ViX3ZpdGFsc19hbGxvd2VkX21ldHJpY3NcIixwdD1cIiRzZXNzaW9uX3JlY29yZGluZ19lbmFibGVkX3NlcnZlcl9zaWRlXCIsZ3Q9XCIkY29uc29sZV9sb2dfcmVjb3JkaW5nX2VuYWJsZWRfc2VydmVyX3NpZGVcIixfdD1cIiRzZXNzaW9uX3JlY29yZGluZ19uZXR3b3JrX3BheWxvYWRfY2FwdHVyZVwiLG10PVwiJHNlc3Npb25fcmVjb3JkaW5nX21hc2tpbmdcIixidD1cIiRzZXNzaW9uX3JlY29yZGluZ19jYW52YXNfcmVjb3JkaW5nXCIsd3Q9XCIkcmVwbGF5X3NhbXBsZV9yYXRlXCIseXQ9XCIkcmVwbGF5X21pbmltdW1fZHVyYXRpb25cIixTdD1cIiRyZXBsYXlfc2NyaXB0X2NvbmZpZ1wiLCR0PVwiJHNlc2lkXCIsa3Q9XCIkc2Vzc2lvbl9pc19zYW1wbGVkXCIseHQ9XCIkc2Vzc2lvbl9yZWNvcmRpbmdfdXJsX3RyaWdnZXJfYWN0aXZhdGVkX3Nlc3Npb25cIixFdD1cIiRzZXNzaW9uX3JlY29yZGluZ19ldmVudF90cmlnZ2VyX2FjdGl2YXRlZF9zZXNzaW9uXCIsSXQ9XCIkZW5hYmxlZF9mZWF0dXJlX2ZsYWdzXCIsUHQ9XCIkZWFybHlfYWNjZXNzX2ZlYXR1cmVzXCIsUnQ9XCIkZmVhdHVyZV9mbGFnX2RldGFpbHNcIixUdD1cIiRzdG9yZWRfcGVyc29uX3Byb3BlcnRpZXNcIixNdD1cIiRzdG9yZWRfZ3JvdXBfcHJvcGVydGllc1wiLEN0PVwiJHN1cnZleXNcIixPdD1cIiRzdXJ2ZXlzX2FjdGl2YXRlZFwiLEZ0PVwiJGZsYWdfY2FsbF9yZXBvcnRlZFwiLEF0PVwiJHVzZXJfc3RhdGVcIixEdD1cIiRjbGllbnRfc2Vzc2lvbl9wcm9wc1wiLEx0PVwiJGNhcHR1cmVfcmF0ZV9saW1pdFwiLE50PVwiJGluaXRpYWxfY2FtcGFpZ25fcGFyYW1zXCIsanQ9XCIkaW5pdGlhbF9yZWZlcnJlcl9pbmZvXCIsenQ9XCIkaW5pdGlhbF9wZXJzb25faW5mb1wiLFV0PVwiJGVwcFwiLHF0PVwiX19QT1NUSE9HX1RPT0xCQVJfX1wiLEJ0PVwiJHBvc3Rob2dfY29va2llbGVzc1wiLEh0PVtudCxvdCxcIl9fY21wbnNcIixhdCxwdCx1dCwkdCxJdCxkdCxBdCxQdCxSdCxNdCxUdCxDdCxGdCxEdCxMdCxOdCxqdCxVdCx6dF07ZnVuY3Rpb24gV3QodCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBFbGVtZW50JiYodC5pZD09PXF0fHwhKG51bGw9PXQuY2xvc2VzdHx8IXQuY2xvc2VzdChcIi50b29sYmFyLWdsb2JhbC1mYWRlLWNvbnRhaW5lclwiKSkpfWZ1bmN0aW9uIEd0KHQpe3JldHVybiEhdCYmMT09PXQubm9kZVR5cGV9ZnVuY3Rpb24gSnQodCxpKXtyZXR1cm4hIXQmJiEhdC50YWdOYW1lJiZ0LnRhZ05hbWUudG9Mb3dlckNhc2UoKT09PWkudG9Mb3dlckNhc2UoKX1mdW5jdGlvbiBWdCh0KXtyZXR1cm4hIXQmJjM9PT10Lm5vZGVUeXBlfWZ1bmN0aW9uIEt0KHQpe3JldHVybiEhdCYmMTE9PT10Lm5vZGVUeXBlfWZ1bmN0aW9uIFl0KHQpe3JldHVybiB0P2IodCkuc3BsaXQoL1xccysvKTpbXX1mdW5jdGlvbiBYdChpKXt2YXIgZT1udWxsPT10P3ZvaWQgMDp0LmxvY2F0aW9uLmhyZWY7cmV0dXJuISEoZSYmaSYmaS5zb21lKCh0PT5lLm1hdGNoKHQpKSkpfWZ1bmN0aW9uIFF0KHQpe3ZhciBpPVwiXCI7c3dpdGNoKHR5cGVvZiB0LmNsYXNzTmFtZSl7Y2FzZVwic3RyaW5nXCI6aT10LmNsYXNzTmFtZTticmVhaztjYXNlXCJvYmplY3RcIjppPSh0LmNsYXNzTmFtZSYmXCJiYXNlVmFsXCJpbiB0LmNsYXNzTmFtZT90LmNsYXNzTmFtZS5iYXNlVmFsOm51bGwpfHx0LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwiO2JyZWFrO2RlZmF1bHQ6aT1cIlwifXJldHVybiBZdChpKX1mdW5jdGlvbiBadCh0KXtyZXR1cm4gTyh0KT9udWxsOmIodCkuc3BsaXQoLyhcXHMrKS8pLmZpbHRlcigodD0+Y2kodCkpKS5qb2luKFwiXCIpLnJlcGxhY2UoL1tcXHJcXG5dL2csXCIgXCIpLnJlcGxhY2UoL1sgXSsvZyxcIiBcIikuc3Vic3RyaW5nKDAsMjU1KX1mdW5jdGlvbiB0aSh0KXt2YXIgaT1cIlwiO3JldHVybiBuaSh0KSYmIW9pKHQpJiZ0LmNoaWxkTm9kZXMmJnQuY2hpbGROb2Rlcy5sZW5ndGgmJkoodC5jaGlsZE5vZGVzLChmdW5jdGlvbih0KXt2YXIgZTtWdCh0KSYmdC50ZXh0Q29udGVudCYmKGkrPW51bGwhPT0oZT1adCh0LnRleHRDb250ZW50KSkmJnZvaWQgMCE9PWU/ZTpcIlwiKX0pKSxiKGkpfWZ1bmN0aW9uIGlpKHQpe3JldHVybiBSKHQudGFyZ2V0KT90LnNyY0VsZW1lbnR8fG51bGw6bnVsbCE9KGk9dC50YXJnZXQpJiZpLnNoYWRvd1Jvb3Q/dC5jb21wb3NlZFBhdGgoKVswXXx8bnVsbDp0LnRhcmdldHx8bnVsbDt2YXIgaX12YXIgZWk9W1wiYVwiLFwiYnV0dG9uXCIsXCJmb3JtXCIsXCJpbnB1dFwiLFwic2VsZWN0XCIsXCJ0ZXh0YXJlYVwiLFwibGFiZWxcIl07ZnVuY3Rpb24gcmkodCl7dmFyIGk9dC5wYXJlbnROb2RlO3JldHVybiEoIWl8fCFHdChpKSkmJml9ZnVuY3Rpb24gc2koaSxlLHIscyxuKXt2YXIgbyxhLGw7aWYodm9pZCAwPT09ciYmKHI9dm9pZCAwKSwhdHx8IWl8fEp0KGksXCJodG1sXCIpfHwhR3QoaSkpcmV0dXJuITE7aWYobnVsbCE9KG89cikmJm8udXJsX2FsbG93bGlzdCYmIVh0KHIudXJsX2FsbG93bGlzdCkpcmV0dXJuITE7aWYobnVsbCE9KGE9cikmJmEudXJsX2lnbm9yZWxpc3QmJlh0KHIudXJsX2lnbm9yZWxpc3QpKXJldHVybiExO2lmKG51bGwhPShsPXIpJiZsLmRvbV9ldmVudF9hbGxvd2xpc3Qpe3ZhciB1PXIuZG9tX2V2ZW50X2FsbG93bGlzdDtpZih1JiYhdS5zb21lKCh0PT5lLnR5cGU9PT10KSkpcmV0dXJuITF9Zm9yKHZhciBoPSExLGQ9W2ldLHY9ITAsYz1pO2MucGFyZW50Tm9kZSYmIUp0KGMsXCJib2R5XCIpOylpZihLdChjLnBhcmVudE5vZGUpKWQucHVzaChjLnBhcmVudE5vZGUuaG9zdCksYz1jLnBhcmVudE5vZGUuaG9zdDtlbHNle2lmKCEodj1yaShjKSkpYnJlYWs7aWYoc3x8ZWkuaW5kZXhPZih2LnRhZ05hbWUudG9Mb3dlckNhc2UoKSk+LTEpaD0hMDtlbHNle3ZhciBmPXQuZ2V0Q29tcHV0ZWRTdHlsZSh2KTtmJiZcInBvaW50ZXJcIj09PWYuZ2V0UHJvcGVydHlWYWx1ZShcImN1cnNvclwiKSYmKGg9ITApfWQucHVzaCh2KSxjPXZ9aWYoIWZ1bmN0aW9uKHQsaSl7dmFyIGU9bnVsbD09aT92b2lkIDA6aS5lbGVtZW50X2FsbG93bGlzdDtpZihSKGUpKXJldHVybiEwO3ZhciByLHM9ZnVuY3Rpb24odCl7aWYoZS5zb21lKChpPT50LnRhZ05hbWUudG9Mb3dlckNhc2UoKT09PWkpKSlyZXR1cm57djohMH19O2Zvcih2YXIgbiBvZiB0KWlmKHI9cyhuKSlyZXR1cm4gci52O3JldHVybiExfShkLHIpKXJldHVybiExO2lmKCFmdW5jdGlvbih0LGkpe3ZhciBlPW51bGw9PWk/dm9pZCAwOmkuY3NzX3NlbGVjdG9yX2FsbG93bGlzdDtpZihSKGUpKXJldHVybiEwO3ZhciByLHM9ZnVuY3Rpb24odCl7aWYoZS5zb21lKChpPT50Lm1hdGNoZXMoaSkpKSlyZXR1cm57djohMH19O2Zvcih2YXIgbiBvZiB0KWlmKHI9cyhuKSlyZXR1cm4gci52O3JldHVybiExfShkLHIpKXJldHVybiExO3ZhciBwPXQuZ2V0Q29tcHV0ZWRTdHlsZShpKTtpZihwJiZcInBvaW50ZXJcIj09PXAuZ2V0UHJvcGVydHlWYWx1ZShcImN1cnNvclwiKSYmXCJjbGlja1wiPT09ZS50eXBlKXJldHVybiEwO3ZhciBnPWkudGFnTmFtZS50b0xvd2VyQ2FzZSgpO3N3aXRjaChnKXtjYXNlXCJodG1sXCI6cmV0dXJuITE7Y2FzZVwiZm9ybVwiOnJldHVybihufHxbXCJzdWJtaXRcIl0pLmluZGV4T2YoZS50eXBlKT49MDtjYXNlXCJpbnB1dFwiOmNhc2VcInNlbGVjdFwiOmNhc2VcInRleHRhcmVhXCI6cmV0dXJuKG58fFtcImNoYW5nZVwiLFwiY2xpY2tcIl0pLmluZGV4T2YoZS50eXBlKT49MDtkZWZhdWx0OnJldHVybiBoPyhufHxbXCJjbGlja1wiXSkuaW5kZXhPZihlLnR5cGUpPj0wOihufHxbXCJjbGlja1wiXSkuaW5kZXhPZihlLnR5cGUpPj0wJiYoZWkuaW5kZXhPZihnKT4tMXx8XCJ0cnVlXCI9PT1pLmdldEF0dHJpYnV0ZShcImNvbnRlbnRlZGl0YWJsZVwiKSl9fWZ1bmN0aW9uIG5pKHQpe2Zvcih2YXIgaT10O2kucGFyZW50Tm9kZSYmIUp0KGksXCJib2R5XCIpO2k9aS5wYXJlbnROb2RlKXt2YXIgZT1RdChpKTtpZihtKGUsXCJwaC1zZW5zaXRpdmVcIil8fG0oZSxcInBoLW5vLWNhcHR1cmVcIikpcmV0dXJuITF9aWYobShRdCh0KSxcInBoLWluY2x1ZGVcIikpcmV0dXJuITA7dmFyIHI9dC50eXBlfHxcIlwiO2lmKFQocikpc3dpdGNoKHIudG9Mb3dlckNhc2UoKSl7Y2FzZVwiaGlkZGVuXCI6Y2FzZVwicGFzc3dvcmRcIjpyZXR1cm4hMX12YXIgcz10Lm5hbWV8fHQuaWR8fFwiXCI7aWYoVChzKSl7aWYoL15jY3xjYXJkbnVtfGNjbnVtfGNyZWRpdGNhcmR8Y3NjfGN2Y3xjdnZ8ZXhwfHBhc3N8cHdkfHJvdXRpbmd8c2VjY29kZXxzZWN1cml0eWNvZGV8c2VjdXJpdHludW18c29jaWFsc2VjfHNvY3NlY3xzc24vaS50ZXN0KHMucmVwbGFjZSgvW15hLXpBLVowLTldL2csXCJcIikpKXJldHVybiExfXJldHVybiEwfWZ1bmN0aW9uIG9pKHQpe3JldHVybiEhKEp0KHQsXCJpbnB1dFwiKSYmIVtcImJ1dHRvblwiLFwiY2hlY2tib3hcIixcInN1Ym1pdFwiLFwicmVzZXRcIl0uaW5jbHVkZXModC50eXBlKXx8SnQodCxcInNlbGVjdFwiKXx8SnQodCxcInRleHRhcmVhXCIpfHxcInRydWVcIj09PXQuZ2V0QXR0cmlidXRlKFwiY29udGVudGVkaXRhYmxlXCIpKX12YXIgYWk9XCIoNFswLTldezEyfSg/OlswLTldezN9KT8pfCg1WzEtNV1bMC05XXsxNH0pfCg2KD86MDExfDVbMC05XXsyfSlbMC05XXsxMn0pfCgzWzQ3XVswLTldezEzfSl8KDMoPzowWzAtNV18WzY4XVswLTldKVswLTldezExfSl8KCg/OjIxMzF8MTgwMHwzNVswLTldezN9KVswLTldezExfSlcIixsaT1uZXcgUmVnRXhwKFwiXig/OlwiK2FpK1wiKSRcIiksdWk9bmV3IFJlZ0V4cChhaSksaGk9XCJcXFxcZHszfS0/XFxcXGR7Mn0tP1xcXFxkezR9XCIsZGk9bmV3IFJlZ0V4cChcIl4oXCIraGkrXCIpJFwiKSx2aT1uZXcgUmVnRXhwKFwiKFwiK2hpK1wiKVwiKTtmdW5jdGlvbiBjaSh0LGkpe2lmKHZvaWQgMD09PWkmJihpPSEwKSxPKHQpKXJldHVybiExO2lmKFQodCkpe2lmKHQ9Yih0KSwoaT9saTp1aSkudGVzdCgodHx8XCJcIikucmVwbGFjZSgvWy0gXS9nLFwiXCIpKSlyZXR1cm4hMTtpZigoaT9kaTp2aSkudGVzdCh0KSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBmaSh0KXt2YXIgaT10aSh0KTtyZXR1cm4gY2koaT0oaStcIiBcIitwaSh0KSkudHJpbSgpKT9pOlwiXCJ9ZnVuY3Rpb24gcGkodCl7dmFyIGk9XCJcIjtyZXR1cm4gdCYmdC5jaGlsZE5vZGVzJiZ0LmNoaWxkTm9kZXMubGVuZ3RoJiZKKHQuY2hpbGROb2RlcywoZnVuY3Rpb24odCl7dmFyIGU7aWYodCYmXCJzcGFuXCI9PT0obnVsbD09KGU9dC50YWdOYW1lKT92b2lkIDA6ZS50b0xvd2VyQ2FzZSgpKSl0cnl7dmFyIHI9dGkodCk7aT0oaStcIiBcIityKS50cmltKCksdC5jaGlsZE5vZGVzJiZ0LmNoaWxkTm9kZXMubGVuZ3RoJiYoaT0oaStcIiBcIitwaSh0KSkudHJpbSgpKX1jYXRjaCh0KXtqLmVycm9yKFwiW0F1dG9DYXB0dXJlXVwiLHQpfX0pKSxpfWZ1bmN0aW9uIGdpKHQpe3JldHVybiBmdW5jdGlvbih0KXt2YXIgaT10Lm1hcCgodD0+e3ZhciBpLGUscj1cIlwiO2lmKHQudGFnX25hbWUmJihyKz10LnRhZ19uYW1lKSx0LmF0dHJfY2xhc3MpZm9yKHZhciBzIG9mKHQuYXR0cl9jbGFzcy5zb3J0KCksdC5hdHRyX2NsYXNzKSlyKz1cIi5cIitzLnJlcGxhY2UoL1wiL2csXCJcIik7dmFyIG49Qih7fSx0LnRleHQ/e3RleHQ6dC50ZXh0fTp7fSx7XCJudGgtY2hpbGRcIjpudWxsIT09KGk9dC5udGhfY2hpbGQpJiZ2b2lkIDAhPT1pP2k6MCxcIm50aC1vZi10eXBlXCI6bnVsbCE9PShlPXQubnRoX29mX3R5cGUpJiZ2b2lkIDAhPT1lP2U6MH0sdC5ocmVmP3tocmVmOnQuaHJlZn06e30sdC5hdHRyX2lkP3thdHRyX2lkOnQuYXR0cl9pZH06e30sdC5hdHRyaWJ1dGVzKSxvPXt9O3JldHVybiBZKG4pLnNvcnQoKCh0LGkpPT57dmFyW2VdPXQsW3JdPWk7cmV0dXJuIGUubG9jYWxlQ29tcGFyZShyKX0pKS5mb3JFYWNoKCh0PT57dmFyW2ksZV09dDtyZXR1cm4gb1tfaShpLnRvU3RyaW5nKCkpXT1faShlLnRvU3RyaW5nKCkpfSkpLHIrPVwiOlwiLHIrPVkobykubWFwKCh0PT57dmFyW2ksZV09dDtyZXR1cm4gaSsnPVwiJytlKydcIid9KSkuam9pbihcIlwiKX0pKTtyZXR1cm4gaS5qb2luKFwiO1wiKX0oZnVuY3Rpb24odCl7cmV0dXJuIHQubWFwKCh0PT57dmFyIGksZSxyPXt0ZXh0Om51bGw9PShpPXQuJGVsX3RleHQpP3ZvaWQgMDppLnNsaWNlKDAsNDAwKSx0YWdfbmFtZTp0LnRhZ19uYW1lLGhyZWY6bnVsbD09KGU9dC5hdHRyX19ocmVmKT92b2lkIDA6ZS5zbGljZSgwLDIwNDgpLGF0dHJfY2xhc3M6bWkodCksYXR0cl9pZDp0LmF0dHJfX2lkLG50aF9jaGlsZDp0Lm50aF9jaGlsZCxudGhfb2ZfdHlwZTp0Lm50aF9vZl90eXBlLGF0dHJpYnV0ZXM6e319O3JldHVybiBZKHQpLmZpbHRlcigodD0+e3ZhcltpXT10O3JldHVybiAwPT09aS5pbmRleE9mKFwiYXR0cl9fXCIpfSkpLmZvckVhY2goKHQ9Pnt2YXJbaSxlXT10O3JldHVybiByLmF0dHJpYnV0ZXNbaV09ZX0pKSxyfSkpfSh0KSl9ZnVuY3Rpb24gX2kodCl7cmV0dXJuIHQucmVwbGFjZSgvXCJ8XFxcXFwiL2csJ1xcXFxcIicpfWZ1bmN0aW9uIG1pKHQpe3ZhciBpPXQuYXR0cl9fY2xhc3M7cmV0dXJuIGk/eChpKT9pOll0KGkpOnZvaWQgMH1jbGFzcyBiaXtjb25zdHJ1Y3Rvcigpe3RoaXMuY2xpY2tzPVtdfWlzUmFnZUNsaWNrKHQsaSxlKXt2YXIgcj10aGlzLmNsaWNrc1t0aGlzLmNsaWNrcy5sZW5ndGgtMV07aWYociYmTWF0aC5hYnModC1yLngpK01hdGguYWJzKGktci55KTwzMCYmZS1yLnRpbWVzdGFtcDwxZTMpe2lmKHRoaXMuY2xpY2tzLnB1c2goe3g6dCx5OmksdGltZXN0YW1wOmV9KSwzPT09dGhpcy5jbGlja3MubGVuZ3RoKXJldHVybiEwfWVsc2UgdGhpcy5jbGlja3M9W3t4OnQseTppLHRpbWVzdGFtcDplfV07cmV0dXJuITF9fXZhciB3aT1bXCJsb2NhbGhvc3RcIixcIjEyNy4wLjAuMVwiXSx5aT10PT57dmFyIGk9bnVsbD09bz92b2lkIDA6by5jcmVhdGVFbGVtZW50KFwiYVwiKTtyZXR1cm4gUihpKT9udWxsOihpLmhyZWY9dCxpKX0sU2k9ZnVuY3Rpb24odCxpKXt2YXIgZSxyO3ZvaWQgMD09PWkmJihpPVwiJlwiKTt2YXIgcz1bXTtyZXR1cm4gSih0LChmdW5jdGlvbih0LGkpe1IodCl8fFIoaSl8fFwidW5kZWZpbmVkXCI9PT1pfHwoZT1lbmNvZGVVUklDb21wb25lbnQoKHQ9PnQgaW5zdGFuY2VvZiBGaWxlKSh0KT90Lm5hbWU6dC50b1N0cmluZygpKSxyPWVuY29kZVVSSUNvbXBvbmVudChpKSxzW3MubGVuZ3RoXT1yK1wiPVwiK2UpfSkpLHMuam9pbihpKX0sJGk9ZnVuY3Rpb24odCxpKXtmb3IodmFyIGUscj0oKHQuc3BsaXQoXCIjXCIpWzBdfHxcIlwiKS5zcGxpdCgvXFw/KC4qKS8pWzFdfHxcIlwiKS5yZXBsYWNlKC9eXFw/Ky9nLFwiXCIpLnNwbGl0KFwiJlwiKSxzPTA7czxyLmxlbmd0aDtzKyspe3ZhciBuPXJbc10uc3BsaXQoXCI9XCIpO2lmKG5bMF09PT1pKXtlPW47YnJlYWt9fWlmKCF4KGUpfHxlLmxlbmd0aDwyKXJldHVyblwiXCI7dmFyIG89ZVsxXTt0cnl7bz1kZWNvZGVVUklDb21wb25lbnQobyl9Y2F0Y2godCl7ai5lcnJvcihcIlNraXBwaW5nIGRlY29kaW5nIGZvciBtYWxmb3JtZWQgcXVlcnkgcGFyYW06IFwiK28pfXJldHVybiBvLnJlcGxhY2UoL1xcKy9nLFwiIFwiKX0sa2k9ZnVuY3Rpb24odCxpLGUpe2lmKCF0fHwhaXx8IWkubGVuZ3RoKXJldHVybiB0O2Zvcih2YXIgcj10LnNwbGl0KFwiI1wiKSxzPXJbMF18fFwiXCIsbj1yWzFdLG89cy5zcGxpdChcIj9cIiksYT1vWzFdLGw9b1swXSx1PShhfHxcIlwiKS5zcGxpdChcIiZcIiksaD1bXSxkPTA7ZDx1Lmxlbmd0aDtkKyspe3ZhciB2PXVbZF0uc3BsaXQoXCI9XCIpO3godikmJihpLmluY2x1ZGVzKHZbMF0pP2gucHVzaCh2WzBdK1wiPVwiK2UpOmgucHVzaCh1W2RdKSl9dmFyIGM9bDtyZXR1cm4gbnVsbCE9YSYmKGMrPVwiP1wiK2guam9pbihcIiZcIikpLG51bGwhPW4mJihjKz1cIiNcIituKSxjfSx4aT1mdW5jdGlvbih0LGkpe3ZhciBlPXQubWF0Y2gobmV3IFJlZ0V4cChpK1wiPShbXiZdKilcIikpO3JldHVybiBlP2VbMV06bnVsbH0sRWk9eihcIltBdXRvQ2FwdHVyZV1cIik7ZnVuY3Rpb24gSWkodCxpKXtyZXR1cm4gaS5sZW5ndGg+dD9pLnNsaWNlKDAsdCkrXCIuLi5cIjppfWZ1bmN0aW9uIFBpKHQpe2lmKHQucHJldmlvdXNFbGVtZW50U2libGluZylyZXR1cm4gdC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO3ZhciBpPXQ7ZG97aT1pLnByZXZpb3VzU2libGluZ313aGlsZShpJiYhR3QoaSkpO3JldHVybiBpfWZ1bmN0aW9uIFJpKHQsaSxlLHIpe3ZhciBzPXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpLG49e3RhZ19uYW1lOnN9O2VpLmluZGV4T2Yocyk+LTEmJiFlJiYoXCJhXCI9PT1zLnRvTG93ZXJDYXNlKCl8fFwiYnV0dG9uXCI9PT1zLnRvTG93ZXJDYXNlKCk/bi4kZWxfdGV4dD1JaSgxMDI0LGZpKHQpKTpuLiRlbF90ZXh0PUlpKDEwMjQsdGkodCkpKTt2YXIgbz1RdCh0KTtvLmxlbmd0aD4wJiYobi5jbGFzc2VzPW8uZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm5cIlwiIT09dH0pKSksSih0LmF0dHJpYnV0ZXMsKGZ1bmN0aW9uKGUpe3ZhciBzO2lmKCghb2kodCl8fC0xIT09W1wibmFtZVwiLFwiaWRcIixcImNsYXNzXCIsXCJhcmlhLWxhYmVsXCJdLmluZGV4T2YoZS5uYW1lKSkmJigobnVsbD09cnx8IXIuaW5jbHVkZXMoZS5uYW1lKSkmJiFpJiZjaShlLnZhbHVlKSYmKHM9ZS5uYW1lLCFUKHMpfHxcIl9uZ2NvbnRlbnRcIiE9PXMuc3Vic3RyaW5nKDAsMTApJiZcIl9uZ2hvc3RcIiE9PXMuc3Vic3RyaW5nKDAsNykpKSl7dmFyIG89ZS52YWx1ZTtcImNsYXNzXCI9PT1lLm5hbWUmJihvPVl0KG8pLmpvaW4oXCIgXCIpKSxuW1wiYXR0cl9fXCIrZS5uYW1lXT1JaSgxMDI0LG8pfX0pKTtmb3IodmFyIGE9MSxsPTEsdT10O3U9UGkodSk7KWErKyx1LnRhZ05hbWU9PT10LnRhZ05hbWUmJmwrKztyZXR1cm4gbi5udGhfY2hpbGQ9YSxuLm50aF9vZl90eXBlPWwsbn1mdW5jdGlvbiBUaShpLGUpe2Zvcih2YXIgcixzLHtlOm4sbWFza0FsbEVsZW1lbnRBdHRyaWJ1dGVzOm8sbWFza0FsbFRleHQ6YSxlbGVtZW50QXR0cmlidXRlSWdub3JlTGlzdDpsLGVsZW1lbnRzQ2hhaW5Bc1N0cmluZzp1fT1lLGg9W2ldLGQ9aTtkLnBhcmVudE5vZGUmJiFKdChkLFwiYm9keVwiKTspS3QoZC5wYXJlbnROb2RlKT8oaC5wdXNoKGQucGFyZW50Tm9kZS5ob3N0KSxkPWQucGFyZW50Tm9kZS5ob3N0KTooaC5wdXNoKGQucGFyZW50Tm9kZSksZD1kLnBhcmVudE5vZGUpO3ZhciB2LGM9W10sZj17fSxwPSExLGc9ITE7aWYoSihoLCh0PT57dmFyIGk9bmkodCk7XCJhXCI9PT10LnRhZ05hbWUudG9Mb3dlckNhc2UoKSYmKHA9dC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpLHA9aSYmcCYmY2kocCkmJnApLG0oUXQodCksXCJwaC1uby1jYXB0dXJlXCIpJiYoZz0hMCksYy5wdXNoKFJpKHQsbyxhLGwpKTt2YXIgZT1mdW5jdGlvbih0KXtpZighbmkodCkpcmV0dXJue307dmFyIGk9e307cmV0dXJuIEoodC5hdHRyaWJ1dGVzLChmdW5jdGlvbih0KXtpZih0Lm5hbWUmJjA9PT10Lm5hbWUuaW5kZXhPZihcImRhdGEtcGgtY2FwdHVyZS1hdHRyaWJ1dGVcIikpe3ZhciBlPXQubmFtZS5yZXBsYWNlKFwiZGF0YS1waC1jYXB0dXJlLWF0dHJpYnV0ZS1cIixcIlwiKSxyPXQudmFsdWU7ZSYmciYmY2kocikmJihpW2VdPXIpfX0pKSxpfSh0KTtWKGYsZSl9KSksZylyZXR1cm57cHJvcHM6e30sZXhwbGljaXROb0NhcHR1cmU6Z307aWYoYXx8KFwiYVwiPT09aS50YWdOYW1lLnRvTG93ZXJDYXNlKCl8fFwiYnV0dG9uXCI9PT1pLnRhZ05hbWUudG9Mb3dlckNhc2UoKT9jWzBdLiRlbF90ZXh0PWZpKGkpOmNbMF0uJGVsX3RleHQ9dGkoaSkpLHApe3ZhciBfLGI7Y1swXS5hdHRyX19ocmVmPXA7dmFyIHc9bnVsbD09KF89eWkocCkpP3ZvaWQgMDpfLmhvc3QseT1udWxsPT10fHxudWxsPT0oYj10LmxvY2F0aW9uKT92b2lkIDA6Yi5ob3N0O3cmJnkmJnchPT15JiYodj1wKX1yZXR1cm57cHJvcHM6Vih7JGV2ZW50X3R5cGU6bi50eXBlLCRjZV92ZXJzaW9uOjF9LHU/e306eyRlbGVtZW50czpjfSx7JGVsZW1lbnRzX2NoYWluOmdpKGMpfSxudWxsIT0ocj1jWzBdKSYmci4kZWxfdGV4dD97JGVsX3RleHQ6bnVsbD09KHM9Y1swXSk/dm9pZCAwOnMuJGVsX3RleHR9Ont9LHYmJlwiY2xpY2tcIj09PW4udHlwZT97JGV4dGVybmFsX2NsaWNrX3VybDp2fTp7fSxmKX19Y2xhc3MgTWl7Y29uc3RydWN0b3IodCl7dGhpcy5pPSExLHRoaXMubz1udWxsLHRoaXMucmFnZWNsaWNrcz1uZXcgYmksdGhpcy5oPSExLHRoaXMuaW5zdGFuY2U9dCx0aGlzLm09bnVsbH1nZXQgUygpe3ZhciB0LGksZT1JKHRoaXMuaW5zdGFuY2UuY29uZmlnLmF1dG9jYXB0dXJlKT90aGlzLmluc3RhbmNlLmNvbmZpZy5hdXRvY2FwdHVyZTp7fTtyZXR1cm4gZS51cmxfYWxsb3dsaXN0PW51bGw9PSh0PWUudXJsX2FsbG93bGlzdCk/dm9pZCAwOnQubWFwKCh0PT5uZXcgUmVnRXhwKHQpKSksZS51cmxfaWdub3JlbGlzdD1udWxsPT0oaT1lLnVybF9pZ25vcmVsaXN0KT92b2lkIDA6aS5tYXAoKHQ9Pm5ldyBSZWdFeHAodCkpKSxlfSQoKXtpZih0aGlzLmlzQnJvd3NlclN1cHBvcnRlZCgpKXtpZih0JiZvKXt2YXIgaT1pPT57aT1pfHwobnVsbD09dD92b2lkIDA6dC5ldmVudCk7dHJ5e3RoaXMuayhpKX1jYXRjaCh0KXtFaS5lcnJvcihcIkZhaWxlZCB0byBjYXB0dXJlIGV2ZW50XCIsdCl9fTtpZihzdChvLFwic3VibWl0XCIsaSx7Y2FwdHVyZTohMH0pLHN0KG8sXCJjaGFuZ2VcIixpLHtjYXB0dXJlOiEwfSksc3QobyxcImNsaWNrXCIsaSx7Y2FwdHVyZTohMH0pLHRoaXMuUy5jYXB0dXJlX2NvcGllZF90ZXh0KXt2YXIgZT1pPT57aT1pfHwobnVsbD09dD92b2lkIDA6dC5ldmVudCksdGhpcy5rKGksZil9O3N0KG8sXCJjb3B5XCIsZSx7Y2FwdHVyZTohMH0pLHN0KG8sXCJjdXRcIixlLHtjYXB0dXJlOiEwfSl9fX1lbHNlIEVpLmluZm8oXCJEaXNhYmxpbmcgQXV0b21hdGljIEV2ZW50IENvbGxlY3Rpb24gYmVjYXVzZSB0aGlzIGJyb3dzZXIgaXMgbm90IHN1cHBvcnRlZFwiKX1zdGFydElmRW5hYmxlZCgpe3RoaXMuaXNFbmFibGVkJiYhdGhpcy5pJiYodGhpcy4kKCksdGhpcy5pPSEwKX1vblJlbW90ZUNvbmZpZyh0KXt0LmVsZW1lbnRzQ2hhaW5Bc1N0cmluZyYmKHRoaXMuaD10LmVsZW1lbnRzQ2hhaW5Bc1N0cmluZyksdGhpcy5pbnN0YW5jZS5wZXJzaXN0ZW5jZSYmdGhpcy5pbnN0YW5jZS5wZXJzaXN0ZW5jZS5yZWdpc3Rlcih7W2x0XTohIXQuYXV0b2NhcHR1cmVfb3B0X291dH0pLHRoaXMubz0hIXQuYXV0b2NhcHR1cmVfb3B0X291dCx0aGlzLnN0YXJ0SWZFbmFibGVkKCl9c2V0RWxlbWVudFNlbGVjdG9ycyh0KXt0aGlzLm09dH1nZXRFbGVtZW50U2VsZWN0b3JzKHQpe3ZhciBpLGU9W107cmV0dXJuIG51bGw9PShpPXRoaXMubSl8fGkuZm9yRWFjaCgoaT0+e3ZhciByPW51bGw9PW8/dm9pZCAwOm8ucXVlcnlTZWxlY3RvckFsbChpKTtudWxsPT1yfHxyLmZvckVhY2goKHI9Pnt0PT09ciYmZS5wdXNoKGkpfSkpfSkpLGV9Z2V0IGlzRW5hYmxlZCgpe3ZhciB0LGksZT1udWxsPT0odD10aGlzLmluc3RhbmNlLnBlcnNpc3RlbmNlKT92b2lkIDA6dC5wcm9wc1tsdF0scj10aGlzLm87aWYoQyhyKSYmIUEoZSkmJiF0aGlzLmluc3RhbmNlLmNvbmZpZy5hZHZhbmNlZF9kaXNhYmxlX2RlY2lkZSlyZXR1cm4hMTt2YXIgcz1udWxsIT09KGk9dGhpcy5vKSYmdm9pZCAwIT09aT9pOiEhZTtyZXR1cm4hIXRoaXMuaW5zdGFuY2UuY29uZmlnLmF1dG9jYXB0dXJlJiYhc31rKGksZSl7aWYodm9pZCAwPT09ZSYmKGU9XCIkYXV0b2NhcHR1cmVcIiksdGhpcy5pc0VuYWJsZWQpe3ZhciByLHM9aWkoaSk7aWYoVnQocykmJihzPXMucGFyZW50Tm9kZXx8bnVsbCksXCIkYXV0b2NhcHR1cmVcIj09PWUmJlwiY2xpY2tcIj09PWkudHlwZSYmaSBpbnN0YW5jZW9mIE1vdXNlRXZlbnQpdGhpcy5pbnN0YW5jZS5jb25maWcucmFnZWNsaWNrJiZudWxsIT0ocj10aGlzLnJhZ2VjbGlja3MpJiZyLmlzUmFnZUNsaWNrKGkuY2xpZW50WCxpLmNsaWVudFksKG5ldyBEYXRlKS5nZXRUaW1lKCkpJiZ0aGlzLmsoaSxcIiRyYWdlY2xpY2tcIik7dmFyIG49ZT09PWY7aWYocyYmc2kocyxpLHRoaXMuUyxuLG4/W1wiY29weVwiLFwiY3V0XCJdOnZvaWQgMCkpe3Zhcntwcm9wczpvLGV4cGxpY2l0Tm9DYXB0dXJlOmF9PVRpKHMse2U6aSxtYXNrQWxsRWxlbWVudEF0dHJpYnV0ZXM6dGhpcy5pbnN0YW5jZS5jb25maWcubWFza19hbGxfZWxlbWVudF9hdHRyaWJ1dGVzLG1hc2tBbGxUZXh0OnRoaXMuaW5zdGFuY2UuY29uZmlnLm1hc2tfYWxsX3RleHQsZWxlbWVudEF0dHJpYnV0ZUlnbm9yZUxpc3Q6dGhpcy5TLmVsZW1lbnRfYXR0cmlidXRlX2lnbm9yZWxpc3QsZWxlbWVudHNDaGFpbkFzU3RyaW5nOnRoaXMuaH0pO2lmKGEpcmV0dXJuITE7dmFyIGw9dGhpcy5nZXRFbGVtZW50U2VsZWN0b3JzKHMpO2lmKGwmJmwubGVuZ3RoPjAmJihvLiRlbGVtZW50X3NlbGVjdG9ycz1sKSxlPT09Zil7dmFyIHUsaD1adChudWxsPT10fHxudWxsPT0odT10LmdldFNlbGVjdGlvbigpKT92b2lkIDA6dS50b1N0cmluZygpKSxkPWkudHlwZXx8XCJjbGlwYm9hcmRcIjtpZighaClyZXR1cm4hMTtvLiRzZWxlY3RlZF9jb250ZW50PWgsby4kY29weV90eXBlPWR9cmV0dXJuIHRoaXMuaW5zdGFuY2UuY2FwdHVyZShlLG8pLCEwfX19aXNCcm93c2VyU3VwcG9ydGVkKCl7cmV0dXJuIEUobnVsbD09bz92b2lkIDA6by5xdWVyeVNlbGVjdG9yQWxsKX19TWF0aC50cnVuY3x8KE1hdGgudHJ1bmM9ZnVuY3Rpb24odCl7cmV0dXJuIHQ8MD9NYXRoLmNlaWwodCk6TWF0aC5mbG9vcih0KX0pLE51bWJlci5pc0ludGVnZXJ8fChOdW1iZXIuaXNJbnRlZ2VyPWZ1bmN0aW9uKHQpe3JldHVybiBGKHQpJiZpc0Zpbml0ZSh0KSYmTWF0aC5mbG9vcih0KT09PXR9KTt2YXIgQ2k9XCIwMTIzNDU2Nzg5YWJjZGVmXCI7Y2xhc3MgT2l7Y29uc3RydWN0b3IodCl7aWYodGhpcy5ieXRlcz10LDE2IT09dC5sZW5ndGgpdGhyb3cgbmV3IFR5cGVFcnJvcihcIm5vdCAxMjgtYml0IGxlbmd0aFwiKX1zdGF0aWMgZnJvbUZpZWxkc1Y3KHQsaSxlLHIpe2lmKCFOdW1iZXIuaXNJbnRlZ2VyKHQpfHwhTnVtYmVyLmlzSW50ZWdlcihpKXx8IU51bWJlci5pc0ludGVnZXIoZSl8fCFOdW1iZXIuaXNJbnRlZ2VyKHIpfHx0PDB8fGk8MHx8ZTwwfHxyPDB8fHQ+MHhmZmZmZmZmZmZmZmZ8fGk+NDA5NXx8ZT4xMDczNzQxODIzfHxyPjQyOTQ5NjcyOTUpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJpbnZhbGlkIGZpZWxkIHZhbHVlXCIpO3ZhciBzPW5ldyBVaW50OEFycmF5KDE2KTtyZXR1cm4gc1swXT10L01hdGgucG93KDIsNDApLHNbMV09dC9NYXRoLnBvdygyLDMyKSxzWzJdPXQvTWF0aC5wb3coMiwyNCksc1szXT10L01hdGgucG93KDIsMTYpLHNbNF09dC9NYXRoLnBvdygyLDgpLHNbNV09dCxzWzZdPTExMnxpPj4+OCxzWzddPWksc1s4XT0xMjh8ZT4+PjI0LHNbOV09ZT4+PjE2LHNbMTBdPWU+Pj44LHNbMTFdPWUsc1sxMl09cj4+PjI0LHNbMTNdPXI+Pj4xNixzWzE0XT1yPj4+OCxzWzE1XT1yLG5ldyBPaShzKX10b1N0cmluZygpe2Zvcih2YXIgdD1cIlwiLGk9MDtpPHRoaXMuYnl0ZXMubGVuZ3RoO2krKyl0PXQrQ2kuY2hhckF0KHRoaXMuYnl0ZXNbaV0+Pj40KStDaS5jaGFyQXQoMTUmdGhpcy5ieXRlc1tpXSksMyE9PWkmJjUhPT1pJiY3IT09aSYmOSE9PWl8fCh0Kz1cIi1cIik7aWYoMzYhPT10Lmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIFVVSUR2NyB3YXMgZ2VuZXJhdGVkXCIpO3JldHVybiB0fWNsb25lKCl7cmV0dXJuIG5ldyBPaSh0aGlzLmJ5dGVzLnNsaWNlKDApKX1lcXVhbHModCl7cmV0dXJuIDA9PT10aGlzLmNvbXBhcmVUbyh0KX1jb21wYXJlVG8odCl7Zm9yKHZhciBpPTA7aTwxNjtpKyspe3ZhciBlPXRoaXMuYnl0ZXNbaV0tdC5ieXRlc1tpXTtpZigwIT09ZSlyZXR1cm4gTWF0aC5zaWduKGUpfXJldHVybiAwfX1jbGFzcyBGaXtjb25zdHJ1Y3Rvcigpe3RoaXMuST0wLHRoaXMuUD0wLHRoaXMuUj1uZXcgTGl9Z2VuZXJhdGUoKXt2YXIgdD10aGlzLmdlbmVyYXRlT3JBYm9ydCgpO2lmKFIodCkpe3RoaXMuST0wO3ZhciBpPXRoaXMuZ2VuZXJhdGVPckFib3J0KCk7aWYoUihpKSl0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZ2VuZXJhdGUgVVVJRCBhZnRlciB0aW1lc3RhbXAgcmVzZXRcIik7cmV0dXJuIGl9cmV0dXJuIHR9Z2VuZXJhdGVPckFib3J0KCl7dmFyIHQ9RGF0ZS5ub3coKTtpZih0PnRoaXMuSSl0aGlzLkk9dCx0aGlzLlQoKTtlbHNle2lmKCEodCsxZTQ+dGhpcy5JKSlyZXR1cm47dGhpcy5QKyssdGhpcy5QPjQzOTgwNDY1MTExMDMmJih0aGlzLkkrKyx0aGlzLlQoKSl9cmV0dXJuIE9pLmZyb21GaWVsZHNWNyh0aGlzLkksTWF0aC50cnVuYyh0aGlzLlAvTWF0aC5wb3coMiwzMCkpLHRoaXMuUCZNYXRoLnBvdygyLDMwKS0xLHRoaXMuUi5uZXh0VWludDMyKCkpfVQoKXt0aGlzLlA9MTAyNCp0aGlzLlIubmV4dFVpbnQzMigpKygxMDIzJnRoaXMuUi5uZXh0VWludDMyKCkpfX12YXIgQWksRGk9dD0+e2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBVVUlEVjdfREVOWV9XRUFLX1JORyYmVVVJRFY3X0RFTllfV0VBS19STkcpdGhyb3cgbmV3IEVycm9yKFwibm8gY3J5cHRvZ3JhcGhpY2FsbHkgc3Ryb25nIFJORyBhdmFpbGFibGVcIik7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspdFtpXT02NTUzNipNYXRoLnRydW5jKDY1NTM2Kk1hdGgucmFuZG9tKCkpK01hdGgudHJ1bmMoNjU1MzYqTWF0aC5yYW5kb20oKSk7cmV0dXJuIHR9O3QmJiFSKHQuY3J5cHRvKSYmY3J5cHRvLmdldFJhbmRvbVZhbHVlcyYmKERpPXQ9PmNyeXB0by5nZXRSYW5kb21WYWx1ZXModCkpO2NsYXNzIExpe2NvbnN0cnVjdG9yKCl7dGhpcy5NPW5ldyBVaW50MzJBcnJheSg4KSx0aGlzLkM9MS8wfW5leHRVaW50MzIoKXtyZXR1cm4gdGhpcy5DPj10aGlzLk0ubGVuZ3RoJiYoRGkodGhpcy5NKSx0aGlzLkM9MCksdGhpcy5NW3RoaXMuQysrXX19dmFyIE5pPSgpPT5qaSgpLnRvU3RyaW5nKCksamk9KCk9PihBaXx8KEFpPW5ldyBGaSkpLmdlbmVyYXRlKCksemk9XCJcIjt2YXIgVWk9L1thLXowLTldW2EtejAtOS1dK1xcLlthLXpdezIsfSQvaTtmdW5jdGlvbiBxaSh0LGkpe2lmKGkpe3ZhciBlPWZ1bmN0aW9uKHQsaSl7aWYodm9pZCAwPT09aSYmKGk9byksemkpcmV0dXJuIHppO2lmKCFpKXJldHVyblwiXCI7aWYoW1wibG9jYWxob3N0XCIsXCIxMjcuMC4wLjFcIl0uaW5jbHVkZXModCkpcmV0dXJuXCJcIjtmb3IodmFyIGU9dC5zcGxpdChcIi5cIikscj1NYXRoLm1pbihlLmxlbmd0aCw4KSxzPVwiZG1uX2Noa19cIitOaSgpOyF6aSYmci0tOyl7dmFyIG49ZS5zbGljZShyKS5qb2luKFwiLlwiKSxhPXMrXCI9MTtkb21haW49LlwiK24rXCI7cGF0aD0vXCI7aS5jb29raWU9YStcIjttYXgtYWdlPTNcIixpLmNvb2tpZS5pbmNsdWRlcyhzKSYmKGkuY29va2llPWErXCI7bWF4LWFnZT0wXCIsemk9bil9cmV0dXJuIHppfSh0KTtpZighZSl7dmFyIHI9KHQ9Pnt2YXIgaT10Lm1hdGNoKFVpKTtyZXR1cm4gaT9pWzBdOlwiXCJ9KSh0KTtyIT09ZSYmai5pbmZvKFwiV2FybmluZzogY29va2llIHN1YmRvbWFpbiBkaXNjb3ZlcnkgbWlzbWF0Y2hcIixyLGUpLGU9cn1yZXR1cm4gZT9cIjsgZG9tYWluPS5cIitlOlwiXCJ9cmV0dXJuXCJcIn12YXIgQmk9e086KCk9PiEhbyxGOmZ1bmN0aW9uKHQpe2ouZXJyb3IoXCJjb29raWVTdG9yZSBlcnJvcjogXCIrdCl9LEE6ZnVuY3Rpb24odCl7aWYobyl7dHJ5e2Zvcih2YXIgaT10K1wiPVwiLGU9by5jb29raWUuc3BsaXQoXCI7XCIpLmZpbHRlcigodD0+dC5sZW5ndGgpKSxyPTA7cjxlLmxlbmd0aDtyKyspe2Zvcih2YXIgcz1lW3JdO1wiIFwiPT1zLmNoYXJBdCgwKTspcz1zLnN1YnN0cmluZygxLHMubGVuZ3RoKTtpZigwPT09cy5pbmRleE9mKGkpKXJldHVybiBkZWNvZGVVUklDb21wb25lbnQocy5zdWJzdHJpbmcoaS5sZW5ndGgscy5sZW5ndGgpKX19Y2F0Y2godCl7fXJldHVybiBudWxsfX0sRDpmdW5jdGlvbih0KXt2YXIgaTt0cnl7aT1KU09OLnBhcnNlKEJpLkEodCkpfHx7fX1jYXRjaCh0KXt9cmV0dXJuIGl9LEw6ZnVuY3Rpb24odCxpLGUscixzKXtpZihvKXRyeXt2YXIgbj1cIlwiLGE9XCJcIixsPXFpKG8ubG9jYXRpb24uaG9zdG5hbWUscik7aWYoZSl7dmFyIHU9bmV3IERhdGU7dS5zZXRUaW1lKHUuZ2V0VGltZSgpKzI0KmUqNjAqNjAqMWUzKSxuPVwiOyBleHBpcmVzPVwiK3UudG9VVENTdHJpbmcoKX1zJiYoYT1cIjsgc2VjdXJlXCIpO3ZhciBoPXQrXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGkpKStuK1wiOyBTYW1lU2l0ZT1MYXg7IHBhdGg9L1wiK2wrYTtyZXR1cm4gaC5sZW5ndGg+MzY4Ni40JiZqLndhcm4oXCJjb29raWVTdG9yZSB3YXJuaW5nOiBsYXJnZSBjb29raWUsIGxlbj1cIitoLmxlbmd0aCksby5jb29raWU9aCxofWNhdGNoKHQpe3JldHVybn19LE46ZnVuY3Rpb24odCxpKXt0cnl7QmkuTCh0LFwiXCIsLTEsaSl9Y2F0Y2godCl7cmV0dXJufX19LEhpPW51bGwsV2k9e086ZnVuY3Rpb24oKXtpZighQyhIaSkpcmV0dXJuIEhpO3ZhciBpPSEwO2lmKFIodCkpaT0hMTtlbHNlIHRyeXt2YXIgZT1cIl9fbXBsc3N1cHBvcnRfX1wiO1dpLkwoZSxcInh5elwiKSwnXCJ4eXpcIichPT1XaS5BKGUpJiYoaT0hMSksV2kuTihlKX1jYXRjaCh0KXtpPSExfXJldHVybiBpfHxqLmVycm9yKFwibG9jYWxTdG9yYWdlIHVuc3VwcG9ydGVkOyBmYWxsaW5nIGJhY2sgdG8gY29va2llIHN0b3JlXCIpLEhpPWksaX0sRjpmdW5jdGlvbih0KXtqLmVycm9yKFwibG9jYWxTdG9yYWdlIGVycm9yOiBcIit0KX0sQTpmdW5jdGlvbihpKXt0cnl7cmV0dXJuIG51bGw9PXQ/dm9pZCAwOnQubG9jYWxTdG9yYWdlLmdldEl0ZW0oaSl9Y2F0Y2godCl7V2kuRih0KX1yZXR1cm4gbnVsbH0sRDpmdW5jdGlvbih0KXt0cnl7cmV0dXJuIEpTT04ucGFyc2UoV2kuQSh0KSl8fHt9fWNhdGNoKHQpe31yZXR1cm4gbnVsbH0sTDpmdW5jdGlvbihpLGUpe3RyeXtudWxsPT10fHx0LmxvY2FsU3RvcmFnZS5zZXRJdGVtKGksSlNPTi5zdHJpbmdpZnkoZSkpfWNhdGNoKHQpe1dpLkYodCl9fSxOOmZ1bmN0aW9uKGkpe3RyeXtudWxsPT10fHx0LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGkpfWNhdGNoKHQpe1dpLkYodCl9fX0sR2k9W1wiZGlzdGluY3RfaWRcIiwkdCxrdCxVdCx6dF0sSmk9Qih7fSxXaSx7RDpmdW5jdGlvbih0KXt0cnl7dmFyIGk9e307dHJ5e2k9QmkuRCh0KXx8e319Y2F0Y2godCl7fXZhciBlPVYoaSxKU09OLnBhcnNlKFdpLkEodCl8fFwie31cIikpO3JldHVybiBXaS5MKHQsZSksZX1jYXRjaCh0KXt9cmV0dXJuIG51bGx9LEw6ZnVuY3Rpb24odCxpLGUscixzLG4pe3RyeXtXaS5MKHQsaSx2b2lkIDAsdm9pZCAwLG4pO3ZhciBvPXt9O0dpLmZvckVhY2goKHQ9PntpW3RdJiYob1t0XT1pW3RdKX0pKSxPYmplY3Qua2V5cyhvKS5sZW5ndGgmJkJpLkwodCxvLGUscixzLG4pfWNhdGNoKHQpe1dpLkYodCl9fSxOOmZ1bmN0aW9uKGksZSl7dHJ5e251bGw9PXR8fHQubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oaSksQmkuTihpLGUpfWNhdGNoKHQpe1dpLkYodCl9fX0pLFZpPXt9LEtpPXtPOmZ1bmN0aW9uKCl7cmV0dXJuITB9LEY6ZnVuY3Rpb24odCl7ai5lcnJvcihcIm1lbW9yeVN0b3JhZ2UgZXJyb3I6IFwiK3QpfSxBOmZ1bmN0aW9uKHQpe3JldHVybiBWaVt0XXx8bnVsbH0sRDpmdW5jdGlvbih0KXtyZXR1cm4gVmlbdF18fG51bGx9LEw6ZnVuY3Rpb24odCxpKXtWaVt0XT1pfSxOOmZ1bmN0aW9uKHQpe2RlbGV0ZSBWaVt0XX19LFlpPW51bGwsWGk9e086ZnVuY3Rpb24oKXtpZighQyhZaSkpcmV0dXJuIFlpO2lmKFlpPSEwLFIodCkpWWk9ITE7ZWxzZSB0cnl7dmFyIGk9XCJfX3N1cHBvcnRfX1wiO1hpLkwoaSxcInh5elwiKSwnXCJ4eXpcIichPT1YaS5BKGkpJiYoWWk9ITEpLFhpLk4oaSl9Y2F0Y2godCl7WWk9ITF9cmV0dXJuIFlpfSxGOmZ1bmN0aW9uKHQpe2ouZXJyb3IoXCJzZXNzaW9uU3RvcmFnZSBlcnJvcjogXCIsdCl9LEE6ZnVuY3Rpb24oaSl7dHJ5e3JldHVybiBudWxsPT10P3ZvaWQgMDp0LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oaSl9Y2F0Y2godCl7WGkuRih0KX1yZXR1cm4gbnVsbH0sRDpmdW5jdGlvbih0KXt0cnl7cmV0dXJuIEpTT04ucGFyc2UoWGkuQSh0KSl8fG51bGx9Y2F0Y2godCl7fXJldHVybiBudWxsfSxMOmZ1bmN0aW9uKGksZSl7dHJ5e251bGw9PXR8fHQuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShpLEpTT04uc3RyaW5naWZ5KGUpKX1jYXRjaCh0KXtYaS5GKHQpfX0sTjpmdW5jdGlvbihpKXt0cnl7bnVsbD09dHx8dC5zZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKGkpfWNhdGNoKHQpe1hpLkYodCl9fX0sUWk9ZnVuY3Rpb24odCl7cmV0dXJuIHRbdC5QRU5ESU5HPS0xXT1cIlBFTkRJTkdcIix0W3QuREVOSUVEPTBdPVwiREVOSUVEXCIsdFt0LkdSQU5URUQ9MV09XCJHUkFOVEVEXCIsdH0oe30pO2NsYXNzIFppe2NvbnN0cnVjdG9yKHQpe3RoaXMuX2luc3RhbmNlPXR9Z2V0IFMoKXtyZXR1cm4gdGhpcy5faW5zdGFuY2UuY29uZmlnfWdldCBjb25zZW50KCl7cmV0dXJuIHRoaXMuaigpP1FpLkRFTklFRDp0aGlzLlV9aXNPcHRlZE91dCgpe3JldHVybiB0aGlzLmNvbnNlbnQ9PT1RaS5ERU5JRUR8fHRoaXMuY29uc2VudD09PVFpLlBFTkRJTkcmJnRoaXMuUy5vcHRfb3V0X2NhcHR1cmluZ19ieV9kZWZhdWx0fWlzT3B0ZWRJbigpe3JldHVybiF0aGlzLmlzT3B0ZWRPdXQoKX1vcHRJbk91dCh0KXt0aGlzLnEuTCh0aGlzLkIsdD8xOjAsdGhpcy5TLmNvb2tpZV9leHBpcmF0aW9uLHRoaXMuUy5jcm9zc19zdWJkb21haW5fY29va2llLHRoaXMuUy5zZWN1cmVfY29va2llKX1yZXNldCgpe3RoaXMucS5OKHRoaXMuQix0aGlzLlMuY3Jvc3Nfc3ViZG9tYWluX2Nvb2tpZSl9Z2V0IEIoKXt2YXJ7dG9rZW46dCxvcHRfb3V0X2NhcHR1cmluZ19jb29raWVfcHJlZml4Oml9PXRoaXMuX2luc3RhbmNlLmNvbmZpZztyZXR1cm4oaXx8XCJfX3BoX29wdF9pbl9vdXRfXCIpK3R9Z2V0IFUoKXt2YXIgdD10aGlzLnEuQSh0aGlzLkIpO3JldHVyblwiMVwiPT09dD9RaS5HUkFOVEVEOlwiMFwiPT09dD9RaS5ERU5JRUQ6UWkuUEVORElOR31nZXQgcSgpe2lmKCF0aGlzLkgpe3ZhciB0PXRoaXMuUy5vcHRfb3V0X2NhcHR1cmluZ19wZXJzaXN0ZW5jZV90eXBlO3RoaXMuSD1cImxvY2FsU3RvcmFnZVwiPT09dD9XaTpCaTt2YXIgaT1cImxvY2FsU3RvcmFnZVwiPT09dD9CaTpXaTtpLkEodGhpcy5CKSYmKHRoaXMuSC5BKHRoaXMuQil8fHRoaXMub3B0SW5PdXQoXCIxXCI9PT1pLkEodGhpcy5CKSksaS5OKHRoaXMuQix0aGlzLlMuY3Jvc3Nfc3ViZG9tYWluX2Nvb2tpZSkpfXJldHVybiB0aGlzLkh9aigpe3JldHVybiEhdGhpcy5TLnJlc3BlY3RfZG50JiYhIXJ0KFtudWxsPT1uP3ZvaWQgMDpuLmRvTm90VHJhY2ssbnVsbD09bj92b2lkIDA6bi5tc0RvTm90VHJhY2ssdi5kb05vdFRyYWNrXSwodD0+bShbITAsMSxcIjFcIixcInllc1wiXSx0KSkpfX12YXIgdGU9eihcIltEZWFkIENsaWNrc11cIiksaWU9KCk9PiEwLGVlPXQ9Pnt2YXIgaSxlPSEobnVsbD09KGk9dC5pbnN0YW5jZS5wZXJzaXN0ZW5jZSl8fCFpLmdldF9wcm9wZXJ0eShjdCkpLHI9dC5pbnN0YW5jZS5jb25maWcuY2FwdHVyZV9kZWFkX2NsaWNrcztyZXR1cm4gQShyKT9yOmV9O2NsYXNzIHJle2dldCBsYXp5TG9hZGVkRGVhZENsaWNrc0F1dG9jYXB0dXJlKCl7cmV0dXJuIHRoaXMuV31jb25zdHJ1Y3Rvcih0LGksZSl7dGhpcy5pbnN0YW5jZT10LHRoaXMuaXNFbmFibGVkPWksdGhpcy5vbkNhcHR1cmU9ZSx0aGlzLnN0YXJ0SWZFbmFibGVkKCl9b25SZW1vdGVDb25maWcodCl7dGhpcy5pbnN0YW5jZS5wZXJzaXN0ZW5jZSYmdGhpcy5pbnN0YW5jZS5wZXJzaXN0ZW5jZS5yZWdpc3Rlcih7W2N0XTpudWxsPT10P3ZvaWQgMDp0LmNhcHR1cmVEZWFkQ2xpY2tzfSksdGhpcy5zdGFydElmRW5hYmxlZCgpfXN0YXJ0SWZFbmFibGVkKCl7dGhpcy5pc0VuYWJsZWQodGhpcykmJnRoaXMuRygoKCk9Pnt0aGlzLkooKX0pKX1HKHQpe3ZhciBpLGU7bnVsbCE9KGk9di5fX1Bvc3Rob2dFeHRlbnNpb25zX18pJiZpLmluaXREZWFkQ2xpY2tzQXV0b2NhcHR1cmUmJnQoKSxudWxsPT0oZT12Ll9fUG9zdGhvZ0V4dGVuc2lvbnNfXyl8fG51bGw9PWUubG9hZEV4dGVybmFsRGVwZW5kZW5jeXx8ZS5sb2FkRXh0ZXJuYWxEZXBlbmRlbmN5KHRoaXMuaW5zdGFuY2UsXCJkZWFkLWNsaWNrcy1hdXRvY2FwdHVyZVwiLChpPT57aT90ZS5lcnJvcihcImZhaWxlZCB0byBsb2FkIHNjcmlwdFwiLGkpOnQoKX0pKX1KKCl7dmFyIHQ7aWYobyl7aWYoIXRoaXMuVyYmbnVsbCE9KHQ9di5fX1Bvc3Rob2dFeHRlbnNpb25zX18pJiZ0LmluaXREZWFkQ2xpY2tzQXV0b2NhcHR1cmUpe3ZhciBpPUkodGhpcy5pbnN0YW5jZS5jb25maWcuY2FwdHVyZV9kZWFkX2NsaWNrcyk/dGhpcy5pbnN0YW5jZS5jb25maWcuY2FwdHVyZV9kZWFkX2NsaWNrczp7fTtpLl9fb25DYXB0dXJlPXRoaXMub25DYXB0dXJlLHRoaXMuVz12Ll9fUG9zdGhvZ0V4dGVuc2lvbnNfXy5pbml0RGVhZENsaWNrc0F1dG9jYXB0dXJlKHRoaXMuaW5zdGFuY2UsaSksdGhpcy5XLnN0YXJ0KG8pLHRlLmluZm8oXCJzdGFydGluZy4uLlwiKX19ZWxzZSB0ZS5lcnJvcihcImBkb2N1bWVudGAgbm90IGZvdW5kLiBDYW5ub3Qgc3RhcnQuXCIpfXN0b3AoKXt0aGlzLlcmJih0aGlzLlcuc3RvcCgpLHRoaXMuVz12b2lkIDAsdGUuaW5mbyhcInN0b3BwaW5nLi4uXCIpKX19dmFyIHNlPXooXCJbRXhjZXB0aW9uQXV0b2NhcHR1cmVdXCIpO2NsYXNzIG5le2NvbnN0cnVjdG9yKGkpe3ZhciBlO3RoaXMuVj0oKT0+e3ZhciBpO2lmKHQmJnRoaXMuaXNFbmFibGVkJiZudWxsIT0oaT12Ll9fUG9zdGhvZ0V4dGVuc2lvbnNfXykmJmkuZXJyb3JXcmFwcGluZ0Z1bmN0aW9ucyl7dmFyIGU9di5fX1Bvc3Rob2dFeHRlbnNpb25zX18uZXJyb3JXcmFwcGluZ0Z1bmN0aW9ucy53cmFwT25FcnJvcixyPXYuX19Qb3N0aG9nRXh0ZW5zaW9uc19fLmVycm9yV3JhcHBpbmdGdW5jdGlvbnMud3JhcFVuaGFuZGxlZFJlamVjdGlvbixzPXYuX19Qb3N0aG9nRXh0ZW5zaW9uc19fLmVycm9yV3JhcHBpbmdGdW5jdGlvbnMud3JhcENvbnNvbGVFcnJvcjt0cnl7IXRoaXMuSyYmdGhpcy5TLmNhcHR1cmVfdW5oYW5kbGVkX2Vycm9ycyYmKHRoaXMuSz1lKHRoaXMuY2FwdHVyZUV4Y2VwdGlvbi5iaW5kKHRoaXMpKSksIXRoaXMuWSYmdGhpcy5TLmNhcHR1cmVfdW5oYW5kbGVkX3JlamVjdGlvbnMmJih0aGlzLlk9cih0aGlzLmNhcHR1cmVFeGNlcHRpb24uYmluZCh0aGlzKSkpLCF0aGlzLlgmJnRoaXMuUy5jYXB0dXJlX2NvbnNvbGVfZXJyb3JzJiYodGhpcy5YPXModGhpcy5jYXB0dXJlRXhjZXB0aW9uLmJpbmQodGhpcykpKX1jYXRjaCh0KXtzZS5lcnJvcihcImZhaWxlZCB0byBzdGFydFwiLHQpLHRoaXMuWigpfX19LHRoaXMuX2luc3RhbmNlPWksdGhpcy50dD0hKG51bGw9PShlPXRoaXMuX2luc3RhbmNlLnBlcnNpc3RlbmNlKXx8IWUucHJvcHNbaHRdKSx0aGlzLlM9dGhpcy5pdCgpLHRoaXMuc3RhcnRJZkVuYWJsZWQoKX1pdCgpe3ZhciB0PXRoaXMuX2luc3RhbmNlLmNvbmZpZy5jYXB0dXJlX2V4Y2VwdGlvbnMsaT17Y2FwdHVyZV91bmhhbmRsZWRfZXJyb3JzOiExLGNhcHR1cmVfdW5oYW5kbGVkX3JlamVjdGlvbnM6ITEsY2FwdHVyZV9jb25zb2xlX2Vycm9yczohMX07cmV0dXJuIEkodCk/aT1CKHt9LGksdCk6KFIodCk/dGhpcy50dDp0KSYmKGk9Qih7fSxpLHtjYXB0dXJlX3VuaGFuZGxlZF9lcnJvcnM6ITAsY2FwdHVyZV91bmhhbmRsZWRfcmVqZWN0aW9uczohMH0pKSxpfWdldCBpc0VuYWJsZWQoKXtyZXR1cm4gdGhpcy5TLmNhcHR1cmVfY29uc29sZV9lcnJvcnN8fHRoaXMuUy5jYXB0dXJlX3VuaGFuZGxlZF9lcnJvcnN8fHRoaXMuUy5jYXB0dXJlX3VuaGFuZGxlZF9yZWplY3Rpb25zfXN0YXJ0SWZFbmFibGVkKCl7dGhpcy5pc0VuYWJsZWQmJihzZS5pbmZvKFwiZW5hYmxlZFwiKSx0aGlzLkcodGhpcy5WKSl9Ryh0KXt2YXIgaSxlO251bGwhPShpPXYuX19Qb3N0aG9nRXh0ZW5zaW9uc19fKSYmaS5lcnJvcldyYXBwaW5nRnVuY3Rpb25zJiZ0KCksbnVsbD09KGU9di5fX1Bvc3Rob2dFeHRlbnNpb25zX18pfHxudWxsPT1lLmxvYWRFeHRlcm5hbERlcGVuZGVuY3l8fGUubG9hZEV4dGVybmFsRGVwZW5kZW5jeSh0aGlzLl9pbnN0YW5jZSxcImV4Y2VwdGlvbi1hdXRvY2FwdHVyZVwiLChpPT57aWYoaSlyZXR1cm4gc2UuZXJyb3IoXCJmYWlsZWQgdG8gbG9hZCBzY3JpcHRcIixpKTt0KCl9KSl9Wigpe3ZhciB0LGksZTtudWxsPT0odD10aGlzLkspfHx0LmNhbGwodGhpcyksdGhpcy5LPXZvaWQgMCxudWxsPT0oaT10aGlzLlkpfHxpLmNhbGwodGhpcyksdGhpcy5ZPXZvaWQgMCxudWxsPT0oZT10aGlzLlgpfHxlLmNhbGwodGhpcyksdGhpcy5YPXZvaWQgMH1vblJlbW90ZUNvbmZpZyh0KXt2YXIgaT10LmF1dG9jYXB0dXJlRXhjZXB0aW9uczt0aGlzLnR0PSEhaXx8ITEsdGhpcy5TPXRoaXMuaXQoKSx0aGlzLl9pbnN0YW5jZS5wZXJzaXN0ZW5jZSYmdGhpcy5faW5zdGFuY2UucGVyc2lzdGVuY2UucmVnaXN0ZXIoe1todF06dGhpcy50dH0pLHRoaXMuc3RhcnRJZkVuYWJsZWQoKX1jYXB0dXJlRXhjZXB0aW9uKHQpe3ZhciBpPXRoaXMuX2luc3RhbmNlLnJlcXVlc3RSb3V0ZXIuZW5kcG9pbnRGb3IoXCJ1aVwiKTt0LiRleGNlcHRpb25fcGVyc29uVVJMPWkrXCIvcHJvamVjdC9cIit0aGlzLl9pbnN0YW5jZS5jb25maWcudG9rZW4rXCIvcGVyc29uL1wiK3RoaXMuX2luc3RhbmNlLmdldF9kaXN0aW5jdF9pZCgpLHRoaXMuX2luc3RhbmNlLmV4Y2VwdGlvbnMuc2VuZEV4Y2VwdGlvbkV2ZW50KHQpfX1mdW5jdGlvbiBvZSh0KXtyZXR1cm4hUihFdmVudCkmJmFlKHQsRXZlbnQpfWZ1bmN0aW9uIGFlKHQsaSl7dHJ5e3JldHVybiB0IGluc3RhbmNlb2YgaX1jYXRjaCh0KXtyZXR1cm4hMX19ZnVuY3Rpb24gbGUodCl7c3dpdGNoKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSl7Y2FzZVwiW29iamVjdCBFcnJvcl1cIjpjYXNlXCJbb2JqZWN0IEV4Y2VwdGlvbl1cIjpjYXNlXCJbb2JqZWN0IERPTUV4Y2VwdGlvbl1cIjpjYXNlXCJbb2JqZWN0IERPTUVycm9yXVwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuIGFlKHQsRXJyb3IpfX1mdW5jdGlvbiB1ZSh0LGkpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCk9PT1cIltvYmplY3QgXCIraStcIl1cIn1mdW5jdGlvbiBoZSh0KXtyZXR1cm4gdWUodCxcIkRPTUVycm9yXCIpfXZhciBkZT0vXFwoZXJyb3I6ICguKilcXCkvLHZlPTUwLGNlPVwiP1wiO2Z1bmN0aW9uIGZlKHQsaSxlLHIpe3ZhciBzPXtwbGF0Zm9ybTpcIndlYjpqYXZhc2NyaXB0XCIsZmlsZW5hbWU6dCxmdW5jdGlvbjpcIjxhbm9ueW1vdXM+XCI9PT1pP2NlOmksaW5fYXBwOiEwfTtyZXR1cm4gUihlKXx8KHMubGluZW5vPWUpLFIocil8fChzLmNvbG5vPXIpLHN9dmFyIHBlPS9eXFxzKmF0IChcXFMrPykoPzo6KFxcZCspKSg/OjooXFxkKykpXFxzKiQvaSxnZT0vXlxccyphdCAoPzooLis/XFwpKD86IFxcWy4rXFxdKT98Lio/KSA/XFwoKD86YWRkcmVzcyBhdCApPyk/KD86YXN5bmMgKT8oKD86PGFub255bW91cz58Wy1hLXpdKzp8LipidW5kbGV8XFwvKT8uKj8pKD86OihcXGQrKSk/KD86OihcXGQrKSk/XFwpP1xccyokL2ksX2U9L1xcKChcXFMqKSg/OjooXFxkKykpKD86OihcXGQrKSlcXCkvLG1lPS9eXFxzKiguKj8pKD86XFwoKC4qPylcXCkpPyg/Ol58QCk/KCg/OlstYS16XSspPzpcXC8uKj98XFxbbmF0aXZlIGNvZGVcXF18W15AXSooPzpidW5kbGV8XFxkK1xcLmpzKXxcXC9bXFx3XFwtLiAvPV0rKSg/OjooXFxkKykpPyg/OjooXFxkKykpP1xccyokL2ksYmU9LyhcXFMrKSBsaW5lIChcXGQrKSg/OiA+IGV2YWwgbGluZSBcXGQrKSogPiBldmFsL2ksd2U9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxpPW5ldyBBcnJheSh0KSxlPTA7ZTx0O2UrKylpW2VdPWFyZ3VtZW50c1tlXTt2YXIgcj1pLnNvcnQoKCh0LGkpPT50WzBdLWlbMF0pKS5tYXAoKHQ9PnRbMV0pKTtyZXR1cm4gZnVuY3Rpb24odCxpKXt2b2lkIDA9PT1pJiYoaT0wKTtmb3IodmFyIGU9W10scz10LnNwbGl0KFwiXFxuXCIpLG49aTtuPHMubGVuZ3RoO24rKyl7dmFyIG89c1tuXTtpZighKG8ubGVuZ3RoPjEwMjQpKXt2YXIgYT1kZS50ZXN0KG8pP28ucmVwbGFjZShkZSxcIiQxXCIpOm87aWYoIWEubWF0Y2goL1xcUypFcnJvcjogLykpe2Zvcih2YXIgbCBvZiByKXt2YXIgdT1sKGEpO2lmKHUpe2UucHVzaCh1KTticmVha319aWYoZS5sZW5ndGg+PXZlKWJyZWFrfX19cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKCF0Lmxlbmd0aClyZXR1cm5bXTt2YXIgaT1BcnJheS5mcm9tKHQpO3JldHVybiBpLnJldmVyc2UoKSxpLnNsaWNlKDAsdmUpLm1hcCgodD0+Qih7fSx0LHtmaWxlbmFtZTp0LmZpbGVuYW1lfHx5ZShpKS5maWxlbmFtZSxmdW5jdGlvbjp0LmZ1bmN0aW9ufHxjZX0pKSl9KGUpfX0oLi4uW1szMCx0PT57dmFyIGk9cGUuZXhlYyh0KTtpZihpKXt2YXJbLGUscixzXT1pO3JldHVybiBmZShlLGNlLCtyLCtzKX12YXIgbj1nZS5leGVjKHQpO2lmKG4pe2lmKG5bMl0mJjA9PT1uWzJdLmluZGV4T2YoXCJldmFsXCIpKXt2YXIgbz1fZS5leGVjKG5bMl0pO28mJihuWzJdPW9bMV0sblszXT1vWzJdLG5bNF09b1szXSl9dmFyW2EsbF09eGUoblsxXXx8Y2UsblsyXSk7cmV0dXJuIGZlKGwsYSxuWzNdPytuWzNdOnZvaWQgMCxuWzRdPytuWzRdOnZvaWQgMCl9fV0sWzUwLHQ9Pnt2YXIgaT1tZS5leGVjKHQpO2lmKGkpe2lmKGlbM10mJmlbM10uaW5kZXhPZihcIiA+IGV2YWxcIik+LTEpe3ZhciBlPWJlLmV4ZWMoaVszXSk7ZSYmKGlbMV09aVsxXXx8XCJldmFsXCIsaVszXT1lWzFdLGlbNF09ZVsyXSxpWzVdPVwiXCIpfXZhciByPWlbM10scz1pWzFdfHxjZTtyZXR1cm5bcyxyXT14ZShzLHIpLGZlKHIscyxpWzRdPytpWzRdOnZvaWQgMCxpWzVdPytpWzVdOnZvaWQgMCl9fV1dKTtmdW5jdGlvbiB5ZSh0KXtyZXR1cm4gdFt0Lmxlbmd0aC0xXXx8e319dmFyIFNlLCRlLGtlLHhlPSh0LGkpPT57dmFyIGU9LTEhPT10LmluZGV4T2YoXCJzYWZhcmktZXh0ZW5zaW9uXCIpLHI9LTEhPT10LmluZGV4T2YoXCJzYWZhcmktd2ViLWV4dGVuc2lvblwiKTtyZXR1cm4gZXx8cj9bLTEhPT10LmluZGV4T2YoXCJAXCIpP3Quc3BsaXQoXCJAXCIpWzBdOmNlLGU/XCJzYWZhcmktZXh0ZW5zaW9uOlwiK2k6XCJzYWZhcmktd2ViLWV4dGVuc2lvbjpcIitpXTpbdCxpXX07dmFyIEVlPS9eKD86W1V1XW5jYXVnaHQgKD86ZXhjZXB0aW9uOiApPyk/KD86KCg/OkV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSXwpRXJyb3IpOiApPyguKikkL2k7ZnVuY3Rpb24gSWUodCxpKXt2b2lkIDA9PT1pJiYoaT0wKTt2YXIgZT10LnN0YWNrdHJhY2V8fHQuc3RhY2t8fFwiXCIscj1mdW5jdGlvbih0KXtpZih0JiZQZS50ZXN0KHQubWVzc2FnZSkpcmV0dXJuIDE7cmV0dXJuIDB9KHQpO3RyeXt2YXIgcz13ZSxuPWZ1bmN0aW9uKHQsaSl7dmFyIGU9ZnVuY3Rpb24odCl7dmFyIGk9Z2xvYmFsVGhpcy5fcG9zdGhvZ0NodW5rSWRzO2lmKCFpKXJldHVybnt9O3ZhciBlPU9iamVjdC5rZXlzKGkpO3JldHVybiBrZSYmZS5sZW5ndGg9PT0kZXx8KCRlPWUubGVuZ3RoLGtlPWUucmVkdWNlKCgoZSxyKT0+e1NlfHwoU2U9e30pO3ZhciBzPVNlW3JdO2lmKHMpZVtzWzBdXT1zWzFdO2Vsc2UgZm9yKHZhciBuPXQociksbz1uLmxlbmd0aC0xO28+PTA7by0tKXt2YXIgYT1uW29dLGw9bnVsbD09YT92b2lkIDA6YS5maWxlbmFtZSx1PWlbcl07aWYobCYmdSl7ZVtsXT11LFNlW3JdPVtsLHVdO2JyZWFrfX1yZXR1cm4gZX0pLHt9KSksa2V9KGkpO3JldHVybiB0LmZvckVhY2goKHQ9Pnt0LmZpbGVuYW1lJiYodC5jaHVua19pZD1lW3QuZmlsZW5hbWVdKX0pKSx0fShzKGUscikscyk7cmV0dXJuIG4uc2xpY2UoMCxuLmxlbmd0aC1pKX1jYXRjaCh0KXt9cmV0dXJuW119dmFyIFBlPS9NaW5pZmllZCBSZWFjdCBlcnJvciAjXFxkKzsvaTtmdW5jdGlvbiBSZSh0LGkpe3ZhciBlLHIscz1JZSh0KSxuPW51bGw9PT0oZT1udWxsPT1pP3ZvaWQgMDppLmhhbmRsZWQpfHx2b2lkIDA9PT1lfHxlLG89bnVsbCE9PShyPW51bGw9PWk/dm9pZCAwOmkuc3ludGhldGljKSYmdm9pZCAwIT09ciYmcjtyZXR1cm57dHlwZTpudWxsIT1pJiZpLm92ZXJyaWRlRXhjZXB0aW9uVHlwZT9pLm92ZXJyaWRlRXhjZXB0aW9uVHlwZTp0Lm5hbWUsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGk9dC5tZXNzYWdlO2lmKGkuZXJyb3ImJlwic3RyaW5nXCI9PXR5cGVvZiBpLmVycm9yLm1lc3NhZ2UpcmV0dXJuIFN0cmluZyhpLmVycm9yLm1lc3NhZ2UpO3JldHVybiBTdHJpbmcoaSl9KHQpLHN0YWNrdHJhY2U6e2ZyYW1lczpzLHR5cGU6XCJyYXdcIn0sbWVjaGFuaXNtOntoYW5kbGVkOm4sc3ludGhldGljOm99fX1mdW5jdGlvbiBUZSh0LGkpe3ZhciBlPVJlKHQsaSk7cmV0dXJuIHQuY2F1c2UmJmxlKHQuY2F1c2UpJiZ0LmNhdXNlIT09dD9bZSwuLi5UZSh0LmNhdXNlLHtoYW5kbGVkOm51bGw9PWk/dm9pZCAwOmkuaGFuZGxlZCxzeW50aGV0aWM6bnVsbD09aT92b2lkIDA6aS5zeW50aGV0aWN9KV06W2VdfWZ1bmN0aW9uIE1lKHQsaSl7cmV0dXJueyRleGNlcHRpb25fbGlzdDpUZSh0LGkpLCRleGNlcHRpb25fbGV2ZWw6XCJlcnJvclwifX1mdW5jdGlvbiBDZSh0LGkpe3ZhciBlLHIscyxuPW51bGw9PT0oZT1udWxsPT1pP3ZvaWQgMDppLmhhbmRsZWQpfHx2b2lkIDA9PT1lfHxlLG89bnVsbD09PShyPW51bGw9PWk/dm9pZCAwOmkuc3ludGhldGljKXx8dm9pZCAwPT09cnx8cixhPXt0eXBlOm51bGwhPWkmJmkub3ZlcnJpZGVFeGNlcHRpb25UeXBlP2kub3ZlcnJpZGVFeGNlcHRpb25UeXBlOm51bGwhPT0ocz1udWxsPT1pP3ZvaWQgMDppLmRlZmF1bHRFeGNlcHRpb25UeXBlKSYmdm9pZCAwIT09cz9zOlwiRXJyb3JcIix2YWx1ZTp0fHwobnVsbD09aT92b2lkIDA6aS5kZWZhdWx0RXhjZXB0aW9uTWVzc2FnZSksbWVjaGFuaXNtOntoYW5kbGVkOm4sc3ludGhldGljOm99fTtpZihudWxsIT1pJiZpLnN5bnRoZXRpY0V4Y2VwdGlvbil7dmFyIGw9SWUoaS5zeW50aGV0aWNFeGNlcHRpb24sMSk7bC5sZW5ndGgmJihhLnN0YWNrdHJhY2U9e2ZyYW1lczpsLHR5cGU6XCJyYXdcIn0pfXJldHVybnskZXhjZXB0aW9uX2xpc3Q6W2FdLCRleGNlcHRpb25fbGV2ZWw6XCJlcnJvclwifX1mdW5jdGlvbiBPZSh0KXtyZXR1cm4gVCh0KSYmIU0odCkmJl8uaW5kZXhPZih0KT49MH1mdW5jdGlvbiBGZSh0LGkpe3ZhciBlLHIscz1udWxsPT09KGU9bnVsbD09aT92b2lkIDA6aS5oYW5kbGVkKXx8dm9pZCAwPT09ZXx8ZSxuPW51bGw9PT0ocj1udWxsPT1pP3ZvaWQgMDppLnN5bnRoZXRpYyl8fHZvaWQgMD09PXJ8fHIsbz1udWxsIT1pJiZpLm92ZXJyaWRlRXhjZXB0aW9uVHlwZT9pLm92ZXJyaWRlRXhjZXB0aW9uVHlwZTpvZSh0KT90LmNvbnN0cnVjdG9yLm5hbWU6XCJFcnJvclwiLGE9XCJOb24tRXJyb3IgJ2V4Y2VwdGlvbicgY2FwdHVyZWQgd2l0aCBrZXlzOiBcIitmdW5jdGlvbih0LGkpe3ZvaWQgMD09PWkmJihpPTQwKTt2YXIgZT1PYmplY3Qua2V5cyh0KTtpZihlLnNvcnQoKSwhZS5sZW5ndGgpcmV0dXJuXCJbb2JqZWN0IGhhcyBubyBrZXlzXVwiO2Zvcih2YXIgcj1lLmxlbmd0aDtyPjA7ci0tKXt2YXIgcz1lLnNsaWNlKDAscikuam9pbihcIiwgXCIpO2lmKCEocy5sZW5ndGg+aSkpcmV0dXJuIHI9PT1lLmxlbmd0aHx8cy5sZW5ndGg8PWk/czpzLnNsaWNlKDAsaSkrXCIuLi5cIn1yZXR1cm5cIlwifSh0KSxsPXt0eXBlOm8sdmFsdWU6YSxtZWNoYW5pc206e2hhbmRsZWQ6cyxzeW50aGV0aWM6bn19O2lmKG51bGwhPWkmJmkuc3ludGhldGljRXhjZXB0aW9uKXt2YXIgdT1JZShudWxsPT1pP3ZvaWQgMDppLnN5bnRoZXRpY0V4Y2VwdGlvbiwxKTt1Lmxlbmd0aCYmKGwuc3RhY2t0cmFjZT17ZnJhbWVzOnUsdHlwZTpcInJhd1wifSl9cmV0dXJueyRleGNlcHRpb25fbGlzdDpbbF0sJGV4Y2VwdGlvbl9sZXZlbDpPZSh0LmxldmVsKT90LmxldmVsOlwiZXJyb3JcIn19ZnVuY3Rpb24gQWUodCxpKXt2YXJ7ZXJyb3I6ZSxldmVudDpyfT10LHM9eyRleGNlcHRpb25fbGlzdDpbXX0sbj1lfHxyO2lmKGhlKG4pfHxmdW5jdGlvbih0KXtyZXR1cm4gdWUodCxcIkRPTUV4Y2VwdGlvblwiKX0obikpe3ZhciBvPW47aWYoZnVuY3Rpb24odCl7cmV0dXJuXCJzdGFja1wiaW4gdH0obikpcz1NZShuLGkpO2Vsc2V7dmFyIGE9by5uYW1lfHwoaGUobyk/XCJET01FcnJvclwiOlwiRE9NRXhjZXB0aW9uXCIpLGw9by5tZXNzYWdlP2ErXCI6IFwiK28ubWVzc2FnZTphO3M9Q2UobCxCKHt9LGkse292ZXJyaWRlRXhjZXB0aW9uVHlwZTpoZShvKT9cIkRPTUVycm9yXCI6XCJET01FeGNlcHRpb25cIixkZWZhdWx0RXhjZXB0aW9uTWVzc2FnZTpsfSkpfXJldHVyblwiY29kZVwiaW4gbyYmKHMuJGV4Y2VwdGlvbl9ET01FeGNlcHRpb25fY29kZT1cIlwiK28uY29kZSksc31pZihmdW5jdGlvbih0KXtyZXR1cm4gdWUodCxcIkVycm9yRXZlbnRcIil9KG4pJiZuLmVycm9yKXJldHVybiBNZShuLmVycm9yLGkpO2lmKGxlKG4pKXJldHVybiBNZShuLGkpO2lmKGZ1bmN0aW9uKHQpe3JldHVybiB1ZSh0LFwiT2JqZWN0XCIpfShuKXx8b2UobikpcmV0dXJuIEZlKG4saSk7aWYoUihlKSYmVChyKSl7dmFyIHU9XCJFcnJvclwiLGg9cixkPXIubWF0Y2goRWUpO3JldHVybiBkJiYodT1kWzFdLGg9ZFsyXSksQ2UoaCxCKHt9LGkse292ZXJyaWRlRXhjZXB0aW9uVHlwZTp1LGRlZmF1bHRFeGNlcHRpb25NZXNzYWdlOmh9KSl9cmV0dXJuIENlKG4saSl9ZnVuY3Rpb24gRGUodCxpLGUpe3RyeXtpZighKGkgaW4gdCkpcmV0dXJuKCk9Pnt9O3ZhciByPXRbaV0scz1lKHIpO3JldHVybiBFKHMpJiYocy5wcm90b3R5cGU9cy5wcm90b3R5cGV8fHt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHMse19fcG9zdGhvZ193cmFwcGVkX186e2VudW1lcmFibGU6ITEsdmFsdWU6ITB9fSkpLHRbaV09cywoKT0+e3RbaV09cn19Y2F0Y2godCl7cmV0dXJuKCk9Pnt9fX1jbGFzcyBMZXtjb25zdHJ1Y3RvcihpKXt2YXIgZTt0aGlzLl9pbnN0YW5jZT1pLHRoaXMuZXQ9KG51bGw9PXR8fG51bGw9PShlPXQubG9jYXRpb24pP3ZvaWQgMDplLnBhdGhuYW1lKXx8XCJcIn1nZXQgaXNFbmFibGVkKCl7cmV0dXJuXCJoaXN0b3J5X2NoYW5nZVwiPT09dGhpcy5faW5zdGFuY2UuY29uZmlnLmNhcHR1cmVfcGFnZXZpZXd9c3RhcnRJZkVuYWJsZWQoKXt0aGlzLmlzRW5hYmxlZCYmKGouaW5mbyhcIkhpc3RvcnkgQVBJIG1vbml0b3JpbmcgZW5hYmxlZCwgc3RhcnRpbmcuLi5cIiksdGhpcy5tb25pdG9ySGlzdG9yeUNoYW5nZXMoKSl9c3RvcCgpe3RoaXMucnQmJnRoaXMucnQoKSx0aGlzLnJ0PXZvaWQgMCxqLmluZm8oXCJIaXN0b3J5IEFQSSBtb25pdG9yaW5nIHN0b3BwZWRcIil9bW9uaXRvckhpc3RvcnlDaGFuZ2VzKCl7dmFyIGksZTtpZih0JiZ0Lmhpc3Rvcnkpe3ZhciByPXRoaXM7bnVsbCE9KGk9dC5oaXN0b3J5LnB1c2hTdGF0ZSkmJmkuX19wb3N0aG9nX3dyYXBwZWRfX3x8RGUodC5oaXN0b3J5LFwicHVzaFN0YXRlXCIsKHQ9PmZ1bmN0aW9uKGksZSxzKXt0LmNhbGwodGhpcyxpLGUscyksci5zdChcInB1c2hTdGF0ZVwiKX0pKSxudWxsIT0oZT10Lmhpc3RvcnkucmVwbGFjZVN0YXRlKSYmZS5fX3Bvc3Rob2dfd3JhcHBlZF9ffHxEZSh0Lmhpc3RvcnksXCJyZXBsYWNlU3RhdGVcIiwodD0+ZnVuY3Rpb24oaSxlLHMpe3QuY2FsbCh0aGlzLGksZSxzKSxyLnN0KFwicmVwbGFjZVN0YXRlXCIpfSkpLHRoaXMubnQoKX19c3QoaSl7dHJ5e3ZhciBlLHI9bnVsbD09dHx8bnVsbD09KGU9dC5sb2NhdGlvbik/dm9pZCAwOmUucGF0aG5hbWU7aWYoIXIpcmV0dXJuO3IhPT10aGlzLmV0JiZ0aGlzLmlzRW5hYmxlZCYmdGhpcy5faW5zdGFuY2UuY2FwdHVyZShcIiRwYWdldmlld1wiLHtuYXZpZ2F0aW9uX3R5cGU6aX0pLHRoaXMuZXQ9cn1jYXRjaCh0KXtqLmVycm9yKFwiRXJyb3IgY2FwdHVyaW5nIFwiK2krXCIgcGFnZXZpZXdcIix0KX19bnQoKXtpZighdGhpcy5ydCl7dmFyIGk9KCk9Pnt0aGlzLnN0KFwicG9wc3RhdGVcIil9O3N0KHQsXCJwb3BzdGF0ZVwiLGkpLHRoaXMucnQ9KCk9Pnt0JiZ0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb3BzdGF0ZVwiLGkpfX19fWZ1bmN0aW9uIE5lKHQpe3ZhciBpLGU7cmV0dXJuKG51bGw9PShpPUpTT04uc3RyaW5naWZ5KHQsKGU9W10sZnVuY3Rpb24odCxpKXtpZihJKGkpKXtmb3IoO2UubGVuZ3RoPjAmJmVbZS5sZW5ndGgtMV0hPT10aGlzOyllLnBvcCgpO3JldHVybiBlLmluY2x1ZGVzKGkpP1wiW0NpcmN1bGFyXVwiOihlLnB1c2goaSksaSl9cmV0dXJuIGl9KSkpP3ZvaWQgMDppLmxlbmd0aCl8fDB9ZnVuY3Rpb24gamUodCxpKXtpZih2b2lkIDA9PT1pJiYoaT02NjA2MDI4LjgpLHQuc2l6ZT49aSYmdC5kYXRhLmxlbmd0aD4xKXt2YXIgZT1NYXRoLmZsb29yKHQuZGF0YS5sZW5ndGgvMikscj10LmRhdGEuc2xpY2UoMCxlKSxzPXQuZGF0YS5zbGljZShlKTtyZXR1cm5bamUoe3NpemU6TmUociksZGF0YTpyLHNlc3Npb25JZDp0LnNlc3Npb25JZCx3aW5kb3dJZDp0LndpbmRvd0lkfSksamUoe3NpemU6TmUocyksZGF0YTpzLHNlc3Npb25JZDp0LnNlc3Npb25JZCx3aW5kb3dJZDp0LndpbmRvd0lkfSldLmZsYXRNYXAoKHQ9PnQpKX1yZXR1cm5bdF19dmFyIHplPSh0PT4odFt0LkRvbUNvbnRlbnRMb2FkZWQ9MF09XCJEb21Db250ZW50TG9hZGVkXCIsdFt0LkxvYWQ9MV09XCJMb2FkXCIsdFt0LkZ1bGxTbmFwc2hvdD0yXT1cIkZ1bGxTbmFwc2hvdFwiLHRbdC5JbmNyZW1lbnRhbFNuYXBzaG90PTNdPVwiSW5jcmVtZW50YWxTbmFwc2hvdFwiLHRbdC5NZXRhPTRdPVwiTWV0YVwiLHRbdC5DdXN0b209NV09XCJDdXN0b21cIix0W3QuUGx1Z2luPTZdPVwiUGx1Z2luXCIsdCkpKHplfHx7fSksVWU9KHQ9Pih0W3QuTXV0YXRpb249MF09XCJNdXRhdGlvblwiLHRbdC5Nb3VzZU1vdmU9MV09XCJNb3VzZU1vdmVcIix0W3QuTW91c2VJbnRlcmFjdGlvbj0yXT1cIk1vdXNlSW50ZXJhY3Rpb25cIix0W3QuU2Nyb2xsPTNdPVwiU2Nyb2xsXCIsdFt0LlZpZXdwb3J0UmVzaXplPTRdPVwiVmlld3BvcnRSZXNpemVcIix0W3QuSW5wdXQ9NV09XCJJbnB1dFwiLHRbdC5Ub3VjaE1vdmU9Nl09XCJUb3VjaE1vdmVcIix0W3QuTWVkaWFJbnRlcmFjdGlvbj03XT1cIk1lZGlhSW50ZXJhY3Rpb25cIix0W3QuU3R5bGVTaGVldFJ1bGU9OF09XCJTdHlsZVNoZWV0UnVsZVwiLHRbdC5DYW52YXNNdXRhdGlvbj05XT1cIkNhbnZhc011dGF0aW9uXCIsdFt0LkZvbnQ9MTBdPVwiRm9udFwiLHRbdC5Mb2c9MTFdPVwiTG9nXCIsdFt0LkRyYWc9MTJdPVwiRHJhZ1wiLHRbdC5TdHlsZURlY2xhcmF0aW9uPTEzXT1cIlN0eWxlRGVjbGFyYXRpb25cIix0W3QuU2VsZWN0aW9uPTE0XT1cIlNlbGVjdGlvblwiLHRbdC5BZG9wdGVkU3R5bGVTaGVldD0xNV09XCJBZG9wdGVkU3R5bGVTaGVldFwiLHRbdC5DdXN0b21FbGVtZW50PTE2XT1cIkN1c3RvbUVsZW1lbnRcIix0KSkoVWV8fHt9KSxxZT1cIltTZXNzaW9uUmVjb3JkaW5nXVwiLEJlPVwicmVkYWN0ZWRcIixIZT17aW5pdGlhdG9yVHlwZXM6W1wiYXVkaW9cIixcImJlYWNvblwiLFwiYm9keVwiLFwiY3NzXCIsXCJlYXJseS1oaW50XCIsXCJlbWJlZFwiLFwiZmV0Y2hcIixcImZyYW1lXCIsXCJpZnJhbWVcIixcImljb25cIixcImltYWdlXCIsXCJpbWdcIixcImlucHV0XCIsXCJsaW5rXCIsXCJuYXZpZ2F0aW9uXCIsXCJvYmplY3RcIixcInBpbmdcIixcInNjcmlwdFwiLFwidHJhY2tcIixcInZpZGVvXCIsXCJ4bWxodHRwcmVxdWVzdFwiXSxtYXNrUmVxdWVzdEZuOnQ9PnQscmVjb3JkSGVhZGVyczohMSxyZWNvcmRCb2R5OiExLHJlY29yZEluaXRpYWxSZXF1ZXN0czohMSxyZWNvcmRQZXJmb3JtYW5jZTohMSxwZXJmb3JtYW5jZUVudHJ5VHlwZVRvT2JzZXJ2ZTpbXCJmaXJzdC1pbnB1dFwiLFwibmF2aWdhdGlvblwiLFwicGFpbnRcIixcInJlc291cmNlXCJdLHBheWxvYWRTaXplTGltaXRCeXRlczoxZTYscGF5bG9hZEhvc3REZW55TGlzdDpbXCIubHItaW5nZXN0LmlvXCIsXCIuaW5nZXN0LnNlbnRyeS5pb1wiLFwiLmNsYXJpdHkubXNcIixcImFuYWx5dGljcy5nb29nbGUuY29tXCIsXCJiYW0ubnItZGF0YS5uZXRcIl19LFdlPVtcImF1dGhvcml6YXRpb25cIixcIngtZm9yd2FyZGVkLWZvclwiLFwiYXV0aG9yaXphdGlvblwiLFwiY29va2llXCIsXCJzZXQtY29va2llXCIsXCJ4LWFwaS1rZXlcIixcIngtcmVhbC1pcFwiLFwicmVtb3RlLWFkZHJcIixcImZvcndhcmRlZFwiLFwicHJveHktYXV0aG9yaXphdGlvblwiLFwieC1jc3JmLXRva2VuXCIsXCJ4LWNzcmZ0b2tlblwiLFwieC14c3JmLXRva2VuXCJdLEdlPVtcInBhc3N3b3JkXCIsXCJzZWNyZXRcIixcInBhc3N3ZFwiLFwiYXBpX2tleVwiLFwiYXBpa2V5XCIsXCJhdXRoXCIsXCJjcmVkZW50aWFsc1wiLFwibXlzcWxfcHdkXCIsXCJwcml2YXRla2V5XCIsXCJwcml2YXRlX2tleVwiLFwidG9rZW5cIl0sSmU9W1wiL3MvXCIsXCIvZS9cIixcIi9pL1wiXTtmdW5jdGlvbiBWZSh0LGksZSxyKXtpZihPKHQpKXJldHVybiB0O3ZhciBzPShudWxsPT1pP3ZvaWQgMDppW1wiY29udGVudC1sZW5ndGhcIl0pfHxmdW5jdGlvbih0KXtyZXR1cm4gbmV3IEJsb2IoW3RdKS5zaXplfSh0KTtyZXR1cm4gVChzKSYmKHM9cGFyc2VJbnQocykpLHM+ZT9xZStcIiBcIityK1wiIGJvZHkgdG9vIGxhcmdlIHRvIHJlY29yZCAoXCIrcytcIiBieXRlcylcIjp0fWZ1bmN0aW9uIEtlKHQsaSl7aWYoTyh0KSlyZXR1cm4gdDt2YXIgZT10O3JldHVybiBjaShlLCExKXx8KGU9cWUrXCIgXCIraStcIiBib2R5IFwiK0JlKSxKKEdlLCh0PT57dmFyIHIscztudWxsIT0ocj1lKSYmci5sZW5ndGgmJi0xIT09KG51bGw9PShzPWUpP3ZvaWQgMDpzLmluZGV4T2YodCkpJiYoZT1xZStcIiBcIitpK1wiIGJvZHkgXCIrQmUrXCIgYXMgbWlnaHQgY29udGFpbjogXCIrdCl9KSksZX12YXIgWWU9KHQsaSk9Pnt2YXIgZSxyLHMsbj17cGF5bG9hZFNpemVMaW1pdEJ5dGVzOkhlLnBheWxvYWRTaXplTGltaXRCeXRlcyxwZXJmb3JtYW5jZUVudHJ5VHlwZVRvT2JzZXJ2ZTpbLi4uSGUucGVyZm9ybWFuY2VFbnRyeVR5cGVUb09ic2VydmVdLHBheWxvYWRIb3N0RGVueUxpc3Q6Wy4uLmkucGF5bG9hZEhvc3REZW55TGlzdHx8W10sLi4uSGUucGF5bG9hZEhvc3REZW55TGlzdF19LG89ITEhPT10LnNlc3Npb25fcmVjb3JkaW5nLnJlY29yZEhlYWRlcnMmJmkucmVjb3JkSGVhZGVycyxhPSExIT09dC5zZXNzaW9uX3JlY29yZGluZy5yZWNvcmRCb2R5JiZpLnJlY29yZEJvZHksbD0hMSE9PXQuY2FwdHVyZV9wZXJmb3JtYW5jZSYmaS5yZWNvcmRQZXJmb3JtYW5jZSx1PShlPW4scz1NYXRoLm1pbigxZTYsbnVsbCE9PShyPWUucGF5bG9hZFNpemVMaW1pdEJ5dGVzKSYmdm9pZCAwIT09cj9yOjFlNiksdD0+KG51bGwhPXQmJnQucmVxdWVzdEJvZHkmJih0LnJlcXVlc3RCb2R5PVZlKHQucmVxdWVzdEJvZHksdC5yZXF1ZXN0SGVhZGVycyxzLFwiUmVxdWVzdFwiKSksbnVsbCE9dCYmdC5yZXNwb25zZUJvZHkmJih0LnJlc3BvbnNlQm9keT1WZSh0LnJlc3BvbnNlQm9keSx0LnJlc3BvbnNlSGVhZGVycyxzLFwiUmVzcG9uc2VcIikpLHQpKSxoPWk9PntyZXR1cm4gdSgoKHQsaSk9Pnt2YXIgZSxyPXlpKHQubmFtZSkscz0wPT09aS5pbmRleE9mKFwiaHR0cFwiKT9udWxsPT0oZT15aShpKSk/dm9pZCAwOmUucGF0aG5hbWU6aTtcIi9cIj09PXMmJihzPVwiXCIpO3ZhciBuPW51bGw9PXI/dm9pZCAwOnIucGF0aG5hbWUucmVwbGFjZShzfHxcIlwiLFwiXCIpO2lmKCEociYmbiYmSmUuc29tZSgodD0+MD09PW4uaW5kZXhPZih0KSkpKSlyZXR1cm4gdH0pKChyPShlPWkpLnJlcXVlc3RIZWFkZXJzLE8ocil8fEooT2JqZWN0LmtleXMobnVsbCE9cj9yOnt9KSwodD0+e1dlLmluY2x1ZGVzKHQudG9Mb3dlckNhc2UoKSkmJihyW3RdPUJlKX0pKSxlKSx0LmFwaV9ob3N0KSk7dmFyIGUscn0sZD1FKHQuc2Vzc2lvbl9yZWNvcmRpbmcubWFza05ldHdvcmtSZXF1ZXN0Rm4pO3JldHVybiBkJiZFKHQuc2Vzc2lvbl9yZWNvcmRpbmcubWFza0NhcHR1cmVkTmV0d29ya1JlcXVlc3RGbikmJmoud2FybihcIkJvdGggYG1hc2tOZXR3b3JrUmVxdWVzdEZuYCBhbmQgYG1hc2tDYXB0dXJlZE5ldHdvcmtSZXF1ZXN0Rm5gIGFyZSBkZWZpbmVkLiBgbWFza05ldHdvcmtSZXF1ZXN0Rm5gIHdpbGwgYmUgaWdub3JlZC5cIiksZCYmKHQuc2Vzc2lvbl9yZWNvcmRpbmcubWFza0NhcHR1cmVkTmV0d29ya1JlcXVlc3RGbj1pPT57dmFyIGU9dC5zZXNzaW9uX3JlY29yZGluZy5tYXNrTmV0d29ya1JlcXVlc3RGbih7dXJsOmkubmFtZX0pO3JldHVybiBCKHt9LGkse25hbWU6bnVsbD09ZT92b2lkIDA6ZS51cmx9KX0pLG4ubWFza1JlcXVlc3RGbj1FKHQuc2Vzc2lvbl9yZWNvcmRpbmcubWFza0NhcHR1cmVkTmV0d29ya1JlcXVlc3RGbik/aT0+e3ZhciBlLHI9aChpKTtyZXR1cm4gciYmbnVsbCE9PShlPW51bGw9PXQuc2Vzc2lvbl9yZWNvcmRpbmcubWFza0NhcHR1cmVkTmV0d29ya1JlcXVlc3RGbj92b2lkIDA6dC5zZXNzaW9uX3JlY29yZGluZy5tYXNrQ2FwdHVyZWROZXR3b3JrUmVxdWVzdEZuKHIpKSYmdm9pZCAwIT09ZT9lOnZvaWQgMH06dD0+ZnVuY3Rpb24odCl7aWYoIVIodCkpcmV0dXJuIHQucmVxdWVzdEJvZHk9S2UodC5yZXF1ZXN0Qm9keSxcIlJlcXVlc3RcIiksdC5yZXNwb25zZUJvZHk9S2UodC5yZXNwb25zZUJvZHksXCJSZXNwb25zZVwiKSx0fShoKHQpKSxCKHt9LEhlLG4se3JlY29yZEhlYWRlcnM6byxyZWNvcmRCb2R5OmEscmVjb3JkUGVyZm9ybWFuY2U6bCxyZWNvcmRJbml0aWFsUmVxdWVzdHM6bH0pfTtmdW5jdGlvbiBYZSh0LGksZSxyLHMpe3JldHVybiBpPmUmJihqLndhcm4oXCJtaW4gY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiBtYXguXCIpLGk9ZSksRih0KT90PmU/KHImJmoud2FybihyK1wiIGNhbm5vdCBiZSAgZ3JlYXRlciB0aGFuIG1heDogXCIrZStcIi4gVXNpbmcgbWF4IHZhbHVlIGluc3RlYWQuXCIpLGUpOnQ8aT8ociYmai53YXJuKHIrXCIgY2Fubm90IGJlIGxlc3MgdGhhbiBtaW46IFwiK2krXCIuIFVzaW5nIG1pbiB2YWx1ZSBpbnN0ZWFkLlwiKSxpKTp0OihyJiZqLndhcm4ocitcIiBtdXN0IGJlIGEgbnVtYmVyLiB1c2luZyBtYXggb3IgZmFsbGJhY2suIG1heDogXCIrZStcIiwgZmFsbGJhY2s6IFwiK3MpLFhlKHN8fGUsaSxlLHIpKX1jbGFzcyBRZXtjb25zdHJ1Y3Rvcih0LGkpe3ZhciBlLHI7dm9pZCAwPT09aSYmKGk9e30pLHRoaXMub3Q9MTAwLHRoaXMubHQ9MTAsdGhpcy51dD17fSx0aGlzLmh0PXt9LHRoaXMuZHQ9KCk9PntPYmplY3Qua2V5cyh0aGlzLnV0KS5mb3JFYWNoKCh0PT57dGhpcy51dFt0XT10aGlzLnV0W3RdK3RoaXMubHQsdGhpcy51dFt0XT49dGhpcy5vdCYmZGVsZXRlIHRoaXMudXRbdF19KSl9LHRoaXMudnQ9dD0+e3ZhciBpPXRoaXMuX3Jyd2ViLm1pcnJvci5nZXROb2RlKHQpO2lmKFwic3ZnXCIhPT0obnVsbD09aT92b2lkIDA6aS5ub2RlTmFtZSkmJmkgaW5zdGFuY2VvZiBFbGVtZW50KXt2YXIgZT1pLmNsb3Nlc3QoXCJzdmdcIik7aWYoZSlyZXR1cm5bdGhpcy5fcnJ3ZWIubWlycm9yLmdldElkKGUpLGVdfXJldHVyblt0LGldfSx0aGlzLmN0PXQ9Pnt2YXIgaSxlLHIscyxuLG8sYSxsO3JldHVybihudWxsIT09KGk9bnVsbD09KGU9dC5yZW1vdmVzKT92b2lkIDA6ZS5sZW5ndGgpJiZ2b2lkIDAhPT1pP2k6MCkrKG51bGwhPT0ocj1udWxsPT0ocz10LmF0dHJpYnV0ZXMpP3ZvaWQgMDpzLmxlbmd0aCkmJnZvaWQgMCE9PXI/cjowKSsobnVsbCE9PShuPW51bGw9PShvPXQudGV4dHMpP3ZvaWQgMDpvLmxlbmd0aCkmJnZvaWQgMCE9PW4/bjowKSsobnVsbCE9PShhPW51bGw9PShsPXQuYWRkcyk/dm9pZCAwOmwubGVuZ3RoKSYmdm9pZCAwIT09YT9hOjApfSx0aGlzLnRocm90dGxlTXV0YXRpb25zPXQ9PntpZigzIT09dC50eXBlfHwwIT09dC5kYXRhLnNvdXJjZSlyZXR1cm4gdDt2YXIgaT10LmRhdGEsZT10aGlzLmN0KGkpO2kuYXR0cmlidXRlcyYmKGkuYXR0cmlidXRlcz1pLmF0dHJpYnV0ZXMuZmlsdGVyKCh0PT57dmFyIGksZSxyLFtzLG5dPXRoaXMudnQodC5pZCk7aWYoMD09PXRoaXMudXRbc10pcmV0dXJuITE7KHRoaXMudXRbc109bnVsbCE9PShpPXRoaXMudXRbc10pJiZ2b2lkIDAhPT1pP2k6dGhpcy5vdCx0aGlzLnV0W3NdPU1hdGgubWF4KHRoaXMudXRbc10tMSwwKSwwPT09dGhpcy51dFtzXSkmJih0aGlzLmh0W3NdfHwodGhpcy5odFtzXT0hMCxudWxsPT0oZT0ocj10aGlzLmZ0KS5vbkJsb2NrZWROb2RlKXx8ZS5jYWxsKHIscyxuKSkpO3JldHVybiB0fSkpKTt2YXIgcj10aGlzLmN0KGkpO3JldHVybiAwIT09cnx8ZT09PXI/dDp2b2lkIDB9LHRoaXMuX3Jyd2ViPXQsdGhpcy5mdD1pLHRoaXMubHQ9WGUobnVsbCE9PShlPXRoaXMuZnQucmVmaWxsUmF0ZSkmJnZvaWQgMCE9PWU/ZTp0aGlzLmx0LDAsMTAwLFwibXV0YXRpb24gdGhyb3R0bGluZyByZWZpbGwgcmF0ZVwiKSx0aGlzLm90PVhlKG51bGwhPT0ocj10aGlzLmZ0LmJ1Y2tldFNpemUpJiZ2b2lkIDAhPT1yP3I6dGhpcy5vdCwwLDEwMCxcIm11dGF0aW9uIHRocm90dGxpbmcgYnVja2V0IHNpemVcIiksc2V0SW50ZXJ2YWwoKCgpPT57dGhpcy5kdCgpfSksMWUzKX19dmFyIFplPVVpbnQ4QXJyYXksdHI9VWludDE2QXJyYXksaXI9VWludDMyQXJyYXksZXI9bmV3IFplKFswLDAsMCwwLDAsMCwwLDAsMSwxLDEsMSwyLDIsMiwyLDMsMywzLDMsNCw0LDQsNCw1LDUsNSw1LDAsMCwwLDBdKSxycj1uZXcgWmUoWzAsMCwwLDAsMSwxLDIsMiwzLDMsNCw0LDUsNSw2LDYsNyw3LDgsOCw5LDksMTAsMTAsMTEsMTEsMTIsMTIsMTMsMTMsMCwwXSksc3I9bmV3IFplKFsxNiwxNywxOCwwLDgsNyw5LDYsMTAsNSwxMSw0LDEyLDMsMTMsMiwxNCwxLDE1XSksbnI9ZnVuY3Rpb24odCxpKXtmb3IodmFyIGU9bmV3IHRyKDMxKSxyPTA7cjwzMTsrK3IpZVtyXT1pKz0xPDx0W3ItMV07dmFyIHM9bmV3IGlyKGVbMzBdKTtmb3Iocj0xO3I8MzA7KytyKWZvcih2YXIgbj1lW3JdO248ZVtyKzFdOysrbilzW25dPW4tZVtyXTw8NXxyO3JldHVybltlLHNdfSxvcj1ucihlciwyKSxhcj1vclswXSxscj1vclsxXTthclsyOF09MjU4LGxyWzI1OF09Mjg7Zm9yKHZhciB1cj1ucihyciwwKVsxXSxocj1uZXcgdHIoMzI3NjgpLGRyPTA7ZHI8MzI3Njg7Kytkcil7dmFyIHZyPSg0MzY5MCZkcik+Pj4xfCgyMTg0NSZkcik8PDE7dnI9KDYxNjgwJih2cj0oNTI0MjgmdnIpPj4+MnwoMTMxMDcmdnIpPDwyKSk+Pj40fCgzODU1JnZyKTw8NCxocltkcl09KCg2NTI4MCZ2cik+Pj44fCgyNTUmdnIpPDw4KT4+PjF9dmFyIGNyPWZ1bmN0aW9uKHQsaSxlKXtmb3IodmFyIHI9dC5sZW5ndGgscz0wLG49bmV3IHRyKGkpO3M8cjsrK3MpKytuW3Rbc10tMV07dmFyIG8sYT1uZXcgdHIoaSk7Zm9yKHM9MDtzPGk7KytzKWFbc109YVtzLTFdK25bcy0xXTw8MTtpZihlKXtvPW5ldyB0cigxPDxpKTt2YXIgbD0xNS1pO2ZvcihzPTA7czxyOysrcylpZih0W3NdKWZvcih2YXIgdT1zPDw0fHRbc10saD1pLXRbc10sZD1hW3Rbc10tMV0rKzw8aCx2PWR8KDE8PGgpLTE7ZDw9djsrK2Qpb1tocltkXT4+PmxdPXV9ZWxzZSBmb3Iobz1uZXcgdHIocikscz0wO3M8cjsrK3Mpb1tzXT1oclthW3Rbc10tMV0rK10+Pj4xNS10W3NdO3JldHVybiBvfSxmcj1uZXcgWmUoMjg4KTtmb3IoZHI9MDtkcjwxNDQ7Kytkcilmcltkcl09ODtmb3IoZHI9MTQ0O2RyPDI1NjsrK2RyKWZyW2RyXT05O2Zvcihkcj0yNTY7ZHI8MjgwOysrZHIpZnJbZHJdPTc7Zm9yKGRyPTI4MDtkcjwyODg7Kytkcilmcltkcl09ODt2YXIgcHI9bmV3IFplKDMyKTtmb3IoZHI9MDtkcjwzMjsrK2RyKXByW2RyXT01O3ZhciBncj1jcihmciw5LDApLF9yPWNyKHByLDUsMCksbXI9ZnVuY3Rpb24odCl7cmV0dXJuKHQvOD4+MCkrKDcmdCYmMSl9LGJyPWZ1bmN0aW9uKHQsaSxlKXsobnVsbD09ZXx8ZT50Lmxlbmd0aCkmJihlPXQubGVuZ3RoKTt2YXIgcj1uZXcodCBpbnN0YW5jZW9mIHRyP3RyOnQgaW5zdGFuY2VvZiBpcj9pcjpaZSkoZS1pKTtyZXR1cm4gci5zZXQodC5zdWJhcnJheShpLGUpKSxyfSx3cj1mdW5jdGlvbih0LGksZSl7ZTw8PTcmaTt2YXIgcj1pLzg+PjA7dFtyXXw9ZSx0W3IrMV18PWU+Pj44fSx5cj1mdW5jdGlvbih0LGksZSl7ZTw8PTcmaTt2YXIgcj1pLzg+PjA7dFtyXXw9ZSx0W3IrMV18PWU+Pj44LHRbcisyXXw9ZT4+PjE2fSxTcj1mdW5jdGlvbih0LGkpe2Zvcih2YXIgZT1bXSxyPTA7cjx0Lmxlbmd0aDsrK3IpdFtyXSYmZS5wdXNoKHtzOnIsZjp0W3JdfSk7dmFyIHM9ZS5sZW5ndGgsbj1lLnNsaWNlKCk7aWYoIXMpcmV0dXJuW25ldyBaZSgwKSwwXTtpZigxPT1zKXt2YXIgbz1uZXcgWmUoZVswXS5zKzEpO3JldHVybiBvW2VbMF0uc109MSxbbywxXX1lLnNvcnQoKGZ1bmN0aW9uKHQsaSl7cmV0dXJuIHQuZi1pLmZ9KSksZS5wdXNoKHtzOi0xLGY6MjUwMDF9KTt2YXIgYT1lWzBdLGw9ZVsxXSx1PTAsaD0xLGQ9Mjtmb3IoZVswXT17czotMSxmOmEuZitsLmYsbDphLHI6bH07aCE9cy0xOylhPWVbZVt1XS5mPGVbZF0uZj91Kys6ZCsrXSxsPWVbdSE9aCYmZVt1XS5mPGVbZF0uZj91Kys6ZCsrXSxlW2grK109e3M6LTEsZjphLmYrbC5mLGw6YSxyOmx9O3ZhciB2PW5bMF0ucztmb3Iocj0xO3I8czsrK3IpbltyXS5zPnYmJih2PW5bcl0ucyk7dmFyIGM9bmV3IHRyKHYrMSksZj0kcihlW2gtMV0sYywwKTtpZihmPmkpe3I9MDt2YXIgcD0wLGc9Zi1pLF89MTw8Zztmb3Iobi5zb3J0KChmdW5jdGlvbih0LGkpe3JldHVybiBjW2kuc10tY1t0LnNdfHx0LmYtaS5mfSkpO3I8czsrK3Ipe3ZhciBtPW5bcl0ucztpZighKGNbbV0+aSkpYnJlYWs7cCs9Xy0oMTw8Zi1jW21dKSxjW21dPWl9Zm9yKHA+Pj49ZztwPjA7KXt2YXIgYj1uW3JdLnM7Y1tiXTxpP3AtPTE8PGktY1tiXSsrLTE6KytyfWZvcig7cj49MCYmcDstLXIpe3ZhciB3PW5bcl0ucztjW3ddPT1pJiYoLS1jW3ddLCsrcCl9Zj1pfXJldHVybltuZXcgWmUoYyksZl19LCRyPWZ1bmN0aW9uKHQsaSxlKXtyZXR1cm4tMT09dC5zP01hdGgubWF4KCRyKHQubCxpLGUrMSksJHIodC5yLGksZSsxKSk6aVt0LnNdPWV9LGtyPWZ1bmN0aW9uKHQpe2Zvcih2YXIgaT10Lmxlbmd0aDtpJiYhdFstLWldOyk7Zm9yKHZhciBlPW5ldyB0cigrK2kpLHI9MCxzPXRbMF0sbj0xLG89ZnVuY3Rpb24odCl7ZVtyKytdPXR9LGE9MTthPD1pOysrYSlpZih0W2FdPT1zJiZhIT1pKSsrbjtlbHNle2lmKCFzJiZuPjIpe2Zvcig7bj4xMzg7bi09MTM4KW8oMzI3NTQpO24+MiYmKG8obj4xMD9uLTExPDw1fDI4NjkwOm4tMzw8NXwxMjMwNSksbj0wKX1lbHNlIGlmKG4+Myl7Zm9yKG8ocyksLS1uO24+NjtuLT02KW8oODMwNCk7bj4yJiYobyhuLTM8PDV8ODIwOCksbj0wKX1mb3IoO24tLTspbyhzKTtuPTEscz10W2FdfXJldHVybltlLnN1YmFycmF5KDAsciksaV19LHhyPWZ1bmN0aW9uKHQsaSl7Zm9yKHZhciBlPTAscj0wO3I8aS5sZW5ndGg7KytyKWUrPXRbcl0qaVtyXTtyZXR1cm4gZX0sRXI9ZnVuY3Rpb24odCxpLGUpe3ZhciByPWUubGVuZ3RoLHM9bXIoaSsyKTt0W3NdPTI1NSZyLHRbcysxXT1yPj4+OCx0W3MrMl09MjU1XnRbc10sdFtzKzNdPTI1NV50W3MrMV07Zm9yKHZhciBuPTA7bjxyOysrbil0W3Mrbis0XT1lW25dO3JldHVybiA4KihzKzQrcil9LElyPWZ1bmN0aW9uKHQsaSxlLHIscyxuLG8sYSxsLHUsaCl7d3IoaSxoKyssZSksKytzWzI1Nl07Zm9yKHZhciBkPVNyKHMsMTUpLHY9ZFswXSxjPWRbMV0sZj1TcihuLDE1KSxwPWZbMF0sZz1mWzFdLF89a3IodiksbT1fWzBdLGI9X1sxXSx3PWtyKHApLHk9d1swXSxTPXdbMV0sJD1uZXcgdHIoMTkpLGs9MDtrPG0ubGVuZ3RoOysraykkWzMxJm1ba11dKys7Zm9yKGs9MDtrPHkubGVuZ3RoOysraykkWzMxJnlba11dKys7Zm9yKHZhciB4PVNyKCQsNyksRT14WzBdLEk9eFsxXSxQPTE5O1A+NCYmIUVbc3JbUC0xXV07LS1QKTt2YXIgUixULE0sQyxPPXUrNTw8MyxGPXhyKHMsZnIpK3hyKG4scHIpK28sQT14cihzLHYpK3hyKG4scCkrbysxNCszKlAreHIoJCxFKSsoMiokWzE2XSszKiRbMTddKzcqJFsxOF0pO2lmKE88PUYmJk88PUEpcmV0dXJuIEVyKGksaCx0LnN1YmFycmF5KGwsbCt1KSk7aWYod3IoaSxoLDErKEE8RikpLGgrPTIsQTxGKXtSPWNyKHYsYywwKSxUPXYsTT1jcihwLGcsMCksQz1wO3ZhciBEPWNyKEUsSSwwKTt3cihpLGgsYi0yNTcpLHdyKGksaCs1LFMtMSksd3IoaSxoKzEwLFAtNCksaCs9MTQ7Zm9yKGs9MDtrPFA7KytrKXdyKGksaCszKmssRVtzcltrXV0pO2grPTMqUDtmb3IodmFyIEw9W20seV0sTj0wO048MjsrK04pe3ZhciBqPUxbTl07Zm9yKGs9MDtrPGoubGVuZ3RoOysrayl7dmFyIHo9MzEmaltrXTt3cihpLGgsRFt6XSksaCs9RVt6XSx6PjE1JiYod3IoaSxoLGpba10+Pj41JjEyNyksaCs9altrXT4+PjEyKX19fWVsc2UgUj1ncixUPWZyLE09X3IsQz1wcjtmb3Ioaz0wO2s8YTsrK2spaWYocltrXT4yNTUpe3o9cltrXT4+PjE4JjMxO3lyKGksaCxSW3orMjU3XSksaCs9VFt6KzI1N10sej43JiYod3IoaSxoLHJba10+Pj4yMyYzMSksaCs9ZXJbel0pO3ZhciBVPTMxJnJba107eXIoaSxoLE1bVV0pLGgrPUNbVV0sVT4zJiYoeXIoaSxoLHJba10+Pj41JjgxOTEpLGgrPXJyW1VdKX1lbHNlIHlyKGksaCxSW3Jba11dKSxoKz1UW3Jba11dO3JldHVybiB5cihpLGgsUlsyNTZdKSxoK1RbMjU2XX0sUHI9bmV3IGlyKFs2NTU0MCwxMzEwODAsMTMxMDg4LDEzMTEwNCwyNjIxNzYsMTA0ODcwNCwxMDQ4ODMyLDIxMTQ1NjAsMjExNzYzMl0pLFJyPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PW5ldyBpcigyNTYpLGk9MDtpPDI1NjsrK2kpe2Zvcih2YXIgZT1pLHI9OTstLXI7KWU9KDEmZSYmMzk4ODI5MjM4NCleZT4+PjE7dFtpXT1lfXJldHVybiB0fSgpLFRyPWZ1bmN0aW9uKCl7dmFyIHQ9NDI5NDk2NzI5NTtyZXR1cm57cDpmdW5jdGlvbihpKXtmb3IodmFyIGU9dCxyPTA7cjxpLmxlbmd0aDsrK3IpZT1SclsyNTUmZV5pW3JdXV5lPj4+ODt0PWV9LGQ6ZnVuY3Rpb24oKXtyZXR1cm4gNDI5NDk2NzI5NV50fX19LE1yPWZ1bmN0aW9uKHQsaSxlLHIscyl7cmV0dXJuIGZ1bmN0aW9uKHQsaSxlLHIscyxuKXt2YXIgbz10Lmxlbmd0aCxhPW5ldyBaZShyK28rNSooMStNYXRoLmZsb29yKG8vN2UzKSkrcyksbD1hLnN1YmFycmF5KHIsYS5sZW5ndGgtcyksdT0wO2lmKCFpfHxvPDgpZm9yKHZhciBoPTA7aDw9bztoKz02NTUzNSl7dmFyIGQ9aCs2NTUzNTtkPG8/dT1FcihsLHUsdC5zdWJhcnJheShoLGQpKToobFtoXT1uLHU9RXIobCx1LHQuc3ViYXJyYXkoaCxvKSkpfWVsc2V7Zm9yKHZhciB2PVByW2ktMV0sYz12Pj4+MTMsZj04MTkxJnYscD0oMTw8ZSktMSxnPW5ldyB0cigzMjc2OCksXz1uZXcgdHIocCsxKSxtPU1hdGguY2VpbChlLzMpLGI9MiptLHc9ZnVuY3Rpb24oaSl7cmV0dXJuKHRbaV1edFtpKzFdPDxtXnRbaSsyXTw8YikmcH0seT1uZXcgaXIoMjVlMyksUz1uZXcgdHIoMjg4KSwkPW5ldyB0cigzMiksaz0wLHg9MCxFPShoPTAsMCksST0wLFA9MDtoPG87KytoKXt2YXIgUj13KGgpLFQ9MzI3NjcmaCxNPV9bUl07aWYoZ1tUXT1NLF9bUl09VCxJPD1oKXt2YXIgQz1vLWg7aWYoKGs+N2UzfHxFPjI0NTc2KSYmQz40MjMpe3U9SXIodCxsLDAseSxTLCQseCxFLFAsaC1QLHUpLEU9az14PTAsUD1oO2Zvcih2YXIgTz0wO088Mjg2OysrTylTW09dPTA7Zm9yKE89MDtPPDMwOysrTykkW09dPTB9dmFyIEY9MixBPTAsRD1mLEw9VC1NJjMyNzY3O2lmKEM+MiYmUj09dyhoLUwpKWZvcih2YXIgTj1NYXRoLm1pbihjLEMpLTEsaj1NYXRoLm1pbigzMjc2NyxoKSx6PU1hdGgubWluKDI1OCxDKTtMPD1qJiYtLUQmJlQhPU07KXtpZih0W2grRl09PXRbaCtGLUxdKXtmb3IodmFyIFU9MDtVPHomJnRbaCtVXT09dFtoK1UtTF07KytVKTtpZihVPkYpe2lmKEY9VSxBPUwsVT5OKWJyZWFrO3ZhciBxPU1hdGgubWluKEwsVS0yKSxCPTA7Zm9yKE89MDtPPHE7KytPKXt2YXIgSD1oLUwrTyszMjc2OCYzMjc2NyxXPUgtZ1tIXSszMjc2OCYzMjc2NztXPkImJihCPVcsTT1IKX19fUwrPShUPU0pLShNPWdbVF0pKzMyNzY4JjMyNzY3fWlmKEEpe3lbRSsrXT0yNjg0MzU0NTZ8bHJbRl08PDE4fHVyW0FdO3ZhciBHPTMxJmxyW0ZdLEo9MzEmdXJbQV07eCs9ZXJbR10rcnJbSl0sKytTWzI1NytHXSwrKyRbSl0sST1oK0YsKytrfWVsc2UgeVtFKytdPXRbaF0sKytTW3RbaF1dfX11PUlyKHQsbCxuLHksUywkLHgsRSxQLGgtUCx1KX1yZXR1cm4gYnIoYSwwLHIrbXIodSkrcyl9KHQsbnVsbD09aS5sZXZlbD82OmkubGV2ZWwsbnVsbD09aS5tZW0/TWF0aC5jZWlsKDEuNSpNYXRoLm1heCg4LE1hdGgubWluKDEzLE1hdGgubG9nKHQubGVuZ3RoKSkpKToxMitpLm1lbSxlLHIsIXMpfSxDcj1mdW5jdGlvbih0LGksZSl7Zm9yKDtlOysraSl0W2ldPWUsZT4+Pj04fSxPcj1mdW5jdGlvbih0LGkpe3ZhciBlPWkuZmlsZW5hbWU7aWYodFswXT0zMSx0WzFdPTEzOSx0WzJdPTgsdFs4XT1pLmxldmVsPDI/NDo5PT1pLmxldmVsPzI6MCx0WzldPTMsMCE9aS5tdGltZSYmQ3IodCw0LE1hdGguZmxvb3IobmV3IERhdGUoaS5tdGltZXx8RGF0ZS5ub3coKSkvMWUzKSksZSl7dFszXT04O2Zvcih2YXIgcj0wO3I8PWUubGVuZ3RoOysrcil0W3IrMTBdPWUuY2hhckNvZGVBdChyKX19LEZyPWZ1bmN0aW9uKHQpe3JldHVybiAxMCsodC5maWxlbmFtZSYmdC5maWxlbmFtZS5sZW5ndGgrMXx8MCl9O2Z1bmN0aW9uIEFyKHQsaSl7dm9pZCAwPT09aSYmKGk9e30pO3ZhciBlPVRyKCkscj10Lmxlbmd0aDtlLnAodCk7dmFyIHM9TXIodCxpLEZyKGkpLDgpLG49cy5sZW5ndGg7cmV0dXJuIE9yKHMsaSksQ3IocyxuLTgsZS5kKCkpLENyKHMsbi00LHIpLHN9ZnVuY3Rpb24gRHIodCxpKXt2YXIgZT10Lmxlbmd0aDtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgVGV4dEVuY29kZXIpcmV0dXJuKG5ldyBUZXh0RW5jb2RlcikuZW5jb2RlKHQpO2Zvcih2YXIgcj1uZXcgWmUodC5sZW5ndGgrKHQubGVuZ3RoPj4+MSkpLHM9MCxuPWZ1bmN0aW9uKHQpe3JbcysrXT10fSxvPTA7bzxlOysrbyl7aWYocys1PnIubGVuZ3RoKXt2YXIgYT1uZXcgWmUocys4KyhlLW88PDEpKTthLnNldChyKSxyPWF9dmFyIGw9dC5jaGFyQ29kZUF0KG8pO2w8MTI4fHxpP24obCk6bDwyMDQ4PyhuKDE5MnxsPj4+NiksbigxMjh8NjMmbCkpOmw+NTUyOTUmJmw8NTczNDQ/KG4oMjQwfChsPTY1NTM2KygxMDQ3NTUyJmwpfDEwMjMmdC5jaGFyQ29kZUF0KCsrbykpPj4+MTgpLG4oMTI4fGw+Pj4xMiY2MyksbigxMjh8bD4+PjYmNjMpLG4oMTI4fDYzJmwpKToobigyMjR8bD4+PjEyKSxuKDEyOHxsPj4+NiY2MyksbigxMjh8NjMmbCkpfXJldHVybiBicihyLDAscyl9ZnVuY3Rpb24gTHIodCxpKXtyZXR1cm4gZnVuY3Rpb24odCl7Zm9yKHZhciBpPTAsZT0wO2U8dC5sZW5ndGg7ZSsrKWk9KGk8PDUpLWkrdC5jaGFyQ29kZUF0KGUpLGl8PTA7cmV0dXJuIE1hdGguYWJzKGkpfSh0KSUxMDA8WGUoMTAwKmksMCwxMDApfXZhciBOcj1cImRpc2FibGVkXCIsanI9XCJzYW1wbGVkXCIsenI9XCJhY3RpdmVcIixVcj1cImJ1ZmZlcmluZ1wiLHFyPVwicGF1c2VkXCIsQnI9XCJ0cmlnZ2VyXCIsSHI9QnIrXCJfYWN0aXZhdGVkXCIsV3I9QnIrXCJfcGVuZGluZ1wiLEdyPUJyK1wiX1wiK05yO2Z1bmN0aW9uIEpyKHQsaSl7cmV0dXJuIGkuc29tZSgoaT0+XCJyZWdleFwiPT09aS5tYXRjaGluZyYmbmV3IFJlZ0V4cChpLnVybCkudGVzdCh0KSkpfWNsYXNzIFZye2NvbnN0cnVjdG9yKHQpe3RoaXMuZ3Q9dH10cmlnZ2VyU3RhdHVzKHQpe3ZhciBpPXRoaXMuZ3QubWFwKChpPT5pLnRyaWdnZXJTdGF0dXModCkpKTtyZXR1cm4gaS5pbmNsdWRlcyhIcik/SHI6aS5pbmNsdWRlcyhXcik/V3I6R3J9c3RvcCgpe3RoaXMuZ3QuZm9yRWFjaCgodD0+dC5zdG9wKCkpKX19Y2xhc3MgS3J7Y29uc3RydWN0b3IodCl7dGhpcy5ndD10fXRyaWdnZXJTdGF0dXModCl7dmFyIGk9bmV3IFNldDtmb3IodmFyIGUgb2YgdGhpcy5ndClpLmFkZChlLnRyaWdnZXJTdGF0dXModCkpO3N3aXRjaChpLmRlbGV0ZShHciksaS5zaXplKXtjYXNlIDA6cmV0dXJuIEdyO2Nhc2UgMTpyZXR1cm4gQXJyYXkuZnJvbShpKVswXTtkZWZhdWx0OnJldHVybiBXcn19c3RvcCgpe3RoaXMuZ3QuZm9yRWFjaCgodD0+dC5zdG9wKCkpKX19Y2xhc3MgWXJ7dHJpZ2dlclN0YXR1cygpe3JldHVybiBXcn1zdG9wKCl7fX1jbGFzcyBYcntjb25zdHJ1Y3Rvcih0KXt0aGlzLl90PVtdLHRoaXMuYnQ9W10sdGhpcy51cmxCbG9ja2VkPSExLHRoaXMuX2luc3RhbmNlPXR9b25SZW1vdGVDb25maWcodCl7dmFyIGksZTt0aGlzLl90PShudWxsPT0oaT10LnNlc3Npb25SZWNvcmRpbmcpP3ZvaWQgMDppLnVybFRyaWdnZXJzKXx8W10sdGhpcy5idD0obnVsbD09KGU9dC5zZXNzaW9uUmVjb3JkaW5nKT92b2lkIDA6ZS51cmxCbG9ja2xpc3QpfHxbXX13dCh0KXt2YXIgaTtyZXR1cm4gMD09PXRoaXMuX3QubGVuZ3RoP0dyOihudWxsPT0oaT10aGlzLl9pbnN0YW5jZSk/dm9pZCAwOmkuZ2V0X3Byb3BlcnR5KHh0KSk9PT10P0hyOldyfXRyaWdnZXJTdGF0dXModCl7dmFyIGk9dGhpcy53dCh0KSxlPWk9PT1Icj9IcjppPT09V3I/V3I6R3I7cmV0dXJuIHRoaXMuX2luc3RhbmNlLnJlZ2lzdGVyX2Zvcl9zZXNzaW9uKHskc2RrX2RlYnVnX3JlcGxheV91cmxfdHJpZ2dlcl9zdGF0dXM6ZX0pLGV9Y2hlY2tVcmxUcmlnZ2VyQ29uZGl0aW9ucyhpLGUscil7aWYodm9pZCAwIT09dCYmdC5sb2NhdGlvbi5ocmVmKXt2YXIgcz10LmxvY2F0aW9uLmhyZWYsbj10aGlzLnVybEJsb2NrZWQsbz1KcihzLHRoaXMuYnQpO24mJm98fChvJiYhbj9pKCk6IW8mJm4mJmUoKSxKcihzLHRoaXMuX3QpJiZyKFwidXJsXCIpKX19c3RvcCgpe319Y2xhc3MgUXJ7Y29uc3RydWN0b3IodCl7dGhpcy5saW5rZWRGbGFnPW51bGwsdGhpcy5saW5rZWRGbGFnU2Vlbj0hMSx0aGlzLnl0PSgpPT57fSx0aGlzLl9pbnN0YW5jZT10fXRyaWdnZXJTdGF0dXMoKXt2YXIgdD1XcjtyZXR1cm4gTyh0aGlzLmxpbmtlZEZsYWcpJiYodD1HciksdGhpcy5saW5rZWRGbGFnU2VlbiYmKHQ9SHIpLHRoaXMuX2luc3RhbmNlLnJlZ2lzdGVyX2Zvcl9zZXNzaW9uKHskc2RrX2RlYnVnX3JlcGxheV9saW5rZWRfZmxhZ190cmlnZ2VyX3N0YXR1czp0fSksdH1vblJlbW90ZUNvbmZpZyh0LGkpe3ZhciBlO2lmKHRoaXMubGlua2VkRmxhZz0obnVsbD09KGU9dC5zZXNzaW9uUmVjb3JkaW5nKT92b2lkIDA6ZS5saW5rZWRGbGFnKXx8bnVsbCwhTyh0aGlzLmxpbmtlZEZsYWcpJiYhdGhpcy5saW5rZWRGbGFnU2Vlbil7dmFyIHI9VCh0aGlzLmxpbmtlZEZsYWcpP3RoaXMubGlua2VkRmxhZzp0aGlzLmxpbmtlZEZsYWcuZmxhZyxzPVQodGhpcy5saW5rZWRGbGFnKT9udWxsOnRoaXMubGlua2VkRmxhZy52YXJpYW50O3RoaXMueXQ9dGhpcy5faW5zdGFuY2Uub25GZWF0dXJlRmxhZ3MoKCh0LGUpPT57dmFyIG49ITE7aWYoSShlKSYmciBpbiBlKXt2YXIgbz1lW3JdO249QShvKT8hMD09PW86cz9vPT09czohIW99dGhpcy5saW5rZWRGbGFnU2Vlbj1uLG4mJmkocixzKX0pKX19c3RvcCgpe3RoaXMueXQoKX19Y2xhc3MgWnJ7Y29uc3RydWN0b3IodCl7dGhpcy5TdD1bXSx0aGlzLl9pbnN0YW5jZT10fW9uUmVtb3RlQ29uZmlnKHQpe3ZhciBpO3RoaXMuU3Q9KG51bGw9PShpPXQuc2Vzc2lvblJlY29yZGluZyk/dm9pZCAwOmkuZXZlbnRUcmlnZ2Vycyl8fFtdfSR0KHQpe3ZhciBpO3JldHVybiAwPT09dGhpcy5TdC5sZW5ndGg/R3I6KG51bGw9PShpPXRoaXMuX2luc3RhbmNlKT92b2lkIDA6aS5nZXRfcHJvcGVydHkoRXQpKT09PXQ/SHI6V3J9dHJpZ2dlclN0YXR1cyh0KXt2YXIgaT10aGlzLiR0KHQpLGU9aT09PUhyP0hyOmk9PT1Xcj9XcjpHcjtyZXR1cm4gdGhpcy5faW5zdGFuY2UucmVnaXN0ZXJfZm9yX3Nlc3Npb24oeyRzZGtfZGVidWdfcmVwbGF5X2V2ZW50X3RyaWdnZXJfc3RhdHVzOmV9KSxlfXN0b3AoKXt9fWZ1bmN0aW9uIHRzKHQpe3JldHVybiB0LmlzUmVjb3JkaW5nRW5hYmxlZD9VcjpOcn1mdW5jdGlvbiBpcyh0KXtpZighdC5yZWNlaXZlZERlY2lkZSlyZXR1cm4gVXI7aWYoIXQuaXNSZWNvcmRpbmdFbmFibGVkKXJldHVybiBOcjtpZih0LnVybFRyaWdnZXJNYXRjaGluZy51cmxCbG9ja2VkKXJldHVybiBxcjt2YXIgaT0hMD09PXQuaXNTYW1wbGVkLGU9bmV3IFZyKFt0LmV2ZW50VHJpZ2dlck1hdGNoaW5nLHQudXJsVHJpZ2dlck1hdGNoaW5nLHQubGlua2VkRmxhZ01hdGNoaW5nXSkudHJpZ2dlclN0YXR1cyh0LnNlc3Npb25JZCk7cmV0dXJuIGk/anI6ZT09PUhyP3pyOmU9PT1Xcj9VcjohMT09PXQuaXNTYW1wbGVkP05yOnpyfWZ1bmN0aW9uIGVzKHQpe2lmKCF0LnJlY2VpdmVkRGVjaWRlKXJldHVybiBVcjtpZighdC5pc1JlY29yZGluZ0VuYWJsZWQpcmV0dXJuIE5yO2lmKHQudXJsVHJpZ2dlck1hdGNoaW5nLnVybEJsb2NrZWQpcmV0dXJuIHFyO3ZhciBpPW5ldyBLcihbdC5ldmVudFRyaWdnZXJNYXRjaGluZyx0LnVybFRyaWdnZXJNYXRjaGluZyx0LmxpbmtlZEZsYWdNYXRjaGluZ10pLnRyaWdnZXJTdGF0dXModC5zZXNzaW9uSWQpLGU9aSE9PUdyLHI9QSh0LmlzU2FtcGxlZCk7cmV0dXJuIGUmJmk9PT1Xcj9VcjplJiZpPT09R3J8fHImJiF0LmlzU2FtcGxlZD9OcjohMD09PXQuaXNTYW1wbGVkP2pyOnpyfXZhciBycz1cIltTZXNzaW9uUmVjb3JkaW5nXVwiLHNzPXoocnMpO2Z1bmN0aW9uIG5zKCl7dmFyIHQ7cmV0dXJuIG51bGw9PXZ8fG51bGw9PSh0PXYuX19Qb3N0aG9nRXh0ZW5zaW9uc19fKXx8bnVsbD09KHQ9dC5ycndlYik/dm9pZCAwOnQucmVjb3JkfXZhciBvcz0zZTUsYXM9W1VlLk1vdXNlTW92ZSxVZS5Nb3VzZUludGVyYWN0aW9uLFVlLlNjcm9sbCxVZS5WaWV3cG9ydFJlc2l6ZSxVZS5JbnB1dCxVZS5Ub3VjaE1vdmUsVWUuTWVkaWFJbnRlcmFjdGlvbixVZS5EcmFnXSxscz10PT4oe3Jyd2ViTWV0aG9kOnQsZW5xdWV1ZWRBdDpEYXRlLm5vdygpLGF0dGVtcHQ6MX0pO2Z1bmN0aW9uIHVzKHQpe3JldHVybiBmdW5jdGlvbih0LGkpe2Zvcih2YXIgZT1cIlwiLHI9MDtyPHQubGVuZ3RoOyl7dmFyIHM9dFtyKytdO3M8MTI4fHxpP2UrPVN0cmluZy5mcm9tQ2hhckNvZGUocyk6czwyMjQ/ZSs9U3RyaW5nLmZyb21DaGFyQ29kZSgoMzEmcyk8PDZ8NjMmdFtyKytdKTpzPDI0MD9lKz1TdHJpbmcuZnJvbUNoYXJDb2RlKCgxNSZzKTw8MTJ8KDYzJnRbcisrXSk8PDZ8NjMmdFtyKytdKToocz0oKDE1JnMpPDwxOHwoNjMmdFtyKytdKTw8MTJ8KDYzJnRbcisrXSk8PDZ8NjMmdFtyKytdKS02NTUzNixlKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2fHM+PjEwLDU2MzIwfDEwMjMmcykpfXJldHVybiBlfShBcihEcihKU09OLnN0cmluZ2lmeSh0KSkpLCEwKX1mdW5jdGlvbiBocyh0KXtyZXR1cm4gdC50eXBlPT09emUuQ3VzdG9tJiZcInNlc3Npb25JZGxlXCI9PT10LmRhdGEudGFnfWNsYXNzIGRze2dldCBzZXNzaW9uSWQoKXtyZXR1cm4gdGhpcy5rdH1nZXQgeHQoKXtyZXR1cm4gdGhpcy5faW5zdGFuY2UuY29uZmlnLnNlc3Npb25fcmVjb3JkaW5nLnNlc3Npb25faWRsZV90aHJlc2hvbGRfbXN8fDNlNX1nZXQgc3RhcnRlZCgpe3JldHVybiB0aGlzLkV0fWdldCBJdCgpe2lmKCF0aGlzLl9pbnN0YW5jZS5zZXNzaW9uTWFuYWdlcil0aHJvdyBuZXcgRXJyb3IocnMrXCIgbXVzdCBiZSBzdGFydGVkIHdpdGggYSB2YWxpZCBzZXNzaW9uTWFuYWdlci5cIik7cmV0dXJuIHRoaXMuX2luc3RhbmNlLnNlc3Npb25NYW5hZ2VyfWdldCBQdCgpe3ZhciB0LGk7cmV0dXJuIHRoaXMuUnQudHJpZ2dlclN0YXR1cyh0aGlzLnNlc3Npb25JZCk9PT1Xcj82ZTQ6bnVsbCE9PSh0PW51bGw9PShpPXRoaXMuX2luc3RhbmNlLmNvbmZpZy5zZXNzaW9uX3JlY29yZGluZyk/dm9pZCAwOmkuZnVsbF9zbmFwc2hvdF9pbnRlcnZhbF9taWxsaXMpJiZ2b2lkIDAhPT10P3Q6b3N9Z2V0IFR0KCl7dmFyIHQ9dGhpcy5faW5zdGFuY2UuZ2V0X3Byb3BlcnR5KGt0KTtyZXR1cm4gQSh0KT90Om51bGx9Z2V0IE10KCl7dmFyIHQsaSxlPW51bGw9PSh0PXRoaXMuTSk/dm9pZCAwOnQuZGF0YVsobnVsbD09KGk9dGhpcy5NKT92b2lkIDA6aS5kYXRhLmxlbmd0aCktMV0se3Nlc3Npb25TdGFydFRpbWVzdGFtcDpyfT10aGlzLkl0LmNoZWNrQW5kR2V0U2Vzc2lvbkFuZFdpbmRvd0lkKCEwKTtyZXR1cm4gZT9lLnRpbWVzdGFtcC1yOm51bGx9Z2V0IEN0KCl7dmFyIGk9ISF0aGlzLl9pbnN0YW5jZS5nZXRfcHJvcGVydHkocHQpLGU9IXRoaXMuX2luc3RhbmNlLmNvbmZpZy5kaXNhYmxlX3Nlc3Npb25fcmVjb3JkaW5nO3JldHVybiB0JiZpJiZlfWdldCBPdCgpe3ZhciB0PSEhdGhpcy5faW5zdGFuY2UuZ2V0X3Byb3BlcnR5KGd0KSxpPXRoaXMuX2luc3RhbmNlLmNvbmZpZy5lbmFibGVfcmVjb3JkaW5nX2NvbnNvbGVfbG9nO3JldHVybiBudWxsIT1pP2k6dH1nZXQgRnQoKXt2YXIgdCxpLGUscixzLG4sbz10aGlzLl9pbnN0YW5jZS5jb25maWcuc2Vzc2lvbl9yZWNvcmRpbmcuY2FwdHVyZUNhbnZhcyxhPXRoaXMuX2luc3RhbmNlLmdldF9wcm9wZXJ0eShidCksbD1udWxsIT09KHQ9bnVsbCE9PShpPW51bGw9PW8/dm9pZCAwOm8ucmVjb3JkQ2FudmFzKSYmdm9pZCAwIT09aT9pOm51bGw9PWE/dm9pZCAwOmEuZW5hYmxlZCkmJnZvaWQgMCE9PXQmJnQsdT1udWxsIT09KGU9bnVsbCE9PShyPW51bGw9PW8/dm9pZCAwOm8uY2FudmFzRnBzKSYmdm9pZCAwIT09cj9yOm51bGw9PWE/dm9pZCAwOmEuZnBzKSYmdm9pZCAwIT09ZT9lOjQsaD1udWxsIT09KHM9bnVsbCE9PShuPW51bGw9PW8/dm9pZCAwOm8uY2FudmFzUXVhbGl0eSkmJnZvaWQgMCE9PW4/bjpudWxsPT1hP3ZvaWQgMDphLnF1YWxpdHkpJiZ2b2lkIDAhPT1zP3M6LjQ7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGgpe3ZhciBkPXBhcnNlRmxvYXQoaCk7aD1pc05hTihkKT8uNDpkfXJldHVybntlbmFibGVkOmwsZnBzOlhlKHUsMCwxMixcImNhbnZhcyByZWNvcmRpbmcgZnBzXCIsNCkscXVhbGl0eTpYZShoLDAsMSxcImNhbnZhcyByZWNvcmRpbmcgcXVhbGl0eVwiLC40KX19Z2V0IEF0KCl7dmFyIHQsaSxlPXRoaXMuX2luc3RhbmNlLmdldF9wcm9wZXJ0eShfdCkscj17cmVjb3JkSGVhZGVyczpudWxsPT0odD10aGlzLl9pbnN0YW5jZS5jb25maWcuc2Vzc2lvbl9yZWNvcmRpbmcpP3ZvaWQgMDp0LnJlY29yZEhlYWRlcnMscmVjb3JkQm9keTpudWxsPT0oaT10aGlzLl9pbnN0YW5jZS5jb25maWcuc2Vzc2lvbl9yZWNvcmRpbmcpP3ZvaWQgMDppLnJlY29yZEJvZHl9LHM9KG51bGw9PXI/dm9pZCAwOnIucmVjb3JkSGVhZGVycyl8fChudWxsPT1lP3ZvaWQgMDplLnJlY29yZEhlYWRlcnMpLG49KG51bGw9PXI/dm9pZCAwOnIucmVjb3JkQm9keSl8fChudWxsPT1lP3ZvaWQgMDplLnJlY29yZEJvZHkpLG89SSh0aGlzLl9pbnN0YW5jZS5jb25maWcuY2FwdHVyZV9wZXJmb3JtYW5jZSk/dGhpcy5faW5zdGFuY2UuY29uZmlnLmNhcHR1cmVfcGVyZm9ybWFuY2UubmV0d29ya190aW1pbmc6dGhpcy5faW5zdGFuY2UuY29uZmlnLmNhcHR1cmVfcGVyZm9ybWFuY2UsYT0hIShBKG8pP286bnVsbD09ZT92b2lkIDA6ZS5jYXB0dXJlUGVyZm9ybWFuY2UpO3JldHVybiBzfHxufHxhP3tyZWNvcmRIZWFkZXJzOnMscmVjb3JkQm9keTpuLHJlY29yZFBlcmZvcm1hbmNlOmF9OnZvaWQgMH1nZXQgRHQoKXt2YXIgdCxpLGUscixzLG4sbz10aGlzLl9pbnN0YW5jZS5nZXRfcHJvcGVydHkobXQpLGE9e21hc2tBbGxJbnB1dHM6bnVsbD09KHQ9dGhpcy5faW5zdGFuY2UuY29uZmlnLnNlc3Npb25fcmVjb3JkaW5nKT92b2lkIDA6dC5tYXNrQWxsSW5wdXRzLG1hc2tUZXh0U2VsZWN0b3I6bnVsbD09KGk9dGhpcy5faW5zdGFuY2UuY29uZmlnLnNlc3Npb25fcmVjb3JkaW5nKT92b2lkIDA6aS5tYXNrVGV4dFNlbGVjdG9yLGJsb2NrU2VsZWN0b3I6bnVsbD09KGU9dGhpcy5faW5zdGFuY2UuY29uZmlnLnNlc3Npb25fcmVjb3JkaW5nKT92b2lkIDA6ZS5ibG9ja1NlbGVjdG9yfSxsPW51bGwhPT0ocj1udWxsPT1hP3ZvaWQgMDphLm1hc2tBbGxJbnB1dHMpJiZ2b2lkIDAhPT1yP3I6bnVsbD09bz92b2lkIDA6by5tYXNrQWxsSW5wdXRzLHU9bnVsbCE9PShzPW51bGw9PWE/dm9pZCAwOmEubWFza1RleHRTZWxlY3RvcikmJnZvaWQgMCE9PXM/czpudWxsPT1vP3ZvaWQgMDpvLm1hc2tUZXh0U2VsZWN0b3IsaD1udWxsIT09KG49bnVsbD09YT92b2lkIDA6YS5ibG9ja1NlbGVjdG9yKSYmdm9pZCAwIT09bj9uOm51bGw9PW8/dm9pZCAwOm8uYmxvY2tTZWxlY3RvcjtyZXR1cm4gUihsKSYmUih1KSYmUihoKT92b2lkIDA6e21hc2tBbGxJbnB1dHM6bnVsbD09bHx8bCxtYXNrVGV4dFNlbGVjdG9yOnUsYmxvY2tTZWxlY3RvcjpofX1nZXQgTHQoKXt2YXIgdD10aGlzLl9pbnN0YW5jZS5nZXRfcHJvcGVydHkod3QpO3JldHVybiBGKHQpP3Q6bnVsbH1nZXQgTnQoKXt2YXIgdD10aGlzLl9pbnN0YW5jZS5nZXRfcHJvcGVydHkoeXQpO3JldHVybiBGKHQpP3Q6bnVsbH1nZXQgc3RhdHVzKCl7cmV0dXJuIHRoaXMuanQ/dGhpcy56dCh7cmVjZWl2ZWREZWNpZGU6dGhpcy5qdCxpc1JlY29yZGluZ0VuYWJsZWQ6dGhpcy5DdCxpc1NhbXBsZWQ6dGhpcy5UdCx1cmxUcmlnZ2VyTWF0Y2hpbmc6dGhpcy5VdCxldmVudFRyaWdnZXJNYXRjaGluZzp0aGlzLnF0LGxpbmtlZEZsYWdNYXRjaGluZzp0aGlzLkJ0LHNlc3Npb25JZDp0aGlzLnNlc3Npb25JZH0pOlVyfWNvbnN0cnVjdG9yKHQpe2lmKHRoaXMuenQ9dHMsdGhpcy5qdD0hMSx0aGlzLkh0PVtdLHRoaXMuV3Q9XCJ1bmtub3duXCIsdGhpcy5HdD1EYXRlLm5vdygpLHRoaXMuUnQ9bmV3IFlyLHRoaXMuSnQ9dm9pZCAwLHRoaXMuVnQ9dm9pZCAwLHRoaXMuS3Q9dm9pZCAwLHRoaXMuWXQ9dm9pZCAwLHRoaXMuWHQ9dm9pZCAwLHRoaXMuX2ZvcmNlQWxsb3dMb2NhbGhvc3ROZXR3b3JrQ2FwdHVyZT0hMSx0aGlzLlF0PSgpPT57dGhpcy5adCgpfSx0aGlzLnRpPSgpPT57dGhpcy5paShcImJyb3dzZXIgb2ZmbGluZVwiLHt9KX0sdGhpcy5laT0oKT0+e3RoaXMuaWkoXCJicm93c2VyIG9ubGluZVwiLHt9KX0sdGhpcy5yaT0oKT0+e2lmKG51bGwhPW8mJm8udmlzaWJpbGl0eVN0YXRlKXt2YXIgdD1cIndpbmRvdyBcIitvLnZpc2liaWxpdHlTdGF0ZTt0aGlzLmlpKHQse30pfX0sdGhpcy5faW5zdGFuY2U9dCx0aGlzLkV0PSExLHRoaXMuc2k9XCIvcy9cIix0aGlzLm5pPXZvaWQgMCx0aGlzLmp0PSExLCF0aGlzLl9pbnN0YW5jZS5zZXNzaW9uTWFuYWdlcil0aHJvdyBzcy5lcnJvcihcInN0YXJ0ZWQgd2l0aG91dCB2YWxpZCBzZXNzaW9uTWFuYWdlclwiKSxuZXcgRXJyb3IocnMrXCIgc3RhcnRlZCB3aXRob3V0IHZhbGlkIHNlc3Npb25NYW5hZ2VyLiBUaGlzIGlzIGEgYnVnLlwiKTtpZih0aGlzLl9pbnN0YW5jZS5jb25maWcuX19wcmV2aWV3X2V4cGVyaW1lbnRhbF9jb29raWVsZXNzX21vZGUpdGhyb3cgbmV3IEVycm9yKHJzK1wiIGNhbm5vdCBiZSB1c2VkIHdpdGggX19wcmV2aWV3X2V4cGVyaW1lbnRhbF9jb29raWVsZXNzX21vZGUuXCIpO3RoaXMuQnQ9bmV3IFFyKHRoaXMuX2luc3RhbmNlKSx0aGlzLlV0PW5ldyBYcih0aGlzLl9pbnN0YW5jZSksdGhpcy5xdD1uZXcgWnIodGhpcy5faW5zdGFuY2UpO3ZhcntzZXNzaW9uSWQ6aSx3aW5kb3dJZDplfT10aGlzLkl0LmNoZWNrQW5kR2V0U2Vzc2lvbkFuZFdpbmRvd0lkKCk7dGhpcy5rdD1pLHRoaXMub2k9ZSx0aGlzLk09dGhpcy5haSgpLHRoaXMueHQ+PXRoaXMuSXQuc2Vzc2lvblRpbWVvdXRNcyYmc3Mud2FybihcInNlc3Npb25faWRsZV90aHJlc2hvbGRfbXMgKFwiK3RoaXMueHQrXCIpIGlzIGdyZWF0ZXIgdGhhbiB0aGUgc2Vzc2lvbiB0aW1lb3V0IChcIit0aGlzLkl0LnNlc3Npb25UaW1lb3V0TXMrXCIpLiBTZXNzaW9uIHdpbGwgbmV2ZXIgYmUgZGV0ZWN0ZWQgYXMgaWRsZVwiKX1zdGFydElmRW5hYmxlZE9yU3RvcChpKXt0aGlzLkN0Pyh0aGlzLmxpKGkpLHN0KHQsXCJiZWZvcmV1bmxvYWRcIix0aGlzLlF0KSxzdCh0LFwib2ZmbGluZVwiLHRoaXMudGkpLHN0KHQsXCJvbmxpbmVcIix0aGlzLmVpKSxzdCh0LFwidmlzaWJpbGl0eWNoYW5nZVwiLHRoaXMucmkpLHRoaXMudWkoKSx0aGlzLmhpKCksTyh0aGlzLkp0KSYmKHRoaXMuSnQ9dGhpcy5faW5zdGFuY2Uub24oXCJldmVudENhcHR1cmVkXCIsKHQ9Pnt0cnl7aWYoXCIkcGFnZXZpZXdcIj09PXQuZXZlbnQpe3ZhciBpPW51bGwhPXQmJnQucHJvcGVydGllcy4kY3VycmVudF91cmw/dGhpcy5kaShudWxsPT10P3ZvaWQgMDp0LnByb3BlcnRpZXMuJGN1cnJlbnRfdXJsKTpcIlwiO2lmKCFpKXJldHVybjt0aGlzLmlpKFwiJHBhZ2V2aWV3XCIse2hyZWY6aX0pfX1jYXRjaCh0KXtzcy5lcnJvcihcIkNvdWxkIG5vdCBhZGQgJHBhZ2V2aWV3IHRvIHJyd2ViIHNlc3Npb25cIix0KX19KSkpLHRoaXMuVnR8fCh0aGlzLlZ0PXRoaXMuSXQub25TZXNzaW9uSWQoKCh0LGksZSk9Pnt2YXIgcixzO2UmJih0aGlzLmlpKFwiJHNlc3Npb25faWRfY2hhbmdlXCIse3Nlc3Npb25JZDp0LHdpbmRvd0lkOmksY2hhbmdlUmVhc29uOmV9KSxudWxsPT0ocj10aGlzLl9pbnN0YW5jZSl8fG51bGw9PShyPXIucGVyc2lzdGVuY2UpfHxyLnVucmVnaXN0ZXIoRXQpLG51bGw9PShzPXRoaXMuX2luc3RhbmNlKXx8bnVsbD09KHM9cy5wZXJzaXN0ZW5jZSl8fHMudW5yZWdpc3Rlcih4dCkpfSkpKSk6dGhpcy5zdG9wUmVjb3JkaW5nKCl9c3RvcFJlY29yZGluZygpe3ZhciBpLGUscixzO3RoaXMuRXQmJnRoaXMubmkmJih0aGlzLm5pKCksdGhpcy5uaT12b2lkIDAsdGhpcy5FdD0hMSxudWxsPT10fHx0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIix0aGlzLlF0KSxudWxsPT10fHx0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJvZmZsaW5lXCIsdGhpcy50aSksbnVsbD09dHx8dC5yZW1vdmVFdmVudExpc3RlbmVyKFwib25saW5lXCIsdGhpcy5laSksbnVsbD09dHx8dC5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLHRoaXMucmkpLHRoaXMuYWkoKSxjbGVhckludGVydmFsKHRoaXMudmkpLG51bGw9PShpPXRoaXMuSnQpfHxpLmNhbGwodGhpcyksdGhpcy5KdD12b2lkIDAsbnVsbD09KGU9dGhpcy5YdCl8fGUuY2FsbCh0aGlzKSx0aGlzLlh0PXZvaWQgMCxudWxsPT0ocj10aGlzLlZ0KXx8ci5jYWxsKHRoaXMpLHRoaXMuVnQ9dm9pZCAwLG51bGw9PShzPXRoaXMuWXQpfHxzLmNhbGwodGhpcyksdGhpcy5ZdD12b2lkIDAsdGhpcy5xdC5zdG9wKCksdGhpcy5VdC5zdG9wKCksdGhpcy5CdC5zdG9wKCksc3MuaW5mbyhcInN0b3BwZWRcIikpfWNpKCl7dmFyIHQ7bnVsbD09KHQ9dGhpcy5faW5zdGFuY2UucGVyc2lzdGVuY2UpfHx0LnVucmVnaXN0ZXIoa3QpfWZpKHQpe3ZhciBpLGU9dGhpcy5rdCE9PXQscj10aGlzLkx0O2lmKEYocikpe3ZhciBzPXRoaXMuVHQsbj1lfHwhQShzKSxvPW4/THIodCxyKTpzO24mJihvP3RoaXMucGkoanIpOnNzLndhcm4oXCJTYW1wbGUgcmF0ZSAoXCIrcitcIikgaGFzIGRldGVybWluZWQgdGhhdCB0aGlzIHNlc3Npb25JZCAoXCIrdCtcIikgd2lsbCBub3QgYmUgc2VudCB0byB0aGUgc2VydmVyLlwiKSx0aGlzLmlpKFwic2FtcGxpbmdEZWNpc2lvbk1hZGVcIix7c2FtcGxlUmF0ZTpyLGlzU2FtcGxlZDpvfSkpLG51bGw9PShpPXRoaXMuX2luc3RhbmNlLnBlcnNpc3RlbmNlKXx8aS5yZWdpc3Rlcih7W2t0XTpvfSl9ZWxzZSB0aGlzLmNpKCl9b25SZW1vdGVDb25maWcodCl7dmFyIGksZSxyLHM7KHRoaXMuaWkoXCIkcmVtb3RlX2NvbmZpZ19yZWNlaXZlZFwiLHQpLHRoaXMuZ2kodCksbnVsbCE9KGk9dC5zZXNzaW9uUmVjb3JkaW5nKSYmaS5lbmRwb2ludCkmJih0aGlzLnNpPW51bGw9PShzPXQuc2Vzc2lvblJlY29yZGluZyk/dm9pZCAwOnMuZW5kcG9pbnQpO3RoaXMudWkoKSxcImFueVwiPT09KG51bGw9PShlPXQuc2Vzc2lvblJlY29yZGluZyk/dm9pZCAwOmUudHJpZ2dlck1hdGNoVHlwZSk/KHRoaXMuenQ9aXMsdGhpcy5SdD1uZXcgVnIoW3RoaXMucXQsdGhpcy5VdF0pKToodGhpcy56dD1lcyx0aGlzLlJ0PW5ldyBLcihbdGhpcy5xdCx0aGlzLlV0XSkpLHRoaXMuX2luc3RhbmNlLnJlZ2lzdGVyX2Zvcl9zZXNzaW9uKHskc2RrX2RlYnVnX3JlcGxheV9yZW1vdGVfdHJpZ2dlcl9tYXRjaGluZ19jb25maWc6bnVsbD09KHI9dC5zZXNzaW9uUmVjb3JkaW5nKT92b2lkIDA6ci50cmlnZ2VyTWF0Y2hUeXBlfSksdGhpcy5VdC5vblJlbW90ZUNvbmZpZyh0KSx0aGlzLnF0Lm9uUmVtb3RlQ29uZmlnKHQpLHRoaXMuQnQub25SZW1vdGVDb25maWcodCwoKHQsaSk9Pnt0aGlzLnBpKFwibGlua2VkX2ZsYWdfbWF0Y2hlZFwiLHtmbGFnOnQsdmFyaWFudDppfSl9KSksdGhpcy5qdD0hMCx0aGlzLnN0YXJ0SWZFbmFibGVkT3JTdG9wKCl9dWkoKXtGKHRoaXMuTHQpJiZPKHRoaXMuWXQpJiYodGhpcy5ZdD10aGlzLkl0Lm9uU2Vzc2lvbklkKCh0PT57dGhpcy5maSh0KX0pKSl9Z2kodCl7aWYodGhpcy5faW5zdGFuY2UucGVyc2lzdGVuY2Upe3ZhciBpLGU9dGhpcy5faW5zdGFuY2UucGVyc2lzdGVuY2Uscj0oKT0+e3ZhciBpLHIscyxuLG8sYSxsLHUsaCxkPW51bGw9PShpPXQuc2Vzc2lvblJlY29yZGluZyk/dm9pZCAwOmkuc2FtcGxlUmF0ZSx2PU8oZCk/bnVsbDpwYXJzZUZsb2F0KGQpO08odikmJnRoaXMuY2koKTt2YXIgYz1udWxsPT0ocj10LnNlc3Npb25SZWNvcmRpbmcpP3ZvaWQgMDpyLm1pbmltdW1EdXJhdGlvbk1pbGxpc2Vjb25kcztlLnJlZ2lzdGVyKHtbcHRdOiEhdC5zZXNzaW9uUmVjb3JkaW5nLFtndF06bnVsbD09KHM9dC5zZXNzaW9uUmVjb3JkaW5nKT92b2lkIDA6cy5jb25zb2xlTG9nUmVjb3JkaW5nRW5hYmxlZCxbX3RdOkIoe2NhcHR1cmVQZXJmb3JtYW5jZTp0LmNhcHR1cmVQZXJmb3JtYW5jZX0sbnVsbD09KG49dC5zZXNzaW9uUmVjb3JkaW5nKT92b2lkIDA6bi5uZXR3b3JrUGF5bG9hZENhcHR1cmUpLFttdF06bnVsbD09KG89dC5zZXNzaW9uUmVjb3JkaW5nKT92b2lkIDA6by5tYXNraW5nLFtidF06e2VuYWJsZWQ6bnVsbD09KGE9dC5zZXNzaW9uUmVjb3JkaW5nKT92b2lkIDA6YS5yZWNvcmRDYW52YXMsZnBzOm51bGw9PShsPXQuc2Vzc2lvblJlY29yZGluZyk/dm9pZCAwOmwuY2FudmFzRnBzLHF1YWxpdHk6bnVsbD09KHU9dC5zZXNzaW9uUmVjb3JkaW5nKT92b2lkIDA6dS5jYW52YXNRdWFsaXR5fSxbd3RdOnYsW3l0XTpSKGMpP251bGw6YyxbU3RdOm51bGw9PShoPXQuc2Vzc2lvblJlY29yZGluZyk/dm9pZCAwOmguc2NyaXB0Q29uZmlnfSl9O3IoKSxudWxsPT0oaT10aGlzLkt0KXx8aS5jYWxsKHRoaXMpLHRoaXMuS3Q9dGhpcy5JdC5vblNlc3Npb25JZChyKX19bG9nKHQsaSl7dmFyIGU7dm9pZCAwPT09aSYmKGk9XCJsb2dcIiksbnVsbD09KGU9dGhpcy5faW5zdGFuY2Uuc2Vzc2lvblJlY29yZGluZyl8fGUub25SUndlYkVtaXQoe3R5cGU6NixkYXRhOntwbHVnaW46XCJycndlYi9jb25zb2xlQDFcIixwYXlsb2FkOntsZXZlbDppLHRyYWNlOltdLHBheWxvYWQ6W0pTT04uc3RyaW5naWZ5KHQpXX19LHRpbWVzdGFtcDpEYXRlLm5vdygpfSl9bGkodCl7aWYoIVIoT2JqZWN0LmFzc2lnbikmJiFSKEFycmF5LmZyb20pJiYhKHRoaXMuRXR8fHRoaXMuX2luc3RhbmNlLmNvbmZpZy5kaXNhYmxlX3Nlc3Npb25fcmVjb3JkaW5nfHx0aGlzLl9pbnN0YW5jZS5jb25zZW50LmlzT3B0ZWRPdXQoKSkpe3ZhciBpO2lmKHRoaXMuRXQ9ITAsdGhpcy5JdC5jaGVja0FuZEdldFNlc3Npb25BbmRXaW5kb3dJZCgpLG5zKCkpdGhpcy5taSgpO2Vsc2UgbnVsbD09KGk9di5fX1Bvc3Rob2dFeHRlbnNpb25zX18pfHxudWxsPT1pLmxvYWRFeHRlcm5hbERlcGVuZGVuY3l8fGkubG9hZEV4dGVybmFsRGVwZW5kZW5jeSh0aGlzLl9pbnN0YW5jZSx0aGlzLmJpLCh0PT57aWYodClyZXR1cm4gc3MuZXJyb3IoXCJjb3VsZCBub3QgbG9hZCByZWNvcmRlclwiLHQpO3RoaXMubWkoKX0pKTtzcy5pbmZvKFwic3RhcnRpbmdcIiksdGhpcy5zdGF0dXM9PT16ciYmdGhpcy5waSh0fHxcInJlY29yZGluZ19pbml0aWFsaXplZFwiKX19Z2V0IGJpKCl7dmFyIHQ7cmV0dXJuKG51bGw9PSh0PXRoaXMuX2luc3RhbmNlKXx8bnVsbD09KHQ9dC5wZXJzaXN0ZW5jZSl8fG51bGw9PSh0PXQuZ2V0X3Byb3BlcnR5KFN0KSk/dm9pZCAwOnQuc2NyaXB0KXx8XCJyZWNvcmRlclwifXdpKHQpe3ZhciBpO3JldHVybiAzPT09dC50eXBlJiYtMSE9PWFzLmluZGV4T2YobnVsbD09KGk9dC5kYXRhKT92b2lkIDA6aS5zb3VyY2UpfXlpKHQpe3ZhciBpPXRoaXMud2kodCk7aXx8dGhpcy5XdHx8dC50aW1lc3RhbXAtdGhpcy5HdD50aGlzLnh0JiYodGhpcy5XdD0hMCxjbGVhckludGVydmFsKHRoaXMudmkpLHRoaXMuaWkoXCJzZXNzaW9uSWRsZVwiLHtldmVudFRpbWVzdGFtcDp0LnRpbWVzdGFtcCxsYXN0QWN0aXZpdHlUaW1lc3RhbXA6dGhpcy5HdCx0aHJlc2hvbGQ6dGhpcy54dCxidWZmZXJMZW5ndGg6dGhpcy5NLmRhdGEubGVuZ3RoLGJ1ZmZlclNpemU6dGhpcy5NLnNpemV9KSx0aGlzLlp0KCkpO3ZhciBlPSExO2lmKGkmJih0aGlzLkd0PXQudGltZXN0YW1wLHRoaXMuV3QpKXt2YXIgcj1cInVua25vd25cIj09PXRoaXMuV3Q7dGhpcy5XdD0hMSxyfHwodGhpcy5paShcInNlc3Npb25Ob0xvbmdlcklkbGVcIix7cmVhc29uOlwidXNlciBhY3Rpdml0eVwiLHR5cGU6dC50eXBlfSksZT0hMCl9aWYoIXRoaXMuV3Qpe3Zhcnt3aW5kb3dJZDpzLHNlc3Npb25JZDpufT10aGlzLkl0LmNoZWNrQW5kR2V0U2Vzc2lvbkFuZFdpbmRvd0lkKCFpLHQudGltZXN0YW1wKSxvPXRoaXMua3QhPT1uLGE9dGhpcy5vaSE9PXM7dGhpcy5vaT1zLHRoaXMua3Q9bixvfHxhPyh0aGlzLnN0b3BSZWNvcmRpbmcoKSx0aGlzLnN0YXJ0SWZFbmFibGVkT3JTdG9wKFwic2Vzc2lvbl9pZF9jaGFuZ2VkXCIpKTplJiZ0aGlzLlNpKCl9fSRpKHQpe3RyeXtyZXR1cm4gdC5ycndlYk1ldGhvZCgpLCEwfWNhdGNoKGkpe3JldHVybiB0aGlzLkh0Lmxlbmd0aDwxMD90aGlzLkh0LnB1c2goe2VucXVldWVkQXQ6dC5lbnF1ZXVlZEF0fHxEYXRlLm5vdygpLGF0dGVtcHQ6dC5hdHRlbXB0KysscnJ3ZWJNZXRob2Q6dC5ycndlYk1ldGhvZH0pOnNzLndhcm4oXCJjb3VsZCBub3QgZW1pdCBxdWV1ZWQgcnJ3ZWIgZXZlbnQuXCIsaSx0KSwhMX19aWkodCxpKXtyZXR1cm4gdGhpcy4kaShscygoKCk9Pm5zKCkuYWRkQ3VzdG9tRXZlbnQodCxpKSkpKX1raSgpe3JldHVybiB0aGlzLiRpKGxzKCgoKT0+bnMoKS50YWtlRnVsbFNuYXBzaG90KCkpKSl9bWkoKXt2YXIgdCxpLGUscixzPXtibG9ja0NsYXNzOlwicGgtbm8tY2FwdHVyZVwiLGJsb2NrU2VsZWN0b3I6dm9pZCAwLGlnbm9yZUNsYXNzOlwicGgtaWdub3JlLWlucHV0XCIsbWFza1RleHRDbGFzczpcInBoLW1hc2tcIixtYXNrVGV4dFNlbGVjdG9yOnZvaWQgMCxtYXNrVGV4dEZuOnZvaWQgMCxtYXNrQWxsSW5wdXRzOiEwLG1hc2tJbnB1dE9wdGlvbnM6e3Bhc3N3b3JkOiEwfSxtYXNrSW5wdXRGbjp2b2lkIDAsc2xpbURPTU9wdGlvbnM6e30sY29sbGVjdEZvbnRzOiExLGlubGluZVN0eWxlc2hlZXQ6ITAscmVjb3JkQ3Jvc3NPcmlnaW5JZnJhbWVzOiExfSxuPXRoaXMuX2luc3RhbmNlLmNvbmZpZy5zZXNzaW9uX3JlY29yZGluZztmb3IodmFyW28sYV1vZiBPYmplY3QuZW50cmllcyhufHx7fSkpbyBpbiBzJiYoXCJtYXNrSW5wdXRPcHRpb25zXCI9PT1vP3MubWFza0lucHV0T3B0aW9ucz1CKHtwYXNzd29yZDohMH0sYSk6c1tvXT1hKTsodGhpcy5GdCYmdGhpcy5GdC5lbmFibGVkJiYocy5yZWNvcmRDYW52YXM9ITAscy5zYW1wbGluZz17Y2FudmFzOnRoaXMuRnQuZnBzfSxzLmRhdGFVUkxPcHRpb25zPXt0eXBlOlwiaW1hZ2Uvd2VicFwiLHF1YWxpdHk6dGhpcy5GdC5xdWFsaXR5fSksdGhpcy5EdCkmJihzLm1hc2tBbGxJbnB1dHM9bnVsbD09PShpPXRoaXMuRHQubWFza0FsbElucHV0cyl8fHZvaWQgMD09PWl8fGkscy5tYXNrVGV4dFNlbGVjdG9yPW51bGwhPT0oZT10aGlzLkR0Lm1hc2tUZXh0U2VsZWN0b3IpJiZ2b2lkIDAhPT1lP2U6dm9pZCAwLHMuYmxvY2tTZWxlY3Rvcj1udWxsIT09KHI9dGhpcy5EdC5ibG9ja1NlbGVjdG9yKSYmdm9pZCAwIT09cj9yOnZvaWQgMCk7dmFyIGw9bnMoKTtpZihsKXt0aGlzLnhpPW51bGwhPT0odD10aGlzLnhpKSYmdm9pZCAwIT09dD90Om5ldyBRZShsLHtyZWZpbGxSYXRlOnRoaXMuX2luc3RhbmNlLmNvbmZpZy5zZXNzaW9uX3JlY29yZGluZy5fX211dGF0aW9uUmF0ZUxpbWl0ZXJSZWZpbGxSYXRlLGJ1Y2tldFNpemU6dGhpcy5faW5zdGFuY2UuY29uZmlnLnNlc3Npb25fcmVjb3JkaW5nLl9fbXV0YXRpb25SYXRlTGltaXRlckJ1Y2tldFNpemUsb25CbG9ja2VkTm9kZToodCxpKT0+e3ZhciBlPVwiVG9vIG1hbnkgbXV0YXRpb25zIG9uIG5vZGUgJ1wiK3QrXCInLiBSYXRlIGxpbWl0aW5nLiBUaGlzIGNvdWxkIGJlIGR1ZSB0byBTVkcgYW5pbWF0aW9ucyBvciBzb21ldGhpbmcgc2ltaWxhclwiO3NzLmluZm8oZSx7bm9kZTppfSksdGhpcy5sb2cocnMrXCIgXCIrZSxcIndhcm5cIil9fSk7dmFyIHU9dGhpcy5FaSgpO3RoaXMubmk9bChCKHtlbWl0OnQ9Pnt0aGlzLm9uUlJ3ZWJFbWl0KHQpfSxwbHVnaW5zOnV9LHMpKSx0aGlzLkd0PURhdGUubm93KCksdGhpcy5XdD1BKHRoaXMuV3QpP3RoaXMuV3Q6XCJ1bmtub3duXCIsdGhpcy5paShcIiRzZXNzaW9uX29wdGlvbnNcIix7c2Vzc2lvblJlY29yZGluZ09wdGlvbnM6cyxhY3RpdmVQbHVnaW5zOnUubWFwKCh0PT5udWxsPT10P3ZvaWQgMDp0Lm5hbWUpKX0pLHRoaXMuaWkoXCIkcG9zdGhvZ19jb25maWdcIix7Y29uZmlnOnRoaXMuX2luc3RhbmNlLmNvbmZpZ30pfWVsc2Ugc3MuZXJyb3IoXCJvblNjcmlwdExvYWRlZCB3YXMgY2FsbGVkIGJ1dCBycndlYlJlY29yZCBpcyBub3QgYXZhaWxhYmxlLiBUaGlzIGluZGljYXRlcyBzb21ldGhpbmcgaGFzIGdvbmUgd3JvbmcuXCIpfVNpKCl7aWYodGhpcy52aSYmY2xlYXJJbnRlcnZhbCh0aGlzLnZpKSwhMCE9PXRoaXMuV3Qpe3ZhciB0PXRoaXMuUHQ7dCYmKHRoaXMudmk9c2V0SW50ZXJ2YWwoKCgpPT57dGhpcy5raSgpfSksdCkpfX1FaSgpe3ZhciB0LGksZT1bXSxyPW51bGw9PSh0PXYuX19Qb3N0aG9nRXh0ZW5zaW9uc19fKXx8bnVsbD09KHQ9dC5ycndlYlBsdWdpbnMpP3ZvaWQgMDp0LmdldFJlY29yZENvbnNvbGVQbHVnaW47ciYmdGhpcy5PdCYmZS5wdXNoKHIoKSk7dmFyIHM9bnVsbD09KGk9di5fX1Bvc3Rob2dFeHRlbnNpb25zX18pfHxudWxsPT0oaT1pLnJyd2ViUGx1Z2lucyk/dm9pZCAwOmkuZ2V0UmVjb3JkTmV0d29ya1BsdWdpbjt0aGlzLkF0JiZFKHMpJiYoIXdpLmluY2x1ZGVzKGxvY2F0aW9uLmhvc3RuYW1lKXx8dGhpcy5fZm9yY2VBbGxvd0xvY2FsaG9zdE5ldHdvcmtDYXB0dXJlP2UucHVzaChzKFllKHRoaXMuX2luc3RhbmNlLmNvbmZpZyx0aGlzLkF0KSkpOnNzLmluZm8oXCJOZXR3b3JrQ2FwdHVyZSBub3Qgc3RhcnRlZCBiZWNhdXNlIHdlIGFyZSBvbiBsb2NhbGhvc3QuXCIpKTtyZXR1cm4gZX1vblJSd2ViRW1pdCh0KXt2YXIgaTtpZih0aGlzLklpKCksdCYmSSh0KSl7aWYodC50eXBlPT09emUuTWV0YSl7dmFyIGU9dGhpcy5kaSh0LmRhdGEuaHJlZik7aWYodGhpcy5QaT1lLCFlKXJldHVybjt0LmRhdGEuaHJlZj1lfWVsc2UgdGhpcy5SaSgpO2lmKHRoaXMuVXQuY2hlY2tVcmxUcmlnZ2VyQ29uZGl0aW9ucygoKCk9PnRoaXMuVGkoKSksKCgpPT50aGlzLk1pKCkpLCh0PT50aGlzLkNpKHQpKSksIXRoaXMuVXQudXJsQmxvY2tlZHx8KHI9dCkudHlwZT09PXplLkN1c3RvbSYmXCJyZWNvcmRpbmcgcGF1c2VkXCI9PT1yLmRhdGEudGFnKXt2YXIgcjt0LnR5cGU9PT16ZS5GdWxsU25hcHNob3QmJnRoaXMuU2koKSx0LnR5cGU9PT16ZS5GdWxsU25hcHNob3QmJnRoaXMuanQmJnRoaXMuUnQudHJpZ2dlclN0YXR1cyh0aGlzLnNlc3Npb25JZCk9PT1XciYmdGhpcy5haSgpO3ZhciBzPXRoaXMueGk/dGhpcy54aS50aHJvdHRsZU11dGF0aW9ucyh0KTp0O2lmKHMpe3ZhciBuPWZ1bmN0aW9uKHQpe3ZhciBpPXQ7aWYoaSYmSShpKSYmNj09PWkudHlwZSYmSShpLmRhdGEpJiZcInJyd2ViL2NvbnNvbGVAMVwiPT09aS5kYXRhLnBsdWdpbil7aS5kYXRhLnBheWxvYWQucGF5bG9hZC5sZW5ndGg+MTAmJihpLmRhdGEucGF5bG9hZC5wYXlsb2FkPWkuZGF0YS5wYXlsb2FkLnBheWxvYWQuc2xpY2UoMCwxMCksaS5kYXRhLnBheWxvYWQucGF5bG9hZC5wdXNoKFwiLi4uW3RydW5jYXRlZF1cIikpO2Zvcih2YXIgZT1bXSxyPTA7cjxpLmRhdGEucGF5bG9hZC5wYXlsb2FkLmxlbmd0aDtyKyspaS5kYXRhLnBheWxvYWQucGF5bG9hZFtyXSYmaS5kYXRhLnBheWxvYWQucGF5bG9hZFtyXS5sZW5ndGg+MmUzP2UucHVzaChpLmRhdGEucGF5bG9hZC5wYXlsb2FkW3JdLnNsaWNlKDAsMmUzKStcIi4uLlt0cnVuY2F0ZWRdXCIpOmUucHVzaChpLmRhdGEucGF5bG9hZC5wYXlsb2FkW3JdKTtyZXR1cm4gaS5kYXRhLnBheWxvYWQucGF5bG9hZD1lLHR9cmV0dXJuIHR9KHMpO2lmKHRoaXMueWkobiksITAhPT10aGlzLld0fHxocyhuKSl7aWYoaHMobikpe3ZhciBvPW4uZGF0YS5wYXlsb2FkO2lmKG8pe3ZhciBhPW8ubGFzdEFjdGl2aXR5VGltZXN0YW1wLGw9by50aHJlc2hvbGQ7bi50aW1lc3RhbXA9YStsfX12YXIgdT1udWxsPT09KGk9dGhpcy5faW5zdGFuY2UuY29uZmlnLnNlc3Npb25fcmVjb3JkaW5nLmNvbXByZXNzX2V2ZW50cyl8fHZvaWQgMD09PWl8fGk/ZnVuY3Rpb24odCl7aWYoTmUodCk8MTAyNClyZXR1cm4gdDt0cnl7aWYodC50eXBlPT09emUuRnVsbFNuYXBzaG90KXJldHVybiBCKHt9LHQse2RhdGE6dXModC5kYXRhKSxjdjpcIjIwMjQtMTBcIn0pO2lmKHQudHlwZT09PXplLkluY3JlbWVudGFsU25hcHNob3QmJnQuZGF0YS5zb3VyY2U9PT1VZS5NdXRhdGlvbilyZXR1cm4gQih7fSx0LHtjdjpcIjIwMjQtMTBcIixkYXRhOkIoe30sdC5kYXRhLHt0ZXh0czp1cyh0LmRhdGEudGV4dHMpLGF0dHJpYnV0ZXM6dXModC5kYXRhLmF0dHJpYnV0ZXMpLHJlbW92ZXM6dXModC5kYXRhLnJlbW92ZXMpLGFkZHM6dXModC5kYXRhLmFkZHMpfSl9KTtpZih0LnR5cGU9PT16ZS5JbmNyZW1lbnRhbFNuYXBzaG90JiZ0LmRhdGEuc291cmNlPT09VWUuU3R5bGVTaGVldFJ1bGUpcmV0dXJuIEIoe30sdCx7Y3Y6XCIyMDI0LTEwXCIsZGF0YTpCKHt9LHQuZGF0YSx7YWRkczp0LmRhdGEuYWRkcz91cyh0LmRhdGEuYWRkcyk6dm9pZCAwLHJlbW92ZXM6dC5kYXRhLnJlbW92ZXM/dXModC5kYXRhLnJlbW92ZXMpOnZvaWQgMH0pfSl9Y2F0Y2godCl7c3MuZXJyb3IoXCJjb3VsZCBub3QgY29tcHJlc3MgZXZlbnQgLSB3aWxsIHVzZSB1bmNvbXByZXNzZWQgZXZlbnRcIix0KX1yZXR1cm4gdH0obik6bixoPXskc25hcHNob3RfYnl0ZXM6TmUodSksJHNuYXBzaG90X2RhdGE6dSwkc2Vzc2lvbl9pZDp0aGlzLmt0LCR3aW5kb3dfaWQ6dGhpcy5vaX07dGhpcy5zdGF0dXMhPT1Ocj90aGlzLk9pKGgpOnRoaXMuYWkoKX19fX19UmkoKXtpZighdGhpcy5faW5zdGFuY2UuY29uZmlnLmNhcHR1cmVfcGFnZXZpZXcmJnQpe3ZhciBpPXRoaXMuZGkodC5sb2NhdGlvbi5ocmVmKTt0aGlzLlBpIT09aSYmKHRoaXMuaWkoXCIkdXJsX2NoYW5nZWRcIix7aHJlZjppfSksdGhpcy5QaT1pKX19SWkoKXtpZih0aGlzLkh0Lmxlbmd0aCl7dmFyIHQ9Wy4uLnRoaXMuSHRdO3RoaXMuSHQ9W10sdC5mb3JFYWNoKCh0PT57RGF0ZS5ub3coKS10LmVucXVldWVkQXQ8PTJlMyYmdGhpcy4kaSh0KX0pKX19ZGkodCl7dmFyIGk9dGhpcy5faW5zdGFuY2UuY29uZmlnLnNlc3Npb25fcmVjb3JkaW5nO2lmKGkubWFza05ldHdvcmtSZXF1ZXN0Rm4pe3ZhciBlLHI9e3VybDp0fTtyZXR1cm4gbnVsbD09KGU9cj1pLm1hc2tOZXR3b3JrUmVxdWVzdEZuKHIpKT92b2lkIDA6ZS51cmx9cmV0dXJuIHR9YWkoKXtyZXR1cm4gdGhpcy5NPXtzaXplOjAsZGF0YTpbXSxzZXNzaW9uSWQ6dGhpcy5rdCx3aW5kb3dJZDp0aGlzLm9pfSx0aGlzLk19WnQoKXt0aGlzLkZpJiYoY2xlYXJUaW1lb3V0KHRoaXMuRmkpLHRoaXMuRmk9dm9pZCAwKTt2YXIgdD10aGlzLk50LGk9dGhpcy5NdCxlPUYoaSkmJmk+PTAscj1GKHQpJiZlJiZpPHQ7aWYodGhpcy5zdGF0dXM9PT1Vcnx8dGhpcy5zdGF0dXM9PT1xcnx8dGhpcy5zdGF0dXM9PT1Ocnx8cilyZXR1cm4gdGhpcy5GaT1zZXRUaW1lb3V0KCgoKT0+e3RoaXMuWnQoKX0pLDJlMyksdGhpcy5NO3RoaXMuTS5kYXRhLmxlbmd0aD4wJiZqZSh0aGlzLk0pLmZvckVhY2goKHQ9Pnt0aGlzLkFpKHskc25hcHNob3RfYnl0ZXM6dC5zaXplLCRzbmFwc2hvdF9kYXRhOnQuZGF0YSwkc2Vzc2lvbl9pZDp0LnNlc3Npb25JZCwkd2luZG93X2lkOnQud2luZG93SWQsJGxpYjpcIndlYlwiLCRsaWJfdmVyc2lvbjpjLkxJQl9WRVJTSU9OfSl9KSk7cmV0dXJuIHRoaXMuYWkoKX1PaSh0KXt2YXIgaSxlPTIrKChudWxsPT0oaT10aGlzLk0pP3ZvaWQgMDppLmRhdGEubGVuZ3RoKXx8MCk7IXRoaXMuV3QmJih0aGlzLk0uc2l6ZSt0LiRzbmFwc2hvdF9ieXRlcytlPjk0MzcxOC40fHx0aGlzLk0uc2Vzc2lvbklkIT09dGhpcy5rdCkmJih0aGlzLk09dGhpcy5adCgpKSx0aGlzLk0uc2l6ZSs9dC4kc25hcHNob3RfYnl0ZXMsdGhpcy5NLmRhdGEucHVzaCh0LiRzbmFwc2hvdF9kYXRhKSx0aGlzLkZpfHx0aGlzLld0fHwodGhpcy5GaT1zZXRUaW1lb3V0KCgoKT0+e3RoaXMuWnQoKX0pLDJlMykpfUFpKHQpe3RoaXMuX2luc3RhbmNlLmNhcHR1cmUoXCIkc25hcHNob3RcIix0LHtfdXJsOnRoaXMuX2luc3RhbmNlLnJlcXVlc3RSb3V0ZXIuZW5kcG9pbnRGb3IoXCJhcGlcIix0aGlzLnNpKSxfbm9UcnVuY2F0ZTohMCxfYmF0Y2hLZXk6XCJyZWNvcmRpbmdzXCIsc2tpcF9jbGllbnRfcmF0ZV9saW1pdGluZzohMH0pfUNpKHQpe3ZhciBpO3RoaXMuUnQudHJpZ2dlclN0YXR1cyh0aGlzLnNlc3Npb25JZCk9PT1XciYmKG51bGw9PShpPXRoaXMuX2luc3RhbmNlKXx8bnVsbD09KGk9aS5wZXJzaXN0ZW5jZSl8fGkucmVnaXN0ZXIoe1tcInVybFwiPT09dD94dDpFdF06dGhpcy5rdH0pLHRoaXMuWnQoKSx0aGlzLnBpKHQrXCJfdHJpZ2dlcl9tYXRjaGVkXCIpKX1UaSgpe3RoaXMuVXQudXJsQmxvY2tlZHx8KHRoaXMuVXQudXJsQmxvY2tlZD0hMCxjbGVhckludGVydmFsKHRoaXMudmkpLHNzLmluZm8oXCJyZWNvcmRpbmcgcGF1c2VkIGR1ZSB0byBVUkwgYmxvY2tlclwiKSx0aGlzLmlpKFwicmVjb3JkaW5nIHBhdXNlZFwiLHtyZWFzb246XCJ1cmwgYmxvY2tlclwifSkpfU1pKCl7dGhpcy5VdC51cmxCbG9ja2VkJiYodGhpcy5VdC51cmxCbG9ja2VkPSExLHRoaXMua2koKSx0aGlzLlNpKCksdGhpcy5paShcInJlY29yZGluZyByZXN1bWVkXCIse3JlYXNvbjpcImxlZnQgYmxvY2tlZCB1cmxcIn0pLHNzLmluZm8oXCJyZWNvcmRpbmcgcmVzdW1lZFwiKSl9aGkoKXswIT09dGhpcy5xdC5TdC5sZW5ndGgmJk8odGhpcy5YdCkmJih0aGlzLlh0PXRoaXMuX2luc3RhbmNlLm9uKFwiZXZlbnRDYXB0dXJlZFwiLCh0PT57dHJ5e3RoaXMucXQuU3QuaW5jbHVkZXModC5ldmVudCkmJnRoaXMuQ2koXCJldmVudFwiKX1jYXRjaCh0KXtzcy5lcnJvcihcIkNvdWxkIG5vdCBhY3RpdmF0ZSBldmVudCB0cmlnZ2VyXCIsdCl9fSkpKX1vdmVycmlkZUxpbmtlZEZsYWcoKXt0aGlzLkJ0LmxpbmtlZEZsYWdTZWVuPSEwLHRoaXMua2koKSx0aGlzLnBpKFwibGlua2VkX2ZsYWdfb3ZlcnJpZGRlblwiKX1vdmVycmlkZVNhbXBsaW5nKCl7dmFyIHQ7bnVsbD09KHQ9dGhpcy5faW5zdGFuY2UucGVyc2lzdGVuY2UpfHx0LnJlZ2lzdGVyKHtba3RdOiEwfSksdGhpcy5raSgpLHRoaXMucGkoXCJzYW1wbGluZ19vdmVycmlkZGVuXCIpfW92ZXJyaWRlVHJpZ2dlcih0KXt0aGlzLkNpKHQpfXBpKHQsaSl7dGhpcy5faW5zdGFuY2UucmVnaXN0ZXJfZm9yX3Nlc3Npb24oeyRzZXNzaW9uX3JlY29yZGluZ19zdGFydF9yZWFzb246dH0pLHNzLmluZm8odC5yZXBsYWNlKFwiX1wiLFwiIFwiKSxpKSxtKFtcInJlY29yZGluZ19pbml0aWFsaXplZFwiLFwic2Vzc2lvbl9pZF9jaGFuZ2VkXCJdLHQpfHx0aGlzLmlpKHQsaSl9Z2V0IHNka0RlYnVnUHJvcGVydGllcygpe3ZhcntzZXNzaW9uU3RhcnRUaW1lc3RhbXA6dH09dGhpcy5JdC5jaGVja0FuZEdldFNlc3Npb25BbmRXaW5kb3dJZCghMCk7cmV0dXJueyRyZWNvcmRpbmdfc3RhdHVzOnRoaXMuc3RhdHVzLCRzZGtfZGVidWdfcmVwbGF5X2ludGVybmFsX2J1ZmZlcl9sZW5ndGg6dGhpcy5NLmRhdGEubGVuZ3RoLCRzZGtfZGVidWdfcmVwbGF5X2ludGVybmFsX2J1ZmZlcl9zaXplOnRoaXMuTS5zaXplLCRzZGtfZGVidWdfY3VycmVudF9zZXNzaW9uX2R1cmF0aW9uOnRoaXMuTXQsJHNka19kZWJ1Z19zZXNzaW9uX3N0YXJ0OnR9fX12YXIgdnM9eihcIltTZWdtZW50SW50ZWdyYXRpb25dXCIpO2Z1bmN0aW9uIGNzKHQsaSl7dmFyIGU9dC5jb25maWcuc2VnbWVudDtpZighZSlyZXR1cm4gaSgpOyFmdW5jdGlvbih0LGkpe3ZhciBlPXQuY29uZmlnLnNlZ21lbnQ7aWYoIWUpcmV0dXJuIGkoKTt2YXIgcj1lPT57dmFyIHI9KCk9PmUuYW5vbnltb3VzSWQoKXx8TmkoKTt0LmNvbmZpZy5nZXRfZGV2aWNlX2lkPXIsZS5pZCgpJiYodC5yZWdpc3Rlcih7ZGlzdGluY3RfaWQ6ZS5pZCgpLCRkZXZpY2VfaWQ6cigpfSksdC5wZXJzaXN0ZW5jZS5zZXRfcHJvcGVydHkoQXQsXCJpZGVudGlmaWVkXCIpKSxpKCl9LHM9ZS51c2VyKCk7XCJ0aGVuXCJpbiBzJiZFKHMudGhlbik/cy50aGVuKCh0PT5yKHQpKSk6cihzKX0odCwoKCk9PntlLnJlZ2lzdGVyKCh0PT57UHJvbWlzZSYmUHJvbWlzZS5yZXNvbHZlfHx2cy53YXJuKFwiVGhpcyBicm93c2VyIGRvZXMgbm90IGhhdmUgUHJvbWlzZSBzdXBwb3J0LCBhbmQgY2FuIG5vdCB1c2UgdGhlIHNlZ21lbnQgaW50ZWdyYXRpb25cIik7dmFyIGk9KGksZSk9PntpZighZSlyZXR1cm4gaTtpLmV2ZW50LnVzZXJJZHx8aS5ldmVudC5hbm9ueW1vdXNJZD09PXQuZ2V0X2Rpc3RpbmN0X2lkKCl8fCh2cy5pbmZvKFwiTm8gdXNlcklkIHNldCwgcmVzZXR0aW5nIFBvc3RIb2dcIiksdC5yZXNldCgpKSxpLmV2ZW50LnVzZXJJZCYmaS5ldmVudC51c2VySWQhPT10LmdldF9kaXN0aW5jdF9pZCgpJiYodnMuaW5mbyhcIlVzZXJJZCBzZXQsIGlkZW50aWZ5aW5nIHdpdGggUG9zdEhvZ1wiKSx0LmlkZW50aWZ5KGkuZXZlbnQudXNlcklkKSk7dmFyIHI9dC5jYWxjdWxhdGVFdmVudFByb3BlcnRpZXMoZSxpLmV2ZW50LnByb3BlcnRpZXMpO3JldHVybiBpLmV2ZW50LnByb3BlcnRpZXM9T2JqZWN0LmFzc2lnbih7fSxyLGkuZXZlbnQucHJvcGVydGllcyksaX07cmV0dXJue25hbWU6XCJQb3N0SG9nIEpTXCIsdHlwZTpcImVucmljaG1lbnRcIix2ZXJzaW9uOlwiMS4wLjBcIixpc0xvYWRlZDooKT0+ITAsbG9hZDooKT0+UHJvbWlzZS5yZXNvbHZlKCksdHJhY2s6dD0+aSh0LHQuZXZlbnQuZXZlbnQpLHBhZ2U6dD0+aSh0LFwiJHBhZ2V2aWV3XCIpLGlkZW50aWZ5OnQ9PmkodCxcIiRpZGVudGlmeVwiKSxzY3JlZW46dD0+aSh0LFwiJHNjcmVlblwiKX19KSh0KSkudGhlbigoKCk9PntpKCl9KSl9KSl9dmFyIGZzPVwicG9zdGhvZy1qc1wiO2Z1bmN0aW9uIHBzKHQsaSl7dmFye29yZ2FuaXphdGlvbjplLHByb2plY3RJZDpyLHByZWZpeDpzLHNldmVyaXR5QWxsb3dMaXN0Om49W1wiZXJyb3JcIl19PXZvaWQgMD09PWk/e306aTtyZXR1cm4gaT0+e3ZhciBvLGEsbCx1LGg7aWYoIShcIipcIj09PW58fG4uaW5jbHVkZXMoaS5sZXZlbCkpfHwhdC5fX2xvYWRlZClyZXR1cm4gaTtpLnRhZ3N8fChpLnRhZ3M9e30pO3ZhciBkPXQucmVxdWVzdFJvdXRlci5lbmRwb2ludEZvcihcInVpXCIsXCIvcHJvamVjdC9cIit0LmNvbmZpZy50b2tlbitcIi9wZXJzb24vXCIrdC5nZXRfZGlzdGluY3RfaWQoKSk7aS50YWdzW1wiUG9zdEhvZyBQZXJzb24gVVJMXCJdPWQsdC5zZXNzaW9uUmVjb3JkaW5nU3RhcnRlZCgpJiYoaS50YWdzW1wiUG9zdEhvZyBSZWNvcmRpbmcgVVJMXCJdPXQuZ2V0X3Nlc3Npb25fcmVwbGF5X3VybCh7d2l0aFRpbWVzdGFtcDohMH0pKTt2YXIgdj0obnVsbD09KG89aS5leGNlcHRpb24pP3ZvaWQgMDpvLnZhbHVlcyl8fFtdLGM9di5tYXAoKHQ9PkIoe30sdCx7c3RhY2t0cmFjZTp0LnN0YWNrdHJhY2U/Qih7fSx0LnN0YWNrdHJhY2Use3R5cGU6XCJyYXdcIixmcmFtZXM6KHQuc3RhY2t0cmFjZS5mcmFtZXN8fFtdKS5tYXAoKHQ9PkIoe30sdCx7cGxhdGZvcm06XCJ3ZWI6amF2YXNjcmlwdFwifSkpKX0pOnZvaWQgMH0pKSksZj17JGV4Y2VwdGlvbl9tZXNzYWdlOihudWxsPT0oYT12WzBdKT92b2lkIDA6YS52YWx1ZSl8fGkubWVzc2FnZSwkZXhjZXB0aW9uX3R5cGU6bnVsbD09KGw9dlswXSk/dm9pZCAwOmwudHlwZSwkZXhjZXB0aW9uX3BlcnNvblVSTDpkLCRleGNlcHRpb25fbGV2ZWw6aS5sZXZlbCwkZXhjZXB0aW9uX2xpc3Q6Yywkc2VudHJ5X2V2ZW50X2lkOmkuZXZlbnRfaWQsJHNlbnRyeV9leGNlcHRpb246aS5leGNlcHRpb24sJHNlbnRyeV9leGNlcHRpb25fbWVzc2FnZToobnVsbD09KHU9dlswXSk/dm9pZCAwOnUudmFsdWUpfHxpLm1lc3NhZ2UsJHNlbnRyeV9leGNlcHRpb25fdHlwZTpudWxsPT0oaD12WzBdKT92b2lkIDA6aC50eXBlLCRzZW50cnlfdGFnczppLnRhZ3N9O3JldHVybiBlJiZyJiYoZi4kc2VudHJ5X3VybD0oc3x8XCJodHRwczovL3NlbnRyeS5pby9vcmdhbml6YXRpb25zL1wiKStlK1wiL2lzc3Vlcy8/cHJvamVjdD1cIityK1wiJnF1ZXJ5PVwiK2kuZXZlbnRfaWQpLHQuZXhjZXB0aW9ucy5zZW5kRXhjZXB0aW9uRXZlbnQoZiksaX19Y2xhc3MgZ3N7Y29uc3RydWN0b3IodCxpLGUscixzKXt0aGlzLm5hbWU9ZnMsdGhpcy5zZXR1cE9uY2U9ZnVuY3Rpb24obil7bihwcyh0LHtvcmdhbml6YXRpb246aSxwcm9qZWN0SWQ6ZSxwcmVmaXg6cixzZXZlcml0eUFsbG93TGlzdDpzfSkpfX19dmFyIF9zPW51bGwhPXQmJnQubG9jYXRpb24/eGkodC5sb2NhdGlvbi5oYXNoLFwiX19wb3N0aG9nXCIpfHx4aShsb2NhdGlvbi5oYXNoLFwic3RhdGVcIik6bnVsbCxtcz1cIl9wb3N0SG9nVG9vbGJhclBhcmFtc1wiLGJzPXooXCJbVG9vbGJhcl1cIiksd3M9ZnVuY3Rpb24odCl7cmV0dXJuIHRbdC5VTklOSVRJQUxJWkVEPTBdPVwiVU5JTklUSUFMSVpFRFwiLHRbdC5MT0FESU5HPTFdPVwiTE9BRElOR1wiLHRbdC5MT0FERUQ9Ml09XCJMT0FERURcIix0fSh3c3x8e30pO2NsYXNzIHlze2NvbnN0cnVjdG9yKHQpe3RoaXMuaW5zdGFuY2U9dH1EaSh0KXt2LnBoX3Rvb2xiYXJfc3RhdGU9dH1MaSgpe3ZhciB0O3JldHVybiBudWxsIT09KHQ9di5waF90b29sYmFyX3N0YXRlKSYmdm9pZCAwIT09dD90OndzLlVOSU5JVElBTElaRUR9bWF5YmVMb2FkVG9vbGJhcihpLGUscil7aWYodm9pZCAwPT09aSYmKGk9dm9pZCAwKSx2b2lkIDA9PT1lJiYoZT12b2lkIDApLHZvaWQgMD09PXImJihyPXZvaWQgMCksIXR8fCFvKXJldHVybiExO2k9bnVsbCE9aT9pOnQubG9jYXRpb24scj1udWxsIT1yP3I6dC5oaXN0b3J5O3RyeXtpZighZSl7dHJ5e3QubG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ0ZXN0XCIsXCJ0ZXN0XCIpLHQubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJ0ZXN0XCIpfWNhdGNoKHQpe3JldHVybiExfWU9bnVsbD09dD92b2lkIDA6dC5sb2NhbFN0b3JhZ2V9dmFyIHMsbj1fc3x8eGkoaS5oYXNoLFwiX19wb3N0aG9nXCIpfHx4aShpLmhhc2gsXCJzdGF0ZVwiKSxhPW4/WCgoKCk9PkpTT04ucGFyc2UoYXRvYihkZWNvZGVVUklDb21wb25lbnQobikpKSkpfHxYKCgoKT0+SlNPTi5wYXJzZShkZWNvZGVVUklDb21wb25lbnQobikpKSk6bnVsbDtyZXR1cm4gYSYmXCJwaF9hdXRob3JpemVcIj09PWEuYWN0aW9uPygocz1hKS5zb3VyY2U9XCJ1cmxcIixzJiZPYmplY3Qua2V5cyhzKS5sZW5ndGg+MCYmKGEuZGVzaXJlZEhhc2g/aS5oYXNoPWEuZGVzaXJlZEhhc2g6cj9yLnJlcGxhY2VTdGF0ZShyLnN0YXRlLFwiXCIsaS5wYXRobmFtZStpLnNlYXJjaCk6aS5oYXNoPVwiXCIpKTooKHM9SlNPTi5wYXJzZShlLmdldEl0ZW0obXMpfHxcInt9XCIpKS5zb3VyY2U9XCJsb2NhbHN0b3JhZ2VcIixkZWxldGUgcy51c2VySW50ZW50KSwhKCFzLnRva2VufHx0aGlzLmluc3RhbmNlLmNvbmZpZy50b2tlbiE9PXMudG9rZW4pJiYodGhpcy5sb2FkVG9vbGJhcihzKSwhMCl9Y2F0Y2godCl7cmV0dXJuITF9fU5pKHQpe3ZhciBpPXYucGhfbG9hZF90b29sYmFyfHx2LnBoX2xvYWRfZWRpdG9yOyFPKGkpJiZFKGkpP2kodCx0aGlzLmluc3RhbmNlKTpicy53YXJuKFwiTm8gdG9vbGJhciBsb2FkIGZ1bmN0aW9uIGZvdW5kXCIpfWxvYWRUb29sYmFyKGkpe3ZhciBlPSEobnVsbD09b3x8IW8uZ2V0RWxlbWVudEJ5SWQocXQpKTtpZighdHx8ZSlyZXR1cm4hMTt2YXIgcj1cImN1c3RvbVwiPT09dGhpcy5pbnN0YW5jZS5yZXF1ZXN0Um91dGVyLnJlZ2lvbiYmdGhpcy5pbnN0YW5jZS5jb25maWcuYWR2YW5jZWRfZGlzYWJsZV90b29sYmFyX21ldHJpY3Mscz1CKHt0b2tlbjp0aGlzLmluc3RhbmNlLmNvbmZpZy50b2tlbn0saSx7YXBpVVJMOnRoaXMuaW5zdGFuY2UucmVxdWVzdFJvdXRlci5lbmRwb2ludEZvcihcInVpXCIpfSxyP3tpbnN0cnVtZW50OiExfTp7fSk7aWYodC5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShtcyxKU09OLnN0cmluZ2lmeShCKHt9LHMse3NvdXJjZTp2b2lkIDB9KSkpLHRoaXMuTGkoKT09PXdzLkxPQURFRCl0aGlzLk5pKHMpO2Vsc2UgaWYodGhpcy5MaSgpPT09d3MuVU5JTklUSUFMSVpFRCl7dmFyIG47dGhpcy5EaSh3cy5MT0FESU5HKSxudWxsPT0obj12Ll9fUG9zdGhvZ0V4dGVuc2lvbnNfXyl8fG51bGw9PW4ubG9hZEV4dGVybmFsRGVwZW5kZW5jeXx8bi5sb2FkRXh0ZXJuYWxEZXBlbmRlbmN5KHRoaXMuaW5zdGFuY2UsXCJ0b29sYmFyXCIsKHQ9PntpZih0KXJldHVybiBicy5lcnJvcihcIltUb29sYmFyXSBGYWlsZWQgdG8gbG9hZFwiLHQpLHZvaWQgdGhpcy5EaSh3cy5VTklOSVRJQUxJWkVEKTt0aGlzLkRpKHdzLkxPQURFRCksdGhpcy5OaShzKX0pKSxzdCh0LFwidHVyYm9saW5rczpsb2FkXCIsKCgpPT57dGhpcy5EaSh3cy5VTklOSVRJQUxJWkVEKSx0aGlzLmxvYWRUb29sYmFyKHMpfSkpfXJldHVybiEwfWppKHQpe3JldHVybiB0aGlzLmxvYWRUb29sYmFyKHQpfW1heWJlTG9hZEVkaXRvcih0LGksZSl7cmV0dXJuIHZvaWQgMD09PXQmJih0PXZvaWQgMCksdm9pZCAwPT09aSYmKGk9dm9pZCAwKSx2b2lkIDA9PT1lJiYoZT12b2lkIDApLHRoaXMubWF5YmVMb2FkVG9vbGJhcih0LGksZSl9fXZhciBTcz16KFwiW1RyYWNpbmdIZWFkZXJzXVwiKTtjbGFzcyAkc3tjb25zdHJ1Y3Rvcih0KXt0aGlzLnppPXZvaWQgMCx0aGlzLlVpPXZvaWQgMCx0aGlzLlY9KCk9Pnt2YXIgdCxpO1IodGhpcy56aSkmJihudWxsPT0odD12Ll9fUG9zdGhvZ0V4dGVuc2lvbnNfXyl8fG51bGw9PSh0PXQudHJhY2luZ0hlYWRlcnNQYXRjaEZucyl8fHQuX3BhdGNoWEhSKHRoaXMuX2luc3RhbmNlLnNlc3Npb25NYW5hZ2VyKSk7Uih0aGlzLlVpKSYmKG51bGw9PShpPXYuX19Qb3N0aG9nRXh0ZW5zaW9uc19fKXx8bnVsbD09KGk9aS50cmFjaW5nSGVhZGVyc1BhdGNoRm5zKXx8aS5fcGF0Y2hGZXRjaCh0aGlzLl9pbnN0YW5jZS5zZXNzaW9uTWFuYWdlcikpfSx0aGlzLl9pbnN0YW5jZT10fUcodCl7dmFyIGksZTtudWxsIT0oaT12Ll9fUG9zdGhvZ0V4dGVuc2lvbnNfXykmJmkudHJhY2luZ0hlYWRlcnNQYXRjaEZucyYmdCgpLG51bGw9PShlPXYuX19Qb3N0aG9nRXh0ZW5zaW9uc19fKXx8bnVsbD09ZS5sb2FkRXh0ZXJuYWxEZXBlbmRlbmN5fHxlLmxvYWRFeHRlcm5hbERlcGVuZGVuY3kodGhpcy5faW5zdGFuY2UsXCJ0cmFjaW5nLWhlYWRlcnNcIiwoaT0+e2lmKGkpcmV0dXJuIFNzLmVycm9yKFwiZmFpbGVkIHRvIGxvYWQgc2NyaXB0XCIsaSk7dCgpfSkpfXN0YXJ0SWZFbmFibGVkT3JTdG9wKCl7dmFyIHQsaTt0aGlzLl9pbnN0YW5jZS5jb25maWcuX19hZGRfdHJhY2luZ19oZWFkZXJzP3RoaXMuRyh0aGlzLlYpOihudWxsPT0odD10aGlzLnppKXx8dC5jYWxsKHRoaXMpLG51bGw9PShpPXRoaXMuVWkpfHxpLmNhbGwodGhpcyksdGhpcy56aT12b2lkIDAsdGhpcy5VaT12b2lkIDApfX12YXIga3M9eihcIltXZWIgVml0YWxzXVwiKSx4cz05ZTU7Y2xhc3MgRXN7Y29uc3RydWN0b3IodCl7dmFyIGk7dGhpcy5xaT0hMSx0aGlzLmk9ITEsdGhpcy5NPXt1cmw6dm9pZCAwLG1ldHJpY3M6W10sZmlyc3RNZXRyaWNUaW1lc3RhbXA6dm9pZCAwfSx0aGlzLkJpPSgpPT57Y2xlYXJUaW1lb3V0KHRoaXMuSGkpLDAhPT10aGlzLk0ubWV0cmljcy5sZW5ndGgmJih0aGlzLl9pbnN0YW5jZS5jYXB0dXJlKFwiJHdlYl92aXRhbHNcIix0aGlzLk0ubWV0cmljcy5yZWR1Y2UoKCh0LGkpPT5CKHt9LHQse1tcIiR3ZWJfdml0YWxzX1wiK2kubmFtZStcIl9ldmVudFwiXTpCKHt9LGkpLFtcIiR3ZWJfdml0YWxzX1wiK2kubmFtZStcIl92YWx1ZVwiXTppLnZhbHVlfSkpLHt9KSksdGhpcy5NPXt1cmw6dm9pZCAwLG1ldHJpY3M6W10sZmlyc3RNZXRyaWNUaW1lc3RhbXA6dm9pZCAwfSl9LHRoaXMuV2k9dD0+e3ZhciBpLGU9bnVsbD09KGk9dGhpcy5faW5zdGFuY2Uuc2Vzc2lvbk1hbmFnZXIpP3ZvaWQgMDppLmNoZWNrQW5kR2V0U2Vzc2lvbkFuZFdpbmRvd0lkKCEwKTtpZihSKGUpKWtzLmVycm9yKFwiQ291bGQgbm90IHJlYWQgc2Vzc2lvbiBJRC4gRHJvcHBpbmcgbWV0cmljcyFcIik7ZWxzZXt0aGlzLk09dGhpcy5NfHx7dXJsOnZvaWQgMCxtZXRyaWNzOltdLGZpcnN0TWV0cmljVGltZXN0YW1wOnZvaWQgMH07dmFyIHI9dGhpcy5HaSgpO2lmKCFSKHIpKWlmKE8obnVsbD09dD92b2lkIDA6dC5uYW1lKXx8TyhudWxsPT10P3ZvaWQgMDp0LnZhbHVlKSlrcy5lcnJvcihcIkludmFsaWQgbWV0cmljIHJlY2VpdmVkXCIsdCk7ZWxzZSBpZih0aGlzLkppJiZ0LnZhbHVlPj10aGlzLkppKWtzLmVycm9yKFwiSWdub3JpbmcgbWV0cmljIHdpdGggdmFsdWUgPj0gXCIrdGhpcy5KaSx0KTtlbHNlIHRoaXMuTS51cmwhPT1yJiYodGhpcy5CaSgpLHRoaXMuSGk9c2V0VGltZW91dCh0aGlzLkJpLHRoaXMuZmx1c2hUb0NhcHR1cmVUaW1lb3V0TXMpKSxSKHRoaXMuTS51cmwpJiYodGhpcy5NLnVybD1yKSx0aGlzLk0uZmlyc3RNZXRyaWNUaW1lc3RhbXA9Uih0aGlzLk0uZmlyc3RNZXRyaWNUaW1lc3RhbXApP0RhdGUubm93KCk6dGhpcy5NLmZpcnN0TWV0cmljVGltZXN0YW1wLHQuYXR0cmlidXRpb24mJnQuYXR0cmlidXRpb24uaW50ZXJhY3Rpb25UYXJnZXRFbGVtZW50JiYodC5hdHRyaWJ1dGlvbi5pbnRlcmFjdGlvblRhcmdldEVsZW1lbnQ9dm9pZCAwKSx0aGlzLk0ubWV0cmljcy5wdXNoKEIoe30sdCx7JGN1cnJlbnRfdXJsOnIsJHNlc3Npb25faWQ6ZS5zZXNzaW9uSWQsJHdpbmRvd19pZDplLndpbmRvd0lkLHRpbWVzdGFtcDpEYXRlLm5vdygpfSkpLHRoaXMuTS5tZXRyaWNzLmxlbmd0aD09PXRoaXMuYWxsb3dlZE1ldHJpY3MubGVuZ3RoJiZ0aGlzLkJpKCl9fSx0aGlzLlY9KCk9Pnt2YXIgdCxpLGUscixzPXYuX19Qb3N0aG9nRXh0ZW5zaW9uc19fO1Iocyl8fFIocy5wb3N0SG9nV2ViVml0YWxzQ2FsbGJhY2tzKXx8KHtvbkxDUDp0LG9uQ0xTOmksb25GQ1A6ZSxvbklOUDpyfT1zLnBvc3RIb2dXZWJWaXRhbHNDYWxsYmFja3MpLHQmJmkmJmUmJnI/KHRoaXMuYWxsb3dlZE1ldHJpY3MuaW5kZXhPZihcIkxDUFwiKT4tMSYmdCh0aGlzLldpLmJpbmQodGhpcykpLHRoaXMuYWxsb3dlZE1ldHJpY3MuaW5kZXhPZihcIkNMU1wiKT4tMSYmaSh0aGlzLldpLmJpbmQodGhpcykpLHRoaXMuYWxsb3dlZE1ldHJpY3MuaW5kZXhPZihcIkZDUFwiKT4tMSYmZSh0aGlzLldpLmJpbmQodGhpcykpLHRoaXMuYWxsb3dlZE1ldHJpY3MuaW5kZXhPZihcIklOUFwiKT4tMSYmcih0aGlzLldpLmJpbmQodGhpcykpLHRoaXMuaT0hMCk6a3MuZXJyb3IoXCJ3ZWIgdml0YWxzIGNhbGxiYWNrcyBub3QgbG9hZGVkIC0gbm90IHN0YXJ0aW5nXCIpfSx0aGlzLl9pbnN0YW5jZT10LHRoaXMucWk9IShudWxsPT0oaT10aGlzLl9pbnN0YW5jZS5wZXJzaXN0ZW5jZSl8fCFpLnByb3BzW3Z0XSksdGhpcy5zdGFydElmRW5hYmxlZCgpfWdldCBhbGxvd2VkTWV0cmljcygpe3ZhciB0LGksZT1JKHRoaXMuX2luc3RhbmNlLmNvbmZpZy5jYXB0dXJlX3BlcmZvcm1hbmNlKT9udWxsPT0odD10aGlzLl9pbnN0YW5jZS5jb25maWcuY2FwdHVyZV9wZXJmb3JtYW5jZSk/dm9pZCAwOnQud2ViX3ZpdGFsc19hbGxvd2VkX21ldHJpY3M6dm9pZCAwO3JldHVybiBSKGUpPyhudWxsPT0oaT10aGlzLl9pbnN0YW5jZS5wZXJzaXN0ZW5jZSk/dm9pZCAwOmkucHJvcHNbZnRdKXx8W1wiQ0xTXCIsXCJGQ1BcIixcIklOUFwiLFwiTENQXCJdOmV9Z2V0IGZsdXNoVG9DYXB0dXJlVGltZW91dE1zKCl7cmV0dXJuKEkodGhpcy5faW5zdGFuY2UuY29uZmlnLmNhcHR1cmVfcGVyZm9ybWFuY2UpP3RoaXMuX2luc3RhbmNlLmNvbmZpZy5jYXB0dXJlX3BlcmZvcm1hbmNlLndlYl92aXRhbHNfZGVsYXllZF9mbHVzaF9tczp2b2lkIDApfHw1ZTN9Z2V0IEppKCl7dmFyIHQ9SSh0aGlzLl9pbnN0YW5jZS5jb25maWcuY2FwdHVyZV9wZXJmb3JtYW5jZSkmJkYodGhpcy5faW5zdGFuY2UuY29uZmlnLmNhcHR1cmVfcGVyZm9ybWFuY2UuX193ZWJfdml0YWxzX21heF92YWx1ZSk/dGhpcy5faW5zdGFuY2UuY29uZmlnLmNhcHR1cmVfcGVyZm9ybWFuY2UuX193ZWJfdml0YWxzX21heF92YWx1ZTp4cztyZXR1cm4gMDx0JiZ0PD02ZTQ/eHM6dH1nZXQgaXNFbmFibGVkKCl7dmFyIHQ9bnVsbD09YT92b2lkIDA6YS5wcm90b2NvbDtpZihcImh0dHA6XCIhPT10JiZcImh0dHBzOlwiIT09dClyZXR1cm4ga3MuaW5mbyhcIldlYiBWaXRhbHMgYXJlIGRpc2FibGVkIG9uIG5vbi1odHRwL2h0dHBzIHByb3RvY29sc1wiKSwhMTt2YXIgaT1JKHRoaXMuX2luc3RhbmNlLmNvbmZpZy5jYXB0dXJlX3BlcmZvcm1hbmNlKT90aGlzLl9pbnN0YW5jZS5jb25maWcuY2FwdHVyZV9wZXJmb3JtYW5jZS53ZWJfdml0YWxzOkEodGhpcy5faW5zdGFuY2UuY29uZmlnLmNhcHR1cmVfcGVyZm9ybWFuY2UpP3RoaXMuX2luc3RhbmNlLmNvbmZpZy5jYXB0dXJlX3BlcmZvcm1hbmNlOnZvaWQgMDtyZXR1cm4gQShpKT9pOnRoaXMucWl9c3RhcnRJZkVuYWJsZWQoKXt0aGlzLmlzRW5hYmxlZCYmIXRoaXMuaSYmKGtzLmluZm8oXCJlbmFibGVkLCBzdGFydGluZy4uLlwiKSx0aGlzLkcodGhpcy5WKSl9b25SZW1vdGVDb25maWcodCl7dmFyIGk9SSh0LmNhcHR1cmVQZXJmb3JtYW5jZSkmJiEhdC5jYXB0dXJlUGVyZm9ybWFuY2Uud2ViX3ZpdGFscyxlPUkodC5jYXB0dXJlUGVyZm9ybWFuY2UpP3QuY2FwdHVyZVBlcmZvcm1hbmNlLndlYl92aXRhbHNfYWxsb3dlZF9tZXRyaWNzOnZvaWQgMDt0aGlzLl9pbnN0YW5jZS5wZXJzaXN0ZW5jZSYmKHRoaXMuX2luc3RhbmNlLnBlcnNpc3RlbmNlLnJlZ2lzdGVyKHtbdnRdOml9KSx0aGlzLl9pbnN0YW5jZS5wZXJzaXN0ZW5jZS5yZWdpc3Rlcih7W2Z0XTplfSkpLHRoaXMucWk9aSx0aGlzLnN0YXJ0SWZFbmFibGVkKCl9Ryh0KXt2YXIgaSxlO251bGwhPShpPXYuX19Qb3N0aG9nRXh0ZW5zaW9uc19fKSYmaS5wb3N0SG9nV2ViVml0YWxzQ2FsbGJhY2tzJiZ0KCksbnVsbD09KGU9di5fX1Bvc3Rob2dFeHRlbnNpb25zX18pfHxudWxsPT1lLmxvYWRFeHRlcm5hbERlcGVuZGVuY3l8fGUubG9hZEV4dGVybmFsRGVwZW5kZW5jeSh0aGlzLl9pbnN0YW5jZSxcIndlYi12aXRhbHNcIiwoaT0+e2k/a3MuZXJyb3IoXCJmYWlsZWQgdG8gbG9hZCBzY3JpcHRcIixpKTp0KCl9KSl9R2koKXt2YXIgaT10P3QubG9jYXRpb24uaHJlZjp2b2lkIDA7cmV0dXJuIGl8fGtzLmVycm9yKFwiQ291bGQgbm90IGRldGVybWluZSBjdXJyZW50IFVSTFwiKSxpfX12YXIgSXM9eihcIltIZWF0bWFwc11cIik7ZnVuY3Rpb24gUHModCl7cmV0dXJuIEkodCkmJlwiY2xpZW50WFwiaW4gdCYmXCJjbGllbnRZXCJpbiB0JiZGKHQuY2xpZW50WCkmJkYodC5jbGllbnRZKX1jbGFzcyBSc3tjb25zdHJ1Y3Rvcih0KXt2YXIgaTt0aGlzLnJhZ2VjbGlja3M9bmV3IGJpLHRoaXMucWk9ITEsdGhpcy5pPSExLHRoaXMuVmk9bnVsbCx0aGlzLmluc3RhbmNlPXQsdGhpcy5xaT0hKG51bGw9PShpPXRoaXMuaW5zdGFuY2UucGVyc2lzdGVuY2UpfHwhaS5wcm9wc1t1dF0pfWdldCBmbHVzaEludGVydmFsTWlsbGlzZWNvbmRzKCl7dmFyIHQ9NWUzO3JldHVybiBJKHRoaXMuaW5zdGFuY2UuY29uZmlnLmNhcHR1cmVfaGVhdG1hcHMpJiZ0aGlzLmluc3RhbmNlLmNvbmZpZy5jYXB0dXJlX2hlYXRtYXBzLmZsdXNoX2ludGVydmFsX21pbGxpc2Vjb25kcyYmKHQ9dGhpcy5pbnN0YW5jZS5jb25maWcuY2FwdHVyZV9oZWF0bWFwcy5mbHVzaF9pbnRlcnZhbF9taWxsaXNlY29uZHMpLHR9Z2V0IGlzRW5hYmxlZCgpe3JldHVybiBSKHRoaXMuaW5zdGFuY2UuY29uZmlnLmNhcHR1cmVfaGVhdG1hcHMpP1IodGhpcy5pbnN0YW5jZS5jb25maWcuZW5hYmxlX2hlYXRtYXBzKT90aGlzLnFpOnRoaXMuaW5zdGFuY2UuY29uZmlnLmVuYWJsZV9oZWF0bWFwczohMSE9PXRoaXMuaW5zdGFuY2UuY29uZmlnLmNhcHR1cmVfaGVhdG1hcHN9c3RhcnRJZkVuYWJsZWQoKXtpZih0aGlzLmlzRW5hYmxlZCl7aWYodGhpcy5pKXJldHVybjtJcy5pbmZvKFwic3RhcnRpbmcuLi5cIiksdGhpcy5LaSgpLHRoaXMuVmk9c2V0SW50ZXJ2YWwodGhpcy5ZaS5iaW5kKHRoaXMpLHRoaXMuZmx1c2hJbnRlcnZhbE1pbGxpc2Vjb25kcyl9ZWxzZXt2YXIgdCxpO2NsZWFySW50ZXJ2YWwobnVsbCE9PSh0PXRoaXMuVmkpJiZ2b2lkIDAhPT10P3Q6dm9pZCAwKSxudWxsPT0oaT10aGlzLlhpKXx8aS5zdG9wKCksdGhpcy5nZXRBbmRDbGVhckJ1ZmZlcigpfX1vblJlbW90ZUNvbmZpZyh0KXt2YXIgaT0hIXQuaGVhdG1hcHM7dGhpcy5pbnN0YW5jZS5wZXJzaXN0ZW5jZSYmdGhpcy5pbnN0YW5jZS5wZXJzaXN0ZW5jZS5yZWdpc3Rlcih7W3V0XTppfSksdGhpcy5xaT1pLHRoaXMuc3RhcnRJZkVuYWJsZWQoKX1nZXRBbmRDbGVhckJ1ZmZlcigpe3ZhciB0PXRoaXMuTTtyZXR1cm4gdGhpcy5NPXZvaWQgMCx0fVFpKHQpe3RoaXMuWmkodC5vcmlnaW5hbEV2ZW50LFwiZGVhZGNsaWNrXCIpfUtpKCl7dCYmbyYmKHN0KHQsXCJiZWZvcmV1bmxvYWRcIix0aGlzLllpLmJpbmQodGhpcykpLHN0KG8sXCJjbGlja1wiLChpPT50aGlzLlppKGl8fChudWxsPT10P3ZvaWQgMDp0LmV2ZW50KSkpLHtjYXB0dXJlOiEwfSksc3QobyxcIm1vdXNlbW92ZVwiLChpPT50aGlzLnRlKGl8fChudWxsPT10P3ZvaWQgMDp0LmV2ZW50KSkpLHtjYXB0dXJlOiEwfSksdGhpcy5YaT1uZXcgcmUodGhpcy5pbnN0YW5jZSxpZSx0aGlzLlFpLmJpbmQodGhpcykpLHRoaXMuWGkuc3RhcnRJZkVuYWJsZWQoKSx0aGlzLmk9ITApfWllKGksZSl7dmFyIHI9dGhpcy5pbnN0YW5jZS5zY3JvbGxNYW5hZ2VyLnNjcm9sbFkoKSxzPXRoaXMuaW5zdGFuY2Uuc2Nyb2xsTWFuYWdlci5zY3JvbGxYKCksbj10aGlzLmluc3RhbmNlLnNjcm9sbE1hbmFnZXIuc2Nyb2xsRWxlbWVudCgpLG89ZnVuY3Rpb24oaSxlLHIpe2Zvcih2YXIgcz1pO3MmJkd0KHMpJiYhSnQocyxcImJvZHlcIik7KXtpZihzPT09cilyZXR1cm4hMTtpZihtKGUsbnVsbD09dD92b2lkIDA6dC5nZXRDb21wdXRlZFN0eWxlKHMpLnBvc2l0aW9uKSlyZXR1cm4hMDtzPXJpKHMpfXJldHVybiExfShpaShpKSxbXCJmaXhlZFwiLFwic3RpY2t5XCJdLG4pO3JldHVybnt4OmkuY2xpZW50WCsobz8wOnMpLHk6aS5jbGllbnRZKyhvPzA6ciksdGFyZ2V0X2ZpeGVkOm8sdHlwZTplfX1aaSh0LGkpe3ZhciBlO2lmKHZvaWQgMD09PWkmJihpPVwiY2xpY2tcIiksIVd0KHQudGFyZ2V0KSYmUHModCkpe3ZhciByPXRoaXMuaWUodCxpKTtudWxsIT0oZT10aGlzLnJhZ2VjbGlja3MpJiZlLmlzUmFnZUNsaWNrKHQuY2xpZW50WCx0LmNsaWVudFksKG5ldyBEYXRlKS5nZXRUaW1lKCkpJiZ0aGlzLmVlKEIoe30scix7dHlwZTpcInJhZ2VjbGlja1wifSkpLHRoaXMuZWUocil9fXRlKHQpeyFXdCh0LnRhcmdldCkmJlBzKHQpJiYoY2xlYXJUaW1lb3V0KHRoaXMucmUpLHRoaXMucmU9c2V0VGltZW91dCgoKCk9Pnt0aGlzLmVlKHRoaXMuaWUodCxcIm1vdXNlbW92ZVwiKSl9KSw1MDApKX1lZShpKXtpZih0KXt2YXIgZT10LmxvY2F0aW9uLmhyZWY7dGhpcy5NPXRoaXMuTXx8e30sdGhpcy5NW2VdfHwodGhpcy5NW2VdPVtdKSx0aGlzLk1bZV0ucHVzaChpKX19WWkoKXt0aGlzLk0mJiFQKHRoaXMuTSkmJnRoaXMuaW5zdGFuY2UuY2FwdHVyZShcIiQkaGVhdG1hcFwiLHskaGVhdG1hcF9kYXRhOnRoaXMuZ2V0QW5kQ2xlYXJCdWZmZXIoKX0pfX1jbGFzcyBUc3tjb25zdHJ1Y3Rvcih0KXt0aGlzLl9pbnN0YW5jZT10fWRvUGFnZVZpZXcoaSxlKXt2YXIgcixzPXRoaXMuc2UoaSxlKTtyZXR1cm4gdGhpcy5uZT17cGF0aG5hbWU6bnVsbCE9PShyPW51bGw9PXQ/dm9pZCAwOnQubG9jYXRpb24ucGF0aG5hbWUpJiZ2b2lkIDAhPT1yP3I6XCJcIixwYWdlVmlld0lkOmUsdGltZXN0YW1wOml9LHRoaXMuX2luc3RhbmNlLnNjcm9sbE1hbmFnZXIucmVzZXRDb250ZXh0KCksc31kb1BhZ2VMZWF2ZSh0KXt2YXIgaTtyZXR1cm4gdGhpcy5zZSh0LG51bGw9PShpPXRoaXMubmUpP3ZvaWQgMDppLnBhZ2VWaWV3SWQpfWRvRXZlbnQoKXt2YXIgdDtyZXR1cm57JHBhZ2V2aWV3X2lkOm51bGw9PSh0PXRoaXMubmUpP3ZvaWQgMDp0LnBhZ2VWaWV3SWR9fXNlKHQsaSl7dmFyIGU9dGhpcy5uZTtpZighZSlyZXR1cm57JHBhZ2V2aWV3X2lkOml9O3ZhciByPXskcGFnZXZpZXdfaWQ6aSwkcHJldl9wYWdldmlld19pZDplLnBhZ2VWaWV3SWR9LHM9dGhpcy5faW5zdGFuY2Uuc2Nyb2xsTWFuYWdlci5nZXRDb250ZXh0KCk7aWYocyYmIXRoaXMuX2luc3RhbmNlLmNvbmZpZy5kaXNhYmxlX3Njcm9sbF9wcm9wZXJ0aWVzKXt2YXJ7bWF4U2Nyb2xsSGVpZ2h0Om4sbGFzdFNjcm9sbFk6byxtYXhTY3JvbGxZOmEsbWF4Q29udGVudEhlaWdodDpsLGxhc3RDb250ZW50WTp1LG1heENvbnRlbnRZOmh9PXM7aWYoIShSKG4pfHxSKG8pfHxSKGEpfHxSKGwpfHxSKHUpfHxSKGgpKSl7bj1NYXRoLmNlaWwobiksbz1NYXRoLmNlaWwobyksYT1NYXRoLmNlaWwoYSksbD1NYXRoLmNlaWwobCksdT1NYXRoLmNlaWwodSksaD1NYXRoLmNlaWwoaCk7dmFyIGQ9bjw9MT8xOlhlKG8vbiwwLDEpLHY9bjw9MT8xOlhlKGEvbiwwLDEpLGM9bDw9MT8xOlhlKHUvbCwwLDEpLGY9bDw9MT8xOlhlKGgvbCwwLDEpO3I9VihyLHskcHJldl9wYWdldmlld19sYXN0X3Njcm9sbDpvLCRwcmV2X3BhZ2V2aWV3X2xhc3Rfc2Nyb2xsX3BlcmNlbnRhZ2U6ZCwkcHJldl9wYWdldmlld19tYXhfc2Nyb2xsOmEsJHByZXZfcGFnZXZpZXdfbWF4X3Njcm9sbF9wZXJjZW50YWdlOnYsJHByZXZfcGFnZXZpZXdfbGFzdF9jb250ZW50OnUsJHByZXZfcGFnZXZpZXdfbGFzdF9jb250ZW50X3BlcmNlbnRhZ2U6YywkcHJldl9wYWdldmlld19tYXhfY29udGVudDpoLCRwcmV2X3BhZ2V2aWV3X21heF9jb250ZW50X3BlcmNlbnRhZ2U6Zn0pfX1yZXR1cm4gZS5wYXRobmFtZSYmKHIuJHByZXZfcGFnZXZpZXdfcGF0aG5hbWU9ZS5wYXRobmFtZSksZS50aW1lc3RhbXAmJihyLiRwcmV2X3BhZ2V2aWV3X2R1cmF0aW9uPSh0LmdldFRpbWUoKS1lLnRpbWVzdGFtcC5nZXRUaW1lKCkpLzFlMykscn19dmFyIE1zPWZ1bmN0aW9uKHQpe3ZhciBpLGUscixzLG49XCJcIjtmb3IoaT1lPTAscj0odD0odCtcIlwiKS5yZXBsYWNlKC9cXHJcXG4vZyxcIlxcblwiKS5yZXBsYWNlKC9cXHIvZyxcIlxcblwiKSkubGVuZ3RoLHM9MDtzPHI7cysrKXt2YXIgbz10LmNoYXJDb2RlQXQocyksYT1udWxsO288MTI4P2UrKzphPW8+MTI3JiZvPDIwNDg/U3RyaW5nLmZyb21DaGFyQ29kZShvPj42fDE5Miw2MyZvfDEyOCk6U3RyaW5nLmZyb21DaGFyQ29kZShvPj4xMnwyMjQsbz4+NiY2M3wxMjgsNjMmb3wxMjgpLEMoYSl8fChlPmkmJihuKz10LnN1YnN0cmluZyhpLGUpKSxuKz1hLGk9ZT1zKzEpfXJldHVybiBlPmkmJihuKz10LnN1YnN0cmluZyhpLHQubGVuZ3RoKSksbn0sQ3M9ISF1fHwhIWwsT3M9XCJ0ZXh0L3BsYWluXCIsRnM9KHQsaSk9Pnt2YXJbZSxyXT10LnNwbGl0KFwiP1wiKSxzPUIoe30saSk7bnVsbD09cnx8ci5zcGxpdChcIiZcIikuZm9yRWFjaCgodD0+e3ZhcltpXT10LnNwbGl0KFwiPVwiKTtkZWxldGUgc1tpXX0pKTt2YXIgbj1TaShzKTtyZXR1cm4gZStcIj9cIisobj1uPyhyP3IrXCImXCI6XCJcIikrbjpyKX0sQXM9KHQsaSk9PkpTT04uc3RyaW5naWZ5KHQsKCh0LGkpPT5cImJpZ2ludFwiPT10eXBlb2YgaT9pLnRvU3RyaW5nKCk6aSksaSksRHM9dD0+e3ZhcntkYXRhOmksY29tcHJlc3Npb246ZX09dDtpZihpKXtpZihlPT09Zy5HWmlwSlMpe3ZhciByPUFyKERyKEFzKGkpKSx7bXRpbWU6MH0pLHM9bmV3IEJsb2IoW3JdLHt0eXBlOk9zfSk7cmV0dXJue2NvbnRlbnRUeXBlOk9zLGJvZHk6cyxlc3RpbWF0ZWRTaXplOnMuc2l6ZX19aWYoZT09PWcuQmFzZTY0KXt2YXIgbj1mdW5jdGlvbih0KXt2YXIgaSxlLHIscyxuLG89XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiLGE9MCxsPTAsdT1cIlwiLGg9W107aWYoIXQpcmV0dXJuIHQ7dD1Ncyh0KTtkb3tpPShuPXQuY2hhckNvZGVBdChhKyspPDwxNnx0LmNoYXJDb2RlQXQoYSsrKTw8OHx0LmNoYXJDb2RlQXQoYSsrKSk+PjE4JjYzLGU9bj4+MTImNjMscj1uPj42JjYzLHM9NjMmbixoW2wrK109by5jaGFyQXQoaSkrby5jaGFyQXQoZSkrby5jaGFyQXQocikrby5jaGFyQXQocyl9d2hpbGUoYTx0Lmxlbmd0aCk7c3dpdGNoKHU9aC5qb2luKFwiXCIpLHQubGVuZ3RoJTMpe2Nhc2UgMTp1PXUuc2xpY2UoMCwtMikrXCI9PVwiO2JyZWFrO2Nhc2UgMjp1PXUuc2xpY2UoMCwtMSkrXCI9XCJ9cmV0dXJuIHV9KEFzKGkpKSxvPSh0PT5cImRhdGE9XCIrZW5jb2RlVVJJQ29tcG9uZW50KFwic3RyaW5nXCI9PXR5cGVvZiB0P3Q6QXModCkpKShuKTtyZXR1cm57Y29udGVudFR5cGU6XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixib2R5Om8sZXN0aW1hdGVkU2l6ZTpuZXcgQmxvYihbb10pLnNpemV9fXZhciBhPUFzKGkpO3JldHVybntjb250ZW50VHlwZTpcImFwcGxpY2F0aW9uL2pzb25cIixib2R5OmEsZXN0aW1hdGVkU2l6ZTpuZXcgQmxvYihbYV0pLnNpemV9fX0sTHM9W107bCYmTHMucHVzaCh7dHJhbnNwb3J0OlwiZmV0Y2hcIixtZXRob2Q6dD0+e3ZhciBpLGUse2NvbnRlbnRUeXBlOnIsYm9keTpzLGVzdGltYXRlZFNpemU6bn09bnVsbCE9PShpPURzKHQpKSYmdm9pZCAwIT09aT9pOnt9LG89bmV3IEhlYWRlcnM7Sih0LmhlYWRlcnMsKGZ1bmN0aW9uKHQsaSl7by5hcHBlbmQoaSx0KX0pKSxyJiZvLmFwcGVuZChcIkNvbnRlbnQtVHlwZVwiLHIpO3ZhciBhPXQudXJsLHU9bnVsbDtpZihoKXt2YXIgZD1uZXcgaDt1PXtzaWduYWw6ZC5zaWduYWwsdGltZW91dDpzZXRUaW1lb3V0KCgoKT0+ZC5hYm9ydCgpKSx0LnRpbWVvdXQpfX1sKGEsQih7bWV0aG9kOihudWxsPT10P3ZvaWQgMDp0Lm1ldGhvZCl8fFwiR0VUXCIsaGVhZGVyczpvLGtlZXBhbGl2ZTpcIlBPU1RcIj09PXQubWV0aG9kJiYobnx8MCk8NTI0MjguOCxib2R5OnMsc2lnbmFsOm51bGw9PShlPXUpP3ZvaWQgMDplLnNpZ25hbH0sdC5mZXRjaE9wdGlvbnMpKS50aGVuKChpPT5pLnRleHQoKS50aGVuKChlPT57dmFyIHI9e3N0YXR1c0NvZGU6aS5zdGF0dXMsdGV4dDplfTtpZigyMDA9PT1pLnN0YXR1cyl0cnl7ci5qc29uPUpTT04ucGFyc2UoZSl9Y2F0Y2godCl7ai5lcnJvcih0KX1udWxsPT10LmNhbGxiYWNrfHx0LmNhbGxiYWNrKHIpfSkpKSkuY2F0Y2goKGk9PntqLmVycm9yKGkpLG51bGw9PXQuY2FsbGJhY2t8fHQuY2FsbGJhY2soe3N0YXR1c0NvZGU6MCx0ZXh0Oml9KX0pKS5maW5hbGx5KCgoKT0+dT9jbGVhclRpbWVvdXQodS50aW1lb3V0KTpudWxsKSl9fSksdSYmTHMucHVzaCh7dHJhbnNwb3J0OlwiWEhSXCIsbWV0aG9kOnQ9Pnt2YXIgaSxlPW5ldyB1O2Uub3Blbih0Lm1ldGhvZHx8XCJHRVRcIix0LnVybCwhMCk7dmFye2NvbnRlbnRUeXBlOnIsYm9keTpzfT1udWxsIT09KGk9RHModCkpJiZ2b2lkIDAhPT1pP2k6e307Sih0LmhlYWRlcnMsKGZ1bmN0aW9uKHQsaSl7ZS5zZXRSZXF1ZXN0SGVhZGVyKGksdCl9KSksciYmZS5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsciksdC50aW1lb3V0JiYoZS50aW1lb3V0PXQudGltZW91dCksZS53aXRoQ3JlZGVudGlhbHM9ITAsZS5vbnJlYWR5c3RhdGVjaGFuZ2U9KCk9PntpZig0PT09ZS5yZWFkeVN0YXRlKXt2YXIgaT17c3RhdHVzQ29kZTplLnN0YXR1cyx0ZXh0OmUucmVzcG9uc2VUZXh0fTtpZigyMDA9PT1lLnN0YXR1cyl0cnl7aS5qc29uPUpTT04ucGFyc2UoZS5yZXNwb25zZVRleHQpfWNhdGNoKHQpe31udWxsPT10LmNhbGxiYWNrfHx0LmNhbGxiYWNrKGkpfX0sZS5zZW5kKHMpfX0pLG51bGwhPW4mJm4uc2VuZEJlYWNvbiYmTHMucHVzaCh7dHJhbnNwb3J0Olwic2VuZEJlYWNvblwiLG1ldGhvZDp0PT57dmFyIGk9RnModC51cmwse2JlYWNvbjpcIjFcIn0pO3RyeXt2YXIgZSx7Y29udGVudFR5cGU6cixib2R5OnN9PW51bGwhPT0oZT1Ecyh0KSkmJnZvaWQgMCE9PWU/ZTp7fSxvPVwic3RyaW5nXCI9PXR5cGVvZiBzP25ldyBCbG9iKFtzXSx7dHlwZTpyfSk6cztuLnNlbmRCZWFjb24oaSxvKX1jYXRjaCh0KXt9fX0pO3ZhciBOcz1mdW5jdGlvbih0LGkpe2lmKCFmdW5jdGlvbih0KXt0cnl7bmV3IFJlZ0V4cCh0KX1jYXRjaCh0KXtyZXR1cm4hMX1yZXR1cm4hMH0oaSkpcmV0dXJuITE7dHJ5e3JldHVybiBuZXcgUmVnRXhwKGkpLnRlc3QodCl9Y2F0Y2godCl7cmV0dXJuITF9fTtmdW5jdGlvbiBqcyh0LGksZSl7cmV0dXJuIEFzKHtkaXN0aW5jdF9pZDp0LHVzZXJQcm9wZXJ0aWVzVG9TZXQ6aSx1c2VyUHJvcGVydGllc1RvU2V0T25jZTplfSl9dmFyIHpzPXtleGFjdDoodCxpKT0+aS5zb21lKChpPT50LnNvbWUoKHQ9Pmk9PT10KSkpKSxpc19ub3Q6KHQsaSk9PmkuZXZlcnkoKGk9PnQuZXZlcnkoKHQ9PmkhPT10KSkpKSxyZWdleDoodCxpKT0+aS5zb21lKChpPT50LnNvbWUoKHQ9Pk5zKGksdCkpKSkpLG5vdF9yZWdleDoodCxpKT0+aS5ldmVyeSgoaT0+dC5ldmVyeSgodD0+IU5zKGksdCkpKSkpLGljb250YWluczoodCxpKT0+aS5tYXAoVXMpLnNvbWUoKGk9PnQubWFwKFVzKS5zb21lKCh0PT5pLmluY2x1ZGVzKHQpKSkpKSxub3RfaWNvbnRhaW5zOih0LGkpPT5pLm1hcChVcykuZXZlcnkoKGk9PnQubWFwKFVzKS5ldmVyeSgodD0+IWkuaW5jbHVkZXModCkpKSkpfSxVcz10PT50LnRvTG93ZXJDYXNlKCkscXM9eihcIltFcnJvciB0cmFja2luZ11cIik7Y2xhc3MgQnN7Y29uc3RydWN0b3IodCl7dmFyIGksZTt0aGlzLm9lPVtdLHRoaXMuX2luc3RhbmNlPXQsdGhpcy5vZT1udWxsIT09KGk9bnVsbD09KGU9dGhpcy5faW5zdGFuY2UucGVyc2lzdGVuY2UpP3ZvaWQgMDplLmdldF9wcm9wZXJ0eShkdCkpJiZ2b2lkIDAhPT1pP2k6W119b25SZW1vdGVDb25maWcodCl7dmFyIGksZSxyPW51bGwhPT0oaT1udWxsPT0oZT10LmVycm9yVHJhY2tpbmcpP3ZvaWQgMDplLnN1cHByZXNzaW9uUnVsZXMpJiZ2b2lkIDAhPT1pP2k6W107dGhpcy5vZT1yLHRoaXMuX2luc3RhbmNlLnBlcnNpc3RlbmNlJiZ0aGlzLl9pbnN0YW5jZS5wZXJzaXN0ZW5jZS5yZWdpc3Rlcih7W2R0XTp0aGlzLm9lfSl9c2VuZEV4Y2VwdGlvbkV2ZW50KHQpe3RoaXMuYWUodCk/cXMuaW5mbyhcIlNraXBwaW5nIGV4Y2VwdGlvbiBjYXB0dXJlIGJlY2F1c2UgYSBzdXBwcmVzc2lvbiBydWxlIG1hdGNoZWRcIik6dGhpcy5faW5zdGFuY2UuY2FwdHVyZShcIiRleGNlcHRpb25cIix0LHtfbm9UcnVuY2F0ZTohMCxfYmF0Y2hLZXk6XCJleGNlcHRpb25FdmVudFwifSl9YWUodCl7dmFyIGk9dC4kZXhjZXB0aW9uX2xpc3Q7aWYoIWl8fCF4KGkpfHwwPT09aS5sZW5ndGgpcmV0dXJuITE7dmFyIGU9aS5yZWR1Y2UoKCh0LGkpPT57dmFye3R5cGU6ZSx2YWx1ZTpyfT1pO3JldHVybiBUKGUpJiZlLmxlbmd0aD4wJiZ0LiRleGNlcHRpb25fdHlwZXMucHVzaChlKSxUKHIpJiZyLmxlbmd0aD4wJiZ0LiRleGNlcHRpb25fbWVzc2FnZXMucHVzaChyKSx0fSkseyRleGNlcHRpb25fdHlwZXM6W10sJGV4Y2VwdGlvbl9tZXNzYWdlczpbXX0pO3JldHVybiB0aGlzLm9lLnNvbWUoKHQ9Pnt2YXIgaT10LnZhbHVlcy5tYXAoKHQ9Pnt2YXIgaT16c1t0Lm9wZXJhdG9yXSxyPXgodC52YWx1ZSk/dC52YWx1ZTpbdC52YWx1ZV0scz1lW3Qua2V5XTtyZXR1cm4gci5sZW5ndGg+MCYmaShyLHMpfSkpO3JldHVyblwiT1JcIj09PXQudHlwZT9pLnNvbWUoQm9vbGVhbik6aS5ldmVyeShCb29sZWFuKX0pKX19dmFyIEhzPVwiTW9iaWxlXCIsV3M9XCJpT1NcIixHcz1cIkFuZHJvaWRcIixKcz1cIlRhYmxldFwiLFZzPUdzK1wiIFwiK0pzLEtzPVwiaVBhZFwiLFlzPVwiQXBwbGVcIixYcz1ZcytcIiBXYXRjaFwiLFFzPVwiU2FmYXJpXCIsWnM9XCJCbGFja0JlcnJ5XCIsdG49XCJTYW1zdW5nXCIsZW49dG4rXCJCcm93c2VyXCIscm49dG4rXCIgSW50ZXJuZXRcIixzbj1cIkNocm9tZVwiLG5uPXNuK1wiIE9TXCIsb249c24rXCIgXCIrV3MsYW49XCJJbnRlcm5ldCBFeHBsb3JlclwiLGxuPWFuK1wiIFwiK0hzLHVuPVwiT3BlcmFcIixobj11bitcIiBNaW5pXCIsZG49XCJFZGdlXCIsdm49XCJNaWNyb3NvZnQgXCIrZG4sY249XCJGaXJlZm94XCIsZm49Y24rXCIgXCIrV3MscG49XCJOaW50ZW5kb1wiLGduPVwiUGxheVN0YXRpb25cIixfbj1cIlhib3hcIixtbj1HcytcIiBcIitIcyxibj1IcytcIiBcIitRcyx3bj1cIldpbmRvd3NcIix5bj13bitcIiBQaG9uZVwiLFNuPVwiTm9raWFcIiwkbj1cIk91eWFcIixrbj1cIkdlbmVyaWNcIix4bj1rbitcIiBcIitIcy50b0xvd2VyQ2FzZSgpLEVuPWtuK1wiIFwiK0pzLnRvTG93ZXJDYXNlKCksSW49XCJLb25xdWVyb3JcIixQbj1cIihcXFxcZCsoXFxcXC5cXFxcZCspPylcIixSbj1uZXcgUmVnRXhwKFwiVmVyc2lvbi9cIitQbiksVG49bmV3IFJlZ0V4cChfbixcImlcIiksTW49bmV3IFJlZ0V4cChnbitcIiBcXFxcdytcIixcImlcIiksQ249bmV3IFJlZ0V4cChwbitcIiBcXFxcdytcIixcImlcIiksT249bmV3IFJlZ0V4cChacytcInxQbGF5Qm9va3xCQjEwXCIsXCJpXCIpLEZuPXtcIk5UMy41MVwiOlwiTlQgMy4xMVwiLFwiTlQ0LjBcIjpcIk5UIDQuMFwiLFwiNS4wXCI6XCIyMDAwXCIsNS4xOlwiWFBcIiw1LjI6XCJYUFwiLFwiNi4wXCI6XCJWaXN0YVwiLDYuMTpcIjdcIiw2LjI6XCI4XCIsNi4zOlwiOC4xXCIsNi40OlwiMTBcIixcIjEwLjBcIjpcIjEwXCJ9O3ZhciBBbj0odCxpKT0+aSYmbShpLFlzKXx8ZnVuY3Rpb24odCl7cmV0dXJuIG0odCxRcykmJiFtKHQsc24pJiYhbSh0LEdzKX0odCksRG49ZnVuY3Rpb24odCxpKXtyZXR1cm4gaT1pfHxcIlwiLG0odCxcIiBPUFIvXCIpJiZtKHQsXCJNaW5pXCIpP2huOm0odCxcIiBPUFIvXCIpP3VuOk9uLnRlc3QodCk/WnM6bSh0LFwiSUVcIitIcyl8fG0odCxcIldQRGVza3RvcFwiKT9sbjptKHQsZW4pP3JuOm0odCxkbil8fG0odCxcIkVkZy9cIik/dm46bSh0LFwiRkJJT1NcIik/XCJGYWNlYm9vayBcIitIczptKHQsXCJVQ1dFQlwiKXx8bSh0LFwiVUNCcm93c2VyXCIpP1wiVUMgQnJvd3NlclwiOm0odCxcIkNyaU9TXCIpP29uOm0odCxcIkNyTW9cIil8fG0odCxzbik/c246bSh0LEdzKSYmbSh0LFFzKT9tbjptKHQsXCJGeGlPU1wiKT9mbjptKHQudG9Mb3dlckNhc2UoKSxJbi50b0xvd2VyQ2FzZSgpKT9JbjpBbih0LGkpP20odCxIcyk/Ym46UXM6bSh0LGNuKT9jbjptKHQsXCJNU0lFXCIpfHxtKHQsXCJUcmlkZW50L1wiKT9hbjptKHQsXCJHZWNrb1wiKT9jbjpcIlwifSxMbj17W2xuXTpbbmV3IFJlZ0V4cChcInJ2OlwiK1BuKV0sW3ZuXTpbbmV3IFJlZ0V4cChkbitcIj9cXFxcL1wiK1BuKV0sW3NuXTpbbmV3IFJlZ0V4cChcIihcIitzbitcInxDck1vKVxcXFwvXCIrUG4pXSxbb25dOltuZXcgUmVnRXhwKFwiQ3JpT1NcXFxcL1wiK1BuKV0sXCJVQyBCcm93c2VyXCI6W25ldyBSZWdFeHAoXCIoVUNCcm93c2VyfFVDV0VCKVxcXFwvXCIrUG4pXSxbUXNdOltSbl0sW2JuXTpbUm5dLFt1bl06W25ldyBSZWdFeHAoXCIoT3BlcmF8T1BSKVxcXFwvXCIrUG4pXSxbY25dOltuZXcgUmVnRXhwKGNuK1wiXFxcXC9cIitQbildLFtmbl06W25ldyBSZWdFeHAoXCJGeGlPU1xcXFwvXCIrUG4pXSxbSW5dOltuZXcgUmVnRXhwKFwiS29ucXVlcm9yWzovXT9cIitQbixcImlcIildLFtac106W25ldyBSZWdFeHAoWnMrXCIgXCIrUG4pLFJuXSxbbW5dOltuZXcgUmVnRXhwKFwiYW5kcm9pZFxcXFxzXCIrUG4sXCJpXCIpXSxbcm5dOltuZXcgUmVnRXhwKGVuK1wiXFxcXC9cIitQbildLFthbl06W25ldyBSZWdFeHAoXCIocnY6fE1TSUUgKVwiK1BuKV0sTW96aWxsYTpbbmV3IFJlZ0V4cChcInJ2OlwiK1BuKV19LE5uPWZ1bmN0aW9uKHQsaSl7dmFyIGU9RG4odCxpKSxyPUxuW2VdO2lmKFIocikpcmV0dXJuIG51bGw7Zm9yKHZhciBzPTA7czxyLmxlbmd0aDtzKyspe3ZhciBuPXJbc10sbz10Lm1hdGNoKG4pO2lmKG8pcmV0dXJuIHBhcnNlRmxvYXQob1tvLmxlbmd0aC0yXSl9cmV0dXJuIG51bGx9LGpuPVtbbmV3IFJlZ0V4cChfbitcIjsgXCIrX24rXCIgKC4qPylbKTtdXCIsXCJpXCIpLHQ9Pltfbix0JiZ0WzFdfHxcIlwiXV0sW25ldyBSZWdFeHAocG4sXCJpXCIpLFtwbixcIlwiXV0sW25ldyBSZWdFeHAoZ24sXCJpXCIpLFtnbixcIlwiXV0sW09uLFtacyxcIlwiXV0sW25ldyBSZWdFeHAod24sXCJpXCIpLCh0LGkpPT57aWYoL1Bob25lLy50ZXN0KGkpfHwvV1BEZXNrdG9wLy50ZXN0KGkpKXJldHVyblt5bixcIlwiXTtpZihuZXcgUmVnRXhwKEhzKS50ZXN0KGkpJiYhL0lFTW9iaWxlXFxiLy50ZXN0KGkpKXJldHVyblt3bitcIiBcIitIcyxcIlwiXTt2YXIgZT0vV2luZG93cyBOVCAoWzAtOS5dKykvaS5leGVjKGkpO2lmKGUmJmVbMV0pe3ZhciByPWVbMV0scz1GbltyXXx8XCJcIjtyZXR1cm4vYXJtL2kudGVzdChpKSYmKHM9XCJSVFwiKSxbd24sc119cmV0dXJuW3duLFwiXCJdfV0sWy8oKGlQaG9uZXxpUGFkfGlQb2QpLio/T1MgKFxcZCspXyhcXGQrKV8/KFxcZCspP3xpUGhvbmUpLyx0PT57aWYodCYmdFszXSl7dmFyIGk9W3RbM10sdFs0XSx0WzVdfHxcIjBcIl07cmV0dXJuW1dzLGkuam9pbihcIi5cIildfXJldHVybltXcyxcIlwiXX1dLFsvKHdhdGNoLipcXC8oXFxkK1xcLlxcZCtcXC5cXGQrKXx3YXRjaCBvcywoXFxkK1xcLlxcZCspLCkvaSx0PT57dmFyIGk9XCJcIjtyZXR1cm4gdCYmdC5sZW5ndGg+PTMmJihpPVIodFsyXSk/dFszXTp0WzJdKSxbXCJ3YXRjaE9TXCIsaV19XSxbbmV3IFJlZ0V4cChcIihcIitHcytcIiAoXFxcXGQrKVxcXFwuKFxcXFxkKylcXFxcLj8oXFxcXGQrKT98XCIrR3MrXCIpXCIsXCJpXCIpLHQ9PntpZih0JiZ0WzJdKXt2YXIgaT1bdFsyXSx0WzNdLHRbNF18fFwiMFwiXTtyZXR1cm5bR3MsaS5qb2luKFwiLlwiKV19cmV0dXJuW0dzLFwiXCJdfV0sWy9NYWMgT1MgWCAoXFxkKylbXy5dKFxcZCspW18uXT8oXFxkKyk/L2ksdD0+e3ZhciBpPVtcIk1hYyBPUyBYXCIsXCJcIl07aWYodCYmdFsxXSl7dmFyIGU9W3RbMV0sdFsyXSx0WzNdfHxcIjBcIl07aVsxXT1lLmpvaW4oXCIuXCIpfXJldHVybiBpfV0sWy9NYWMvaSxbXCJNYWMgT1MgWFwiLFwiXCJdXSxbL0NyT1MvLFtubixcIlwiXV0sWy9MaW51eHxkZWJpYW4vaSxbXCJMaW51eFwiLFwiXCJdXV0sem49ZnVuY3Rpb24odCl7cmV0dXJuIENuLnRlc3QodCk/cG46TW4udGVzdCh0KT9nbjpUbi50ZXN0KHQpP19uOm5ldyBSZWdFeHAoJG4sXCJpXCIpLnRlc3QodCk/JG46bmV3IFJlZ0V4cChcIihcIit5bitcInxXUERlc2t0b3ApXCIsXCJpXCIpLnRlc3QodCk/eW46L2lQYWQvLnRlc3QodCk/S3M6L2lQb2QvLnRlc3QodCk/XCJpUG9kIFRvdWNoXCI6L2lQaG9uZS8udGVzdCh0KT9cImlQaG9uZVwiOi8od2F0Y2gpKD86ID9vc1ssL118XFxkLFxcZFxcLylbXFxkLl0rL2kudGVzdCh0KT9YczpPbi50ZXN0KHQpP1pzOi8oa29ibylcXHMoZXJlYWRlcnx0b3VjaCkvaS50ZXN0KHQpP1wiS29ib1wiOm5ldyBSZWdFeHAoU24sXCJpXCIpLnRlc3QodCk/U246LyhrZlthLXpdezJ9d2l8YWVvW2Mtcl17Mn0pKCBidWl8XFwpKS9pLnRlc3QodCl8fC8oa2ZbYS16XSspKCBidWl8XFwpKS4rc2lsa1xcLy9pLnRlc3QodCk/XCJLaW5kbGUgRmlyZVwiOi8oQW5kcm9pZHxaVEUpL2kudGVzdCh0KT8hbmV3IFJlZ0V4cChIcykudGVzdCh0KXx8Lyg5MTM4QnxUQjc4MkJ8TmV4dXMgWzk3XXxwaXhlbCBjfEhVQVdFSVNIVHxCVFZ8bm9ibGUgbm9va3xzbWFydCB1bHRyYSA2KS9pLnRlc3QodCk/L3BpeGVsW1xcZGF4bCBdezEsNn0vaS50ZXN0KHQpJiYhL3BpeGVsIGMvaS50ZXN0KHQpfHwvKGh1YXdlaW1lZC1hbDAwfHRhaC18QVBBfFNNLUc5MnxpOTgwfHp0ZXxVMzA0QUEpL2kudGVzdCh0KXx8L2xteTQ3di9pLnRlc3QodCkmJiEvUVRBUVozL2kudGVzdCh0KT9HczpWczpHczpuZXcgUmVnRXhwKFwiKHBkYXxcIitIcytcIilcIixcImlcIikudGVzdCh0KT94bjpuZXcgUmVnRXhwKEpzLFwiaVwiKS50ZXN0KHQpJiYhbmV3IFJlZ0V4cChKcytcIiBwY1wiLFwiaVwiKS50ZXN0KHQpP0VuOlwiXCJ9LFVuPVwiaHR0cHM/Oi8vKC4qKVwiLHFuPVtcImdjbGlkXCIsXCJnY2xzcmNcIixcImRjbGlkXCIsXCJnYnJhaWRcIixcIndicmFpZFwiLFwiZmJjbGlkXCIsXCJtc2Nsa2lkXCIsXCJ0d2NsaWRcIixcImxpX2ZhdF9pZFwiLFwiaWdzaGlkXCIsXCJ0dGNsaWRcIixcInJkdF9jaWRcIixcImVwaWtcIixcInFjbGlkXCIsXCJzY2NpZFwiLFwiaXJjbGlkXCIsXCJfa3hcIl0sQm49SyhbXCJ1dG1fc291cmNlXCIsXCJ1dG1fbWVkaXVtXCIsXCJ1dG1fY2FtcGFpZ25cIixcInV0bV9jb250ZW50XCIsXCJ1dG1fdGVybVwiLFwiZ2FkX3NvdXJjZVwiLFwibWNfY2lkXCJdLHFuKSxIbj1cIjxtYXNrZWQ+XCI7ZnVuY3Rpb24gV24odCxpLGUpe2lmKCFvKXJldHVybnt9O3ZhciByPWk/SyhbXSxxbixlfHxbXSk6W107cmV0dXJuIEduKGtpKG8uVVJMLHIsSG4pLHQpfWZ1bmN0aW9uIEduKHQsaSl7dmFyIGU9Qm4uY29uY2F0KGl8fFtdKSxyPXt9O3JldHVybiBKKGUsKGZ1bmN0aW9uKGkpe3ZhciBlPSRpKHQsaSk7cltpXT1lfHxudWxsfSkpLHJ9ZnVuY3Rpb24gSm4odCl7dmFyIGk9ZnVuY3Rpb24odCl7cmV0dXJuIHQ/MD09PXQuc2VhcmNoKFVuK1wiZ29vZ2xlLihbXi8/XSopXCIpP1wiZ29vZ2xlXCI6MD09PXQuc2VhcmNoKFVuK1wiYmluZy5jb21cIik/XCJiaW5nXCI6MD09PXQuc2VhcmNoKFVuK1wieWFob28uY29tXCIpP1wieWFob29cIjowPT09dC5zZWFyY2goVW4rXCJkdWNrZHVja2dvLmNvbVwiKT9cImR1Y2tkdWNrZ29cIjpudWxsOm51bGx9KHQpLGU9XCJ5YWhvb1wiIT1pP1wicVwiOlwicFwiLHI9e307aWYoIUMoaSkpe3IuJHNlYXJjaF9lbmdpbmU9aTt2YXIgcz1vPyRpKG8ucmVmZXJyZXIsZSk6XCJcIjtzLmxlbmd0aCYmKHIucGhfa2V5d29yZD1zKX1yZXR1cm4gcn1mdW5jdGlvbiBWbigpe3JldHVybiBuYXZpZ2F0b3IubGFuZ3VhZ2V8fG5hdmlnYXRvci51c2VyTGFuZ3VhZ2V9ZnVuY3Rpb24gS24oKXtyZXR1cm4obnVsbD09bz92b2lkIDA6by5yZWZlcnJlcil8fFwiJGRpcmVjdFwifWZ1bmN0aW9uIFluKHQsaSl7dmFyIGU9dD9LKFtdLHFuLGl8fFtdKTpbXSxyPW51bGw9PWE/dm9pZCAwOmEuaHJlZi5zdWJzdHJpbmcoMCwxZTMpO3JldHVybntyOktuKCkuc3Vic3RyaW5nKDAsMWUzKSx1OnI/a2kocixlLEhuKTp2b2lkIDB9fWZ1bmN0aW9uIFhuKHQpe3ZhciBpLHtyOmUsdTpyfT10LHM9eyRyZWZlcnJlcjplLCRyZWZlcnJpbmdfZG9tYWluOm51bGw9PWU/dm9pZCAwOlwiJGRpcmVjdFwiPT1lP1wiJGRpcmVjdFwiOm51bGw9PShpPXlpKGUpKT92b2lkIDA6aS5ob3N0fTtpZihyKXtzLiRjdXJyZW50X3VybD1yO3ZhciBuPXlpKHIpO3MuJGhvc3Q9bnVsbD09bj92b2lkIDA6bi5ob3N0LHMuJHBhdGhuYW1lPW51bGw9PW4/dm9pZCAwOm4ucGF0aG5hbWU7dmFyIG89R24ocik7VihzLG8pfWlmKGUpe3ZhciBhPUpuKGUpO1YocyxhKX1yZXR1cm4gc31mdW5jdGlvbiBRbigpe3RyeXtyZXR1cm4gSW50bC5EYXRlVGltZUZvcm1hdCgpLnJlc29sdmVkT3B0aW9ucygpLnRpbWVab25lfWNhdGNoKHQpe3JldHVybn19ZnVuY3Rpb24gWm4oKXt0cnl7cmV0dXJuKG5ldyBEYXRlKS5nZXRUaW1lem9uZU9mZnNldCgpfWNhdGNoKHQpe3JldHVybn19ZnVuY3Rpb24gdG8oaSxlKXtpZighZClyZXR1cm57fTt2YXIgcixzLG4sbz1pP0soW10scW4sZXx8W10pOltdLFtsLHVdPWZ1bmN0aW9uKHQpe2Zvcih2YXIgaT0wO2k8am4ubGVuZ3RoO2krKyl7dmFyW2Uscl09am5baV0scz1lLmV4ZWModCksbj1zJiYoRShyKT9yKHMsdCk6cik7aWYobilyZXR1cm4gbn1yZXR1cm5bXCJcIixcIlwiXX0oZCk7cmV0dXJuIFYoWih7JG9zOmwsJG9zX3ZlcnNpb246dSwkYnJvd3NlcjpEbihkLG5hdmlnYXRvci52ZW5kb3IpLCRkZXZpY2U6em4oZCksJGRldmljZV90eXBlOihzPWQsbj16bihzKSxuPT09S3N8fG49PT1Wc3x8XCJLb2JvXCI9PT1ufHxcIktpbmRsZSBGaXJlXCI9PT1ufHxuPT09RW4/SnM6bj09PXBufHxuPT09X258fG49PT1nbnx8bj09PSRuP1wiQ29uc29sZVwiOm49PT1Ycz9cIldlYXJhYmxlXCI6bj9IczpcIkRlc2t0b3BcIiksJHRpbWV6b25lOlFuKCksJHRpbWV6b25lX29mZnNldDpabigpfSkseyRjdXJyZW50X3VybDpraShudWxsPT1hP3ZvaWQgMDphLmhyZWYsbyxIbiksJGhvc3Q6bnVsbD09YT92b2lkIDA6YS5ob3N0LCRwYXRobmFtZTpudWxsPT1hP3ZvaWQgMDphLnBhdGhuYW1lLCRyYXdfdXNlcl9hZ2VudDpkLmxlbmd0aD4xZTM/ZC5zdWJzdHJpbmcoMCw5OTcpK1wiLi4uXCI6ZCwkYnJvd3Nlcl92ZXJzaW9uOk5uKGQsbmF2aWdhdG9yLnZlbmRvciksJGJyb3dzZXJfbGFuZ3VhZ2U6Vm4oKSwkYnJvd3Nlcl9sYW5ndWFnZV9wcmVmaXg6KHI9Vm4oKSxcInN0cmluZ1wiPT10eXBlb2Ygcj9yLnNwbGl0KFwiLVwiKVswXTp2b2lkIDApLCRzY3JlZW5faGVpZ2h0Om51bGw9PXQ/dm9pZCAwOnQuc2NyZWVuLmhlaWdodCwkc2NyZWVuX3dpZHRoOm51bGw9PXQ/dm9pZCAwOnQuc2NyZWVuLndpZHRoLCR2aWV3cG9ydF9oZWlnaHQ6bnVsbD09dD92b2lkIDA6dC5pbm5lckhlaWdodCwkdmlld3BvcnRfd2lkdGg6bnVsbD09dD92b2lkIDA6dC5pbm5lcldpZHRoLCRsaWI6XCJ3ZWJcIiwkbGliX3ZlcnNpb246Yy5MSUJfVkVSU0lPTiwkaW5zZXJ0X2lkOk1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLDEwKStNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwxMCksJHRpbWU6RGF0ZS5ub3coKS8xZTN9KX12YXIgaW89eihcIltGZWF0dXJlRmxhZ3NdXCIpLGVvPVwiJGFjdGl2ZV9mZWF0dXJlX2ZsYWdzXCIscm89XCIkb3ZlcnJpZGVfZmVhdHVyZV9mbGFnc1wiLHNvPVwiJGZlYXR1cmVfZmxhZ19wYXlsb2Fkc1wiLG5vPVwiJG92ZXJyaWRlX2ZlYXR1cmVfZmxhZ19wYXlsb2Fkc1wiLG9vPVwiJGZlYXR1cmVfZmxhZ19yZXF1ZXN0X2lkXCIsYW89dD0+e3ZhciBpPXt9O2Zvcih2YXJbZSxyXW9mIFkodHx8e30pKXImJihpW2VdPXIpO3JldHVybiBpfSxsbz10PT57dmFyIGk9dC5mbGFncztyZXR1cm4gaT8odC5mZWF0dXJlRmxhZ3M9T2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5rZXlzKGkpLm1hcCgodD0+e3ZhciBlO3JldHVyblt0LG51bGwhPT0oZT1pW3RdLnZhcmlhbnQpJiZ2b2lkIDAhPT1lP2U6aVt0XS5lbmFibGVkXX0pKSksdC5mZWF0dXJlRmxhZ1BheWxvYWRzPU9iamVjdC5mcm9tRW50cmllcyhPYmplY3Qua2V5cyhpKS5maWx0ZXIoKHQ9PmlbdF0uZW5hYmxlZCkpLmZpbHRlcigodD0+e3ZhciBlO3JldHVybiBudWxsPT0oZT1pW3RdLm1ldGFkYXRhKT92b2lkIDA6ZS5wYXlsb2FkfSkpLm1hcCgodD0+e3ZhciBlO3JldHVyblt0LG51bGw9PShlPWlbdF0ubWV0YWRhdGEpP3ZvaWQgMDplLnBheWxvYWRdfSkpKSk6aW8ud2FybihcIlVzaW5nIGFuIG9sZGVyIHZlcnNpb24gb2YgdGhlIGZlYXR1cmUgZmxhZ3MgZW5kcG9pbnQuIFBsZWFzZSB1cGdyYWRlIHlvdXIgUG9zdEhvZyBzZXJ2ZXIgdG8gdGhlIGxhdGVzdCB2ZXJzaW9uXCIpLHR9LHVvPWZ1bmN0aW9uKHQpe3JldHVybiB0LkZlYXR1cmVGbGFncz1cImZlYXR1cmVfZmxhZ3NcIix0LlJlY29yZGluZ3M9XCJyZWNvcmRpbmdzXCIsdH0oe30pO2NsYXNzIGhve2NvbnN0cnVjdG9yKHQpe3RoaXMubGU9ITEsdGhpcy51ZT0hMSx0aGlzLmhlPSExLHRoaXMuZGU9ITEsdGhpcy52ZT0hMSx0aGlzLmNlPSExLHRoaXMuZmU9ITEsdGhpcy5faW5zdGFuY2U9dCx0aGlzLmZlYXR1cmVGbGFnRXZlbnRIYW5kbGVycz1bXX1kZWNpZGUoKXtpZih0aGlzLl9pbnN0YW5jZS5jb25maWcuX19wcmV2aWV3X3JlbW90ZV9jb25maWcpdGhpcy5jZT0hMDtlbHNle3ZhciB0PSF0aGlzLnBlJiYodGhpcy5faW5zdGFuY2UuY29uZmlnLmFkdmFuY2VkX2Rpc2FibGVfZmVhdHVyZV9mbGFnc3x8dGhpcy5faW5zdGFuY2UuY29uZmlnLmFkdmFuY2VkX2Rpc2FibGVfZmVhdHVyZV9mbGFnc19vbl9maXJzdF9sb2FkKTt0aGlzLmdlKHtkaXNhYmxlRmxhZ3M6dH0pfX1nZXQgaGFzTG9hZGVkRmxhZ3MoKXtyZXR1cm4gdGhpcy51ZX1nZXRGbGFncygpe3JldHVybiBPYmplY3Qua2V5cyh0aGlzLmdldEZsYWdWYXJpYW50cygpKX1nZXRGbGFnc1dpdGhEZXRhaWxzKCl7dmFyIHQ9dGhpcy5faW5zdGFuY2UuZ2V0X3Byb3BlcnR5KFJ0KSxpPXRoaXMuX2luc3RhbmNlLmdldF9wcm9wZXJ0eShybyksZT10aGlzLl9pbnN0YW5jZS5nZXRfcHJvcGVydHkobm8pO2lmKCFlJiYhaSlyZXR1cm4gdHx8e307dmFyIHI9Vih7fSx0fHx7fSkscz1bLi4ubmV3IFNldChbLi4uT2JqZWN0LmtleXMoZXx8e30pLC4uLk9iamVjdC5rZXlzKGl8fHt9KV0pXTtmb3IodmFyIG4gb2Ygcyl7dmFyIG8sYSxsPXJbbl0sdT1udWxsPT1pP3ZvaWQgMDppW25dLGg9Uih1KT9udWxsIT09KG89bnVsbD09bD92b2lkIDA6bC5lbmFibGVkKSYmdm9pZCAwIT09byYmbzohIXUsZD1SKHUpP2wudmFyaWFudDpcInN0cmluZ1wiPT10eXBlb2YgdT91OnZvaWQgMCx2PW51bGw9PWU/dm9pZCAwOmVbbl0sYz1CKHt9LGwse2VuYWJsZWQ6aCx2YXJpYW50Omg/bnVsbCE9ZD9kOm51bGw9PWw/dm9pZCAwOmwudmFyaWFudDp2b2lkIDB9KTtpZihoIT09KG51bGw9PWw/dm9pZCAwOmwuZW5hYmxlZCkmJihjLm9yaWdpbmFsX2VuYWJsZWQ9bnVsbD09bD92b2lkIDA6bC5lbmFibGVkKSxkIT09KG51bGw9PWw/dm9pZCAwOmwudmFyaWFudCkmJihjLm9yaWdpbmFsX3ZhcmlhbnQ9bnVsbD09bD92b2lkIDA6bC52YXJpYW50KSx2KWMubWV0YWRhdGE9Qih7fSxudWxsPT1sP3ZvaWQgMDpsLm1ldGFkYXRhLHtwYXlsb2FkOnYsb3JpZ2luYWxfcGF5bG9hZDpudWxsPT1sfHxudWxsPT0oYT1sLm1ldGFkYXRhKT92b2lkIDA6YS5wYXlsb2FkfSk7cltuXT1jfXJldHVybiB0aGlzLmxlfHwoaW8ud2FybihcIiBPdmVycmlkaW5nIGZlYXR1cmUgZmxhZyBkZXRhaWxzIVwiLHtmbGFnRGV0YWlsczp0LG92ZXJyaWRkZW5QYXlsb2FkczplLGZpbmFsRGV0YWlsczpyfSksdGhpcy5sZT0hMCkscn1nZXRGbGFnVmFyaWFudHMoKXt2YXIgdD10aGlzLl9pbnN0YW5jZS5nZXRfcHJvcGVydHkoSXQpLGk9dGhpcy5faW5zdGFuY2UuZ2V0X3Byb3BlcnR5KHJvKTtpZighaSlyZXR1cm4gdHx8e307Zm9yKHZhciBlPVYoe30sdCkscj1PYmplY3Qua2V5cyhpKSxzPTA7czxyLmxlbmd0aDtzKyspZVtyW3NdXT1pW3Jbc11dO3JldHVybiB0aGlzLmxlfHwoaW8ud2FybihcIiBPdmVycmlkaW5nIGZlYXR1cmUgZmxhZ3MhXCIse2VuYWJsZWRGbGFnczp0LG92ZXJyaWRkZW5GbGFnczppLGZpbmFsRmxhZ3M6ZX0pLHRoaXMubGU9ITApLGV9Z2V0RmxhZ1BheWxvYWRzKCl7dmFyIHQ9dGhpcy5faW5zdGFuY2UuZ2V0X3Byb3BlcnR5KHNvKSxpPXRoaXMuX2luc3RhbmNlLmdldF9wcm9wZXJ0eShubyk7aWYoIWkpcmV0dXJuIHR8fHt9O2Zvcih2YXIgZT1WKHt9LHR8fHt9KSxyPU9iamVjdC5rZXlzKGkpLHM9MDtzPHIubGVuZ3RoO3MrKyllW3Jbc11dPWlbcltzXV07cmV0dXJuIHRoaXMubGV8fChpby53YXJuKFwiIE92ZXJyaWRpbmcgZmVhdHVyZSBmbGFnIHBheWxvYWRzIVwiLHtmbGFnUGF5bG9hZHM6dCxvdmVycmlkZGVuUGF5bG9hZHM6aSxmaW5hbFBheWxvYWRzOmV9KSx0aGlzLmxlPSEwKSxlfXJlbG9hZEZlYXR1cmVGbGFncygpe3RoaXMuZGV8fHRoaXMuX2luc3RhbmNlLmNvbmZpZy5hZHZhbmNlZF9kaXNhYmxlX2ZlYXR1cmVfZmxhZ3N8fHRoaXMucGV8fCh0aGlzLnBlPXNldFRpbWVvdXQoKCgpPT57dGhpcy5nZSgpfSksNSkpfV9lKCl7Y2xlYXJUaW1lb3V0KHRoaXMucGUpLHRoaXMucGU9dm9pZCAwfWVuc3VyZUZsYWdzTG9hZGVkKCl7dGhpcy51ZXx8dGhpcy5oZXx8dGhpcy5wZXx8dGhpcy5yZWxvYWRGZWF0dXJlRmxhZ3MoKX1zZXRBbm9ueW1vdXNEaXN0aW5jdElkKHQpe3RoaXMuJGFub25fZGlzdGluY3RfaWQ9dH1zZXRSZWxvYWRpbmdQYXVzZWQodCl7dGhpcy5kZT10fWdlKHQpe3ZhciBpO2lmKHRoaXMuX2UoKSwhdGhpcy5faW5zdGFuY2UuY29uZmlnLmFkdmFuY2VkX2Rpc2FibGVfZGVjaWRlKWlmKHRoaXMuaGUpdGhpcy52ZT0hMDtlbHNle3ZhciBlPXt0b2tlbjp0aGlzLl9pbnN0YW5jZS5jb25maWcudG9rZW4sZGlzdGluY3RfaWQ6dGhpcy5faW5zdGFuY2UuZ2V0X2Rpc3RpbmN0X2lkKCksZ3JvdXBzOnRoaXMuX2luc3RhbmNlLmdldEdyb3VwcygpLCRhbm9uX2Rpc3RpbmN0X2lkOnRoaXMuJGFub25fZGlzdGluY3RfaWQscGVyc29uX3Byb3BlcnRpZXM6Qih7fSwobnVsbD09KGk9dGhpcy5faW5zdGFuY2UucGVyc2lzdGVuY2UpP3ZvaWQgMDppLmdldF9pbml0aWFsX3Byb3BzKCkpfHx7fSx0aGlzLl9pbnN0YW5jZS5nZXRfcHJvcGVydHkoVHQpfHx7fSksZ3JvdXBfcHJvcGVydGllczp0aGlzLl9pbnN0YW5jZS5nZXRfcHJvcGVydHkoTXQpfTsobnVsbCE9dCYmdC5kaXNhYmxlRmxhZ3N8fHRoaXMuX2luc3RhbmNlLmNvbmZpZy5hZHZhbmNlZF9kaXNhYmxlX2ZlYXR1cmVfZmxhZ3MpJiYoZS5kaXNhYmxlX2ZsYWdzPSEwKTt2YXIgcj10aGlzLl9pbnN0YW5jZS5jb25maWcuX19wcmV2aWV3X2ZsYWdzX3YyJiZ0aGlzLl9pbnN0YW5jZS5jb25maWcuX19wcmV2aWV3X3JlbW90ZV9jb25maWc7ciYmKGUudGltZXpvbmU9UW4oKSksdGhpcy5oZT0hMCx0aGlzLl9pbnN0YW5jZS5tZSh7bWV0aG9kOlwiUE9TVFwiLHVybDp0aGlzLl9pbnN0YW5jZS5yZXF1ZXN0Um91dGVyLmVuZHBvaW50Rm9yKFwiYXBpXCIscj9cIi9mbGFncy8/dj0yXCI6XCIvZGVjaWRlLz92PTRcIiksZGF0YTplLGNvbXByZXNzaW9uOnRoaXMuX2luc3RhbmNlLmNvbmZpZy5kaXNhYmxlX2NvbXByZXNzaW9uP3ZvaWQgMDpnLkJhc2U2NCx0aW1lb3V0OnRoaXMuX2luc3RhbmNlLmNvbmZpZy5mZWF0dXJlX2ZsYWdfcmVxdWVzdF90aW1lb3V0X21zLGNhbGxiYWNrOnQ9Pnt2YXIgaSxyLHM9ITA7KDIwMD09PXQuc3RhdHVzQ29kZSYmKHRoaXMudmV8fCh0aGlzLiRhbm9uX2Rpc3RpbmN0X2lkPXZvaWQgMCkscz0hMSksdGhpcy5oZT0hMSx0aGlzLmNlKXx8KHRoaXMuY2U9ITAsdGhpcy5faW5zdGFuY2UuYmUobnVsbCE9PShyPXQuanNvbikmJnZvaWQgMCE9PXI/cjp7fSkpO2lmKCFlLmRpc2FibGVfZmxhZ3N8fHRoaXMudmUpaWYodGhpcy5mZT0hcyx0Lmpzb24mJm51bGwhPShpPXQuanNvbi5xdW90YUxpbWl0ZWQpJiZpLmluY2x1ZGVzKHVvLkZlYXR1cmVGbGFncykpaW8ud2FybihcIllvdSBoYXZlIGhpdCB5b3VyIGZlYXR1cmUgZmxhZ3MgcXVvdGEgbGltaXQsIGFuZCB3aWxsIG5vdCBiZSBhYmxlIHRvIGxvYWQgZmVhdHVyZSBmbGFncyB1bnRpbCB0aGUgcXVvdGEgaXMgcmVzZXQuICBQbGVhc2UgdmlzaXQgaHR0cHM6Ly9wb3N0aG9nLmNvbS9kb2NzL2JpbGxpbmcvbGltaXRzLWFsZXJ0cyB0byBsZWFybiBtb3JlLlwiKTtlbHNle3ZhciBuO2lmKCFlLmRpc2FibGVfZmxhZ3MpdGhpcy5yZWNlaXZlZEZlYXR1cmVGbGFncyhudWxsIT09KG49dC5qc29uKSYmdm9pZCAwIT09bj9uOnt9LHMpO3RoaXMudmUmJih0aGlzLnZlPSExLHRoaXMuZ2UoKSl9fX0pfX1nZXRGZWF0dXJlRmxhZyh0LGkpe2lmKHZvaWQgMD09PWkmJihpPXt9KSx0aGlzLnVlfHx0aGlzLmdldEZsYWdzKCkmJnRoaXMuZ2V0RmxhZ3MoKS5sZW5ndGg+MCl7dmFyIGU9dGhpcy5nZXRGbGFnVmFyaWFudHMoKVt0XSxyPVwiXCIrZSxzPXRoaXMuX2luc3RhbmNlLmdldF9wcm9wZXJ0eShvbyl8fHZvaWQgMCxuPXRoaXMuX2luc3RhbmNlLmdldF9wcm9wZXJ0eShGdCl8fHt9O2lmKChpLnNlbmRfZXZlbnR8fCEoXCJzZW5kX2V2ZW50XCJpbiBpKSkmJighKHQgaW4gbil8fCFuW3RdLmluY2x1ZGVzKHIpKSl7dmFyIG8sYSxsLHUsaCxkLHYsYyxmO3goblt0XSk/blt0XS5wdXNoKHIpOm5bdF09W3JdLG51bGw9PShvPXRoaXMuX2luc3RhbmNlLnBlcnNpc3RlbmNlKXx8by5yZWdpc3Rlcih7W0Z0XTpufSk7dmFyIHA9dGhpcy5nZXRGZWF0dXJlRmxhZ0RldGFpbHModCksZz17JGZlYXR1cmVfZmxhZzp0LCRmZWF0dXJlX2ZsYWdfcmVzcG9uc2U6ZSwkZmVhdHVyZV9mbGFnX3BheWxvYWQ6dGhpcy5nZXRGZWF0dXJlRmxhZ1BheWxvYWQodCl8fG51bGwsJGZlYXR1cmVfZmxhZ19yZXF1ZXN0X2lkOnMsJGZlYXR1cmVfZmxhZ19ib290c3RyYXBwZWRfcmVzcG9uc2U6KG51bGw9PShhPXRoaXMuX2luc3RhbmNlLmNvbmZpZy5ib290c3RyYXApfHxudWxsPT0oYT1hLmZlYXR1cmVGbGFncyk/dm9pZCAwOmFbdF0pfHxudWxsLCRmZWF0dXJlX2ZsYWdfYm9vdHN0cmFwcGVkX3BheWxvYWQ6KG51bGw9PShsPXRoaXMuX2luc3RhbmNlLmNvbmZpZy5ib290c3RyYXApfHxudWxsPT0obD1sLmZlYXR1cmVGbGFnUGF5bG9hZHMpP3ZvaWQgMDpsW3RdKXx8bnVsbCwkdXNlZF9ib290c3RyYXBfdmFsdWU6IXRoaXMuZmV9O1IobnVsbD09cHx8bnVsbD09KHU9cC5tZXRhZGF0YSk/dm9pZCAwOnUudmVyc2lvbil8fChnLiRmZWF0dXJlX2ZsYWdfdmVyc2lvbj1wLm1ldGFkYXRhLnZlcnNpb24pO3ZhciBfLG09bnVsbCE9PShoPW51bGw9PXB8fG51bGw9PShkPXAucmVhc29uKT92b2lkIDA6ZC5kZXNjcmlwdGlvbikmJnZvaWQgMCE9PWg/aDpudWxsPT1wfHxudWxsPT0odj1wLnJlYXNvbik/dm9pZCAwOnYuY29kZTtpZihtJiYoZy4kZmVhdHVyZV9mbGFnX3JlYXNvbj1tKSxudWxsIT1wJiZudWxsIT0oYz1wLm1ldGFkYXRhKSYmYy5pZCYmKGcuJGZlYXR1cmVfZmxhZ19pZD1wLm1ldGFkYXRhLmlkKSxSKG51bGw9PXA/dm9pZCAwOnAub3JpZ2luYWxfdmFyaWFudCkmJlIobnVsbD09cD92b2lkIDA6cC5vcmlnaW5hbF9lbmFibGVkKXx8KGcuJGZlYXR1cmVfZmxhZ19vcmlnaW5hbF9yZXNwb25zZT1SKHAub3JpZ2luYWxfdmFyaWFudCk/cC5vcmlnaW5hbF9lbmFibGVkOnAub3JpZ2luYWxfdmFyaWFudCksbnVsbCE9cCYmbnVsbCE9KGY9cC5tZXRhZGF0YSkmJmYub3JpZ2luYWxfcGF5bG9hZClnLiRmZWF0dXJlX2ZsYWdfb3JpZ2luYWxfcGF5bG9hZD1udWxsPT1wfHxudWxsPT0oXz1wLm1ldGFkYXRhKT92b2lkIDA6Xy5vcmlnaW5hbF9wYXlsb2FkO3RoaXMuX2luc3RhbmNlLmNhcHR1cmUoXCIkZmVhdHVyZV9mbGFnX2NhbGxlZFwiLGcpfXJldHVybiBlfWlvLndhcm4oJ2dldEZlYXR1cmVGbGFnIGZvciBrZXkgXCInK3QrXCJcXFwiIGZhaWxlZC4gRmVhdHVyZSBmbGFncyBkaWRuJ3QgbG9hZCBpbiB0aW1lLlwiKX1nZXRGZWF0dXJlRmxhZ0RldGFpbHModCl7cmV0dXJuIHRoaXMuZ2V0RmxhZ3NXaXRoRGV0YWlscygpW3RdfWdldEZlYXR1cmVGbGFnUGF5bG9hZCh0KXtyZXR1cm4gdGhpcy5nZXRGbGFnUGF5bG9hZHMoKVt0XX1nZXRSZW1vdGVDb25maWdQYXlsb2FkKHQsaSl7dmFyIGU9dGhpcy5faW5zdGFuY2UuY29uZmlnLnRva2VuO3RoaXMuX2luc3RhbmNlLm1lKHttZXRob2Q6XCJQT1NUXCIsdXJsOnRoaXMuX2luc3RhbmNlLnJlcXVlc3RSb3V0ZXIuZW5kcG9pbnRGb3IoXCJhcGlcIixcIi9kZWNpZGUvP3Y9NFwiKSxkYXRhOntkaXN0aW5jdF9pZDp0aGlzLl9pbnN0YW5jZS5nZXRfZGlzdGluY3RfaWQoKSx0b2tlbjplfSxjb21wcmVzc2lvbjp0aGlzLl9pbnN0YW5jZS5jb25maWcuZGlzYWJsZV9jb21wcmVzc2lvbj92b2lkIDA6Zy5CYXNlNjQsdGltZW91dDp0aGlzLl9pbnN0YW5jZS5jb25maWcuZmVhdHVyZV9mbGFnX3JlcXVlc3RfdGltZW91dF9tcyxjYWxsYmFjazplPT57dmFyIHIscz1udWxsPT0ocj1lLmpzb24pP3ZvaWQgMDpyLmZlYXR1cmVGbGFnUGF5bG9hZHM7aSgobnVsbD09cz92b2lkIDA6c1t0XSl8fHZvaWQgMCl9fSl9aXNGZWF0dXJlRW5hYmxlZCh0LGkpe2lmKHZvaWQgMD09PWkmJihpPXt9KSx0aGlzLnVlfHx0aGlzLmdldEZsYWdzKCkmJnRoaXMuZ2V0RmxhZ3MoKS5sZW5ndGg+MClyZXR1cm4hIXRoaXMuZ2V0RmVhdHVyZUZsYWcodCxpKTtpby53YXJuKCdpc0ZlYXR1cmVFbmFibGVkIGZvciBrZXkgXCInK3QrXCJcXFwiIGZhaWxlZC4gRmVhdHVyZSBmbGFncyBkaWRuJ3QgbG9hZCBpbiB0aW1lLlwiKX1hZGRGZWF0dXJlRmxhZ3NIYW5kbGVyKHQpe3RoaXMuZmVhdHVyZUZsYWdFdmVudEhhbmRsZXJzLnB1c2godCl9cmVtb3ZlRmVhdHVyZUZsYWdzSGFuZGxlcih0KXt0aGlzLmZlYXR1cmVGbGFnRXZlbnRIYW5kbGVycz10aGlzLmZlYXR1cmVGbGFnRXZlbnRIYW5kbGVycy5maWx0ZXIoKGk9PmkhPT10KSl9cmVjZWl2ZWRGZWF0dXJlRmxhZ3ModCxpKXtpZih0aGlzLl9pbnN0YW5jZS5wZXJzaXN0ZW5jZSl7dGhpcy51ZT0hMDt2YXIgZT10aGlzLmdldEZsYWdWYXJpYW50cygpLHI9dGhpcy5nZXRGbGFnUGF5bG9hZHMoKSxzPXRoaXMuZ2V0RmxhZ3NXaXRoRGV0YWlscygpOyFmdW5jdGlvbih0LGksZSxyLHMpe3ZvaWQgMD09PWUmJihlPXt9KSx2b2lkIDA9PT1yJiYocj17fSksdm9pZCAwPT09cyYmKHM9e30pO3ZhciBuPWxvKHQpLG89bi5mbGFncyxhPW4uZmVhdHVyZUZsYWdzLGw9bi5mZWF0dXJlRmxhZ1BheWxvYWRzO2lmKGEpe3ZhciB1PXQucmVxdWVzdElkO2lmKHgoYSkpe2lvLndhcm4oXCJ2MSBvZiB0aGUgZmVhdHVyZSBmbGFncyBlbmRwb2ludCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHRoZSBsYXRlc3QgdmVyc2lvbi5cIik7dmFyIGg9e307aWYoYSlmb3IodmFyIGQ9MDtkPGEubGVuZ3RoO2QrKyloW2FbZF1dPSEwO2kmJmkucmVnaXN0ZXIoe1tlb106YSxbSXRdOmh9KX1lbHNle3ZhciB2PWEsYz1sLGY9bzt0LmVycm9yc1doaWxlQ29tcHV0aW5nRmxhZ3MmJih2PUIoe30sZSx2KSxjPUIoe30scixjKSxmPUIoe30scyxmKSksaSYmaS5yZWdpc3RlcihCKHtbZW9dOk9iamVjdC5rZXlzKGFvKHYpKSxbSXRdOnZ8fHt9LFtzb106Y3x8e30sW1J0XTpmfHx7fX0sdT97W29vXTp1fTp7fSkpfX19KHQsdGhpcy5faW5zdGFuY2UucGVyc2lzdGVuY2UsZSxyLHMpLHRoaXMud2UoaSl9fW92ZXJyaWRlKHQsaSl7dm9pZCAwPT09aSYmKGk9ITEpLGlvLndhcm4oXCJvdmVycmlkZSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIG92ZXJyaWRlRmVhdHVyZUZsYWdzIGluc3RlYWQuXCIpLHRoaXMub3ZlcnJpZGVGZWF0dXJlRmxhZ3Moe2ZsYWdzOnQsc3VwcHJlc3NXYXJuaW5nOml9KX1vdmVycmlkZUZlYXR1cmVGbGFncyh0KXtpZighdGhpcy5faW5zdGFuY2UuX19sb2FkZWR8fCF0aGlzLl9pbnN0YW5jZS5wZXJzaXN0ZW5jZSlyZXR1cm4gaW8udW5pbml0aWFsaXplZFdhcm5pbmcoXCJwb3N0aG9nLmZlYXR1cmVGbGFncy5vdmVycmlkZUZlYXR1cmVGbGFnc1wiKTtpZighMT09PXQpcmV0dXJuIHRoaXMuX2luc3RhbmNlLnBlcnNpc3RlbmNlLnVucmVnaXN0ZXIocm8pLHRoaXMuX2luc3RhbmNlLnBlcnNpc3RlbmNlLnVucmVnaXN0ZXIobm8pLHZvaWQgdGhpcy53ZSgpO2lmKHQmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiYoXCJmbGFnc1wiaW4gdHx8XCJwYXlsb2Fkc1wiaW4gdCkpe3ZhciBpLGU9dDtpZih0aGlzLmxlPUJvb2xlYW4obnVsbCE9PShpPWUuc3VwcHJlc3NXYXJuaW5nKSYmdm9pZCAwIT09aSYmaSksXCJmbGFnc1wiaW4gZSlpZighMT09PWUuZmxhZ3MpdGhpcy5faW5zdGFuY2UucGVyc2lzdGVuY2UudW5yZWdpc3Rlcihybyk7ZWxzZSBpZihlLmZsYWdzKWlmKHgoZS5mbGFncykpe2Zvcih2YXIgcj17fSxzPTA7czxlLmZsYWdzLmxlbmd0aDtzKyspcltlLmZsYWdzW3NdXT0hMDt0aGlzLl9pbnN0YW5jZS5wZXJzaXN0ZW5jZS5yZWdpc3Rlcih7W3JvXTpyfSl9ZWxzZSB0aGlzLl9pbnN0YW5jZS5wZXJzaXN0ZW5jZS5yZWdpc3Rlcih7W3JvXTplLmZsYWdzfSk7cmV0dXJuXCJwYXlsb2Fkc1wiaW4gZSYmKCExPT09ZS5wYXlsb2Fkcz90aGlzLl9pbnN0YW5jZS5wZXJzaXN0ZW5jZS51bnJlZ2lzdGVyKG5vKTplLnBheWxvYWRzJiZ0aGlzLl9pbnN0YW5jZS5wZXJzaXN0ZW5jZS5yZWdpc3Rlcih7W25vXTplLnBheWxvYWRzfSkpLHZvaWQgdGhpcy53ZSgpfXRoaXMud2UoKX1vbkZlYXR1cmVGbGFncyh0KXtpZih0aGlzLmFkZEZlYXR1cmVGbGFnc0hhbmRsZXIodCksdGhpcy51ZSl7dmFye2ZsYWdzOmksZmxhZ1ZhcmlhbnRzOmV9PXRoaXMueWUoKTt0KGksZSl9cmV0dXJuKCk9PnRoaXMucmVtb3ZlRmVhdHVyZUZsYWdzSGFuZGxlcih0KX11cGRhdGVFYXJseUFjY2Vzc0ZlYXR1cmVFbnJvbGxtZW50KHQsaSl7dmFyIGUscj0odGhpcy5faW5zdGFuY2UuZ2V0X3Byb3BlcnR5KFB0KXx8W10pLmZpbmQoKGk9PmkuZmxhZ0tleT09PXQpKSxzPXtbXCIkZmVhdHVyZV9lbnJvbGxtZW50L1wiK3RdOml9LG49eyRmZWF0dXJlX2ZsYWc6dCwkZmVhdHVyZV9lbnJvbGxtZW50OmksJHNldDpzfTtyJiYobi4kZWFybHlfYWNjZXNzX2ZlYXR1cmVfbmFtZT1yLm5hbWUpLHRoaXMuX2luc3RhbmNlLmNhcHR1cmUoXCIkZmVhdHVyZV9lbnJvbGxtZW50X3VwZGF0ZVwiLG4pLHRoaXMuc2V0UGVyc29uUHJvcGVydGllc0ZvckZsYWdzKHMsITEpO3ZhciBvPUIoe30sdGhpcy5nZXRGbGFnVmFyaWFudHMoKSx7W3RdOml9KTtudWxsPT0oZT10aGlzLl9pbnN0YW5jZS5wZXJzaXN0ZW5jZSl8fGUucmVnaXN0ZXIoe1tlb106T2JqZWN0LmtleXMoYW8obykpLFtJdF06b30pLHRoaXMud2UoKX1nZXRFYXJseUFjY2Vzc0ZlYXR1cmVzKHQsaSxlKXt2b2lkIDA9PT1pJiYoaT0hMSk7dmFyIHI9dGhpcy5faW5zdGFuY2UuZ2V0X3Byb3BlcnR5KFB0KSxzPWU/XCImXCIrZS5tYXAoKHQ9Plwic3RhZ2U9XCIrdCkpLmpvaW4oXCImXCIpOlwiXCI7aWYociYmIWkpcmV0dXJuIHQocik7dGhpcy5faW5zdGFuY2UubWUoe3VybDp0aGlzLl9pbnN0YW5jZS5yZXF1ZXN0Um91dGVyLmVuZHBvaW50Rm9yKFwiYXBpXCIsXCIvYXBpL2Vhcmx5X2FjY2Vzc19mZWF0dXJlcy8/dG9rZW49XCIrdGhpcy5faW5zdGFuY2UuY29uZmlnLnRva2VuK3MpLG1ldGhvZDpcIkdFVFwiLGNhbGxiYWNrOmk9Pnt2YXIgZTtpZihpLmpzb24pe3ZhciByPWkuanNvbi5lYXJseUFjY2Vzc0ZlYXR1cmVzO3JldHVybiBudWxsPT0oZT10aGlzLl9pbnN0YW5jZS5wZXJzaXN0ZW5jZSl8fGUucmVnaXN0ZXIoe1tQdF06cn0pLHQocil9fX0pfXllKCl7dmFyIHQ9dGhpcy5nZXRGbGFncygpLGk9dGhpcy5nZXRGbGFnVmFyaWFudHMoKTtyZXR1cm57ZmxhZ3M6dC5maWx0ZXIoKHQ9PmlbdF0pKSxmbGFnVmFyaWFudHM6T2JqZWN0LmtleXMoaSkuZmlsdGVyKCh0PT5pW3RdKSkucmVkdWNlKCgodCxlKT0+KHRbZV09aVtlXSx0KSkse30pfX13ZSh0KXt2YXJ7ZmxhZ3M6aSxmbGFnVmFyaWFudHM6ZX09dGhpcy55ZSgpO3RoaXMuZmVhdHVyZUZsYWdFdmVudEhhbmRsZXJzLmZvckVhY2goKHI9PnIoaSxlLHtlcnJvcnNMb2FkaW5nOnR9KSkpfXNldFBlcnNvblByb3BlcnRpZXNGb3JGbGFncyh0LGkpe3ZvaWQgMD09PWkmJihpPSEwKTt2YXIgZT10aGlzLl9pbnN0YW5jZS5nZXRfcHJvcGVydHkoVHQpfHx7fTt0aGlzLl9pbnN0YW5jZS5yZWdpc3Rlcih7W1R0XTpCKHt9LGUsdCl9KSxpJiZ0aGlzLl9pbnN0YW5jZS5yZWxvYWRGZWF0dXJlRmxhZ3MoKX1yZXNldFBlcnNvblByb3BlcnRpZXNGb3JGbGFncygpe3RoaXMuX2luc3RhbmNlLnVucmVnaXN0ZXIoVHQpfXNldEdyb3VwUHJvcGVydGllc0ZvckZsYWdzKHQsaSl7dm9pZCAwPT09aSYmKGk9ITApO3ZhciBlPXRoaXMuX2luc3RhbmNlLmdldF9wcm9wZXJ0eShNdCl8fHt9OzAhPT1PYmplY3Qua2V5cyhlKS5sZW5ndGgmJk9iamVjdC5rZXlzKGUpLmZvckVhY2goKGk9PntlW2ldPUIoe30sZVtpXSx0W2ldKSxkZWxldGUgdFtpXX0pKSx0aGlzLl9pbnN0YW5jZS5yZWdpc3Rlcih7W010XTpCKHt9LGUsdCl9KSxpJiZ0aGlzLl9pbnN0YW5jZS5yZWxvYWRGZWF0dXJlRmxhZ3MoKX1yZXNldEdyb3VwUHJvcGVydGllc0ZvckZsYWdzKHQpe2lmKHQpe3ZhciBpPXRoaXMuX2luc3RhbmNlLmdldF9wcm9wZXJ0eShNdCl8fHt9O3RoaXMuX2luc3RhbmNlLnJlZ2lzdGVyKHtbTXRdOkIoe30saSx7W3RdOnt9fSl9KX1lbHNlIHRoaXMuX2luc3RhbmNlLnVucmVnaXN0ZXIoTXQpfX12YXIgdm89W1wiY29va2llXCIsXCJsb2NhbHN0b3JhZ2VcIixcImxvY2Fsc3RvcmFnZStjb29raWVcIixcInNlc3Npb25zdG9yYWdlXCIsXCJtZW1vcnlcIl07Y2xhc3MgY297Y29uc3RydWN0b3IodCl7dGhpcy5TPXQsdGhpcy5wcm9wcz17fSx0aGlzLlNlPSExLHRoaXMuJGU9KHQ9Pnt2YXIgaT1cIlwiO3JldHVybiB0LnRva2VuJiYoaT10LnRva2VuLnJlcGxhY2UoL1xcKy9nLFwiUExcIikucmVwbGFjZSgvXFwvL2csXCJTTFwiKS5yZXBsYWNlKC89L2csXCJFUVwiKSksdC5wZXJzaXN0ZW5jZV9uYW1lP1wicGhfXCIrdC5wZXJzaXN0ZW5jZV9uYW1lOlwicGhfXCIraStcIl9wb3N0aG9nXCJ9KSh0KSx0aGlzLnE9dGhpcy5rZSh0KSx0aGlzLmxvYWQoKSx0LmRlYnVnJiZqLmluZm8oXCJQZXJzaXN0ZW5jZSBsb2FkZWRcIix0LnBlcnNpc3RlbmNlLEIoe30sdGhpcy5wcm9wcykpLHRoaXMudXBkYXRlX2NvbmZpZyh0LHQpLHRoaXMuc2F2ZSgpfWtlKHQpey0xPT09dm8uaW5kZXhPZih0LnBlcnNpc3RlbmNlLnRvTG93ZXJDYXNlKCkpJiYoai5jcml0aWNhbChcIlVua25vd24gcGVyc2lzdGVuY2UgdHlwZSBcIit0LnBlcnNpc3RlbmNlK1wiOyBmYWxsaW5nIGJhY2sgdG8gbG9jYWxTdG9yYWdlK2Nvb2tpZVwiKSx0LnBlcnNpc3RlbmNlPVwibG9jYWxTdG9yYWdlK2Nvb2tpZVwiKTt2YXIgaT10LnBlcnNpc3RlbmNlLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJsb2NhbHN0b3JhZ2VcIj09PWkmJldpLk8oKT9XaTpcImxvY2Fsc3RvcmFnZStjb29raWVcIj09PWkmJkppLk8oKT9KaTpcInNlc3Npb25zdG9yYWdlXCI9PT1pJiZYaS5PKCk/WGk6XCJtZW1vcnlcIj09PWk/S2k6XCJjb29raWVcIj09PWk/Qmk6SmkuTygpP0ppOkJpfXByb3BlcnRpZXMoKXt2YXIgdD17fTtyZXR1cm4gSih0aGlzLnByb3BzLChmdW5jdGlvbihpLGUpe2lmKGU9PT1JdCYmSShpKSlmb3IodmFyIHI9T2JqZWN0LmtleXMoaSksbj0wO248ci5sZW5ndGg7bisrKXRbXCIkZmVhdHVyZS9cIityW25dXT1pW3Jbbl1dO2Vsc2UgYT1lLGw9ITEsKEMobz1IdCk/bDpzJiZvLmluZGV4T2Y9PT1zPy0xIT1vLmluZGV4T2YoYSk6KEoobywoZnVuY3Rpb24odCl7aWYobHx8KGw9dD09PWEpKXJldHVybiBXfSkpLGwpKXx8KHRbZV09aSk7dmFyIG8sYSxsfSkpLHR9bG9hZCgpe2lmKCF0aGlzLnhlKXt2YXIgdD10aGlzLnEuRCh0aGlzLiRlKTt0JiYodGhpcy5wcm9wcz1WKHt9LHQpKX19c2F2ZSgpe3RoaXMueGV8fHRoaXMucS5MKHRoaXMuJGUsdGhpcy5wcm9wcyx0aGlzLkVlLHRoaXMuSWUsdGhpcy5QZSx0aGlzLlMuZGVidWcpfXJlbW92ZSgpe3RoaXMucS5OKHRoaXMuJGUsITEpLHRoaXMucS5OKHRoaXMuJGUsITApfWNsZWFyKCl7dGhpcy5yZW1vdmUoKSx0aGlzLnByb3BzPXt9fXJlZ2lzdGVyX29uY2UodCxpLGUpe2lmKEkodCkpe1IoaSkmJihpPVwiTm9uZVwiKSx0aGlzLkVlPVIoZSk/dGhpcy5SZTplO3ZhciByPSExO2lmKEoodCwoKHQsZSk9Pnt0aGlzLnByb3BzLmhhc093blByb3BlcnR5KGUpJiZ0aGlzLnByb3BzW2VdIT09aXx8KHRoaXMucHJvcHNbZV09dCxyPSEwKX0pKSxyKXJldHVybiB0aGlzLnNhdmUoKSwhMH1yZXR1cm4hMX1yZWdpc3Rlcih0LGkpe2lmKEkodCkpe3RoaXMuRWU9UihpKT90aGlzLlJlOmk7dmFyIGU9ITE7aWYoSih0LCgoaSxyKT0+e3QuaGFzT3duUHJvcGVydHkocikmJnRoaXMucHJvcHNbcl0hPT1pJiYodGhpcy5wcm9wc1tyXT1pLGU9ITApfSkpLGUpcmV0dXJuIHRoaXMuc2F2ZSgpLCEwfXJldHVybiExfXVucmVnaXN0ZXIodCl7dCBpbiB0aGlzLnByb3BzJiYoZGVsZXRlIHRoaXMucHJvcHNbdF0sdGhpcy5zYXZlKCkpfXVwZGF0ZV9jYW1wYWlnbl9wYXJhbXMoKXtpZighdGhpcy5TZSl7dmFyIHQ9V24odGhpcy5TLmN1c3RvbV9jYW1wYWlnbl9wYXJhbXMsdGhpcy5TLm1hc2tfcGVyc29uYWxfZGF0YV9wcm9wZXJ0aWVzLHRoaXMuUy5jdXN0b21fcGVyc29uYWxfZGF0YV9wcm9wZXJ0aWVzKTtQKFoodCkpfHx0aGlzLnJlZ2lzdGVyKHQpLHRoaXMuU2U9ITB9fXVwZGF0ZV9zZWFyY2hfa2V5d29yZCgpe3ZhciB0O3RoaXMucmVnaXN0ZXIoKHQ9bnVsbD09bz92b2lkIDA6by5yZWZlcnJlcik/Sm4odCk6e30pfXVwZGF0ZV9yZWZlcnJlcl9pbmZvKCl7dmFyIHQ7dGhpcy5yZWdpc3Rlcl9vbmNlKHskcmVmZXJyZXI6S24oKSwkcmVmZXJyaW5nX2RvbWFpbjpudWxsIT1vJiZvLnJlZmVycmVyJiYobnVsbD09KHQ9eWkoby5yZWZlcnJlcikpP3ZvaWQgMDp0Lmhvc3QpfHxcIiRkaXJlY3RcIn0sdm9pZCAwKX1zZXRfaW5pdGlhbF9wZXJzb25faW5mbygpe3RoaXMucHJvcHNbTnRdfHx0aGlzLnByb3BzW2p0XXx8dGhpcy5yZWdpc3Rlcl9vbmNlKHtbenRdOlluKHRoaXMuUy5tYXNrX3BlcnNvbmFsX2RhdGFfcHJvcGVydGllcyx0aGlzLlMuY3VzdG9tX3BlcnNvbmFsX2RhdGFfcHJvcGVydGllcyl9LHZvaWQgMCl9Z2V0X2luaXRpYWxfcHJvcHMoKXt2YXIgdD17fTtKKFtqdCxOdF0sKGk9Pnt2YXIgZT10aGlzLnByb3BzW2ldO2UmJkooZSwoZnVuY3Rpb24oaSxlKXt0W1wiJGluaXRpYWxfXCIrdyhlKV09aX0pKX0pKTt2YXIgaSxlLHI9dGhpcy5wcm9wc1t6dF07aWYocil7dmFyIHM9KGk9WG4ociksZT17fSxKKGksKGZ1bmN0aW9uKHQsaSl7ZVtcIiRpbml0aWFsX1wiK3coaSldPXR9KSksZSk7Vih0LHMpfXJldHVybiB0fXNhZmVfbWVyZ2UodCl7cmV0dXJuIEoodGhpcy5wcm9wcywoZnVuY3Rpb24oaSxlKXtlIGluIHR8fCh0W2VdPWkpfSkpLHR9dXBkYXRlX2NvbmZpZyh0LGkpe2lmKHRoaXMuUmU9dGhpcy5FZT10LmNvb2tpZV9leHBpcmF0aW9uLHRoaXMuc2V0X2Rpc2FibGVkKHQuZGlzYWJsZV9wZXJzaXN0ZW5jZSksdGhpcy5zZXRfY3Jvc3Nfc3ViZG9tYWluKHQuY3Jvc3Nfc3ViZG9tYWluX2Nvb2tpZSksdGhpcy5zZXRfc2VjdXJlKHQuc2VjdXJlX2Nvb2tpZSksdC5wZXJzaXN0ZW5jZSE9PWkucGVyc2lzdGVuY2Upe3ZhciBlPXRoaXMua2UodCkscj10aGlzLnByb3BzO3RoaXMuY2xlYXIoKSx0aGlzLnE9ZSx0aGlzLnByb3BzPXIsdGhpcy5zYXZlKCl9fXNldF9kaXNhYmxlZCh0KXt0aGlzLnhlPXQsdGhpcy54ZT90aGlzLnJlbW92ZSgpOnRoaXMuc2F2ZSgpfXNldF9jcm9zc19zdWJkb21haW4odCl7dCE9PXRoaXMuSWUmJih0aGlzLkllPXQsdGhpcy5yZW1vdmUoKSx0aGlzLnNhdmUoKSl9c2V0X3NlY3VyZSh0KXt0IT09dGhpcy5QZSYmKHRoaXMuUGU9dCx0aGlzLnJlbW92ZSgpLHRoaXMuc2F2ZSgpKX1zZXRfZXZlbnRfdGltZXIodCxpKXt2YXIgZT10aGlzLnByb3BzW2F0XXx8e307ZVt0XT1pLHRoaXMucHJvcHNbYXRdPWUsdGhpcy5zYXZlKCl9cmVtb3ZlX2V2ZW50X3RpbWVyKHQpe3ZhciBpPSh0aGlzLnByb3BzW2F0XXx8e30pW3RdO3JldHVybiBSKGkpfHwoZGVsZXRlIHRoaXMucHJvcHNbYXRdW3RdLHRoaXMuc2F2ZSgpKSxpfWdldF9wcm9wZXJ0eSh0KXtyZXR1cm4gdGhpcy5wcm9wc1t0XX1zZXRfcHJvcGVydHkodCxpKXt0aGlzLnByb3BzW3RdPWksdGhpcy5zYXZlKCl9fWNsYXNzIGZve2NvbnN0cnVjdG9yKCl7dGhpcy5UZT17fSx0aGlzLlRlPXt9fW9uKHQsaSl7cmV0dXJuIHRoaXMuVGVbdF18fCh0aGlzLlRlW3RdPVtdKSx0aGlzLlRlW3RdLnB1c2goaSksKCk9Pnt0aGlzLlRlW3RdPXRoaXMuVGVbdF0uZmlsdGVyKCh0PT50IT09aSkpfX1lbWl0KHQsaSl7Zm9yKHZhciBlIG9mIHRoaXMuVGVbdF18fFtdKWUoaSk7Zm9yKHZhciByIG9mIHRoaXMuVGVbXCIqXCJdfHxbXSlyKHQsaSl9fWNsYXNzIHBve2NvbnN0cnVjdG9yKHQpe3RoaXMuTWU9bmV3IGZvLHRoaXMuQ2U9KHQsaSk9PnRoaXMuT2UodCxpKSYmdGhpcy5GZSh0LGkpJiZ0aGlzLkFlKHQsaSksdGhpcy5PZT0odCxpKT0+bnVsbD09aXx8IWkuZXZlbnR8fChudWxsPT10P3ZvaWQgMDp0LmV2ZW50KT09PShudWxsPT1pP3ZvaWQgMDppLmV2ZW50KSx0aGlzLl9pbnN0YW5jZT10LHRoaXMuRGU9bmV3IFNldCx0aGlzLkxlPW5ldyBTZXR9aW5pdCgpe3ZhciB0O2lmKCFSKG51bGw9PSh0PXRoaXMuX2luc3RhbmNlKT92b2lkIDA6dC5OZSkpe3ZhciBpO251bGw9PShpPXRoaXMuX2luc3RhbmNlKXx8aS5OZSgoKHQsaSk9Pnt0aGlzLm9uKHQsaSl9KSl9fXJlZ2lzdGVyKHQpe3ZhciBpLGU7aWYoIVIobnVsbD09KGk9dGhpcy5faW5zdGFuY2UpP3ZvaWQgMDppLk5lKSYmKHQuZm9yRWFjaCgodD0+e3ZhciBpLGU7bnVsbD09KGk9dGhpcy5MZSl8fGkuYWRkKHQpLG51bGw9PShlPXQuc3RlcHMpfHxlLmZvckVhY2goKHQ9Pnt2YXIgaTtudWxsPT0oaT10aGlzLkRlKXx8aS5hZGQoKG51bGw9PXQ/dm9pZCAwOnQuZXZlbnQpfHxcIlwiKX0pKX0pKSxudWxsIT0oZT10aGlzLl9pbnN0YW5jZSkmJmUuYXV0b2NhcHR1cmUpKXt2YXIgcixzPW5ldyBTZXQ7dC5mb3JFYWNoKCh0PT57dmFyIGk7bnVsbD09KGk9dC5zdGVwcyl8fGkuZm9yRWFjaCgodD0+e251bGwhPXQmJnQuc2VsZWN0b3ImJnMuYWRkKG51bGw9PXQ/dm9pZCAwOnQuc2VsZWN0b3IpfSkpfSkpLG51bGw9PShyPXRoaXMuX2luc3RhbmNlKXx8ci5hdXRvY2FwdHVyZS5zZXRFbGVtZW50U2VsZWN0b3JzKHMpfX1vbih0LGkpe3ZhciBlO251bGwhPWkmJjAhPXQubGVuZ3RoJiYodGhpcy5EZS5oYXModCl8fHRoaXMuRGUuaGFzKG51bGw9PWk/dm9pZCAwOmkuZXZlbnQpKSYmdGhpcy5MZSYmKG51bGw9PShlPXRoaXMuTGUpP3ZvaWQgMDplLnNpemUpPjAmJnRoaXMuTGUuZm9yRWFjaCgodD0+e3RoaXMuamUoaSx0KSYmdGhpcy5NZS5lbWl0KFwiYWN0aW9uQ2FwdHVyZWRcIix0Lm5hbWUpfSkpfXplKHQpe3RoaXMub25BY3Rpb24oXCJhY3Rpb25DYXB0dXJlZFwiLChpPT50KGkpKSl9amUodCxpKXtpZihudWxsPT0obnVsbD09aT92b2lkIDA6aS5zdGVwcykpcmV0dXJuITE7Zm9yKHZhciBlIG9mIGkuc3RlcHMpaWYodGhpcy5DZSh0LGUpKXJldHVybiEwO3JldHVybiExfW9uQWN0aW9uKHQsaSl7cmV0dXJuIHRoaXMuTWUub24odCxpKX1GZSh0LGkpe2lmKG51bGwhPWkmJmkudXJsKXt2YXIgZSxyPW51bGw9PXR8fG51bGw9PShlPXQucHJvcGVydGllcyk/dm9pZCAwOmUuJGN1cnJlbnRfdXJsO2lmKCFyfHxcInN0cmluZ1wiIT10eXBlb2YgcilyZXR1cm4hMTtpZighcG8uVWUocixudWxsPT1pP3ZvaWQgMDppLnVybCwobnVsbD09aT92b2lkIDA6aS51cmxfbWF0Y2hpbmcpfHxcImNvbnRhaW5zXCIpKXJldHVybiExfXJldHVybiEwfXN0YXRpYyBVZShpLGUscil7c3dpdGNoKHIpe2Nhc2VcInJlZ2V4XCI6cmV0dXJuISF0JiZOcyhpLGUpO2Nhc2VcImV4YWN0XCI6cmV0dXJuIGU9PT1pO2Nhc2VcImNvbnRhaW5zXCI6dmFyIHM9cG8ucWUoZSkucmVwbGFjZSgvXy9nLFwiLlwiKS5yZXBsYWNlKC8lL2csXCIuKlwiKTtyZXR1cm4gTnMoaSxzKTtkZWZhdWx0OnJldHVybiExfX1zdGF0aWMgcWUodCl7cmV0dXJuIHQucmVwbGFjZSgvW3xcXFxce30oKVtcXF1eJCsqPy5dL2csXCJcXFxcJCZcIikucmVwbGFjZSgvLS9nLFwiXFxcXHgyZFwiKX1BZSh0LGkpe2lmKChudWxsIT1pJiZpLmhyZWZ8fG51bGwhPWkmJmkudGFnX25hbWV8fG51bGwhPWkmJmkudGV4dCkmJiF0aGlzLkJlKHQpLnNvbWUoKHQ9PiEobnVsbCE9aSYmaS5ocmVmJiYhcG8uVWUodC5ocmVmfHxcIlwiLG51bGw9PWk/dm9pZCAwOmkuaHJlZiwobnVsbD09aT92b2lkIDA6aS5ocmVmX21hdGNoaW5nKXx8XCJleGFjdFwiKSkmJigobnVsbD09aXx8IWkudGFnX25hbWV8fHQudGFnX25hbWU9PT0obnVsbD09aT92b2lkIDA6aS50YWdfbmFtZSkpJiYhKG51bGwhPWkmJmkudGV4dCYmIXBvLlVlKHQudGV4dHx8XCJcIixudWxsPT1pP3ZvaWQgMDppLnRleHQsKG51bGw9PWk/dm9pZCAwOmkudGV4dF9tYXRjaGluZyl8fFwiZXhhY3RcIikmJiFwby5VZSh0LiRlbF90ZXh0fHxcIlwiLG51bGw9PWk/dm9pZCAwOmkudGV4dCwobnVsbD09aT92b2lkIDA6aS50ZXh0X21hdGNoaW5nKXx8XCJleGFjdFwiKSkpKSkpcmV0dXJuITE7aWYobnVsbCE9aSYmaS5zZWxlY3Rvcil7dmFyIGUscj1udWxsPT10fHxudWxsPT0oZT10LnByb3BlcnRpZXMpP3ZvaWQgMDplLiRlbGVtZW50X3NlbGVjdG9ycztpZighcilyZXR1cm4hMTtpZighci5pbmNsdWRlcyhudWxsPT1pP3ZvaWQgMDppLnNlbGVjdG9yKSlyZXR1cm4hMX1yZXR1cm4hMH1CZSh0KXtyZXR1cm4gbnVsbD09KG51bGw9PXQ/dm9pZCAwOnQucHJvcGVydGllcy4kZWxlbWVudHMpP1tdOm51bGw9PXQ/dm9pZCAwOnQucHJvcGVydGllcy4kZWxlbWVudHN9fXZhciBnbz16KFwiW1N1cnZleXNdXCIpO2NsYXNzIF9ve2NvbnN0cnVjdG9yKHQpe3RoaXMuX2luc3RhbmNlPXQsdGhpcy5IZT1uZXcgTWFwLHRoaXMuV2U9bmV3IE1hcH1yZWdpc3Rlcih0KXt2YXIgaTtSKG51bGw9PShpPXRoaXMuX2luc3RhbmNlKT92b2lkIDA6aS5OZSl8fCh0aGlzLkdlKHQpLHRoaXMuSmUodCkpfUplKHQpe3ZhciBpPXQuZmlsdGVyKCh0PT57dmFyIGksZTtyZXR1cm4obnVsbD09KGk9dC5jb25kaXRpb25zKT92b2lkIDA6aS5hY3Rpb25zKSYmKG51bGw9PShlPXQuY29uZGl0aW9ucyl8fG51bGw9PShlPWUuYWN0aW9ucyl8fG51bGw9PShlPWUudmFsdWVzKT92b2lkIDA6ZS5sZW5ndGgpPjB9KSk7aWYoMCE9PWkubGVuZ3RoKXtpZihudWxsPT10aGlzLlZlKXt0aGlzLlZlPW5ldyBwbyh0aGlzLl9pbnN0YW5jZSksdGhpcy5WZS5pbml0KCk7dGhpcy5WZS56ZSgodD0+e3RoaXMub25BY3Rpb24odCl9KSl9aS5mb3JFYWNoKCh0PT57dmFyIGksZSxyLHMsbjt0LmNvbmRpdGlvbnMmJm51bGwhPShpPXQuY29uZGl0aW9ucykmJmkuYWN0aW9ucyYmbnVsbCE9KGU9dC5jb25kaXRpb25zKSYmbnVsbCE9KGU9ZS5hY3Rpb25zKSYmZS52YWx1ZXMmJihudWxsPT0ocj10LmNvbmRpdGlvbnMpfHxudWxsPT0ocj1yLmFjdGlvbnMpfHxudWxsPT0ocj1yLnZhbHVlcyk/dm9pZCAwOnIubGVuZ3RoKT4wJiYobnVsbD09KHM9dGhpcy5WZSl8fHMucmVnaXN0ZXIodC5jb25kaXRpb25zLmFjdGlvbnMudmFsdWVzKSxudWxsPT0obj10LmNvbmRpdGlvbnMpfHxudWxsPT0obj1uLmFjdGlvbnMpfHxudWxsPT0obj1uLnZhbHVlcyl8fG4uZm9yRWFjaCgoaT0+e2lmKGkmJmkubmFtZSl7dmFyIGU9dGhpcy5XZS5nZXQoaS5uYW1lKTtlJiZlLnB1c2godC5pZCksdGhpcy5XZS5zZXQoaS5uYW1lLGV8fFt0LmlkXSl9fSkpKX0pKX19R2UodCl7dmFyIGk7aWYoMCE9PXQuZmlsdGVyKCh0PT57dmFyIGksZTtyZXR1cm4obnVsbD09KGk9dC5jb25kaXRpb25zKT92b2lkIDA6aS5ldmVudHMpJiYobnVsbD09KGU9dC5jb25kaXRpb25zKXx8bnVsbD09KGU9ZS5ldmVudHMpfHxudWxsPT0oZT1lLnZhbHVlcyk/dm9pZCAwOmUubGVuZ3RoKT4wfSkpLmxlbmd0aCl7bnVsbD09KGk9dGhpcy5faW5zdGFuY2UpfHxpLk5lKCgodCxpKT0+e3RoaXMub25FdmVudCh0LGkpfSkpLHQuZm9yRWFjaCgodD0+e3ZhciBpO251bGw9PShpPXQuY29uZGl0aW9ucyl8fG51bGw9PShpPWkuZXZlbnRzKXx8bnVsbD09KGk9aS52YWx1ZXMpfHxpLmZvckVhY2goKGk9PntpZihpJiZpLm5hbWUpe3ZhciBlPXRoaXMuSGUuZ2V0KGkubmFtZSk7ZSYmZS5wdXNoKHQuaWQpLHRoaXMuSGUuc2V0KGkubmFtZSxlfHxbdC5pZF0pfX0pKX0pKX19b25FdmVudCh0LGkpe3ZhciBlLHI9KG51bGw9PShlPXRoaXMuX2luc3RhbmNlKXx8bnVsbD09KGU9ZS5wZXJzaXN0ZW5jZSk/dm9pZCAwOmUucHJvcHNbT3RdKXx8W107aWYoXCJzdXJ2ZXkgc2hvd25cIj09PXQmJmkmJnIubGVuZ3RoPjApe3ZhciBzO2dvLmluZm8oXCJzdXJ2ZXkgZXZlbnQgbWF0Y2hlZCwgcmVtb3Zpbmcgc3VydmV5IGZyb20gYWN0aXZhdGVkIHN1cnZleXNcIix7ZXZlbnQ6dCxldmVudFBheWxvYWQ6aSxleGlzdGluZ0FjdGl2YXRlZFN1cnZleXM6cn0pO3ZhciBuPW51bGw9PWl8fG51bGw9PShzPWkucHJvcGVydGllcyk/dm9pZCAwOnMuJHN1cnZleV9pZDtpZihuKXt2YXIgbz1yLmluZGV4T2Yobik7bz49MCYmKHIuc3BsaWNlKG8sMSksdGhpcy5LZShyKSl9fWVsc2UgdGhpcy5IZS5oYXModCkmJihnby5pbmZvKFwic3VydmV5IGV2ZW50IG1hdGNoZWQsIHVwZGF0aW5nIGFjdGl2YXRlZCBzdXJ2ZXlzXCIse2V2ZW50OnQsc3VydmV5czp0aGlzLkhlLmdldCh0KX0pLHRoaXMuS2Uoci5jb25jYXQodGhpcy5IZS5nZXQodCl8fFtdKSkpfW9uQWN0aW9uKHQpe3ZhciBpLGU9KG51bGw9PShpPXRoaXMuX2luc3RhbmNlKXx8bnVsbD09KGk9aS5wZXJzaXN0ZW5jZSk/dm9pZCAwOmkucHJvcHNbT3RdKXx8W107dGhpcy5XZS5oYXModCkmJnRoaXMuS2UoZS5jb25jYXQodGhpcy5XZS5nZXQodCl8fFtdKSl9S2UodCl7dmFyIGk7bnVsbD09KGk9dGhpcy5faW5zdGFuY2UpfHxudWxsPT0oaT1pLnBlcnNpc3RlbmNlKXx8aS5yZWdpc3Rlcih7W090XTpbLi4ubmV3IFNldCh0KV19KX1nZXRTdXJ2ZXlzKCl7dmFyIHQsaT1udWxsPT0odD10aGlzLl9pbnN0YW5jZSl8fG51bGw9PSh0PXQucGVyc2lzdGVuY2UpP3ZvaWQgMDp0LnByb3BzW090XTtyZXR1cm4gaXx8W119Z2V0RXZlbnRUb1N1cnZleXMoKXtyZXR1cm4gdGhpcy5IZX1ZZSgpe3JldHVybiB0aGlzLlZlfX1jbGFzcyBtb3tjb25zdHJ1Y3Rvcih0KXt0aGlzLlhlPW51bGwsdGhpcy5RZT0hMSx0aGlzLlplPSExLHRoaXMudHI9W10sdGhpcy5faW5zdGFuY2U9dCx0aGlzLl9zdXJ2ZXlFdmVudFJlY2VpdmVyPW51bGx9b25SZW1vdGVDb25maWcodCl7dmFyIGk9dC5zdXJ2ZXlzO2lmKE8oaSkpcmV0dXJuIGdvLndhcm4oXCJEZWNpZGUgbm90IGxvYWRlZCB5ZXQuIE5vdCBsb2FkaW5nIHN1cnZleXMuXCIpO3ZhciBlPXgoaSk7dGhpcy5pcj1lP2kubGVuZ3RoPjA6aSxnby5pbmZvKFwiZGVjaWRlIHJlc3BvbnNlIHJlY2VpdmVkLCBoYXNTdXJ2ZXlzOiBcIit0aGlzLmlyKSx0aGlzLmlyJiZ0aGlzLmxvYWRJZkVuYWJsZWQoKX1yZXNldCgpe2xvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwibGFzdFNlZW5TdXJ2ZXlEYXRlXCIpO2Zvcih2YXIgdD1bXSxpPTA7aTxsb2NhbFN0b3JhZ2UubGVuZ3RoO2krKyl7dmFyIGU9bG9jYWxTdG9yYWdlLmtleShpKTsobnVsbCE9ZSYmZS5zdGFydHNXaXRoKFwic2VlblN1cnZleV9cIil8fG51bGwhPWUmJmUuc3RhcnRzV2l0aChcImluUHJvZ3Jlc3NTdXJ2ZXlfXCIpKSYmdC5wdXNoKGUpfXQuZm9yRWFjaCgodD0+bG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odCkpKX1sb2FkSWZFbmFibGVkKCl7aWYoIXRoaXMuWGUpaWYodGhpcy5aZSlnby5pbmZvKFwiQWxyZWFkeSBpbml0aWFsaXppbmcgc3VydmV5cywgc2tpcHBpbmcuLi5cIik7ZWxzZSBpZih0aGlzLl9pbnN0YW5jZS5jb25maWcuZGlzYWJsZV9zdXJ2ZXlzKWdvLmluZm8oXCJEaXNhYmxlZC4gTm90IGxvYWRpbmcgc3VydmV5cy5cIik7ZWxzZSBpZih0aGlzLmlyKXt2YXIgdD1udWxsPT12P3ZvaWQgMDp2Ll9fUG9zdGhvZ0V4dGVuc2lvbnNfXztpZih0KXt0aGlzLlplPSEwO3RyeXt2YXIgaT10LmdlbmVyYXRlU3VydmV5cztpZihpKXJldHVybiB2b2lkIHRoaXMuZXIoaSk7dmFyIGU9dC5sb2FkRXh0ZXJuYWxEZXBlbmRlbmN5O2lmKCFlKXJldHVybiB2b2lkIHRoaXMucnIoXCJQb3N0SG9nIGxvYWRFeHRlcm5hbERlcGVuZGVuY3kgZXh0ZW5zaW9uIG5vdCBmb3VuZC5cIik7ZSh0aGlzLl9pbnN0YW5jZSxcInN1cnZleXNcIiwoaT0+e2l8fCF0LmdlbmVyYXRlU3VydmV5cz90aGlzLnJyKFwiQ291bGQgbm90IGxvYWQgc3VydmV5cyBzY3JpcHRcIixpKTp0aGlzLmVyKHQuZ2VuZXJhdGVTdXJ2ZXlzKX0pKX1jYXRjaCh0KXt0aHJvdyB0aGlzLnJyKFwiRXJyb3IgaW5pdGlhbGl6aW5nIHN1cnZleXNcIix0KSx0fWZpbmFsbHl7dGhpcy5aZT0hMX19ZWxzZSBnby5lcnJvcihcIlBvc3RIb2cgRXh0ZW5zaW9ucyBub3QgZm91bmQuXCIpfWVsc2UgZ28uaW5mbyhcIk5vIHN1cnZleXMgdG8gbG9hZC5cIil9ZXIodCl7dGhpcy5YZT10KHRoaXMuX2luc3RhbmNlKSx0aGlzLl9zdXJ2ZXlFdmVudFJlY2VpdmVyPW5ldyBfbyh0aGlzLl9pbnN0YW5jZSksZ28uaW5mbyhcIlN1cnZleXMgbG9hZGVkIHN1Y2Nlc3NmdWxseVwiKSx0aGlzLnNyKHtpc0xvYWRlZDohMH0pfXJyKHQsaSl7Z28uZXJyb3IodCxpKSx0aGlzLnNyKHtpc0xvYWRlZDohMSxlcnJvcjp0fSl9b25TdXJ2ZXlzTG9hZGVkKHQpe3JldHVybiB0aGlzLnRyLnB1c2godCksdGhpcy5YZSYmdGhpcy5zcih7aXNMb2FkZWQ6ITB9KSwoKT0+e3RoaXMudHI9dGhpcy50ci5maWx0ZXIoKGk9PmkhPT10KSl9fWdldFN1cnZleXModCxpKXtpZih2b2lkIDA9PT1pJiYoaT0hMSksdGhpcy5faW5zdGFuY2UuY29uZmlnLmRpc2FibGVfc3VydmV5cylyZXR1cm4gZ28uaW5mbyhcIkRpc2FibGVkLiBOb3QgbG9hZGluZyBzdXJ2ZXlzLlwiKSx0KFtdKTt2YXIgZT10aGlzLl9pbnN0YW5jZS5nZXRfcHJvcGVydHkoQ3QpO2lmKGUmJiFpKXJldHVybiB0KGUse2lzTG9hZGVkOiEwfSk7aWYodGhpcy5RZSlyZXR1cm4gdChbXSx7aXNMb2FkZWQ6ITEsZXJyb3I6XCJTdXJ2ZXlzIGFyZSBhbHJlYWR5IGJlaW5nIGxvYWRlZFwifSk7dHJ5e3RoaXMuUWU9ITAsdGhpcy5faW5zdGFuY2UubWUoe3VybDp0aGlzLl9pbnN0YW5jZS5yZXF1ZXN0Um91dGVyLmVuZHBvaW50Rm9yKFwiYXBpXCIsXCIvYXBpL3N1cnZleXMvP3Rva2VuPVwiK3RoaXMuX2luc3RhbmNlLmNvbmZpZy50b2tlbiksbWV0aG9kOlwiR0VUXCIsdGltZW91dDp0aGlzLl9pbnN0YW5jZS5jb25maWcuc3VydmV5c19yZXF1ZXN0X3RpbWVvdXRfbXMsY2FsbGJhY2s6aT0+e3ZhciBlO3RoaXMuUWU9ITE7dmFyIHI9aS5zdGF0dXNDb2RlO2lmKDIwMCE9PXJ8fCFpLmpzb24pe3ZhciBzPVwiU3VydmV5cyBBUEkgY291bGQgbm90IGJlIGxvYWRlZCwgc3RhdHVzOiBcIityO3JldHVybiBnby5lcnJvcihzKSx0KFtdLHtpc0xvYWRlZDohMSxlcnJvcjpzfSl9dmFyIG4sbz1pLmpzb24uc3VydmV5c3x8W10sYT1vLmZpbHRlcigodD0+ZnVuY3Rpb24odCl7cmV0dXJuISghdC5zdGFydF9kYXRlfHx0LmVuZF9kYXRlKX0odCkmJihmdW5jdGlvbih0KXt2YXIgaTtyZXR1cm4hKG51bGw9PShpPXQuY29uZGl0aW9ucyl8fG51bGw9PShpPWkuZXZlbnRzKXx8bnVsbD09KGk9aS52YWx1ZXMpfHwhaS5sZW5ndGgpfSh0KXx8ZnVuY3Rpb24odCl7dmFyIGk7cmV0dXJuIShudWxsPT0oaT10LmNvbmRpdGlvbnMpfHxudWxsPT0oaT1pLmFjdGlvbnMpfHxudWxsPT0oaT1pLnZhbHVlcyl8fCFpLmxlbmd0aCl9KHQpKSkpO2EubGVuZ3RoPjAmJihudWxsPT0obj10aGlzLl9zdXJ2ZXlFdmVudFJlY2VpdmVyKXx8bi5yZWdpc3RlcihhKSk7cmV0dXJuIG51bGw9PShlPXRoaXMuX2luc3RhbmNlLnBlcnNpc3RlbmNlKXx8ZS5yZWdpc3Rlcih7W0N0XTpvfSksdChvLHtpc0xvYWRlZDohMH0pfX0pfWNhdGNoKHQpe3Rocm93IHRoaXMuUWU9ITEsdH19c3IodCl7Zm9yKHZhciBpIG9mIHRoaXMudHIpdHJ5e3QuaXNMb2FkZWQ/dGhpcy5nZXRTdXJ2ZXlzKGkpOmkoW10sdCl9Y2F0Y2godCl7Z28uZXJyb3IoXCJFcnJvciBpbiBzdXJ2ZXkgY2FsbGJhY2tcIix0KX19Z2V0QWN0aXZlTWF0Y2hpbmdTdXJ2ZXlzKHQsaSl7aWYodm9pZCAwPT09aSYmKGk9ITEpLCFPKHRoaXMuWGUpKXJldHVybiB0aGlzLlhlLmdldEFjdGl2ZU1hdGNoaW5nU3VydmV5cyh0LGkpO2dvLndhcm4oXCJpbml0IHdhcyBub3QgY2FsbGVkXCIpfW5yKHQpe3ZhciBpPW51bGw7cmV0dXJuIHRoaXMuZ2V0U3VydmV5cygoZT0+e3ZhciByO2k9bnVsbCE9PShyPWUuZmluZCgoaT0+aS5pZD09PXQpKSkmJnZvaWQgMCE9PXI/cjpudWxsfSkpLGl9YXIodCl7aWYoTyh0aGlzLlhlKSlyZXR1cm57ZWxpZ2libGU6ITEscmVhc29uOlwiU0RLIGlzIG5vdCBlbmFibGVkIG9yIHN1cnZleSBmdW5jdGlvbmFsaXR5IGlzIG5vdCB5ZXQgbG9hZGVkXCJ9O3ZhciBpPVwic3RyaW5nXCI9PXR5cGVvZiB0P3RoaXMubnIodCk6dDtyZXR1cm4gaT90aGlzLlhlLmNoZWNrU3VydmV5RWxpZ2liaWxpdHkoaSk6e2VsaWdpYmxlOiExLHJlYXNvbjpcIlN1cnZleSBub3QgZm91bmRcIn19Y2FuUmVuZGVyU3VydmV5KHQpe2lmKE8odGhpcy5YZSkpcmV0dXJuIGdvLndhcm4oXCJpbml0IHdhcyBub3QgY2FsbGVkXCIpLHt2aXNpYmxlOiExLGRpc2FibGVkUmVhc29uOlwiU0RLIGlzIG5vdCBlbmFibGVkIG9yIHN1cnZleSBmdW5jdGlvbmFsaXR5IGlzIG5vdCB5ZXQgbG9hZGVkXCJ9O3ZhciBpPXRoaXMuYXIodCk7cmV0dXJue3Zpc2libGU6aS5lbGlnaWJsZSxkaXNhYmxlZFJlYXNvbjppLnJlYXNvbn19Y2FuUmVuZGVyU3VydmV5QXN5bmModCxpKXtyZXR1cm4gTyh0aGlzLlhlKT8oZ28ud2FybihcImluaXQgd2FzIG5vdCBjYWxsZWRcIiksUHJvbWlzZS5yZXNvbHZlKHt2aXNpYmxlOiExLGRpc2FibGVkUmVhc29uOlwiU0RLIGlzIG5vdCBlbmFibGVkIG9yIHN1cnZleSBmdW5jdGlvbmFsaXR5IGlzIG5vdCB5ZXQgbG9hZGVkXCJ9KSk6bmV3IFByb21pc2UoKGU9Pnt0aGlzLmdldFN1cnZleXMoKGk9Pnt2YXIgcixzPW51bGwhPT0ocj1pLmZpbmQoKGk9PmkuaWQ9PT10KSkpJiZ2b2lkIDAhPT1yP3I6bnVsbDtpZihzKXt2YXIgbj10aGlzLmFyKHMpO2Uoe3Zpc2libGU6bi5lbGlnaWJsZSxkaXNhYmxlZFJlYXNvbjpuLnJlYXNvbn0pfWVsc2UgZSh7dmlzaWJsZTohMSxkaXNhYmxlZFJlYXNvbjpcIlN1cnZleSBub3QgZm91bmRcIn0pfSksaSl9KSl9cmVuZGVyU3VydmV5KHQsaSl7aWYoTyh0aGlzLlhlKSlnby53YXJuKFwiaW5pdCB3YXMgbm90IGNhbGxlZFwiKTtlbHNle3ZhciBlPXRoaXMubnIodCkscj1udWxsPT1vP3ZvaWQgMDpvLnF1ZXJ5U2VsZWN0b3IoaSk7ZT9yP3RoaXMuWGUucmVuZGVyU3VydmV5KGUscik6Z28ud2FybihcIlN1cnZleSBlbGVtZW50IG5vdCBmb3VuZFwiKTpnby53YXJuKFwiU3VydmV5IG5vdCBmb3VuZFwiKX19fXZhciBibz16KFwiW1JhdGVMaW1pdGVyXVwiKTtjbGFzcyB3b3tjb25zdHJ1Y3Rvcih0KXt2YXIgaSxlO3RoaXMuc2VydmVyTGltaXRzPXt9LHRoaXMubGFzdEV2ZW50UmF0ZUxpbWl0ZWQ9ITEsdGhpcy5jaGVja0ZvckxpbWl0aW5nPXQ9Pnt2YXIgaT10LnRleHQ7aWYoaSYmaS5sZW5ndGgpdHJ5eyhKU09OLnBhcnNlKGkpLnF1b3RhX2xpbWl0ZWR8fFtdKS5mb3JFYWNoKCh0PT57Ym8uaW5mbygodHx8XCJldmVudHNcIikrXCIgaXMgcXVvdGEgbGltaXRlZC5cIiksdGhpcy5zZXJ2ZXJMaW1pdHNbdF09KG5ldyBEYXRlKS5nZXRUaW1lKCkrNmU0fSkpfWNhdGNoKHQpe3JldHVybiB2b2lkIGJvLndhcm4oJ2NvdWxkIG5vdCByYXRlIGxpbWl0IC0gY29udGludWluZy4gRXJyb3I6IFwiJysobnVsbD09dD92b2lkIDA6dC5tZXNzYWdlKSsnXCInLHt0ZXh0Oml9KX19LHRoaXMuaW5zdGFuY2U9dCx0aGlzLmNhcHR1cmVFdmVudHNQZXJTZWNvbmQ9KG51bGw9PShpPXQuY29uZmlnLnJhdGVfbGltaXRpbmcpP3ZvaWQgMDppLmV2ZW50c19wZXJfc2Vjb25kKXx8MTAsdGhpcy5jYXB0dXJlRXZlbnRzQnVyc3RMaW1pdD1NYXRoLm1heCgobnVsbD09KGU9dC5jb25maWcucmF0ZV9saW1pdGluZyk/dm9pZCAwOmUuZXZlbnRzX2J1cnN0X2xpbWl0KXx8MTAqdGhpcy5jYXB0dXJlRXZlbnRzUGVyU2Vjb25kLHRoaXMuY2FwdHVyZUV2ZW50c1BlclNlY29uZCksdGhpcy5sYXN0RXZlbnRSYXRlTGltaXRlZD10aGlzLmNsaWVudFJhdGVMaW1pdENvbnRleHQoITApLmlzUmF0ZUxpbWl0ZWR9Y2xpZW50UmF0ZUxpbWl0Q29udGV4dCh0KXt2YXIgaSxlLHI7dm9pZCAwPT09dCYmKHQ9ITEpO3ZhciBzPShuZXcgRGF0ZSkuZ2V0VGltZSgpLG49bnVsbCE9PShpPW51bGw9PShlPXRoaXMuaW5zdGFuY2UucGVyc2lzdGVuY2UpP3ZvaWQgMDplLmdldF9wcm9wZXJ0eShMdCkpJiZ2b2lkIDAhPT1pP2k6e3Rva2Vuczp0aGlzLmNhcHR1cmVFdmVudHNCdXJzdExpbWl0LGxhc3Q6c307bi50b2tlbnMrPShzLW4ubGFzdCkvMWUzKnRoaXMuY2FwdHVyZUV2ZW50c1BlclNlY29uZCxuLmxhc3Q9cyxuLnRva2Vucz50aGlzLmNhcHR1cmVFdmVudHNCdXJzdExpbWl0JiYobi50b2tlbnM9dGhpcy5jYXB0dXJlRXZlbnRzQnVyc3RMaW1pdCk7dmFyIG89bi50b2tlbnM8MTtyZXR1cm4gb3x8dHx8KG4udG9rZW5zPU1hdGgubWF4KDAsbi50b2tlbnMtMSkpLCFvfHx0aGlzLmxhc3RFdmVudFJhdGVMaW1pdGVkfHx0fHx0aGlzLmluc3RhbmNlLmNhcHR1cmUoXCIkJGNsaWVudF9pbmdlc3Rpb25fd2FybmluZ1wiLHskJGNsaWVudF9pbmdlc3Rpb25fd2FybmluZ19tZXNzYWdlOlwicG9zdGhvZy1qcyBjbGllbnQgcmF0ZSBsaW1pdGVkLiBDb25maWcgaXMgc2V0IHRvIFwiK3RoaXMuY2FwdHVyZUV2ZW50c1BlclNlY29uZCtcIiBldmVudHMgcGVyIHNlY29uZCBhbmQgXCIrdGhpcy5jYXB0dXJlRXZlbnRzQnVyc3RMaW1pdCtcIiBldmVudHMgYnVyc3QgbGltaXQuXCJ9LHtza2lwX2NsaWVudF9yYXRlX2xpbWl0aW5nOiEwfSksdGhpcy5sYXN0RXZlbnRSYXRlTGltaXRlZD1vLG51bGw9PShyPXRoaXMuaW5zdGFuY2UucGVyc2lzdGVuY2UpfHxyLnNldF9wcm9wZXJ0eShMdCxuKSx7aXNSYXRlTGltaXRlZDpvLHJlbWFpbmluZ1Rva2VuczpuLnRva2Vuc319aXNTZXJ2ZXJSYXRlTGltaXRlZCh0KXt2YXIgaT10aGlzLnNlcnZlckxpbWl0c1t0fHxcImV2ZW50c1wiXXx8ITE7cmV0dXJuITEhPT1pJiYobmV3IERhdGUpLmdldFRpbWUoKTxpfX12YXIgeW89eihcIltSZW1vdGVDb25maWddXCIpO2NsYXNzIFNve2NvbnN0cnVjdG9yKHQpe3RoaXMuX2luc3RhbmNlPXR9Z2V0IHJlbW90ZUNvbmZpZygpe3ZhciB0O3JldHVybiBudWxsPT0odD12Ll9QT1NUSE9HX1JFTU9URV9DT05GSUcpfHxudWxsPT0odD10W3RoaXMuX2luc3RhbmNlLmNvbmZpZy50b2tlbl0pP3ZvaWQgMDp0LmNvbmZpZ31scih0KXt2YXIgaSxlO251bGwhPShpPXYuX19Qb3N0aG9nRXh0ZW5zaW9uc19fKSYmaS5sb2FkRXh0ZXJuYWxEZXBlbmRlbmN5P251bGw9PShlPXYuX19Qb3N0aG9nRXh0ZW5zaW9uc19fKXx8bnVsbD09ZS5sb2FkRXh0ZXJuYWxEZXBlbmRlbmN5fHxlLmxvYWRFeHRlcm5hbERlcGVuZGVuY3kodGhpcy5faW5zdGFuY2UsXCJyZW1vdGUtY29uZmlnXCIsKCgpPT50KHRoaXMucmVtb3RlQ29uZmlnKSkpOih5by5lcnJvcihcIlBvc3RIb2cgRXh0ZW5zaW9ucyBub3QgZm91bmQuIENhbm5vdCBsb2FkIHJlbW90ZSBjb25maWcuXCIpLHQoKSl9dXIodCl7dGhpcy5faW5zdGFuY2UubWUoe21ldGhvZDpcIkdFVFwiLHVybDp0aGlzLl9pbnN0YW5jZS5yZXF1ZXN0Um91dGVyLmVuZHBvaW50Rm9yKFwiYXNzZXRzXCIsXCIvYXJyYXkvXCIrdGhpcy5faW5zdGFuY2UuY29uZmlnLnRva2VuK1wiL2NvbmZpZ1wiKSxjYWxsYmFjazppPT57dChpLmpzb24pfX0pfWxvYWQoKXt0cnl7aWYodGhpcy5yZW1vdGVDb25maWcpcmV0dXJuIHlvLmluZm8oXCJVc2luZyBwcmVsb2FkZWQgcmVtb3RlIGNvbmZpZ1wiLHRoaXMucmVtb3RlQ29uZmlnKSx2b2lkIHRoaXMuYmUodGhpcy5yZW1vdGVDb25maWcpO2lmKHRoaXMuX2luc3RhbmNlLmNvbmZpZy5hZHZhbmNlZF9kaXNhYmxlX2RlY2lkZSlyZXR1cm4gdm9pZCB5by53YXJuKFwiUmVtb3RlIGNvbmZpZyBpcyBkaXNhYmxlZC4gRmFsbGluZyBiYWNrIHRvIGxvY2FsIGNvbmZpZy5cIik7dGhpcy5scigodD0+e2lmKCF0KXJldHVybiB5by5pbmZvKFwiTm8gY29uZmlnIGZvdW5kIGFmdGVyIGxvYWRpbmcgcmVtb3RlIEpTIGNvbmZpZy4gRmFsbGluZyBiYWNrIHRvIEpTT04uXCIpLHZvaWQgdGhpcy51cigodD0+e3RoaXMuYmUodCl9KSk7dGhpcy5iZSh0KX0pKX1jYXRjaCh0KXt5by5lcnJvcihcIkVycm9yIGxvYWRpbmcgcmVtb3RlIGNvbmZpZ1wiLHQpfX1iZSh0KXt0P3RoaXMuX2luc3RhbmNlLmNvbmZpZy5fX3ByZXZpZXdfcmVtb3RlX2NvbmZpZz8odGhpcy5faW5zdGFuY2UuYmUodCksITEhPT10Lmhhc0ZlYXR1cmVGbGFncyYmdGhpcy5faW5zdGFuY2UuZmVhdHVyZUZsYWdzLmVuc3VyZUZsYWdzTG9hZGVkKCkpOnlvLmluZm8oXCJfX3ByZXZpZXdfcmVtb3RlX2NvbmZpZyBpcyBkaXNhYmxlZC4gTG9nZ2luZyBjb25maWcgaW5zdGVhZFwiLHQpOnlvLmVycm9yKFwiRmFpbGVkIHRvIGZldGNoIHJlbW90ZSBjb25maWcgZnJvbSBQb3N0SG9nLlwiKX19dmFyICRvPTNlMztjbGFzcyBrb3tjb25zdHJ1Y3Rvcih0LGkpe3RoaXMuaHI9ITAsdGhpcy5kcj1bXSx0aGlzLnZyPVhlKChudWxsPT1pP3ZvaWQgMDppLmZsdXNoX2ludGVydmFsX21zKXx8JG8sMjUwLDVlMyxcImZsdXNoIGludGVydmFsXCIsJG8pLHRoaXMuY3I9dH1lbnF1ZXVlKHQpe3RoaXMuZHIucHVzaCh0KSx0aGlzLnByfHx0aGlzLmdyKCl9dW5sb2FkKCl7dGhpcy5fcigpO3ZhciB0PXRoaXMuZHIubGVuZ3RoPjA/dGhpcy5tcigpOnt9LGk9T2JqZWN0LnZhbHVlcyh0KTtbLi4uaS5maWx0ZXIoKHQ9PjA9PT10LnVybC5pbmRleE9mKFwiL2VcIikpKSwuLi5pLmZpbHRlcigodD0+MCE9PXQudXJsLmluZGV4T2YoXCIvZVwiKSkpXS5tYXAoKHQ9Pnt0aGlzLmNyKEIoe30sdCx7dHJhbnNwb3J0Olwic2VuZEJlYWNvblwifSkpfSkpfWVuYWJsZSgpe3RoaXMuaHI9ITEsdGhpcy5ncigpfWdyKCl7dmFyIHQ9dGhpczt0aGlzLmhyfHwodGhpcy5wcj1zZXRUaW1lb3V0KCgoKT0+e2lmKHRoaXMuX3IoKSx0aGlzLmRyLmxlbmd0aD4wKXt2YXIgaT10aGlzLm1yKCksZT1mdW5jdGlvbigpe3ZhciBlPWlbcl0scz0obmV3IERhdGUpLmdldFRpbWUoKTtlLmRhdGEmJngoZS5kYXRhKSYmSihlLmRhdGEsKHQ9Pnt0Lm9mZnNldD1NYXRoLmFicyh0LnRpbWVzdGFtcC1zKSxkZWxldGUgdC50aW1lc3RhbXB9KSksdC5jcihlKX07Zm9yKHZhciByIGluIGkpZSgpfX0pLHRoaXMudnIpKX1fcigpe2NsZWFyVGltZW91dCh0aGlzLnByKSx0aGlzLnByPXZvaWQgMH1tcigpe3ZhciB0PXt9O3JldHVybiBKKHRoaXMuZHIsKGk9Pnt2YXIgZSxyPWkscz0ocj9yLmJhdGNoS2V5Om51bGwpfHxyLnVybDtSKHRbc10pJiYodFtzXT1CKHt9LHIse2RhdGE6W119KSksbnVsbD09KGU9dFtzXS5kYXRhKXx8ZS5wdXNoKHIuZGF0YSl9KSksdGhpcy5kcj1bXSx0fX12YXIgeG89W1wicmV0cmllc1BlcmZvcm1lZFNvRmFyXCJdO2NsYXNzIEVve2NvbnN0cnVjdG9yKGkpe3RoaXMuYnI9ITEsdGhpcy53cj0zZTMsdGhpcy5kcj1bXSx0aGlzLl9pbnN0YW5jZT1pLHRoaXMuZHI9W10sdGhpcy55cj0hMCwhUih0KSYmXCJvbkxpbmVcImluIHQubmF2aWdhdG9yJiYodGhpcy55cj10Lm5hdmlnYXRvci5vbkxpbmUsc3QodCxcIm9ubGluZVwiLCgoKT0+e3RoaXMueXI9ITAsdGhpcy5ZaSgpfSkpLHN0KHQsXCJvZmZsaW5lXCIsKCgpPT57dGhpcy55cj0hMX0pKSl9Z2V0IGxlbmd0aCgpe3JldHVybiB0aGlzLmRyLmxlbmd0aH1yZXRyaWFibGVSZXF1ZXN0KHQpe3ZhcntyZXRyaWVzUGVyZm9ybWVkU29GYXI6aX09dCxlPUgodCx4byk7RihpKSYmaT4wJiYoZS51cmw9RnMoZS51cmwse3JldHJ5X2NvdW50Oml9KSksdGhpcy5faW5zdGFuY2UubWUoQih7fSxlLHtjYWxsYmFjazp0PT57MjAwIT09dC5zdGF0dXNDb2RlJiYodC5zdGF0dXNDb2RlPDQwMHx8dC5zdGF0dXNDb2RlPj01MDApJiYobnVsbCE9aT9pOjApPDEwP3RoaXMuU3IoQih7cmV0cmllc1BlcmZvcm1lZFNvRmFyOml9LGUpKTpudWxsPT1lLmNhbGxiYWNrfHxlLmNhbGxiYWNrKHQpfX0pKX1Tcih0KXt2YXIgaT10LnJldHJpZXNQZXJmb3JtZWRTb0Zhcnx8MDt0LnJldHJpZXNQZXJmb3JtZWRTb0Zhcj1pKzE7dmFyIGU9ZnVuY3Rpb24odCl7dmFyIGk9M2UzKk1hdGgucG93KDIsdCksZT1pLzIscj1NYXRoLm1pbigxOGU1LGkpLHM9KE1hdGgucmFuZG9tKCktLjUpKihyLWUpO3JldHVybiBNYXRoLmNlaWwocitzKX0oaSkscj1EYXRlLm5vdygpK2U7dGhpcy5kci5wdXNoKHtyZXRyeUF0OnIscmVxdWVzdE9wdGlvbnM6dH0pO3ZhciBzPVwiRW5xdWV1ZWQgZmFpbGVkIHJlcXVlc3QgZm9yIHJldHJ5IGluIFwiK2U7bmF2aWdhdG9yLm9uTGluZXx8KHMrPVwiIChCcm93c2VyIGlzIG9mZmxpbmUpXCIpLGoud2FybihzKSx0aGlzLmJyfHwodGhpcy5icj0hMCx0aGlzLiRyKCkpfSRyKCl7dGhpcy5rciYmY2xlYXJUaW1lb3V0KHRoaXMua3IpLHRoaXMua3I9c2V0VGltZW91dCgoKCk9Pnt0aGlzLnlyJiZ0aGlzLmRyLmxlbmd0aD4wJiZ0aGlzLllpKCksdGhpcy4kcigpfSksdGhpcy53cil9WWkoKXt2YXIgdD1EYXRlLm5vdygpLGk9W10sZT10aGlzLmRyLmZpbHRlcigoZT0+ZS5yZXRyeUF0PHR8fChpLnB1c2goZSksITEpKSk7aWYodGhpcy5kcj1pLGUubGVuZ3RoPjApZm9yKHZhcntyZXF1ZXN0T3B0aW9uczpyfW9mIGUpdGhpcy5yZXRyaWFibGVSZXF1ZXN0KHIpfXVubG9hZCgpe2Zvcih2YXJ7cmVxdWVzdE9wdGlvbnM6dH1vZih0aGlzLmtyJiYoY2xlYXJUaW1lb3V0KHRoaXMua3IpLHRoaXMua3I9dm9pZCAwKSx0aGlzLmRyKSl0cnl7dGhpcy5faW5zdGFuY2UubWUoQih7fSx0LHt0cmFuc3BvcnQ6XCJzZW5kQmVhY29uXCJ9KSl9Y2F0Y2godCl7ai5lcnJvcih0KX10aGlzLmRyPVtdfX1jbGFzcyBJb3tjb25zdHJ1Y3Rvcih0KXt0aGlzLkVyPSgpPT57dmFyIHQsaSxlLHI7dGhpcy5Jcnx8KHRoaXMuSXI9e30pO3ZhciBzPXRoaXMuc2Nyb2xsRWxlbWVudCgpLG49dGhpcy5zY3JvbGxZKCksbz1zP01hdGgubWF4KDAscy5zY3JvbGxIZWlnaHQtcy5jbGllbnRIZWlnaHQpOjAsYT1uKygobnVsbD09cz92b2lkIDA6cy5jbGllbnRIZWlnaHQpfHwwKSxsPShudWxsPT1zP3ZvaWQgMDpzLnNjcm9sbEhlaWdodCl8fDA7dGhpcy5Jci5sYXN0U2Nyb2xsWT1NYXRoLmNlaWwobiksdGhpcy5Jci5tYXhTY3JvbGxZPU1hdGgubWF4KG4sbnVsbCE9PSh0PXRoaXMuSXIubWF4U2Nyb2xsWSkmJnZvaWQgMCE9PXQ/dDowKSx0aGlzLklyLm1heFNjcm9sbEhlaWdodD1NYXRoLm1heChvLG51bGwhPT0oaT10aGlzLklyLm1heFNjcm9sbEhlaWdodCkmJnZvaWQgMCE9PWk/aTowKSx0aGlzLklyLmxhc3RDb250ZW50WT1hLHRoaXMuSXIubWF4Q29udGVudFk9TWF0aC5tYXgoYSxudWxsIT09KGU9dGhpcy5Jci5tYXhDb250ZW50WSkmJnZvaWQgMCE9PWU/ZTowKSx0aGlzLklyLm1heENvbnRlbnRIZWlnaHQ9TWF0aC5tYXgobCxudWxsIT09KHI9dGhpcy5Jci5tYXhDb250ZW50SGVpZ2h0KSYmdm9pZCAwIT09cj9yOjApfSx0aGlzLl9pbnN0YW5jZT10fWdldENvbnRleHQoKXtyZXR1cm4gdGhpcy5Jcn1yZXNldENvbnRleHQoKXt2YXIgdD10aGlzLklyO3JldHVybiBzZXRUaW1lb3V0KHRoaXMuRXIsMCksdH1zdGFydE1lYXN1cmluZ1Njcm9sbFBvc2l0aW9uKCl7c3QodCxcInNjcm9sbFwiLHRoaXMuRXIse2NhcHR1cmU6ITB9KSxzdCh0LFwic2Nyb2xsZW5kXCIsdGhpcy5Fcix7Y2FwdHVyZTohMH0pLHN0KHQsXCJyZXNpemVcIix0aGlzLkVyKX1zY3JvbGxFbGVtZW50KCl7aWYoIXRoaXMuX2luc3RhbmNlLmNvbmZpZy5zY3JvbGxfcm9vdF9zZWxlY3RvcilyZXR1cm4gbnVsbD09dD92b2lkIDA6dC5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7dmFyIGk9eCh0aGlzLl9pbnN0YW5jZS5jb25maWcuc2Nyb2xsX3Jvb3Rfc2VsZWN0b3IpP3RoaXMuX2luc3RhbmNlLmNvbmZpZy5zY3JvbGxfcm9vdF9zZWxlY3RvcjpbdGhpcy5faW5zdGFuY2UuY29uZmlnLnNjcm9sbF9yb290X3NlbGVjdG9yXTtmb3IodmFyIGUgb2YgaSl7dmFyIHI9bnVsbD09dD92b2lkIDA6dC5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGUpO2lmKHIpcmV0dXJuIHJ9fXNjcm9sbFkoKXtpZih0aGlzLl9pbnN0YW5jZS5jb25maWcuc2Nyb2xsX3Jvb3Rfc2VsZWN0b3Ipe3ZhciBpPXRoaXMuc2Nyb2xsRWxlbWVudCgpO3JldHVybiBpJiZpLnNjcm9sbFRvcHx8MH1yZXR1cm4gdCYmKHQuc2Nyb2xsWXx8dC5wYWdlWU9mZnNldHx8dC5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wKXx8MH1zY3JvbGxYKCl7aWYodGhpcy5faW5zdGFuY2UuY29uZmlnLnNjcm9sbF9yb290X3NlbGVjdG9yKXt2YXIgaT10aGlzLnNjcm9sbEVsZW1lbnQoKTtyZXR1cm4gaSYmaS5zY3JvbGxMZWZ0fHwwfXJldHVybiB0JiYodC5zY3JvbGxYfHx0LnBhZ2VYT2Zmc2V0fHx0LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0KXx8MH19dmFyIFBvPXQ9PlluKG51bGw9PXQ/dm9pZCAwOnQuY29uZmlnLm1hc2tfcGVyc29uYWxfZGF0YV9wcm9wZXJ0aWVzLG51bGw9PXQ/dm9pZCAwOnQuY29uZmlnLmN1c3RvbV9wZXJzb25hbF9kYXRhX3Byb3BlcnRpZXMpO2NsYXNzIFJve2NvbnN0cnVjdG9yKHQsaSxlLHIpe3RoaXMuUHI9dD0+e3ZhciBpPXRoaXMuUnIoKTtpZighaXx8aS5zZXNzaW9uSWQhPT10KXt2YXIgZT17c2Vzc2lvbklkOnQscHJvcHM6dGhpcy5Ucih0aGlzLl9pbnN0YW5jZSl9O3RoaXMuTXIucmVnaXN0ZXIoe1tEdF06ZX0pfX0sdGhpcy5faW5zdGFuY2U9dCx0aGlzLkNyPWksdGhpcy5Ncj1lLHRoaXMuVHI9cnx8UG8sdGhpcy5Dci5vblNlc3Npb25JZCh0aGlzLlByKX1Scigpe3JldHVybiB0aGlzLk1yLnByb3BzW0R0XX1nZXRTZXRPbmNlUHJvcHMoKXt2YXIgdCxpPW51bGw9PSh0PXRoaXMuUnIoKSk/dm9pZCAwOnQucHJvcHM7cmV0dXJuIGk/XCJyXCJpbiBpP1huKGkpOnskcmVmZXJyaW5nX2RvbWFpbjppLnJlZmVycmluZ0RvbWFpbiwkcGF0aG5hbWU6aS5pbml0aWFsUGF0aE5hbWUsdXRtX3NvdXJjZTppLnV0bV9zb3VyY2UsdXRtX2NhbXBhaWduOmkudXRtX2NhbXBhaWduLHV0bV9tZWRpdW06aS51dG1fbWVkaXVtLHV0bV9jb250ZW50OmkudXRtX2NvbnRlbnQsdXRtX3Rlcm06aS51dG1fdGVybX06e319Z2V0U2Vzc2lvblByb3BzKCl7dmFyIHQ9e307cmV0dXJuIEooWih0aGlzLmdldFNldE9uY2VQcm9wcygpKSwoKGksZSk9PntcIiRjdXJyZW50X3VybFwiPT09ZSYmKGU9XCJ1cmxcIiksdFtcIiRzZXNzaW9uX2VudHJ5X1wiK3coZSldPWl9KSksdH19dmFyIFRvPXooXCJbU2Vzc2lvbklkXVwiKTtjbGFzcyBNb3tjb25zdHJ1Y3Rvcih0LGksZSl7dmFyIHI7aWYodGhpcy5Pcj1bXSwhdC5wZXJzaXN0ZW5jZSl0aHJvdyBuZXcgRXJyb3IoXCJTZXNzaW9uSWRNYW5hZ2VyIHJlcXVpcmVzIGEgUG9zdEhvZ1BlcnNpc3RlbmNlIGluc3RhbmNlXCIpO2lmKHQuY29uZmlnLl9fcHJldmlld19leHBlcmltZW50YWxfY29va2llbGVzc19tb2RlKXRocm93IG5ldyBFcnJvcihcIlNlc3Npb25JZE1hbmFnZXIgY2Fubm90IGJlIHVzZWQgd2l0aCBfX3ByZXZpZXdfZXhwZXJpbWVudGFsX2Nvb2tpZWxlc3NfbW9kZVwiKTt0aGlzLlM9dC5jb25maWcsdGhpcy5Ncj10LnBlcnNpc3RlbmNlLHRoaXMub2k9dm9pZCAwLHRoaXMua3Q9dm9pZCAwLHRoaXMuX3Nlc3Npb25TdGFydFRpbWVzdGFtcD1udWxsLHRoaXMuX3Nlc3Npb25BY3Rpdml0eVRpbWVzdGFtcD1udWxsLHRoaXMuRnI9aXx8TmksdGhpcy5Bcj1lfHxOaTt2YXIgcz10aGlzLlMucGVyc2lzdGVuY2VfbmFtZXx8dGhpcy5TLnRva2VuLG49dGhpcy5TLnNlc3Npb25faWRsZV90aW1lb3V0X3NlY29uZHN8fDE4MDA7aWYodGhpcy5fc2Vzc2lvblRpbWVvdXRNcz0xZTMqWGUobiw2MCwzNmUzLFwic2Vzc2lvbl9pZGxlX3RpbWVvdXRfc2Vjb25kc1wiLDE4MDApLHQucmVnaXN0ZXIoeyRjb25maWd1cmVkX3Nlc3Npb25fdGltZW91dF9tczp0aGlzLl9zZXNzaW9uVGltZW91dE1zfSksdGhpcy5EcigpLHRoaXMuTHI9XCJwaF9cIitzK1wiX3dpbmRvd19pZFwiLHRoaXMuTnI9XCJwaF9cIitzK1wiX3ByaW1hcnlfd2luZG93X2V4aXN0c1wiLHRoaXMuanIoKSl7dmFyIG89WGkuRCh0aGlzLkxyKSxhPVhpLkQodGhpcy5Ocik7byYmIWE/dGhpcy5vaT1vOlhpLk4odGhpcy5MciksWGkuTCh0aGlzLk5yLCEwKX1pZihudWxsIT0ocj10aGlzLlMuYm9vdHN0cmFwKSYmci5zZXNzaW9uSUQpdHJ5e3ZhciBsPSh0PT57dmFyIGk9dC5yZXBsYWNlKC8tL2csXCJcIik7aWYoMzIhPT1pLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJOb3QgYSB2YWxpZCBVVUlEXCIpO2lmKFwiN1wiIT09aVsxMl0pdGhyb3cgbmV3IEVycm9yKFwiTm90IGEgVVVJRHY3XCIpO3JldHVybiBwYXJzZUludChpLnN1YnN0cmluZygwLDEyKSwxNil9KSh0aGlzLlMuYm9vdHN0cmFwLnNlc3Npb25JRCk7dGhpcy56cih0aGlzLlMuYm9vdHN0cmFwLnNlc3Npb25JRCwobmV3IERhdGUpLmdldFRpbWUoKSxsKX1jYXRjaCh0KXtUby5lcnJvcihcIkludmFsaWQgc2Vzc2lvbklEIGluIGJvb3RzdHJhcFwiLHQpfXRoaXMuVXIoKX1nZXQgc2Vzc2lvblRpbWVvdXRNcygpe3JldHVybiB0aGlzLl9zZXNzaW9uVGltZW91dE1zfW9uU2Vzc2lvbklkKHQpe3JldHVybiBSKHRoaXMuT3IpJiYodGhpcy5Pcj1bXSksdGhpcy5Pci5wdXNoKHQpLHRoaXMua3QmJnQodGhpcy5rdCx0aGlzLm9pKSwoKT0+e3RoaXMuT3I9dGhpcy5Pci5maWx0ZXIoKGk9PmkhPT10KSl9fWpyKCl7cmV0dXJuXCJtZW1vcnlcIiE9PXRoaXMuUy5wZXJzaXN0ZW5jZSYmIXRoaXMuTXIueGUmJlhpLk8oKX1xcih0KXt0IT09dGhpcy5vaSYmKHRoaXMub2k9dCx0aGlzLmpyKCkmJlhpLkwodGhpcy5Mcix0KSl9QnIoKXtyZXR1cm4gdGhpcy5vaT90aGlzLm9pOnRoaXMuanIoKT9YaS5EKHRoaXMuTHIpOm51bGx9enIodCxpLGUpe3Q9PT10aGlzLmt0JiZpPT09dGhpcy5fc2Vzc2lvbkFjdGl2aXR5VGltZXN0YW1wJiZlPT09dGhpcy5fc2Vzc2lvblN0YXJ0VGltZXN0YW1wfHwodGhpcy5fc2Vzc2lvblN0YXJ0VGltZXN0YW1wPWUsdGhpcy5fc2Vzc2lvbkFjdGl2aXR5VGltZXN0YW1wPWksdGhpcy5rdD10LHRoaXMuTXIucmVnaXN0ZXIoe1skdF06W2ksdCxlXX0pKX1Icigpe2lmKHRoaXMua3QmJnRoaXMuX3Nlc3Npb25BY3Rpdml0eVRpbWVzdGFtcCYmdGhpcy5fc2Vzc2lvblN0YXJ0VGltZXN0YW1wKXJldHVyblt0aGlzLl9zZXNzaW9uQWN0aXZpdHlUaW1lc3RhbXAsdGhpcy5rdCx0aGlzLl9zZXNzaW9uU3RhcnRUaW1lc3RhbXBdO3ZhciB0PXRoaXMuTXIucHJvcHNbJHRdO3JldHVybiB4KHQpJiYyPT09dC5sZW5ndGgmJnQucHVzaCh0WzBdKSx0fHxbMCxudWxsLDBdfXJlc2V0U2Vzc2lvbklkKCl7dGhpcy56cihudWxsLG51bGwsbnVsbCl9VXIoKXtzdCh0LFwiYmVmb3JldW5sb2FkXCIsKCgpPT57dGhpcy5qcigpJiZYaS5OKHRoaXMuTnIpfSkse2NhcHR1cmU6ITF9KX1jaGVja0FuZEdldFNlc3Npb25BbmRXaW5kb3dJZCh0LGkpe2lmKHZvaWQgMD09PXQmJih0PSExKSx2b2lkIDA9PT1pJiYoaT1udWxsKSx0aGlzLlMuX19wcmV2aWV3X2V4cGVyaW1lbnRhbF9jb29raWVsZXNzX21vZGUpdGhyb3cgbmV3IEVycm9yKFwiY2hlY2tBbmRHZXRTZXNzaW9uQW5kV2luZG93SWQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgaW4gX19wcmV2aWV3X2V4cGVyaW1lbnRhbF9jb29raWVsZXNzX21vZGVcIik7dmFyIGU9aXx8KG5ldyBEYXRlKS5nZXRUaW1lKCksW3IscyxuXT10aGlzLkhyKCksbz10aGlzLkJyKCksYT1GKG4pJiZuPjAmJk1hdGguYWJzKGUtbik+ODY0ZTUsbD0hMSx1PSFzLGg9IXQmJk1hdGguYWJzKGUtcik+dGhpcy5zZXNzaW9uVGltZW91dE1zO3V8fGh8fGE/KHM9dGhpcy5GcigpLG89dGhpcy5BcigpLFRvLmluZm8oXCJuZXcgc2Vzc2lvbiBJRCBnZW5lcmF0ZWRcIix7c2Vzc2lvbklkOnMsd2luZG93SWQ6byxjaGFuZ2VSZWFzb246e25vU2Vzc2lvbklkOnUsYWN0aXZpdHlUaW1lb3V0Omgsc2Vzc2lvblBhc3RNYXhpbXVtTGVuZ3RoOmF9fSksbj1lLGw9ITApOm98fChvPXRoaXMuQXIoKSxsPSEwKTt2YXIgZD0wPT09cnx8IXR8fGE/ZTpyLHY9MD09PW4/KG5ldyBEYXRlKS5nZXRUaW1lKCk6bjtyZXR1cm4gdGhpcy5xcihvKSx0aGlzLnpyKHMsZCx2KSx0fHx0aGlzLkRyKCksbCYmdGhpcy5Pci5mb3JFYWNoKCh0PT50KHMsbyxsP3tub1Nlc3Npb25JZDp1LGFjdGl2aXR5VGltZW91dDpoLHNlc3Npb25QYXN0TWF4aW11bUxlbmd0aDphfTp2b2lkIDApKSkse3Nlc3Npb25JZDpzLHdpbmRvd0lkOm8sc2Vzc2lvblN0YXJ0VGltZXN0YW1wOnYsY2hhbmdlUmVhc29uOmw/e25vU2Vzc2lvbklkOnUsYWN0aXZpdHlUaW1lb3V0Omgsc2Vzc2lvblBhc3RNYXhpbXVtTGVuZ3RoOmF9OnZvaWQgMCxsYXN0QWN0aXZpdHlUaW1lc3RhbXA6cn19RHIoKXtjbGVhclRpbWVvdXQodGhpcy5XciksdGhpcy5Xcj1zZXRUaW1lb3V0KCgoKT0+e3RoaXMucmVzZXRTZXNzaW9uSWQoKX0pLDEuMSp0aGlzLnNlc3Npb25UaW1lb3V0TXMpfX12YXIgQ289W1wiJHNldF9vbmNlXCIsXCIkc2V0XCJdLE9vPXooXCJbU2l0ZUFwcHNdXCIpO2NsYXNzIEZve2NvbnN0cnVjdG9yKHQpe3RoaXMuX2luc3RhbmNlPXQsdGhpcy5Hcj1bXSx0aGlzLmFwcHM9e319Z2V0IGlzRW5hYmxlZCgpe3JldHVybiEhdGhpcy5faW5zdGFuY2UuY29uZmlnLm9wdF9pbl9zaXRlX2FwcHN9SnIodCxpKXtpZihpKXt2YXIgZT10aGlzLmdsb2JhbHNGb3JFdmVudChpKTt0aGlzLkdyLnB1c2goZSksdGhpcy5Hci5sZW5ndGg+MWUzJiYodGhpcy5Hcj10aGlzLkdyLnNsaWNlKDEwKSl9fWdldCBzaXRlQXBwTG9hZGVycygpe3ZhciB0O3JldHVybiBudWxsPT0odD12Ll9QT1NUSE9HX1JFTU9URV9DT05GSUcpfHxudWxsPT0odD10W3RoaXMuX2luc3RhbmNlLmNvbmZpZy50b2tlbl0pP3ZvaWQgMDp0LnNpdGVBcHBzfWluaXQoKXtpZih0aGlzLmlzRW5hYmxlZCl7dmFyIHQ9dGhpcy5faW5zdGFuY2UuTmUodGhpcy5Kci5iaW5kKHRoaXMpKTt0aGlzLlZyPSgpPT57dCgpLHRoaXMuR3I9W10sdGhpcy5Wcj12b2lkIDB9fX1nbG9iYWxzRm9yRXZlbnQodCl7dmFyIGksZSxyLHMsbixvLGE7aWYoIXQpdGhyb3cgbmV3IEVycm9yKFwiRXZlbnQgcGF5bG9hZCBpcyByZXF1aXJlZFwiKTt2YXIgbD17fSx1PXRoaXMuX2luc3RhbmNlLmdldF9wcm9wZXJ0eShcIiRncm91cHNcIil8fFtdLGg9dGhpcy5faW5zdGFuY2UuZ2V0X3Byb3BlcnR5KFwiJHN0b3JlZF9ncm91cF9wcm9wZXJ0aWVzXCIpfHx7fTtmb3IodmFyW2Qsdl1vZiBPYmplY3QuZW50cmllcyhoKSlsW2RdPXtpZDp1W2RdLHR5cGU6ZCxwcm9wZXJ0aWVzOnZ9O3Zhcnskc2V0X29uY2U6Yywkc2V0OmZ9PXQ7cmV0dXJue2V2ZW50OkIoe30sSCh0LENvKSx7cHJvcGVydGllczpCKHt9LHQucHJvcGVydGllcyxmP3skc2V0OkIoe30sbnVsbCE9PShpPW51bGw9PShlPXQucHJvcGVydGllcyk/dm9pZCAwOmUuJHNldCkmJnZvaWQgMCE9PWk/aTp7fSxmKX06e30sYz97JHNldF9vbmNlOkIoe30sbnVsbCE9PShyPW51bGw9PShzPXQucHJvcGVydGllcyk/dm9pZCAwOnMuJHNldF9vbmNlKSYmdm9pZCAwIT09cj9yOnt9LGMpfTp7fSksZWxlbWVudHNfY2hhaW46bnVsbCE9PShuPW51bGw9PShvPXQucHJvcGVydGllcyk/dm9pZCAwOm8uJGVsZW1lbnRzX2NoYWluKSYmdm9pZCAwIT09bj9uOlwiXCIsZGlzdGluY3RfaWQ6bnVsbD09KGE9dC5wcm9wZXJ0aWVzKT92b2lkIDA6YS5kaXN0aW5jdF9pZH0pLHBlcnNvbjp7cHJvcGVydGllczp0aGlzLl9pbnN0YW5jZS5nZXRfcHJvcGVydHkoXCIkc3RvcmVkX3BlcnNvbl9wcm9wZXJ0aWVzXCIpfSxncm91cHM6bH19c2V0dXBTaXRlQXBwKHQpe3ZhciBpPXRoaXMuYXBwc1t0LmlkXSxlPSgpPT57dmFyIGU7KCFpLmVycm9yZWQmJnRoaXMuR3IubGVuZ3RoJiYoT28uaW5mbyhcIlByb2Nlc3NpbmcgXCIrdGhpcy5Hci5sZW5ndGgrXCIgZXZlbnRzIGZvciBzaXRlIGFwcCB3aXRoIGlkIFwiK3QuaWQpLHRoaXMuR3IuZm9yRWFjaCgodD0+bnVsbD09aS5wcm9jZXNzRXZlbnQ/dm9pZCAwOmkucHJvY2Vzc0V2ZW50KHQpKSksaS5wcm9jZXNzZWRCdWZmZXI9ITApLE9iamVjdC52YWx1ZXModGhpcy5hcHBzKS5ldmVyeSgodD0+dC5wcm9jZXNzZWRCdWZmZXJ8fHQuZXJyb3JlZCkpKSYmKG51bGw9PShlPXRoaXMuVnIpfHxlLmNhbGwodGhpcykpfSxyPSExLHM9cz0+e2kuZXJyb3JlZD0hcyxpLmxvYWRlZD0hMCxPby5pbmZvKFwiU2l0ZSBhcHAgd2l0aCBpZCBcIit0LmlkK1wiIFwiKyhzP1wibG9hZGVkXCI6XCJlcnJvcmVkXCIpKSxyJiZlKCl9O3RyeXt2YXJ7cHJvY2Vzc0V2ZW50Om59PXQuaW5pdCh7cG9zdGhvZzp0aGlzLl9pbnN0YW5jZSxjYWxsYmFjazp0PT57cyh0KX19KTtuJiYoaS5wcm9jZXNzRXZlbnQ9bikscj0hMH1jYXRjaChpKXtPby5lcnJvcihcIkVycm9yIHdoaWxlIGluaXRpYWxpemluZyBQb3N0SG9nIGFwcCB3aXRoIGNvbmZpZyBpZCBcIit0LmlkLGkpLHMoITEpfWlmKHImJmkubG9hZGVkKXRyeXtlKCl9Y2F0Y2goZSl7T28uZXJyb3IoXCJFcnJvciB3aGlsZSBwcm9jZXNzaW5nIGJ1ZmZlcmVkIGV2ZW50cyBQb3N0SG9nIGFwcCB3aXRoIGNvbmZpZyBpZCBcIit0LmlkLGUpLGkuZXJyb3JlZD0hMH19S3IoKXt2YXIgdD10aGlzLnNpdGVBcHBMb2FkZXJzfHxbXTtmb3IodmFyIGkgb2YgdCl0aGlzLmFwcHNbaS5pZF09e2lkOmkuaWQsbG9hZGVkOiExLGVycm9yZWQ6ITEscHJvY2Vzc2VkQnVmZmVyOiExfTtmb3IodmFyIGUgb2YgdCl0aGlzLnNldHVwU2l0ZUFwcChlKX1Zcih0KXtpZigwIT09T2JqZWN0LmtleXModGhpcy5hcHBzKS5sZW5ndGgpe3ZhciBpPXRoaXMuZ2xvYmFsc0ZvckV2ZW50KHQpO2Zvcih2YXIgZSBvZiBPYmplY3QudmFsdWVzKHRoaXMuYXBwcykpdHJ5e251bGw9PWUucHJvY2Vzc0V2ZW50fHxlLnByb2Nlc3NFdmVudChpKX1jYXRjaChpKXtPby5lcnJvcihcIkVycm9yIHdoaWxlIHByb2Nlc3NpbmcgZXZlbnQgXCIrdC5ldmVudCtcIiBmb3Igc2l0ZSBhcHAgXCIrZS5pZCxpKX19fW9uUmVtb3RlQ29uZmlnKHQpe3ZhciBpLGUscixzPXRoaXM7aWYobnVsbCE9KGk9dGhpcy5zaXRlQXBwTG9hZGVycykmJmkubGVuZ3RoKXJldHVybiB0aGlzLmlzRW5hYmxlZD8odGhpcy5LcigpLHZvaWQgdGhpcy5faW5zdGFuY2Uub24oXCJldmVudENhcHR1cmVkXCIsKHQ9PnRoaXMuWXIodCkpKSk6dm9pZCBPby5lcnJvcignUG9zdEhvZyBzaXRlIGFwcHMgYXJlIGRpc2FibGVkLiBFbmFibGUgdGhlIFwib3B0X2luX3NpdGVfYXBwc1wiIGNvbmZpZyB0byBwcm9jZWVkLicpO2lmKG51bGw9PShlPXRoaXMuVnIpfHxlLmNhbGwodGhpcyksbnVsbCE9KHI9dC5zaXRlQXBwcykmJnIubGVuZ3RoKWlmKHRoaXMuaXNFbmFibGVkKXt2YXIgbj1mdW5jdGlvbih0KXt2YXIgaTt2W1wiX18kJHBoX3NpdGVfYXBwX1wiK3RdPXMuX2luc3RhbmNlLG51bGw9PShpPXYuX19Qb3N0aG9nRXh0ZW5zaW9uc19fKXx8bnVsbD09aS5sb2FkU2l0ZUFwcHx8aS5sb2FkU2l0ZUFwcChzLl9pbnN0YW5jZSxhLChpPT57aWYoaSlyZXR1cm4gT28uZXJyb3IoXCJFcnJvciB3aGlsZSBpbml0aWFsaXppbmcgUG9zdEhvZyBhcHAgd2l0aCBjb25maWcgaWQgXCIrdCxpKX0pKX07Zm9yKHZhcntpZDpvLHVybDphfW9mIHQuc2l0ZUFwcHMpbihvKX1lbHNlIE9vLmVycm9yKCdQb3N0SG9nIHNpdGUgYXBwcyBhcmUgZGlzYWJsZWQuIEVuYWJsZSB0aGUgXCJvcHRfaW5fc2l0ZV9hcHBzXCIgY29uZmlnIHRvIHByb2NlZWQuJyl9fXZhciBBbz1bXCJhbWF6b25ib3RcIixcImFtYXpvbnByb2R1Y3Rib3RcIixcImFwcC5oeXBlZmFjdG9ycy5jb21cIixcImFwcGxlYm90XCIsXCJhcmNoaXZlLm9yZ19ib3RcIixcImF3YXJpb2JvdFwiLFwiYmFja2xpbmtzZXh0ZW5kZWRib3RcIixcImJhaWR1c3BpZGVyXCIsXCJiaW5nYm90XCIsXCJiaW5ncHJldmlld1wiLFwiY2hyb21lLWxpZ2h0aG91c2VcIixcImRhdGFmb3JzZW9ib3RcIixcImRlZXBzY2FuXCIsXCJkdWNrZHVja2JvdFwiLFwiZmFjZWJvb2tleHRlcm5hbFwiLFwiZmFjZWJvb2tjYXRhbG9nXCIsXCJodHRwOi8veWFuZGV4LmNvbS9ib3RzXCIsXCJodWJzcG90XCIsXCJpYV9hcmNoaXZlclwiLFwibGlua2VkaW5ib3RcIixcIm1ldGEtZXh0ZXJuYWxhZ2VudFwiLFwibWoxMmJvdFwiLFwibXNuYm90XCIsXCJuZXNzdXNcIixcInBldGFsYm90XCIsXCJwaW50ZXJlc3RcIixcInByZXJlbmRlclwiLFwicm9nZXJib3RcIixcInNjcmVhbWluZyBmcm9nXCIsXCJzZWJvdC13YVwiLFwic2l0ZWJ1bGJcIixcInNsYWNrYm90XCIsXCJzbHVycFwiLFwidHJlbmRpY3Rpb25ib3RcIixcInR1cm5pdGluXCIsXCJ0d2l0dGVyYm90XCIsXCJ2ZXJjZWxib3RcIixcInlhaG9vISBzbHVycFwiLFwieWFuZGV4Ym90XCIsXCJ6b29tYm90XCIsXCJib3QuaHRtXCIsXCJib3QucGhwXCIsXCIoYm90O1wiLFwiYm90L1wiLFwiY3Jhd2xlclwiLFwiYWhyZWZzYm90XCIsXCJhaHJlZnNzaXRlYXVkaXRcIixcInNlbXJ1c2hib3RcIixcInNpdGVhdWRpdGJvdFwiLFwic3BsaXRzaWduYWxib3RcIixcImdwdGJvdFwiLFwib2FpLXNlYXJjaGJvdFwiLFwiY2hhdGdwdC11c2VyXCIsXCJwZXJwbGV4aXR5Ym90XCIsXCJiZXR0ZXIgdXB0aW1lIGJvdFwiLFwic2VudHJ5dXB0aW1lYm90XCIsXCJ1cHRpbWVyb2JvdFwiLFwiaGVhZGxlc3NjaHJvbWVcIixcImN5cHJlc3NcIixcImdvb2dsZS1ob3RlbGFkc3ZlcmlmaWVyXCIsXCJhZHNib3QtZ29vZ2xlXCIsXCJhcGlzLWdvb2dsZVwiLFwiZHVwbGV4d2ViLWdvb2dsZVwiLFwiZmVlZGZldGNoZXItZ29vZ2xlXCIsXCJnb29nbGUgZmF2aWNvblwiLFwiZ29vZ2xlIHdlYiBwcmV2aWV3XCIsXCJnb29nbGUtcmVhZC1hbG91ZFwiLFwiZ29vZ2xlYm90XCIsXCJnb29nbGVvdGhlclwiLFwiZ29vZ2xlLWNsb3VkdmVydGV4Ym90XCIsXCJnb29nbGV3ZWJsaWdodFwiLFwibWVkaWFwYXJ0bmVycy1nb29nbGVcIixcInN0b3JlYm90LWdvb2dsZVwiLFwiZ29vZ2xlLWluc3BlY3Rpb250b29sXCIsXCJieXRlc3BpZGVyXCJdLERvPWZ1bmN0aW9uKHQsaSl7aWYoIXQpcmV0dXJuITE7dmFyIGU9dC50b0xvd2VyQ2FzZSgpO3JldHVybiBBby5jb25jYXQoaXx8W10pLnNvbWUoKHQ9Pnt2YXIgaT10LnRvTG93ZXJDYXNlKCk7cmV0dXJuLTEhPT1lLmluZGV4T2YoaSl9KSl9LExvPWZ1bmN0aW9uKHQsaSl7aWYoIXQpcmV0dXJuITE7dmFyIGU9dC51c2VyQWdlbnQ7aWYoZSYmRG8oZSxpKSlyZXR1cm4hMDt0cnl7dmFyIHI9bnVsbD09dD92b2lkIDA6dC51c2VyQWdlbnREYXRhO2lmKG51bGwhPXImJnIuYnJhbmRzJiZyLmJyYW5kcy5zb21lKCh0PT5EbyhudWxsPT10P3ZvaWQgMDp0LmJyYW5kLGkpKSkpcmV0dXJuITB9Y2F0Y2godCl7fXJldHVybiEhdC53ZWJkcml2ZXJ9LE5vPWZ1bmN0aW9uKHQpe3JldHVybiB0LlVTPVwidXNcIix0LkVVPVwiZXVcIix0LkNVU1RPTT1cImN1c3RvbVwiLHR9KHt9KSxqbz1cImkucG9zdGhvZy5jb21cIjtjbGFzcyB6b3tjb25zdHJ1Y3Rvcih0KXt0aGlzLlhyPXt9LHRoaXMuaW5zdGFuY2U9dH1nZXQgYXBpSG9zdCgpe3ZhciB0PXRoaXMuaW5zdGFuY2UuY29uZmlnLmFwaV9ob3N0LnRyaW0oKS5yZXBsYWNlKC9cXC8kLyxcIlwiKTtyZXR1cm5cImh0dHBzOi8vYXBwLnBvc3Rob2cuY29tXCI9PT10P1wiaHR0cHM6Ly91cy5pLnBvc3Rob2cuY29tXCI6dH1nZXQgdWlIb3N0KCl7dmFyIHQsaT1udWxsPT0odD10aGlzLmluc3RhbmNlLmNvbmZpZy51aV9ob3N0KT92b2lkIDA6dC5yZXBsYWNlKC9cXC8kLyxcIlwiKTtyZXR1cm4gaXx8KGk9dGhpcy5hcGlIb3N0LnJlcGxhY2UoXCIuXCIram8sXCIucG9zdGhvZy5jb21cIikpLFwiaHR0cHM6Ly9hcHAucG9zdGhvZy5jb21cIj09PWk/XCJodHRwczovL3VzLnBvc3Rob2cuY29tXCI6aX1nZXQgcmVnaW9uKCl7cmV0dXJuIHRoaXMuWHJbdGhpcy5hcGlIb3N0XXx8KC9odHRwczpcXC9cXC8oYXBwfHVzfHVzLWFzc2V0cykoXFwuaSk/XFwucG9zdGhvZ1xcLmNvbS9pLnRlc3QodGhpcy5hcGlIb3N0KT90aGlzLlhyW3RoaXMuYXBpSG9zdF09Tm8uVVM6L2h0dHBzOlxcL1xcLyhldXxldS1hc3NldHMpKFxcLmkpP1xcLnBvc3Rob2dcXC5jb20vaS50ZXN0KHRoaXMuYXBpSG9zdCk/dGhpcy5Yclt0aGlzLmFwaUhvc3RdPU5vLkVVOnRoaXMuWHJbdGhpcy5hcGlIb3N0XT1Oby5DVVNUT00pLHRoaXMuWHJbdGhpcy5hcGlIb3N0XX1lbmRwb2ludEZvcih0LGkpe2lmKHZvaWQgMD09PWkmJihpPVwiXCIpLGkmJihpPVwiL1wiPT09aVswXT9pOlwiL1wiK2kpLFwidWlcIj09PXQpcmV0dXJuIHRoaXMudWlIb3N0K2k7aWYodGhpcy5yZWdpb249PT1Oby5DVVNUT00pcmV0dXJuIHRoaXMuYXBpSG9zdCtpO3ZhciBlPWpvK2k7c3dpdGNoKHQpe2Nhc2VcImFzc2V0c1wiOnJldHVyblwiaHR0cHM6Ly9cIit0aGlzLnJlZ2lvbitcIi1hc3NldHMuXCIrZTtjYXNlXCJhcGlcIjpyZXR1cm5cImh0dHBzOi8vXCIrdGhpcy5yZWdpb24rXCIuXCIrZX19fXZhciBVbz17aWNvbnRhaW5zOihpLGUpPT4hIXQmJmUuaHJlZi50b0xvd2VyQ2FzZSgpLmluZGV4T2YoaS50b0xvd2VyQ2FzZSgpKT4tMSxub3RfaWNvbnRhaW5zOihpLGUpPT4hIXQmJi0xPT09ZS5ocmVmLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihpLnRvTG93ZXJDYXNlKCkpLHJlZ2V4OihpLGUpPT4hIXQmJk5zKGUuaHJlZixpKSxub3RfcmVnZXg6KGksZSk9PiEhdCYmIU5zKGUuaHJlZixpKSxleGFjdDoodCxpKT0+aS5ocmVmPT09dCxpc19ub3Q6KHQsaSk9PmkuaHJlZiE9PXR9O2NsYXNzIHFve2NvbnN0cnVjdG9yKHQpe3ZhciBpPXRoaXM7dGhpcy5nZXRXZWJFeHBlcmltZW50c0FuZEV2YWx1YXRlRGlzcGxheUxvZ2ljPWZ1bmN0aW9uKHQpe3ZvaWQgMD09PXQmJih0PSExKSxpLmdldFdlYkV4cGVyaW1lbnRzKCh0PT57cW8uUXIoXCJyZXRyaWV2ZWQgd2ViIGV4cGVyaW1lbnRzIGZyb20gdGhlIHNlcnZlclwiKSxpLlpyPW5ldyBNYXAsdC5mb3JFYWNoKCh0PT57aWYodC5mZWF0dXJlX2ZsYWdfa2V5KXt2YXIgZTtpZihpLlpyKXFvLlFyKFwic2V0dGluZyBmbGFnIGtleSBcIix0LmZlYXR1cmVfZmxhZ19rZXksXCIgdG8gd2ViIGV4cGVyaW1lbnQgXCIsdCksbnVsbD09KGU9aS5acil8fGUuc2V0KHQuZmVhdHVyZV9mbGFnX2tleSx0KTt2YXIgcj1pLl9pbnN0YW5jZS5nZXRGZWF0dXJlRmxhZyh0LmZlYXR1cmVfZmxhZ19rZXkpO1QocikmJnQudmFyaWFudHNbcl0mJmkudHModC5uYW1lLHIsdC52YXJpYW50c1tyXS50cmFuc2Zvcm1zKX1lbHNlIGlmKHQudmFyaWFudHMpZm9yKHZhciBzIGluIHQudmFyaWFudHMpe3ZhciBuPXQudmFyaWFudHNbc107cW8uZXMobikmJmkudHModC5uYW1lLHMsbi50cmFuc2Zvcm1zKX19KSl9KSx0KX0sdGhpcy5faW5zdGFuY2U9dCx0aGlzLl9pbnN0YW5jZS5vbkZlYXR1cmVGbGFncygodD0+e3RoaXMub25GZWF0dXJlRmxhZ3ModCl9KSl9b25GZWF0dXJlRmxhZ3ModCl7aWYodGhpcy5faXNfYm90KCkpcW8uUXIoXCJSZWZ1c2luZyB0byByZW5kZXIgd2ViIGV4cGVyaW1lbnQgc2luY2UgdGhlIHZpZXdlciBpcyBhIGxpa2VseSBib3RcIik7ZWxzZSBpZighdGhpcy5faW5zdGFuY2UuY29uZmlnLmRpc2FibGVfd2ViX2V4cGVyaW1lbnRzKXtpZihPKHRoaXMuWnIpKXJldHVybiB0aGlzLlpyPW5ldyBNYXAsdGhpcy5sb2FkSWZFbmFibGVkKCksdm9pZCB0aGlzLnByZXZpZXdXZWJFeHBlcmltZW50KCk7cW8uUXIoXCJhcHBseWluZyBmZWF0dXJlIGZsYWdzXCIsdCksdC5mb3JFYWNoKCh0PT57dmFyIGk7aWYodGhpcy5aciYmbnVsbCE9KGk9dGhpcy5acikmJmkuaGFzKHQpKXt2YXIgZSxyPXRoaXMuX2luc3RhbmNlLmdldEZlYXR1cmVGbGFnKHQpLHM9bnVsbD09KGU9dGhpcy5acik/dm9pZCAwOmUuZ2V0KHQpO3ImJm51bGwhPXMmJnMudmFyaWFudHNbcl0mJnRoaXMudHMocy5uYW1lLHIscy52YXJpYW50c1tyXS50cmFuc2Zvcm1zKX19KSl9fXByZXZpZXdXZWJFeHBlcmltZW50KCl7dmFyIHQ9cW8uZ2V0V2luZG93TG9jYXRpb24oKTtpZihudWxsIT10JiZ0LnNlYXJjaCl7dmFyIGk9JGkobnVsbD09dD92b2lkIDA6dC5zZWFyY2gsXCJfX2V4cGVyaW1lbnRfaWRcIiksZT0kaShudWxsPT10P3ZvaWQgMDp0LnNlYXJjaCxcIl9fZXhwZXJpbWVudF92YXJpYW50XCIpO2kmJmUmJihxby5RcihcInByZXZpZXdpbmcgd2ViIGV4cGVyaW1lbnRzIFwiK2krXCIgJiYgXCIrZSksdGhpcy5nZXRXZWJFeHBlcmltZW50cygodD0+e3RoaXMucnMocGFyc2VJbnQoaSksZSx0KX0pLCExLCEwKSl9fWxvYWRJZkVuYWJsZWQoKXt0aGlzLl9pbnN0YW5jZS5jb25maWcuZGlzYWJsZV93ZWJfZXhwZXJpbWVudHN8fHRoaXMuZ2V0V2ViRXhwZXJpbWVudHNBbmRFdmFsdWF0ZURpc3BsYXlMb2dpYygpfWdldFdlYkV4cGVyaW1lbnRzKHQsaSxlKXtpZih0aGlzLl9pbnN0YW5jZS5jb25maWcuZGlzYWJsZV93ZWJfZXhwZXJpbWVudHMmJiFlKXJldHVybiB0KFtdKTt2YXIgcj10aGlzLl9pbnN0YW5jZS5nZXRfcHJvcGVydHkoXCIkd2ViX2V4cGVyaW1lbnRzXCIpO2lmKHImJiFpKXJldHVybiB0KHIpO3RoaXMuX2luc3RhbmNlLm1lKHt1cmw6dGhpcy5faW5zdGFuY2UucmVxdWVzdFJvdXRlci5lbmRwb2ludEZvcihcImFwaVwiLFwiL2FwaS93ZWJfZXhwZXJpbWVudHMvP3Rva2VuPVwiK3RoaXMuX2luc3RhbmNlLmNvbmZpZy50b2tlbiksbWV0aG9kOlwiR0VUXCIsY2FsbGJhY2s6aT0+e2lmKDIwMCE9PWkuc3RhdHVzQ29kZXx8IWkuanNvbilyZXR1cm4gdChbXSk7dmFyIGU9aS5qc29uLmV4cGVyaW1lbnRzfHxbXTtyZXR1cm4gdChlKX19KX1ycyh0LGksZSl7dmFyIHI9ZS5maWx0ZXIoKGk9PmkuaWQ9PT10KSk7ciYmci5sZW5ndGg+MCYmKHFvLlFyKFwiUHJldmlld2luZyB3ZWIgZXhwZXJpbWVudCBbXCIrclswXS5uYW1lK1wiXSB3aXRoIHZhcmlhbnQgW1wiK2krXCJdXCIpLHRoaXMudHMoclswXS5uYW1lLGksclswXS52YXJpYW50c1tpXS50cmFuc2Zvcm1zKSl9c3RhdGljIGVzKHQpe3JldHVybiFPKHQuY29uZGl0aW9ucykmJihxby5zcyh0KSYmcW8ubnModCkpfXN0YXRpYyBzcyh0KXt2YXIgaTtpZihPKHQuY29uZGl0aW9ucyl8fE8obnVsbD09KGk9dC5jb25kaXRpb25zKT92b2lkIDA6aS51cmwpKXJldHVybiEwO3ZhciBlLHIscyxuPXFvLmdldFdpbmRvd0xvY2F0aW9uKCk7cmV0dXJuISFuJiYobnVsbD09KGU9dC5jb25kaXRpb25zKXx8IWUudXJsfHxVb1tudWxsIT09KHI9bnVsbD09KHM9dC5jb25kaXRpb25zKT92b2lkIDA6cy51cmxNYXRjaFR5cGUpJiZ2b2lkIDAhPT1yP3I6XCJpY29udGFpbnNcIl0odC5jb25kaXRpb25zLnVybCxuKSl9c3RhdGljIGdldFdpbmRvd0xvY2F0aW9uKCl7cmV0dXJuIG51bGw9PXQ/dm9pZCAwOnQubG9jYXRpb259c3RhdGljIG5zKHQpe3ZhciBpO2lmKE8odC5jb25kaXRpb25zKXx8TyhudWxsPT0oaT10LmNvbmRpdGlvbnMpP3ZvaWQgMDppLnV0bSkpcmV0dXJuITA7dmFyIGU9V24oKTtpZihlLnV0bV9zb3VyY2Upe3ZhciByLHMsbixvLGEsbCx1LGgsZD1udWxsPT0ocj10LmNvbmRpdGlvbnMpfHxudWxsPT0ocj1yLnV0bSl8fCFyLnV0bV9jYW1wYWlnbnx8KG51bGw9PShzPXQuY29uZGl0aW9ucyl8fG51bGw9PShzPXMudXRtKT92b2lkIDA6cy51dG1fY2FtcGFpZ24pPT1lLnV0bV9jYW1wYWlnbix2PW51bGw9PShuPXQuY29uZGl0aW9ucyl8fG51bGw9PShuPW4udXRtKXx8IW4udXRtX3NvdXJjZXx8KG51bGw9PShvPXQuY29uZGl0aW9ucyl8fG51bGw9PShvPW8udXRtKT92b2lkIDA6by51dG1fc291cmNlKT09ZS51dG1fc291cmNlLGM9bnVsbD09KGE9dC5jb25kaXRpb25zKXx8bnVsbD09KGE9YS51dG0pfHwhYS51dG1fbWVkaXVtfHwobnVsbD09KGw9dC5jb25kaXRpb25zKXx8bnVsbD09KGw9bC51dG0pP3ZvaWQgMDpsLnV0bV9tZWRpdW0pPT1lLnV0bV9tZWRpdW0sZj1udWxsPT0odT10LmNvbmRpdGlvbnMpfHxudWxsPT0odT11LnV0bSl8fCF1LnV0bV90ZXJtfHwobnVsbD09KGg9dC5jb25kaXRpb25zKXx8bnVsbD09KGg9aC51dG0pP3ZvaWQgMDpoLnV0bV90ZXJtKT09ZS51dG1fdGVybTtyZXR1cm4gZCYmYyYmZiYmdn1yZXR1cm4hMX1zdGF0aWMgUXIodCl7Zm9yKHZhciBpPWFyZ3VtZW50cy5sZW5ndGgsZT1uZXcgQXJyYXkoaT4xP2ktMTowKSxyPTE7cjxpO3IrKyllW3ItMV09YXJndW1lbnRzW3JdO2ouaW5mbyhcIltXZWJFeHBlcmltZW50c10gXCIrdCxlKX10cyh0LGksZSl7dGhpcy5faXNfYm90KCk/cW8uUXIoXCJSZWZ1c2luZyB0byByZW5kZXIgd2ViIGV4cGVyaW1lbnQgc2luY2UgdGhlIHZpZXdlciBpcyBhIGxpa2VseSBib3RcIik6XCJjb250cm9sXCIhPT1pP2UuZm9yRWFjaCgoZT0+e2lmKGUuc2VsZWN0b3Ipe3ZhciByO3FvLlFyKFwiYXBwbHlpbmcgdHJhbnNmb3JtIG9mIHZhcmlhbnQgXCIraStcIiBmb3IgZXhwZXJpbWVudCBcIit0K1wiIFwiLGUpO3ZhciBzPW51bGw9PShyPWRvY3VtZW50KT92b2lkIDA6ci5xdWVyeVNlbGVjdG9yQWxsKGUuc2VsZWN0b3IpO251bGw9PXN8fHMuZm9yRWFjaCgodD0+e3ZhciBpPXQ7ZS5odG1sJiYoaS5pbm5lckhUTUw9ZS5odG1sKSxlLmNzcyYmaS5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLGUuY3NzKX0pKX19KSk6cW8uUXIoXCJDb250cm9sIHZhcmlhbnRzIGxlYXZlIHRoZSBwYWdlIHVubW9kaWZpZWQuXCIpfV9pc19ib3QoKXtyZXR1cm4gbiYmdGhpcy5faW5zdGFuY2U/TG8obix0aGlzLl9pbnN0YW5jZS5jb25maWcuY3VzdG9tX2Jsb2NrZWRfdXNlcmFnZW50cyk6dm9pZCAwfX12YXIgQm89e30sSG89KCk9Pnt9LFdvPVwicG9zdGhvZ1wiLEdvPSFDcyYmLTE9PT0obnVsbD09ZD92b2lkIDA6ZC5pbmRleE9mKFwiTVNJRVwiKSkmJi0xPT09KG51bGw9PWQ/dm9pZCAwOmQuaW5kZXhPZihcIk1vemlsbGFcIikpLEpvPSgpPT57dmFyIGk7cmV0dXJue2FwaV9ob3N0OlwiaHR0cHM6Ly91cy5pLnBvc3Rob2cuY29tXCIsdWlfaG9zdDpudWxsLHRva2VuOlwiXCIsYXV0b2NhcHR1cmU6ITAscmFnZWNsaWNrOiEwLGNyb3NzX3N1YmRvbWFpbl9jb29raWU6ZXQobnVsbD09bz92b2lkIDA6by5sb2NhdGlvbikscGVyc2lzdGVuY2U6XCJsb2NhbFN0b3JhZ2UrY29va2llXCIscGVyc2lzdGVuY2VfbmFtZTpcIlwiLGxvYWRlZDpIbyxzYXZlX2NhbXBhaWduX3BhcmFtczohMCxjdXN0b21fY2FtcGFpZ25fcGFyYW1zOltdLGN1c3RvbV9ibG9ja2VkX3VzZXJhZ2VudHM6W10sc2F2ZV9yZWZlcnJlcjohMCxjYXB0dXJlX3BhZ2V2aWV3OiEwLGNhcHR1cmVfcGFnZWxlYXZlOlwiaWZfY2FwdHVyZV9wYWdldmlld1wiLGRlYnVnOmEmJlQobnVsbD09YT92b2lkIDA6YS5zZWFyY2gpJiYtMSE9PWEuc2VhcmNoLmluZGV4T2YoXCJfX3Bvc3Rob2dfZGVidWc9dHJ1ZVwiKXx8ITEsY29va2llX2V4cGlyYXRpb246MzY1LHVwZ3JhZGU6ITEsZGlzYWJsZV9zZXNzaW9uX3JlY29yZGluZzohMSxkaXNhYmxlX3BlcnNpc3RlbmNlOiExLGRpc2FibGVfd2ViX2V4cGVyaW1lbnRzOiEwLGRpc2FibGVfc3VydmV5czohMSxkaXNhYmxlX2V4dGVybmFsX2RlcGVuZGVuY3lfbG9hZGluZzohMSxlbmFibGVfcmVjb3JkaW5nX2NvbnNvbGVfbG9nOnZvaWQgMCxzZWN1cmVfY29va2llOlwiaHR0cHM6XCI9PT0obnVsbD09dHx8bnVsbD09KGk9dC5sb2NhdGlvbik/dm9pZCAwOmkucHJvdG9jb2wpLGlwOiEwLG9wdF9vdXRfY2FwdHVyaW5nX2J5X2RlZmF1bHQ6ITEsb3B0X291dF9wZXJzaXN0ZW5jZV9ieV9kZWZhdWx0OiExLG9wdF9vdXRfdXNlcmFnZW50X2ZpbHRlcjohMSxvcHRfb3V0X2NhcHR1cmluZ19wZXJzaXN0ZW5jZV90eXBlOlwibG9jYWxTdG9yYWdlXCIsb3B0X291dF9jYXB0dXJpbmdfY29va2llX3ByZWZpeDpudWxsLG9wdF9pbl9zaXRlX2FwcHM6ITEscHJvcGVydHlfZGVueWxpc3Q6W10scmVzcGVjdF9kbnQ6ITEsc2FuaXRpemVfcHJvcGVydGllczpudWxsLHJlcXVlc3RfaGVhZGVyczp7fSxyZXF1ZXN0X2JhdGNoaW5nOiEwLHByb3BlcnRpZXNfc3RyaW5nX21heF9sZW5ndGg6NjU1MzUsc2Vzc2lvbl9yZWNvcmRpbmc6e30sbWFza19hbGxfZWxlbWVudF9hdHRyaWJ1dGVzOiExLG1hc2tfYWxsX3RleHQ6ITEsbWFza19wZXJzb25hbF9kYXRhX3Byb3BlcnRpZXM6ITEsY3VzdG9tX3BlcnNvbmFsX2RhdGFfcHJvcGVydGllczpbXSxhZHZhbmNlZF9kaXNhYmxlX2RlY2lkZTohMSxhZHZhbmNlZF9kaXNhYmxlX2ZlYXR1cmVfZmxhZ3M6ITEsYWR2YW5jZWRfZGlzYWJsZV9mZWF0dXJlX2ZsYWdzX29uX2ZpcnN0X2xvYWQ6ITEsYWR2YW5jZWRfZGlzYWJsZV90b29sYmFyX21ldHJpY3M6ITEsZmVhdHVyZV9mbGFnX3JlcXVlc3RfdGltZW91dF9tczozZTMsc3VydmV5c19yZXF1ZXN0X3RpbWVvdXRfbXM6MWU0LG9uX3JlcXVlc3RfZXJyb3I6dD0+e3ZhciBpPVwiQmFkIEhUVFAgc3RhdHVzOiBcIit0LnN0YXR1c0NvZGUrXCIgXCIrdC50ZXh0O2ouZXJyb3IoaSl9LGdldF9kZXZpY2VfaWQ6dD0+dCxjYXB0dXJlX3BlcmZvcm1hbmNlOnZvaWQgMCxuYW1lOlwicG9zdGhvZ1wiLGJvb3RzdHJhcDp7fSxkaXNhYmxlX2NvbXByZXNzaW9uOiExLHNlc3Npb25faWRsZV90aW1lb3V0X3NlY29uZHM6MTgwMCxwZXJzb25fcHJvZmlsZXM6XCJpZGVudGlmaWVkX29ubHlcIixiZWZvcmVfc2VuZDp2b2lkIDAscmVxdWVzdF9xdWV1ZV9jb25maWc6e2ZsdXNoX2ludGVydmFsX21zOiRvfSxfb25DYXB0dXJlOkhvfX0sVm89dD0+e3ZhciBpPXt9O1IodC5wcm9jZXNzX3BlcnNvbil8fChpLnBlcnNvbl9wcm9maWxlcz10LnByb2Nlc3NfcGVyc29uKSxSKHQueGhyX2hlYWRlcnMpfHwoaS5yZXF1ZXN0X2hlYWRlcnM9dC54aHJfaGVhZGVycyksUih0LmNvb2tpZV9uYW1lKXx8KGkucGVyc2lzdGVuY2VfbmFtZT10LmNvb2tpZV9uYW1lKSxSKHQuZGlzYWJsZV9jb29raWUpfHwoaS5kaXNhYmxlX3BlcnNpc3RlbmNlPXQuZGlzYWJsZV9jb29raWUpLFIodC5zdG9yZV9nb29nbGUpfHwoaS5zYXZlX2NhbXBhaWduX3BhcmFtcz10LnN0b3JlX2dvb2dsZSksUih0LnZlcmJvc2UpfHwoaS5kZWJ1Zz10LnZlcmJvc2UpO3ZhciBlPVYoe30saSx0KTtyZXR1cm4geCh0LnByb3BlcnR5X2JsYWNrbGlzdCkmJihSKHQucHJvcGVydHlfZGVueWxpc3QpP2UucHJvcGVydHlfZGVueWxpc3Q9dC5wcm9wZXJ0eV9ibGFja2xpc3Q6eCh0LnByb3BlcnR5X2RlbnlsaXN0KT9lLnByb3BlcnR5X2RlbnlsaXN0PVsuLi50LnByb3BlcnR5X2JsYWNrbGlzdCwuLi50LnByb3BlcnR5X2RlbnlsaXN0XTpqLmVycm9yKFwiSW52YWxpZCB2YWx1ZSBmb3IgcHJvcGVydHlfZGVueWxpc3QgY29uZmlnOiBcIit0LnByb3BlcnR5X2RlbnlsaXN0KSksZX07Y2xhc3MgS297Y29uc3RydWN0b3IoKXt0aGlzLl9fZm9yY2VBbGxvd0xvY2FsaG9zdD0hMX1nZXQgb3MoKXtyZXR1cm4gdGhpcy5fX2ZvcmNlQWxsb3dMb2NhbGhvc3R9c2V0IG9zKHQpe2ouZXJyb3IoXCJXZWJQZXJmb3JtYW5jZU9ic2VydmVyIGlzIGRlcHJlY2F0ZWQgYW5kIGhhcyBubyBpbXBhY3Qgb24gbmV0d29yayBjYXB0dXJlLiBVc2UgYF9mb3JjZUFsbG93TG9jYWxob3N0TmV0d29ya0NhcHR1cmVgIG9uIGBwb3N0aG9nLnNlc3Npb25SZWNvcmRpbmdgXCIpLHRoaXMuX19mb3JjZUFsbG93TG9jYWxob3N0PXR9fWNsYXNzIFlve2dldCBkZWNpZGVFbmRwb2ludFdhc0hpdCgpe3ZhciB0LGk7cmV0dXJuIG51bGwhPT0odD1udWxsPT0oaT10aGlzLmZlYXR1cmVGbGFncyk/dm9pZCAwOmkuaGFzTG9hZGVkRmxhZ3MpJiZ2b2lkIDAhPT10JiZ0fWNvbnN0cnVjdG9yKCl7dGhpcy53ZWJQZXJmb3JtYW5jZT1uZXcgS28sdGhpcy5scz0hMSx0aGlzLnZlcnNpb249Yy5MSUJfVkVSU0lPTix0aGlzLnVzPW5ldyBmbyx0aGlzLl9jYWxjdWxhdGVfZXZlbnRfcHJvcGVydGllcz10aGlzLmNhbGN1bGF0ZUV2ZW50UHJvcGVydGllcy5iaW5kKHRoaXMpLHRoaXMuY29uZmlnPUpvKCksdGhpcy5TZW50cnlJbnRlZ3JhdGlvbj1ncyx0aGlzLnNlbnRyeUludGVncmF0aW9uPXQ9PmZ1bmN0aW9uKHQsaSl7dmFyIGU9cHModCxpKTtyZXR1cm57bmFtZTpmcyxwcm9jZXNzRXZlbnQ6dD0+ZSh0KX19KHRoaXMsdCksdGhpcy5fX3JlcXVlc3RfcXVldWU9W10sdGhpcy5fX2xvYWRlZD0hMSx0aGlzLmFuYWx5dGljc0RlZmF1bHRFbmRwb2ludD1cIi9lL1wiLHRoaXMuaHM9ITEsdGhpcy5kcz1udWxsLHRoaXMudnM9bnVsbCx0aGlzLmNzPW51bGwsdGhpcy5mZWF0dXJlRmxhZ3M9bmV3IGhvKHRoaXMpLHRoaXMudG9vbGJhcj1uZXcgeXModGhpcyksdGhpcy5zY3JvbGxNYW5hZ2VyPW5ldyBJbyh0aGlzKSx0aGlzLnBhZ2VWaWV3TWFuYWdlcj1uZXcgVHModGhpcyksdGhpcy5zdXJ2ZXlzPW5ldyBtbyh0aGlzKSx0aGlzLmV4cGVyaW1lbnRzPW5ldyBxbyh0aGlzKSx0aGlzLmV4Y2VwdGlvbnM9bmV3IEJzKHRoaXMpLHRoaXMucmF0ZUxpbWl0ZXI9bmV3IHdvKHRoaXMpLHRoaXMucmVxdWVzdFJvdXRlcj1uZXcgem8odGhpcyksdGhpcy5jb25zZW50PW5ldyBaaSh0aGlzKSx0aGlzLnBlb3BsZT17c2V0Oih0LGksZSk9Pnt2YXIgcj1UKHQpP3tbdF06aX06dDt0aGlzLnNldFBlcnNvblByb3BlcnRpZXMociksbnVsbD09ZXx8ZSh7fSl9LHNldF9vbmNlOih0LGksZSk9Pnt2YXIgcj1UKHQpP3tbdF06aX06dDt0aGlzLnNldFBlcnNvblByb3BlcnRpZXModm9pZCAwLHIpLG51bGw9PWV8fGUoe30pfX0sdGhpcy5vbihcImV2ZW50Q2FwdHVyZWRcIiwodD0+ai5pbmZvKCdzZW5kIFwiJysobnVsbD09dD92b2lkIDA6dC5ldmVudCkrJ1wiJyx0KSkpfWluaXQodCxpLGUpe2lmKGUmJmUhPT1Xbyl7dmFyIHIscz1udWxsIT09KHI9Qm9bZV0pJiZ2b2lkIDAhPT1yP3I6bmV3IFlvO3JldHVybiBzLl9pbml0KHQsaSxlKSxCb1tlXT1zLEJvW1dvXVtlXT1zLHN9cmV0dXJuIHRoaXMuX2luaXQodCxpLGUpfV9pbml0KGksZSxyKXt2YXIgcyxuO2lmKHZvaWQgMD09PWUmJihlPXt9KSxSKGkpfHxNKGkpKXJldHVybiBqLmNyaXRpY2FsKFwiUG9zdEhvZyB3YXMgaW5pdGlhbGl6ZWQgd2l0aG91dCBhIHRva2VuLiBUaGlzIGxpa2VseSBpbmRpY2F0ZXMgYSBtaXNjb25maWd1cmF0aW9uLiBQbGVhc2UgY2hlY2sgdGhlIGZpcnN0IGFyZ3VtZW50IHBhc3NlZCB0byBwb3N0aG9nLmluaXQoKVwiKSx0aGlzO2lmKHRoaXMuX19sb2FkZWQpcmV0dXJuIGoud2FybihcIllvdSBoYXZlIGFscmVhZHkgaW5pdGlhbGl6ZWQgUG9zdEhvZyEgUmUtaW5pdGlhbGl6aW5nIGlzIGEgbm8tb3BcIiksdGhpczt0aGlzLl9fbG9hZGVkPSEwLHRoaXMuY29uZmlnPXt9LHRoaXMuZnM9W10sZS5wZXJzb25fcHJvZmlsZXMmJih0aGlzLnZzPWUucGVyc29uX3Byb2ZpbGVzKSx0aGlzLnNldF9jb25maWcoVih7fSxKbygpLFZvKGUpLHtuYW1lOnIsdG9rZW46aX0pKSx0aGlzLmNvbmZpZy5vbl94aHJfZXJyb3ImJmouZXJyb3IoXCJvbl94aHJfZXJyb3IgaXMgZGVwcmVjYXRlZC4gVXNlIG9uX3JlcXVlc3RfZXJyb3IgaW5zdGVhZFwiKSx0aGlzLmNvbXByZXNzaW9uPWUuZGlzYWJsZV9jb21wcmVzc2lvbj92b2lkIDA6Zy5HWmlwSlMsdGhpcy5wZXJzaXN0ZW5jZT1uZXcgY28odGhpcy5jb25maWcpLHRoaXMuc2Vzc2lvblBlcnNpc3RlbmNlPVwic2Vzc2lvblN0b3JhZ2VcIj09PXRoaXMuY29uZmlnLnBlcnNpc3RlbmNlfHxcIm1lbW9yeVwiPT09dGhpcy5jb25maWcucGVyc2lzdGVuY2U/dGhpcy5wZXJzaXN0ZW5jZTpuZXcgY28oQih7fSx0aGlzLmNvbmZpZyx7cGVyc2lzdGVuY2U6XCJzZXNzaW9uU3RvcmFnZVwifSkpO3ZhciBvPUIoe30sdGhpcy5wZXJzaXN0ZW5jZS5wcm9wcyksYT1CKHt9LHRoaXMuc2Vzc2lvblBlcnNpc3RlbmNlLnByb3BzKTtpZih0aGlzLnBzPW5ldyBrbygodD0+dGhpcy5ncyh0KSksdGhpcy5jb25maWcucmVxdWVzdF9xdWV1ZV9jb25maWcpLHRoaXMuX3M9bmV3IEVvKHRoaXMpLHRoaXMuX19yZXF1ZXN0X3F1ZXVlPVtdLHRoaXMuY29uZmlnLl9fcHJldmlld19leHBlcmltZW50YWxfY29va2llbGVzc19tb2RlfHwodGhpcy5zZXNzaW9uTWFuYWdlcj1uZXcgTW8odGhpcyksdGhpcy5zZXNzaW9uUHJvcHNNYW5hZ2VyPW5ldyBSbyh0aGlzLHRoaXMuc2Vzc2lvbk1hbmFnZXIsdGhpcy5wZXJzaXN0ZW5jZSkpLG5ldyAkcyh0aGlzKS5zdGFydElmRW5hYmxlZE9yU3RvcCgpLHRoaXMuc2l0ZUFwcHM9bmV3IEZvKHRoaXMpLG51bGw9PShzPXRoaXMuc2l0ZUFwcHMpfHxzLmluaXQoKSx0aGlzLmNvbmZpZy5fX3ByZXZpZXdfZXhwZXJpbWVudGFsX2Nvb2tpZWxlc3NfbW9kZXx8KHRoaXMuc2Vzc2lvblJlY29yZGluZz1uZXcgZHModGhpcyksdGhpcy5zZXNzaW9uUmVjb3JkaW5nLnN0YXJ0SWZFbmFibGVkT3JTdG9wKCkpLHRoaXMuY29uZmlnLmRpc2FibGVfc2Nyb2xsX3Byb3BlcnRpZXN8fHRoaXMuc2Nyb2xsTWFuYWdlci5zdGFydE1lYXN1cmluZ1Njcm9sbFBvc2l0aW9uKCksdGhpcy5hdXRvY2FwdHVyZT1uZXcgTWkodGhpcyksdGhpcy5hdXRvY2FwdHVyZS5zdGFydElmRW5hYmxlZCgpLHRoaXMuc3VydmV5cy5sb2FkSWZFbmFibGVkKCksdGhpcy5oZWF0bWFwcz1uZXcgUnModGhpcyksdGhpcy5oZWF0bWFwcy5zdGFydElmRW5hYmxlZCgpLHRoaXMud2ViVml0YWxzQXV0b2NhcHR1cmU9bmV3IEVzKHRoaXMpLHRoaXMuZXhjZXB0aW9uT2JzZXJ2ZXI9bmV3IG5lKHRoaXMpLHRoaXMuZXhjZXB0aW9uT2JzZXJ2ZXIuc3RhcnRJZkVuYWJsZWQoKSx0aGlzLmRlYWRDbGlja3NBdXRvY2FwdHVyZT1uZXcgcmUodGhpcyxlZSksdGhpcy5kZWFkQ2xpY2tzQXV0b2NhcHR1cmUuc3RhcnRJZkVuYWJsZWQoKSx0aGlzLmhpc3RvcnlBdXRvY2FwdHVyZT1uZXcgTGUodGhpcyksdGhpcy5oaXN0b3J5QXV0b2NhcHR1cmUuc3RhcnRJZkVuYWJsZWQoKSxjLkRFQlVHPWMuREVCVUd8fHRoaXMuY29uZmlnLmRlYnVnLGMuREVCVUcmJmouaW5mbyhcIlN0YXJ0aW5nIGluIGRlYnVnIG1vZGVcIix7dGhpczp0aGlzLGNvbmZpZzplLHRoaXNDOkIoe30sdGhpcy5jb25maWcpLHA6byxzOmF9KSx0aGlzLmJzKCksdm9pZCAwIT09KG51bGw9PShuPWUuYm9vdHN0cmFwKT92b2lkIDA6bi5kaXN0aW5jdElEKSl7dmFyIGwsdSxoPXRoaXMuY29uZmlnLmdldF9kZXZpY2VfaWQoTmkoKSksZD1udWxsIT0obD1lLmJvb3RzdHJhcCkmJmwuaXNJZGVudGlmaWVkSUQ/aDplLmJvb3RzdHJhcC5kaXN0aW5jdElEO3RoaXMucGVyc2lzdGVuY2Uuc2V0X3Byb3BlcnR5KEF0LG51bGwhPSh1PWUuYm9vdHN0cmFwKSYmdS5pc0lkZW50aWZpZWRJRD9cImlkZW50aWZpZWRcIjpcImFub255bW91c1wiKSx0aGlzLnJlZ2lzdGVyKHtkaXN0aW5jdF9pZDplLmJvb3RzdHJhcC5kaXN0aW5jdElELCRkZXZpY2VfaWQ6ZH0pfWlmKHRoaXMud3MoKSl7dmFyIHYsZixwPU9iamVjdC5rZXlzKChudWxsPT0odj1lLmJvb3RzdHJhcCk/dm9pZCAwOnYuZmVhdHVyZUZsYWdzKXx8e30pLmZpbHRlcigodD0+e3ZhciBpO3JldHVybiEobnVsbD09KGk9ZS5ib290c3RyYXApfHxudWxsPT0oaT1pLmZlYXR1cmVGbGFncyl8fCFpW3RdKX0pKS5yZWR1Y2UoKCh0LGkpPT57dmFyIHI7cmV0dXJuIHRbaV09KG51bGw9PShyPWUuYm9vdHN0cmFwKXx8bnVsbD09KHI9ci5mZWF0dXJlRmxhZ3MpP3ZvaWQgMDpyW2ldKXx8ITEsdH0pLHt9KSxfPU9iamVjdC5rZXlzKChudWxsPT0oZj1lLmJvb3RzdHJhcCk/dm9pZCAwOmYuZmVhdHVyZUZsYWdQYXlsb2Fkcyl8fHt9KS5maWx0ZXIoKHQ9PnBbdF0pKS5yZWR1Y2UoKCh0LGkpPT57dmFyIHIscztudWxsIT0ocj1lLmJvb3RzdHJhcCkmJm51bGwhPShyPXIuZmVhdHVyZUZsYWdQYXlsb2FkcykmJnJbaV0mJih0W2ldPW51bGw9PShzPWUuYm9vdHN0cmFwKXx8bnVsbD09KHM9cy5mZWF0dXJlRmxhZ1BheWxvYWRzKT92b2lkIDA6c1tpXSk7cmV0dXJuIHR9KSx7fSk7dGhpcy5mZWF0dXJlRmxhZ3MucmVjZWl2ZWRGZWF0dXJlRmxhZ3Moe2ZlYXR1cmVGbGFnczpwLGZlYXR1cmVGbGFnUGF5bG9hZHM6X30pfWlmKHRoaXMuY29uZmlnLl9fcHJldmlld19leHBlcmltZW50YWxfY29va2llbGVzc19tb2RlKXRoaXMucmVnaXN0ZXJfb25jZSh7ZGlzdGluY3RfaWQ6QnQsJGRldmljZV9pZDpudWxsfSxcIlwiKTtlbHNlIGlmKCF0aGlzLmdldF9kaXN0aW5jdF9pZCgpKXt2YXIgbT10aGlzLmNvbmZpZy5nZXRfZGV2aWNlX2lkKE5pKCkpO3RoaXMucmVnaXN0ZXJfb25jZSh7ZGlzdGluY3RfaWQ6bSwkZGV2aWNlX2lkOm19LFwiXCIpLHRoaXMucGVyc2lzdGVuY2Uuc2V0X3Byb3BlcnR5KEF0LFwiYW5vbnltb3VzXCIpfXJldHVybiBzdCh0LFwib25wYWdlaGlkZVwiaW4gc2VsZj9cInBhZ2VoaWRlXCI6XCJ1bmxvYWRcIix0aGlzLl9oYW5kbGVfdW5sb2FkLmJpbmQodGhpcykse3Bhc3NpdmU6ITF9KSx0aGlzLnRvb2xiYXIubWF5YmVMb2FkVG9vbGJhcigpLGUuc2VnbWVudD9jcyh0aGlzLCgoKT0+dGhpcy55cygpKSk6dGhpcy55cygpLEUodGhpcy5jb25maWcuX29uQ2FwdHVyZSkmJnRoaXMuY29uZmlnLl9vbkNhcHR1cmUhPT1IbyYmKGoud2FybihcIm9uQ2FwdHVyZSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGBiZWZvcmVfc2VuZGAgaW5zdGVhZFwiKSx0aGlzLm9uKFwiZXZlbnRDYXB0dXJlZFwiLCh0PT50aGlzLmNvbmZpZy5fb25DYXB0dXJlKHQuZXZlbnQsdCkpKSksdGhpc31iZSh0KXt2YXIgaSxlLHIscyxuLGEsbCx1O2lmKCFvfHwhby5ib2R5KXJldHVybiBqLmluZm8oXCJkb2N1bWVudCBub3QgcmVhZHkgeWV0LCB0cnlpbmcgYWdhaW4gaW4gNTAwIG1pbGxpc2Vjb25kcy4uLlwiKSx2b2lkIHNldFRpbWVvdXQoKCgpPT57dGhpcy5iZSh0KX0pLDUwMCk7dGhpcy5jb21wcmVzc2lvbj12b2lkIDAsdC5zdXBwb3J0ZWRDb21wcmVzc2lvbiYmIXRoaXMuY29uZmlnLmRpc2FibGVfY29tcHJlc3Npb24mJih0aGlzLmNvbXByZXNzaW9uPW0odC5zdXBwb3J0ZWRDb21wcmVzc2lvbixnLkdaaXBKUyk/Zy5HWmlwSlM6bSh0LnN1cHBvcnRlZENvbXByZXNzaW9uLGcuQmFzZTY0KT9nLkJhc2U2NDp2b2lkIDApLG51bGwhPShpPXQuYW5hbHl0aWNzKSYmaS5lbmRwb2ludCYmKHRoaXMuYW5hbHl0aWNzRGVmYXVsdEVuZHBvaW50PXQuYW5hbHl0aWNzLmVuZHBvaW50KSx0aGlzLnNldF9jb25maWcoe3BlcnNvbl9wcm9maWxlczp0aGlzLnZzP3RoaXMudnM6XCJpZGVudGlmaWVkX29ubHlcIn0pLG51bGw9PShlPXRoaXMuc2l0ZUFwcHMpfHxlLm9uUmVtb3RlQ29uZmlnKHQpLG51bGw9PShyPXRoaXMuc2Vzc2lvblJlY29yZGluZyl8fHIub25SZW1vdGVDb25maWcodCksbnVsbD09KHM9dGhpcy5hdXRvY2FwdHVyZSl8fHMub25SZW1vdGVDb25maWcodCksbnVsbD09KG49dGhpcy5oZWF0bWFwcyl8fG4ub25SZW1vdGVDb25maWcodCksdGhpcy5zdXJ2ZXlzLm9uUmVtb3RlQ29uZmlnKHQpLG51bGw9PShhPXRoaXMud2ViVml0YWxzQXV0b2NhcHR1cmUpfHxhLm9uUmVtb3RlQ29uZmlnKHQpLG51bGw9PShsPXRoaXMuZXhjZXB0aW9uT2JzZXJ2ZXIpfHxsLm9uUmVtb3RlQ29uZmlnKHQpLHRoaXMuZXhjZXB0aW9ucy5vblJlbW90ZUNvbmZpZyh0KSxudWxsPT0odT10aGlzLmRlYWRDbGlja3NBdXRvY2FwdHVyZSl8fHUub25SZW1vdGVDb25maWcodCl9eXMoKXt0cnl7dGhpcy5jb25maWcubG9hZGVkKHRoaXMpfWNhdGNoKHQpe2ouY3JpdGljYWwoXCJgbG9hZGVkYCBmdW5jdGlvbiBmYWlsZWRcIix0KX10aGlzLlNzKCksdGhpcy5jb25maWcuY2FwdHVyZV9wYWdldmlldyYmc2V0VGltZW91dCgoKCk9Pnt0aGlzLmNvbnNlbnQuaXNPcHRlZEluKCkmJnRoaXMuJHMoKX0pLDEpLG5ldyBTbyh0aGlzKS5sb2FkKCksdGhpcy5mZWF0dXJlRmxhZ3MuZGVjaWRlKCl9U3MoKXt2YXIgdDt0aGlzLmhhc19vcHRlZF9vdXRfY2FwdHVyaW5nKCl8fHRoaXMuY29uZmlnLnJlcXVlc3RfYmF0Y2hpbmcmJihudWxsPT0odD10aGlzLnBzKXx8dC5lbmFibGUoKSl9X2RvbV9sb2FkZWQoKXt0aGlzLmhhc19vcHRlZF9vdXRfY2FwdHVyaW5nKCl8fEcodGhpcy5fX3JlcXVlc3RfcXVldWUsKHQ9PnRoaXMuZ3ModCkpKSx0aGlzLl9fcmVxdWVzdF9xdWV1ZT1bXSx0aGlzLlNzKCl9X2hhbmRsZV91bmxvYWQoKXt2YXIgdCxpO3RoaXMuY29uZmlnLnJlcXVlc3RfYmF0Y2hpbmc/KHRoaXMua3MoKSYmdGhpcy5jYXB0dXJlKFwiJHBhZ2VsZWF2ZVwiKSxudWxsPT0odD10aGlzLnBzKXx8dC51bmxvYWQoKSxudWxsPT0oaT10aGlzLl9zKXx8aS51bmxvYWQoKSk6dGhpcy5rcygpJiZ0aGlzLmNhcHR1cmUoXCIkcGFnZWxlYXZlXCIsbnVsbCx7dHJhbnNwb3J0Olwic2VuZEJlYWNvblwifSl9bWUodCl7dGhpcy5fX2xvYWRlZCYmKEdvP3RoaXMuX19yZXF1ZXN0X3F1ZXVlLnB1c2godCk6dGhpcy5yYXRlTGltaXRlci5pc1NlcnZlclJhdGVMaW1pdGVkKHQuYmF0Y2hLZXkpfHwodC50cmFuc3BvcnQ9dC50cmFuc3BvcnR8fHRoaXMuY29uZmlnLmFwaV90cmFuc3BvcnQsdC51cmw9RnModC51cmwse2lwOnRoaXMuY29uZmlnLmlwPzE6MH0pLHQuaGVhZGVycz1CKHt9LHRoaXMuY29uZmlnLnJlcXVlc3RfaGVhZGVycyksdC5jb21wcmVzc2lvbj1cImJlc3QtYXZhaWxhYmxlXCI9PT10LmNvbXByZXNzaW9uP3RoaXMuY29tcHJlc3Npb246dC5jb21wcmVzc2lvbix0LmZldGNoT3B0aW9ucz10LmZldGNoT3B0aW9uc3x8dGhpcy5jb25maWcuZmV0Y2hfb3B0aW9ucywodD0+e3ZhciBpLGUscixzPUIoe30sdCk7cy50aW1lb3V0PXMudGltZW91dHx8NmU0LHMudXJsPUZzKHMudXJsLHtfOihuZXcgRGF0ZSkuZ2V0VGltZSgpLnRvU3RyaW5nKCksdmVyOmMuTElCX1ZFUlNJT04sY29tcHJlc3Npb246cy5jb21wcmVzc2lvbn0pO3ZhciBuPW51bGwhPT0oaT1zLnRyYW5zcG9ydCkmJnZvaWQgMCE9PWk/aTpcImZldGNoXCIsbz1udWxsIT09KGU9bnVsbD09KHI9cnQoTHMsKHQ9PnQudHJhbnNwb3J0PT09bikpKT92b2lkIDA6ci5tZXRob2QpJiZ2b2lkIDAhPT1lP2U6THNbMF0ubWV0aG9kO2lmKCFvKXRocm93IG5ldyBFcnJvcihcIk5vIGF2YWlsYWJsZSB0cmFuc3BvcnQgbWV0aG9kXCIpO28ocyl9KShCKHt9LHQse2NhbGxiYWNrOmk9Pnt2YXIgZSxyOyh0aGlzLnJhdGVMaW1pdGVyLmNoZWNrRm9yTGltaXRpbmcoaSksaS5zdGF0dXNDb2RlPj00MDApJiYobnVsbD09KGU9KHI9dGhpcy5jb25maWcpLm9uX3JlcXVlc3RfZXJyb3IpfHxlLmNhbGwocixpKSk7bnVsbD09dC5jYWxsYmFja3x8dC5jYWxsYmFjayhpKX19KSkpKX1ncyh0KXt0aGlzLl9zP3RoaXMuX3MucmV0cmlhYmxlUmVxdWVzdCh0KTp0aGlzLm1lKHQpfV9leGVjdXRlX2FycmF5KHQpe3ZhciBpLGU9W10scj1bXSxzPVtdO0codCwodD0+e3QmJihpPXRbMF0seChpKT9zLnB1c2godCk6RSh0KT90LmNhbGwodGhpcyk6eCh0KSYmXCJhbGlhc1wiPT09aT9lLnB1c2godCk6eCh0KSYmLTEhPT1pLmluZGV4T2YoXCJjYXB0dXJlXCIpJiZFKHRoaXNbaV0pP3MucHVzaCh0KTpyLnB1c2godCkpfSkpO3ZhciBuPWZ1bmN0aW9uKHQsaSl7Ryh0LChmdW5jdGlvbih0KXtpZih4KHRbMF0pKXt2YXIgZT1pO0oodCwoZnVuY3Rpb24odCl7ZT1lW3RbMF1dLmFwcGx5KGUsdC5zbGljZSgxKSl9KSl9ZWxzZSB0aGlzW3RbMF1dLmFwcGx5KHRoaXMsdC5zbGljZSgxKSl9KSxpKX07bihlLHRoaXMpLG4ocix0aGlzKSxuKHMsdGhpcyl9d3MoKXt2YXIgdCxpO3JldHVybihudWxsPT0odD10aGlzLmNvbmZpZy5ib290c3RyYXApP3ZvaWQgMDp0LmZlYXR1cmVGbGFncykmJk9iamVjdC5rZXlzKG51bGw9PShpPXRoaXMuY29uZmlnLmJvb3RzdHJhcCk/dm9pZCAwOmkuZmVhdHVyZUZsYWdzKS5sZW5ndGg+MHx8ITF9cHVzaCh0KXt0aGlzLl9leGVjdXRlX2FycmF5KFt0XSl9Y2FwdHVyZSh0LGksZSl7dmFyIHI7aWYodGhpcy5fX2xvYWRlZCYmdGhpcy5wZXJzaXN0ZW5jZSYmdGhpcy5zZXNzaW9uUGVyc2lzdGVuY2UmJnRoaXMucHMpe2lmKCF0aGlzLmNvbnNlbnQuaXNPcHRlZE91dCgpKWlmKCFSKHQpJiZUKHQpKXtpZih0aGlzLmNvbmZpZy5vcHRfb3V0X3VzZXJhZ2VudF9maWx0ZXJ8fCF0aGlzLl9pc19ib3QoKSl7dmFyIHM9bnVsbCE9ZSYmZS5za2lwX2NsaWVudF9yYXRlX2xpbWl0aW5nP3ZvaWQgMDp0aGlzLnJhdGVMaW1pdGVyLmNsaWVudFJhdGVMaW1pdENvbnRleHQoKTtpZihudWxsPT1zfHwhcy5pc1JhdGVMaW1pdGVkKXtudWxsIT1pJiZpLiRjdXJyZW50X3VybCYmIVQobnVsbD09aT92b2lkIDA6aS4kY3VycmVudF91cmwpJiYoai5lcnJvcihcIkludmFsaWQgYCRjdXJyZW50X3VybGAgcHJvcGVydHkgcHJvdmlkZWQgdG8gYHBvc3Rob2cuY2FwdHVyZWAuIElucHV0IG11c3QgYmUgYSBzdHJpbmcuIElnbm9yaW5nIHByb3ZpZGVkIHZhbHVlLlwiKSxudWxsPT1pfHxkZWxldGUgaS4kY3VycmVudF91cmwpLHRoaXMuc2Vzc2lvblBlcnNpc3RlbmNlLnVwZGF0ZV9zZWFyY2hfa2V5d29yZCgpLHRoaXMuY29uZmlnLnNhdmVfY2FtcGFpZ25fcGFyYW1zJiZ0aGlzLnNlc3Npb25QZXJzaXN0ZW5jZS51cGRhdGVfY2FtcGFpZ25fcGFyYW1zKCksdGhpcy5jb25maWcuc2F2ZV9yZWZlcnJlciYmdGhpcy5zZXNzaW9uUGVyc2lzdGVuY2UudXBkYXRlX3JlZmVycmVyX2luZm8oKSwodGhpcy5jb25maWcuc2F2ZV9jYW1wYWlnbl9wYXJhbXN8fHRoaXMuY29uZmlnLnNhdmVfcmVmZXJyZXIpJiZ0aGlzLnBlcnNpc3RlbmNlLnNldF9pbml0aWFsX3BlcnNvbl9pbmZvKCk7dmFyIG49bmV3IERhdGUsbz0obnVsbD09ZT92b2lkIDA6ZS50aW1lc3RhbXApfHxuLGE9TmkoKSxsPXt1dWlkOmEsZXZlbnQ6dCxwcm9wZXJ0aWVzOnRoaXMuY2FsY3VsYXRlRXZlbnRQcm9wZXJ0aWVzKHQsaXx8e30sbyxhKX07cyYmKGwucHJvcGVydGllcy4kbGliX3JhdGVfbGltaXRfcmVtYWluaW5nX3Rva2Vucz1zLnJlbWFpbmluZ1Rva2VucyksKG51bGw9PWU/dm9pZCAwOmUuJHNldCkmJihsLiRzZXQ9bnVsbD09ZT92b2lkIDA6ZS4kc2V0KTt2YXIgdT10aGlzLnhzKG51bGw9PWU/dm9pZCAwOmUuJHNldF9vbmNlKTt1JiYobC4kc2V0X29uY2U9dSksKGw9dHQobCxudWxsIT1lJiZlLl9ub1RydW5jYXRlP251bGw6dGhpcy5jb25maWcucHJvcGVydGllc19zdHJpbmdfbWF4X2xlbmd0aCkpLnRpbWVzdGFtcD1vLFIobnVsbD09ZT92b2lkIDA6ZS50aW1lc3RhbXApfHwobC5wcm9wZXJ0aWVzLiRldmVudF90aW1lX292ZXJyaWRlX3Byb3ZpZGVkPSEwLGwucHJvcGVydGllcy4kZXZlbnRfdGltZV9vdmVycmlkZV9zeXN0ZW1fdGltZT1uKTt2YXIgaD1CKHt9LGwucHJvcGVydGllcy4kc2V0LGwuJHNldCk7aWYoUChoKXx8dGhpcy5zZXRQZXJzb25Qcm9wZXJ0aWVzRm9yRmxhZ3MoaCksIU8odGhpcy5jb25maWcuYmVmb3JlX3NlbmQpKXt2YXIgZD10aGlzLkVzKGwpO2lmKCFkKXJldHVybjtsPWR9dGhpcy51cy5lbWl0KFwiZXZlbnRDYXB0dXJlZFwiLGwpO3ZhciB2PXttZXRob2Q6XCJQT1NUXCIsdXJsOm51bGwhPT0ocj1udWxsPT1lP3ZvaWQgMDplLl91cmwpJiZ2b2lkIDAhPT1yP3I6dGhpcy5yZXF1ZXN0Um91dGVyLmVuZHBvaW50Rm9yKFwiYXBpXCIsdGhpcy5hbmFseXRpY3NEZWZhdWx0RW5kcG9pbnQpLGRhdGE6bCxjb21wcmVzc2lvbjpcImJlc3QtYXZhaWxhYmxlXCIsYmF0Y2hLZXk6bnVsbD09ZT92b2lkIDA6ZS5fYmF0Y2hLZXl9O3JldHVybiF0aGlzLmNvbmZpZy5yZXF1ZXN0X2JhdGNoaW5nfHxlJiYobnVsbD09ZXx8IWUuX2JhdGNoS2V5KXx8bnVsbCE9ZSYmZS5zZW5kX2luc3RhbnRseT90aGlzLmdzKHYpOnRoaXMucHMuZW5xdWV1ZSh2KSxsfWouY3JpdGljYWwoXCJUaGlzIGNhcHR1cmUgY2FsbCBpcyBpZ25vcmVkIGR1ZSB0byBjbGllbnQgcmF0ZSBsaW1pdGluZy5cIil9fWVsc2Ugai5lcnJvcihcIk5vIGV2ZW50IG5hbWUgcHJvdmlkZWQgdG8gcG9zdGhvZy5jYXB0dXJlXCIpfWVsc2Ugai51bmluaXRpYWxpemVkV2FybmluZyhcInBvc3Rob2cuY2FwdHVyZVwiKX1OZSh0KXtyZXR1cm4gdGhpcy5vbihcImV2ZW50Q2FwdHVyZWRcIiwoaT0+dChpLmV2ZW50LGkpKSl9Y2FsY3VsYXRlRXZlbnRQcm9wZXJ0aWVzKHQsaSxlLHIscyl7aWYoZT1lfHxuZXcgRGF0ZSwhdGhpcy5wZXJzaXN0ZW5jZXx8IXRoaXMuc2Vzc2lvblBlcnNpc3RlbmNlKXJldHVybiBpO3ZhciBuPXM/dm9pZCAwOnRoaXMucGVyc2lzdGVuY2UucmVtb3ZlX2V2ZW50X3RpbWVyKHQpLGE9Qih7fSxpKTtpZihhLnRva2VuPXRoaXMuY29uZmlnLnRva2VuLHRoaXMuY29uZmlnLl9fcHJldmlld19leHBlcmltZW50YWxfY29va2llbGVzc19tb2RlJiYoYS4kY29va2llbGVzc19tb2RlPSEwKSxcIiRzbmFwc2hvdFwiPT09dCl7dmFyIGw9Qih7fSx0aGlzLnBlcnNpc3RlbmNlLnByb3BlcnRpZXMoKSx0aGlzLnNlc3Npb25QZXJzaXN0ZW5jZS5wcm9wZXJ0aWVzKCkpO3JldHVybiBhLmRpc3RpbmN0X2lkPWwuZGlzdGluY3RfaWQsKCFUKGEuZGlzdGluY3RfaWQpJiYhRihhLmRpc3RpbmN0X2lkKXx8TShhLmRpc3RpbmN0X2lkKSkmJmouZXJyb3IoXCJJbnZhbGlkIGRpc3RpbmN0X2lkIGZvciByZXBsYXkgZXZlbnQuIFRoaXMgaW5kaWNhdGVzIGEgYnVnIGluIHlvdXIgaW1wbGVtZW50YXRpb25cIiksYX12YXIgdSxoPXRvKHRoaXMuY29uZmlnLm1hc2tfcGVyc29uYWxfZGF0YV9wcm9wZXJ0aWVzLHRoaXMuY29uZmlnLmN1c3RvbV9wZXJzb25hbF9kYXRhX3Byb3BlcnRpZXMpO2lmKHRoaXMuc2Vzc2lvbk1hbmFnZXIpe3ZhcntzZXNzaW9uSWQ6dix3aW5kb3dJZDpjfT10aGlzLnNlc3Npb25NYW5hZ2VyLmNoZWNrQW5kR2V0U2Vzc2lvbkFuZFdpbmRvd0lkKHMsZS5nZXRUaW1lKCkpO2EuJHNlc3Npb25faWQ9dixhLiR3aW5kb3dfaWQ9Y310aGlzLnNlc3Npb25Qcm9wc01hbmFnZXImJlYoYSx0aGlzLnNlc3Npb25Qcm9wc01hbmFnZXIuZ2V0U2Vzc2lvblByb3BzKCkpO3RyeXt2YXIgZjt0aGlzLnNlc3Npb25SZWNvcmRpbmcmJlYoYSx0aGlzLnNlc3Npb25SZWNvcmRpbmcuc2RrRGVidWdQcm9wZXJ0aWVzKSxhLiRzZGtfZGVidWdfcmV0cnlfcXVldWVfc2l6ZT1udWxsPT0oZj10aGlzLl9zKT92b2lkIDA6Zi5sZW5ndGh9Y2F0Y2godCl7YS4kc2RrX2RlYnVnX2Vycm9yX2NhcHR1cmluZ19wcm9wZXJ0aWVzPVN0cmluZyh0KX1pZih0aGlzLnJlcXVlc3RSb3V0ZXIucmVnaW9uPT09Tm8uQ1VTVE9NJiYoYS4kbGliX2N1c3RvbV9hcGlfaG9zdD10aGlzLmNvbmZpZy5hcGlfaG9zdCksdT1cIiRwYWdldmlld1wiIT09dHx8cz9cIiRwYWdlbGVhdmVcIiE9PXR8fHM/dGhpcy5wYWdlVmlld01hbmFnZXIuZG9FdmVudCgpOnRoaXMucGFnZVZpZXdNYW5hZ2VyLmRvUGFnZUxlYXZlKGUpOnRoaXMucGFnZVZpZXdNYW5hZ2VyLmRvUGFnZVZpZXcoZSxyKSxhPVYoYSx1KSxcIiRwYWdldmlld1wiPT09dCYmbyYmKGEudGl0bGU9by50aXRsZSksIVIobikpe3ZhciBwPWUuZ2V0VGltZSgpLW47YS4kZHVyYXRpb249cGFyc2VGbG9hdCgocC8xZTMpLnRvRml4ZWQoMykpfWQmJnRoaXMuY29uZmlnLm9wdF9vdXRfdXNlcmFnZW50X2ZpbHRlciYmKGEuJGJyb3dzZXJfdHlwZT10aGlzLl9pc19ib3QoKT9cImJvdFwiOlwiYnJvd3NlclwiKSwoYT1WKHt9LGgsdGhpcy5wZXJzaXN0ZW5jZS5wcm9wZXJ0aWVzKCksdGhpcy5zZXNzaW9uUGVyc2lzdGVuY2UucHJvcGVydGllcygpLGEpKS4kaXNfaWRlbnRpZmllZD10aGlzLl9pc0lkZW50aWZpZWQoKSx4KHRoaXMuY29uZmlnLnByb3BlcnR5X2RlbnlsaXN0KT9KKHRoaXMuY29uZmlnLnByb3BlcnR5X2RlbnlsaXN0LChmdW5jdGlvbih0KXtkZWxldGUgYVt0XX0pKTpqLmVycm9yKFwiSW52YWxpZCB2YWx1ZSBmb3IgcHJvcGVydHlfZGVueWxpc3QgY29uZmlnOiBcIit0aGlzLmNvbmZpZy5wcm9wZXJ0eV9kZW55bGlzdCtcIiBvciBwcm9wZXJ0eV9ibGFja2xpc3QgY29uZmlnOiBcIit0aGlzLmNvbmZpZy5wcm9wZXJ0eV9ibGFja2xpc3QpO3ZhciBnPXRoaXMuY29uZmlnLnNhbml0aXplX3Byb3BlcnRpZXM7ZyYmKGouZXJyb3IoXCJzYW5pdGl6ZV9wcm9wZXJ0aWVzIGlzIGRlcHJlY2F0ZWQuIFVzZSBiZWZvcmVfc2VuZCBpbnN0ZWFkXCIpLGE9ZyhhLHQpKTt2YXIgXz10aGlzLklzKCk7cmV0dXJuIGEuJHByb2Nlc3NfcGVyc29uX3Byb2ZpbGU9XyxfJiYhcyYmdGhpcy5QcyhcIl9jYWxjdWxhdGVfZXZlbnRfcHJvcGVydGllc1wiKSxhfXhzKHQpe3ZhciBpO2lmKCF0aGlzLnBlcnNpc3RlbmNlfHwhdGhpcy5JcygpKXJldHVybiB0O2lmKHRoaXMubHMpcmV0dXJuIHQ7dmFyIGU9dGhpcy5wZXJzaXN0ZW5jZS5nZXRfaW5pdGlhbF9wcm9wcygpLHI9bnVsbD09KGk9dGhpcy5zZXNzaW9uUHJvcHNNYW5hZ2VyKT92b2lkIDA6aS5nZXRTZXRPbmNlUHJvcHMoKSxzPVYoe30sZSxyfHx7fSx0fHx7fSksbj10aGlzLmNvbmZpZy5zYW5pdGl6ZV9wcm9wZXJ0aWVzO3JldHVybiBuJiYoai5lcnJvcihcInNhbml0aXplX3Byb3BlcnRpZXMgaXMgZGVwcmVjYXRlZC4gVXNlIGJlZm9yZV9zZW5kIGluc3RlYWRcIikscz1uKHMsXCIkc2V0X29uY2VcIikpLHRoaXMubHM9ITAsUChzKT92b2lkIDA6c31yZWdpc3Rlcih0LGkpe3ZhciBlO251bGw9PShlPXRoaXMucGVyc2lzdGVuY2UpfHxlLnJlZ2lzdGVyKHQsaSl9cmVnaXN0ZXJfb25jZSh0LGksZSl7dmFyIHI7bnVsbD09KHI9dGhpcy5wZXJzaXN0ZW5jZSl8fHIucmVnaXN0ZXJfb25jZSh0LGksZSl9cmVnaXN0ZXJfZm9yX3Nlc3Npb24odCl7dmFyIGk7bnVsbD09KGk9dGhpcy5zZXNzaW9uUGVyc2lzdGVuY2UpfHxpLnJlZ2lzdGVyKHQpfXVucmVnaXN0ZXIodCl7dmFyIGk7bnVsbD09KGk9dGhpcy5wZXJzaXN0ZW5jZSl8fGkudW5yZWdpc3Rlcih0KX11bnJlZ2lzdGVyX2Zvcl9zZXNzaW9uKHQpe3ZhciBpO251bGw9PShpPXRoaXMuc2Vzc2lvblBlcnNpc3RlbmNlKXx8aS51bnJlZ2lzdGVyKHQpfVJzKHQsaSl7dGhpcy5yZWdpc3Rlcih7W3RdOml9KX1nZXRGZWF0dXJlRmxhZyh0LGkpe3JldHVybiB0aGlzLmZlYXR1cmVGbGFncy5nZXRGZWF0dXJlRmxhZyh0LGkpfWdldEZlYXR1cmVGbGFnUGF5bG9hZCh0KXt2YXIgaT10aGlzLmZlYXR1cmVGbGFncy5nZXRGZWF0dXJlRmxhZ1BheWxvYWQodCk7dHJ5e3JldHVybiBKU09OLnBhcnNlKGkpfWNhdGNoKHQpe3JldHVybiBpfX1pc0ZlYXR1cmVFbmFibGVkKHQsaSl7cmV0dXJuIHRoaXMuZmVhdHVyZUZsYWdzLmlzRmVhdHVyZUVuYWJsZWQodCxpKX1yZWxvYWRGZWF0dXJlRmxhZ3MoKXt0aGlzLmZlYXR1cmVGbGFncy5yZWxvYWRGZWF0dXJlRmxhZ3MoKX11cGRhdGVFYXJseUFjY2Vzc0ZlYXR1cmVFbnJvbGxtZW50KHQsaSl7dGhpcy5mZWF0dXJlRmxhZ3MudXBkYXRlRWFybHlBY2Nlc3NGZWF0dXJlRW5yb2xsbWVudCh0LGkpfWdldEVhcmx5QWNjZXNzRmVhdHVyZXModCxpLGUpe3JldHVybiB2b2lkIDA9PT1pJiYoaT0hMSksdGhpcy5mZWF0dXJlRmxhZ3MuZ2V0RWFybHlBY2Nlc3NGZWF0dXJlcyh0LGksZSl9b24odCxpKXtyZXR1cm4gdGhpcy51cy5vbih0LGkpfW9uRmVhdHVyZUZsYWdzKHQpe3JldHVybiB0aGlzLmZlYXR1cmVGbGFncy5vbkZlYXR1cmVGbGFncyh0KX1vblN1cnZleXNMb2FkZWQodCl7cmV0dXJuIHRoaXMuc3VydmV5cy5vblN1cnZleXNMb2FkZWQodCl9b25TZXNzaW9uSWQodCl7dmFyIGksZTtyZXR1cm4gbnVsbCE9PShpPW51bGw9PShlPXRoaXMuc2Vzc2lvbk1hbmFnZXIpP3ZvaWQgMDplLm9uU2Vzc2lvbklkKHQpKSYmdm9pZCAwIT09aT9pOigpPT57fX1nZXRTdXJ2ZXlzKHQsaSl7dm9pZCAwPT09aSYmKGk9ITEpLHRoaXMuc3VydmV5cy5nZXRTdXJ2ZXlzKHQsaSl9Z2V0QWN0aXZlTWF0Y2hpbmdTdXJ2ZXlzKHQsaSl7dm9pZCAwPT09aSYmKGk9ITEpLHRoaXMuc3VydmV5cy5nZXRBY3RpdmVNYXRjaGluZ1N1cnZleXModCxpKX1yZW5kZXJTdXJ2ZXkodCxpKXt0aGlzLnN1cnZleXMucmVuZGVyU3VydmV5KHQsaSl9Y2FuUmVuZGVyU3VydmV5KHQpe3JldHVybiB0aGlzLnN1cnZleXMuY2FuUmVuZGVyU3VydmV5KHQpfWNhblJlbmRlclN1cnZleUFzeW5jKHQsaSl7cmV0dXJuIHZvaWQgMD09PWkmJihpPSExKSx0aGlzLnN1cnZleXMuY2FuUmVuZGVyU3VydmV5QXN5bmModCxpKX1pZGVudGlmeSh0LGksZSl7aWYoIXRoaXMuX19sb2FkZWR8fCF0aGlzLnBlcnNpc3RlbmNlKXJldHVybiBqLnVuaW5pdGlhbGl6ZWRXYXJuaW5nKFwicG9zdGhvZy5pZGVudGlmeVwiKTtpZihGKHQpJiYodD10LnRvU3RyaW5nKCksai53YXJuKFwiVGhlIGZpcnN0IGFyZ3VtZW50IHRvIHBvc3Rob2cuaWRlbnRpZnkgd2FzIGEgbnVtYmVyLCBidXQgaXQgc2hvdWxkIGJlIGEgc3RyaW5nLiBJdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBzdHJpbmcuXCIpKSx0KXtpZihbXCJkaXN0aW5jdF9pZFwiLFwiZGlzdGluY3RpZFwiXS5pbmNsdWRlcyh0LnRvTG93ZXJDYXNlKCkpKWouY3JpdGljYWwoJ1RoZSBzdHJpbmcgXCInK3QrJ1wiIHdhcyBzZXQgaW4gcG9zdGhvZy5pZGVudGlmeSB3aGljaCBpbmRpY2F0ZXMgYW4gZXJyb3IuIFRoaXMgSUQgc2hvdWxkIGJlIHVuaXF1ZSB0byB0aGUgdXNlciBhbmQgbm90IGEgaGFyZGNvZGVkIHN0cmluZy4nKTtlbHNlIGlmKHRoaXMuUHMoXCJwb3N0aG9nLmlkZW50aWZ5XCIpKXt2YXIgcj10aGlzLmdldF9kaXN0aW5jdF9pZCgpO2lmKHRoaXMucmVnaXN0ZXIoeyR1c2VyX2lkOnR9KSwhdGhpcy5nZXRfcHJvcGVydHkoXCIkZGV2aWNlX2lkXCIpKXt2YXIgcz1yO3RoaXMucmVnaXN0ZXJfb25jZSh7JGhhZF9wZXJzaXN0ZWRfZGlzdGluY3RfaWQ6ITAsJGRldmljZV9pZDpzfSxcIlwiKX10IT09ciYmdCE9PXRoaXMuZ2V0X3Byb3BlcnR5KG90KSYmKHRoaXMudW5yZWdpc3RlcihvdCksdGhpcy5yZWdpc3Rlcih7ZGlzdGluY3RfaWQ6dH0pKTt2YXIgbj1cImFub255bW91c1wiPT09KHRoaXMucGVyc2lzdGVuY2UuZ2V0X3Byb3BlcnR5KEF0KXx8XCJhbm9ueW1vdXNcIik7dCE9PXImJm4/KHRoaXMucGVyc2lzdGVuY2Uuc2V0X3Byb3BlcnR5KEF0LFwiaWRlbnRpZmllZFwiKSx0aGlzLnNldFBlcnNvblByb3BlcnRpZXNGb3JGbGFncyhCKHt9LGV8fHt9LGl8fHt9KSwhMSksdGhpcy5jYXB0dXJlKFwiJGlkZW50aWZ5XCIse2Rpc3RpbmN0X2lkOnQsJGFub25fZGlzdGluY3RfaWQ6cn0seyRzZXQ6aXx8e30sJHNldF9vbmNlOmV8fHt9fSksdGhpcy5jcz1qcyh0LGksZSksdGhpcy5mZWF0dXJlRmxhZ3Muc2V0QW5vbnltb3VzRGlzdGluY3RJZChyKSk6KGl8fGUpJiZ0aGlzLnNldFBlcnNvblByb3BlcnRpZXMoaSxlKSx0IT09ciYmKHRoaXMucmVsb2FkRmVhdHVyZUZsYWdzKCksdGhpcy51bnJlZ2lzdGVyKEZ0KSl9fWVsc2Ugai5lcnJvcihcIlVuaXF1ZSB1c2VyIGlkIGhhcyBub3QgYmVlbiBzZXQgaW4gcG9zdGhvZy5pZGVudGlmeVwiKX1zZXRQZXJzb25Qcm9wZXJ0aWVzKHQsaSl7aWYoKHR8fGkpJiZ0aGlzLlBzKFwicG9zdGhvZy5zZXRQZXJzb25Qcm9wZXJ0aWVzXCIpKXt2YXIgZT1qcyh0aGlzLmdldF9kaXN0aW5jdF9pZCgpLHQsaSk7dGhpcy5jcyE9PWU/KHRoaXMuc2V0UGVyc29uUHJvcGVydGllc0ZvckZsYWdzKEIoe30saXx8e30sdHx8e30pKSx0aGlzLmNhcHR1cmUoXCIkc2V0XCIseyRzZXQ6dHx8e30sJHNldF9vbmNlOml8fHt9fSksdGhpcy5jcz1lKTpqLmluZm8oXCJBIGR1cGxpY2F0ZSBzZXRQZXJzb25Qcm9wZXJ0aWVzIGNhbGwgd2FzIG1hZGUgd2l0aCB0aGUgc2FtZSBwcm9wZXJ0aWVzLiBJdCBoYXMgYmVlbiBpZ25vcmVkLlwiKX19Z3JvdXAodCxpLGUpe2lmKHQmJmkpe2lmKHRoaXMuUHMoXCJwb3N0aG9nLmdyb3VwXCIpKXt2YXIgcj10aGlzLmdldEdyb3VwcygpO3JbdF0hPT1pJiZ0aGlzLnJlc2V0R3JvdXBQcm9wZXJ0aWVzRm9yRmxhZ3ModCksdGhpcy5yZWdpc3Rlcih7JGdyb3VwczpCKHt9LHIse1t0XTppfSl9KSxlJiYodGhpcy5jYXB0dXJlKFwiJGdyb3VwaWRlbnRpZnlcIix7JGdyb3VwX3R5cGU6dCwkZ3JvdXBfa2V5OmksJGdyb3VwX3NldDplfSksdGhpcy5zZXRHcm91cFByb3BlcnRpZXNGb3JGbGFncyh7W3RdOmV9KSksclt0XT09PWl8fGV8fHRoaXMucmVsb2FkRmVhdHVyZUZsYWdzKCl9fWVsc2Ugai5lcnJvcihcInBvc3Rob2cuZ3JvdXAgcmVxdWlyZXMgYSBncm91cCB0eXBlIGFuZCBncm91cCBrZXlcIil9cmVzZXRHcm91cHMoKXt0aGlzLnJlZ2lzdGVyKHskZ3JvdXBzOnt9fSksdGhpcy5yZXNldEdyb3VwUHJvcGVydGllc0ZvckZsYWdzKCksdGhpcy5yZWxvYWRGZWF0dXJlRmxhZ3MoKX1zZXRQZXJzb25Qcm9wZXJ0aWVzRm9yRmxhZ3ModCxpKXt2b2lkIDA9PT1pJiYoaT0hMCksdGhpcy5mZWF0dXJlRmxhZ3Muc2V0UGVyc29uUHJvcGVydGllc0ZvckZsYWdzKHQsaSl9cmVzZXRQZXJzb25Qcm9wZXJ0aWVzRm9yRmxhZ3MoKXt0aGlzLmZlYXR1cmVGbGFncy5yZXNldFBlcnNvblByb3BlcnRpZXNGb3JGbGFncygpfXNldEdyb3VwUHJvcGVydGllc0ZvckZsYWdzKHQsaSl7dm9pZCAwPT09aSYmKGk9ITApLHRoaXMuUHMoXCJwb3N0aG9nLnNldEdyb3VwUHJvcGVydGllc0ZvckZsYWdzXCIpJiZ0aGlzLmZlYXR1cmVGbGFncy5zZXRHcm91cFByb3BlcnRpZXNGb3JGbGFncyh0LGkpfXJlc2V0R3JvdXBQcm9wZXJ0aWVzRm9yRmxhZ3ModCl7dGhpcy5mZWF0dXJlRmxhZ3MucmVzZXRHcm91cFByb3BlcnRpZXNGb3JGbGFncyh0KX1yZXNldCh0KXt2YXIgaSxlLHIscztpZihqLmluZm8oXCJyZXNldFwiKSwhdGhpcy5fX2xvYWRlZClyZXR1cm4gai51bmluaXRpYWxpemVkV2FybmluZyhcInBvc3Rob2cucmVzZXRcIik7dmFyIG49dGhpcy5nZXRfcHJvcGVydHkoXCIkZGV2aWNlX2lkXCIpO2lmKHRoaXMuY29uc2VudC5yZXNldCgpLG51bGw9PShpPXRoaXMucGVyc2lzdGVuY2UpfHxpLmNsZWFyKCksbnVsbD09KGU9dGhpcy5zZXNzaW9uUGVyc2lzdGVuY2UpfHxlLmNsZWFyKCksdGhpcy5zdXJ2ZXlzLnJlc2V0KCksbnVsbD09KHI9dGhpcy5wZXJzaXN0ZW5jZSl8fHIuc2V0X3Byb3BlcnR5KEF0LFwiYW5vbnltb3VzXCIpLG51bGw9PShzPXRoaXMuc2Vzc2lvbk1hbmFnZXIpfHxzLnJlc2V0U2Vzc2lvbklkKCksdGhpcy5jcz1udWxsLHRoaXMuY29uZmlnLl9fcHJldmlld19leHBlcmltZW50YWxfY29va2llbGVzc19tb2RlKXRoaXMucmVnaXN0ZXJfb25jZSh7ZGlzdGluY3RfaWQ6QnQsJGRldmljZV9pZDpudWxsfSxcIlwiKTtlbHNle3ZhciBvPXRoaXMuY29uZmlnLmdldF9kZXZpY2VfaWQoTmkoKSk7dGhpcy5yZWdpc3Rlcl9vbmNlKHtkaXN0aW5jdF9pZDpvLCRkZXZpY2VfaWQ6dD9vOm59LFwiXCIpfXRoaXMucmVnaXN0ZXIoeyRsYXN0X3Bvc3Rob2dfcmVzZXQ6KG5ldyBEYXRlKS50b0lTT1N0cmluZygpfSwxKX1nZXRfZGlzdGluY3RfaWQoKXtyZXR1cm4gdGhpcy5nZXRfcHJvcGVydHkoXCJkaXN0aW5jdF9pZFwiKX1nZXRHcm91cHMoKXtyZXR1cm4gdGhpcy5nZXRfcHJvcGVydHkoXCIkZ3JvdXBzXCIpfHx7fX1nZXRfc2Vzc2lvbl9pZCgpe3ZhciB0LGk7cmV0dXJuIG51bGwhPT0odD1udWxsPT0oaT10aGlzLnNlc3Npb25NYW5hZ2VyKT92b2lkIDA6aS5jaGVja0FuZEdldFNlc3Npb25BbmRXaW5kb3dJZCghMCkuc2Vzc2lvbklkKSYmdm9pZCAwIT09dD90OlwiXCJ9Z2V0X3Nlc3Npb25fcmVwbGF5X3VybCh0KXtpZighdGhpcy5zZXNzaW9uTWFuYWdlcilyZXR1cm5cIlwiO3ZhcntzZXNzaW9uSWQ6aSxzZXNzaW9uU3RhcnRUaW1lc3RhbXA6ZX09dGhpcy5zZXNzaW9uTWFuYWdlci5jaGVja0FuZEdldFNlc3Npb25BbmRXaW5kb3dJZCghMCkscj10aGlzLnJlcXVlc3RSb3V0ZXIuZW5kcG9pbnRGb3IoXCJ1aVwiLFwiL3Byb2plY3QvXCIrdGhpcy5jb25maWcudG9rZW4rXCIvcmVwbGF5L1wiK2kpO2lmKG51bGwhPXQmJnQud2l0aFRpbWVzdGFtcCYmZSl7dmFyIHMsbj1udWxsIT09KHM9dC50aW1lc3RhbXBMb29rQmFjaykmJnZvaWQgMCE9PXM/czoxMDtpZighZSlyZXR1cm4gcjtyKz1cIj90PVwiK01hdGgubWF4KE1hdGguZmxvb3IoKChuZXcgRGF0ZSkuZ2V0VGltZSgpLWUpLzFlMyktbiwwKX1yZXR1cm4gcn1hbGlhcyh0LGkpe3JldHVybiB0PT09dGhpcy5nZXRfcHJvcGVydHkobnQpPyhqLmNyaXRpY2FsKFwiQXR0ZW1wdGluZyB0byBjcmVhdGUgYWxpYXMgZm9yIGV4aXN0aW5nIFBlb3BsZSB1c2VyIC0gYWJvcnRpbmcuXCIpLC0yKTp0aGlzLlBzKFwicG9zdGhvZy5hbGlhc1wiKT8oUihpKSYmKGk9dGhpcy5nZXRfZGlzdGluY3RfaWQoKSksdCE9PWk/KHRoaXMuUnMob3QsdCksdGhpcy5jYXB0dXJlKFwiJGNyZWF0ZV9hbGlhc1wiLHthbGlhczp0LGRpc3RpbmN0X2lkOml9KSk6KGoud2FybihcImFsaWFzIG1hdGNoZXMgY3VycmVudCBkaXN0aW5jdF9pZCAtIHNraXBwaW5nIGFwaSBjYWxsLlwiKSx0aGlzLmlkZW50aWZ5KHQpLC0xKSk6dm9pZCAwfXNldF9jb25maWcodCl7dmFyIGksZSxyLHMsbj1CKHt9LHRoaXMuY29uZmlnKTtJKHQpJiYoVih0aGlzLmNvbmZpZyxWbyh0KSksbnVsbD09KGk9dGhpcy5wZXJzaXN0ZW5jZSl8fGkudXBkYXRlX2NvbmZpZyh0aGlzLmNvbmZpZyxuKSx0aGlzLnNlc3Npb25QZXJzaXN0ZW5jZT1cInNlc3Npb25TdG9yYWdlXCI9PT10aGlzLmNvbmZpZy5wZXJzaXN0ZW5jZXx8XCJtZW1vcnlcIj09PXRoaXMuY29uZmlnLnBlcnNpc3RlbmNlP3RoaXMucGVyc2lzdGVuY2U6bmV3IGNvKEIoe30sdGhpcy5jb25maWcse3BlcnNpc3RlbmNlOlwic2Vzc2lvblN0b3JhZ2VcIn0pKSxXaS5PKCkmJlwidHJ1ZVwiPT09V2kuQShcInBoX2RlYnVnXCIpJiYodGhpcy5jb25maWcuZGVidWc9ITApLHRoaXMuY29uZmlnLmRlYnVnJiYoYy5ERUJVRz0hMCxqLmluZm8oXCJzZXRfY29uZmlnXCIsSlNPTi5zdHJpbmdpZnkoe2NvbmZpZzp0LG9sZENvbmZpZzpuLG5ld0NvbmZpZzpCKHt9LHRoaXMuY29uZmlnKX0sbnVsbCwyKSkpLG51bGw9PShlPXRoaXMuc2Vzc2lvblJlY29yZGluZyl8fGUuc3RhcnRJZkVuYWJsZWRPclN0b3AoKSxudWxsPT0ocj10aGlzLmF1dG9jYXB0dXJlKXx8ci5zdGFydElmRW5hYmxlZCgpLG51bGw9PShzPXRoaXMuaGVhdG1hcHMpfHxzLnN0YXJ0SWZFbmFibGVkKCksdGhpcy5zdXJ2ZXlzLmxvYWRJZkVuYWJsZWQoKSx0aGlzLmJzKCkpfXN0YXJ0U2Vzc2lvblJlY29yZGluZyh0KXt2YXIgaT0hMD09PXQsZT17c2FtcGxpbmc6aXx8IShudWxsPT10fHwhdC5zYW1wbGluZyksbGlua2VkX2ZsYWc6aXx8IShudWxsPT10fHwhdC5saW5rZWRfZmxhZyksdXJsX3RyaWdnZXI6aXx8IShudWxsPT10fHwhdC51cmxfdHJpZ2dlciksZXZlbnRfdHJpZ2dlcjppfHwhKG51bGw9PXR8fCF0LmV2ZW50X3RyaWdnZXIpfTtpZihPYmplY3QudmFsdWVzKGUpLnNvbWUoQm9vbGVhbikpe3ZhciByLHMsbixvLGE7aWYobnVsbD09KHI9dGhpcy5zZXNzaW9uTWFuYWdlcil8fHIuY2hlY2tBbmRHZXRTZXNzaW9uQW5kV2luZG93SWQoKSxlLnNhbXBsaW5nKW51bGw9PShzPXRoaXMuc2Vzc2lvblJlY29yZGluZyl8fHMub3ZlcnJpZGVTYW1wbGluZygpO2lmKGUubGlua2VkX2ZsYWcpbnVsbD09KG49dGhpcy5zZXNzaW9uUmVjb3JkaW5nKXx8bi5vdmVycmlkZUxpbmtlZEZsYWcoKTtpZihlLnVybF90cmlnZ2VyKW51bGw9PShvPXRoaXMuc2Vzc2lvblJlY29yZGluZyl8fG8ub3ZlcnJpZGVUcmlnZ2VyKFwidXJsXCIpO2lmKGUuZXZlbnRfdHJpZ2dlciludWxsPT0oYT10aGlzLnNlc3Npb25SZWNvcmRpbmcpfHxhLm92ZXJyaWRlVHJpZ2dlcihcImV2ZW50XCIpfXRoaXMuc2V0X2NvbmZpZyh7ZGlzYWJsZV9zZXNzaW9uX3JlY29yZGluZzohMX0pfXN0b3BTZXNzaW9uUmVjb3JkaW5nKCl7dGhpcy5zZXRfY29uZmlnKHtkaXNhYmxlX3Nlc3Npb25fcmVjb3JkaW5nOiEwfSl9c2Vzc2lvblJlY29yZGluZ1N0YXJ0ZWQoKXt2YXIgdDtyZXR1cm4hKG51bGw9PSh0PXRoaXMuc2Vzc2lvblJlY29yZGluZyl8fCF0LnN0YXJ0ZWQpfWNhcHR1cmVFeGNlcHRpb24odCxpKXt2YXIgZT1uZXcgRXJyb3IoXCJQb3N0SG9nIHN5bnRoZXRpY0V4Y2VwdGlvblwiKTt0aGlzLmV4Y2VwdGlvbnMuc2VuZEV4Y2VwdGlvbkV2ZW50KEIoe30sQWUoKHQ9PnQgaW5zdGFuY2VvZiBFcnJvcikodCk/e2Vycm9yOnQsZXZlbnQ6dC5tZXNzYWdlfTp7ZXZlbnQ6dH0se3N5bnRoZXRpY0V4Y2VwdGlvbjplfSksaSkpfWxvYWRUb29sYmFyKHQpe3JldHVybiB0aGlzLnRvb2xiYXIubG9hZFRvb2xiYXIodCl9Z2V0X3Byb3BlcnR5KHQpe3ZhciBpO3JldHVybiBudWxsPT0oaT10aGlzLnBlcnNpc3RlbmNlKT92b2lkIDA6aS5wcm9wc1t0XX1nZXRTZXNzaW9uUHJvcGVydHkodCl7dmFyIGk7cmV0dXJuIG51bGw9PShpPXRoaXMuc2Vzc2lvblBlcnNpc3RlbmNlKT92b2lkIDA6aS5wcm9wc1t0XX10b1N0cmluZygpe3ZhciB0LGk9bnVsbCE9PSh0PXRoaXMuY29uZmlnLm5hbWUpJiZ2b2lkIDAhPT10P3Q6V287cmV0dXJuIGkhPT1XbyYmKGk9V28rXCIuXCIraSksaX1faXNJZGVudGlmaWVkKCl7dmFyIHQsaTtyZXR1cm5cImlkZW50aWZpZWRcIj09PShudWxsPT0odD10aGlzLnBlcnNpc3RlbmNlKT92b2lkIDA6dC5nZXRfcHJvcGVydHkoQXQpKXx8XCJpZGVudGlmaWVkXCI9PT0obnVsbD09KGk9dGhpcy5zZXNzaW9uUGVyc2lzdGVuY2UpP3ZvaWQgMDppLmdldF9wcm9wZXJ0eShBdCkpfUlzKCl7dmFyIHQsaTtyZXR1cm4hKFwibmV2ZXJcIj09PXRoaXMuY29uZmlnLnBlcnNvbl9wcm9maWxlc3x8XCJpZGVudGlmaWVkX29ubHlcIj09PXRoaXMuY29uZmlnLnBlcnNvbl9wcm9maWxlcyYmIXRoaXMuX2lzSWRlbnRpZmllZCgpJiZQKHRoaXMuZ2V0R3JvdXBzKCkpJiYobnVsbD09KHQ9dGhpcy5wZXJzaXN0ZW5jZSl8fG51bGw9PSh0PXQucHJvcHMpfHwhdFtvdF0pJiYobnVsbD09KGk9dGhpcy5wZXJzaXN0ZW5jZSl8fG51bGw9PShpPWkucHJvcHMpfHwhaVtVdF0pKX1rcygpe3JldHVybiEwPT09dGhpcy5jb25maWcuY2FwdHVyZV9wYWdlbGVhdmV8fFwiaWZfY2FwdHVyZV9wYWdldmlld1wiPT09dGhpcy5jb25maWcuY2FwdHVyZV9wYWdlbGVhdmUmJighMD09PXRoaXMuY29uZmlnLmNhcHR1cmVfcGFnZXZpZXd8fFwiaGlzdG9yeV9jaGFuZ2VcIj09PXRoaXMuY29uZmlnLmNhcHR1cmVfcGFnZXZpZXcpfWNyZWF0ZVBlcnNvblByb2ZpbGUoKXt0aGlzLklzKCl8fHRoaXMuUHMoXCJwb3N0aG9nLmNyZWF0ZVBlcnNvblByb2ZpbGVcIikmJnRoaXMuc2V0UGVyc29uUHJvcGVydGllcyh7fSx7fSl9UHModCl7cmV0dXJuXCJuZXZlclwiPT09dGhpcy5jb25maWcucGVyc29uX3Byb2ZpbGVzPyhqLmVycm9yKHQrJyB3YXMgY2FsbGVkLCBidXQgcHJvY2Vzc19wZXJzb24gaXMgc2V0IHRvIFwibmV2ZXJcIi4gVGhpcyBjYWxsIHdpbGwgYmUgaWdub3JlZC4nKSwhMSk6KHRoaXMuUnMoVXQsITApLCEwKX1icygpe3ZhciB0LGksZSxyLHM9dGhpcy5jb25zZW50LmlzT3B0ZWRPdXQoKSxuPXRoaXMuY29uZmlnLm9wdF9vdXRfcGVyc2lzdGVuY2VfYnlfZGVmYXVsdCxvPXRoaXMuY29uZmlnLmRpc2FibGVfcGVyc2lzdGVuY2V8fHMmJiEhbjsobnVsbD09KHQ9dGhpcy5wZXJzaXN0ZW5jZSk/dm9pZCAwOnQueGUpIT09byYmKG51bGw9PShlPXRoaXMucGVyc2lzdGVuY2UpfHxlLnNldF9kaXNhYmxlZChvKSk7KG51bGw9PShpPXRoaXMuc2Vzc2lvblBlcnNpc3RlbmNlKT92b2lkIDA6aS54ZSkhPT1vJiYobnVsbD09KHI9dGhpcy5zZXNzaW9uUGVyc2lzdGVuY2UpfHxyLnNldF9kaXNhYmxlZChvKSl9b3B0X2luX2NhcHR1cmluZyh0KXt2YXIgaTsodGhpcy5jb25zZW50Lm9wdEluT3V0KCEwKSx0aGlzLmJzKCksUihudWxsPT10P3ZvaWQgMDp0LmNhcHR1cmVFdmVudE5hbWUpfHxudWxsIT10JiZ0LmNhcHR1cmVFdmVudE5hbWUpJiZ0aGlzLmNhcHR1cmUobnVsbCE9PShpPW51bGw9PXQ/dm9pZCAwOnQuY2FwdHVyZUV2ZW50TmFtZSkmJnZvaWQgMCE9PWk/aTpcIiRvcHRfaW5cIixudWxsPT10P3ZvaWQgMDp0LmNhcHR1cmVQcm9wZXJ0aWVzLHtzZW5kX2luc3RhbnRseTohMH0pO3RoaXMuY29uZmlnLmNhcHR1cmVfcGFnZXZpZXcmJnRoaXMuJHMoKX1vcHRfb3V0X2NhcHR1cmluZygpe3RoaXMuY29uc2VudC5vcHRJbk91dCghMSksdGhpcy5icygpfWhhc19vcHRlZF9pbl9jYXB0dXJpbmcoKXtyZXR1cm4gdGhpcy5jb25zZW50LmlzT3B0ZWRJbigpfWhhc19vcHRlZF9vdXRfY2FwdHVyaW5nKCl7cmV0dXJuIHRoaXMuY29uc2VudC5pc09wdGVkT3V0KCl9Y2xlYXJfb3B0X2luX291dF9jYXB0dXJpbmcoKXt0aGlzLmNvbnNlbnQucmVzZXQoKSx0aGlzLmJzKCl9X2lzX2JvdCgpe3JldHVybiBuP0xvKG4sdGhpcy5jb25maWcuY3VzdG9tX2Jsb2NrZWRfdXNlcmFnZW50cyk6dm9pZCAwfSRzKCl7byYmKFwidmlzaWJsZVwiPT09by52aXNpYmlsaXR5U3RhdGU/dGhpcy5oc3x8KHRoaXMuaHM9ITAsdGhpcy5jYXB0dXJlKFwiJHBhZ2V2aWV3XCIse3RpdGxlOm8udGl0bGV9LHtzZW5kX2luc3RhbnRseTohMH0pLHRoaXMuZHMmJihvLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsdGhpcy5kcyksdGhpcy5kcz1udWxsKSk6dGhpcy5kc3x8KHRoaXMuZHM9dGhpcy4kcy5iaW5kKHRoaXMpLHN0KG8sXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsdGhpcy5kcykpKX1kZWJ1ZyhpKXshMT09PWk/KG51bGw9PXR8fHQuY29uc29sZS5sb2coXCJZb3UndmUgZGlzYWJsZWQgZGVidWcgbW9kZS5cIiksbG9jYWxTdG9yYWdlJiZsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcInBoX2RlYnVnXCIpLHRoaXMuc2V0X2NvbmZpZyh7ZGVidWc6ITF9KSk6KG51bGw9PXR8fHQuY29uc29sZS5sb2coXCJZb3UncmUgbm93IGluIGRlYnVnIG1vZGUuIEFsbCBjYWxscyB0byBQb3N0SG9nIHdpbGwgYmUgbG9nZ2VkIGluIHlvdXIgY29uc29sZS5cXG5Zb3UgY2FuIGRpc2FibGUgdGhpcyB3aXRoIGBwb3N0aG9nLmRlYnVnKGZhbHNlKWAuXCIpLGxvY2FsU3RvcmFnZSYmbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJwaF9kZWJ1Z1wiLFwidHJ1ZVwiKSx0aGlzLnNldF9jb25maWcoe2RlYnVnOiEwfSkpfUVzKHQpe2lmKE8odGhpcy5jb25maWcuYmVmb3JlX3NlbmQpKXJldHVybiB0O3ZhciBpPXgodGhpcy5jb25maWcuYmVmb3JlX3NlbmQpP3RoaXMuY29uZmlnLmJlZm9yZV9zZW5kOlt0aGlzLmNvbmZpZy5iZWZvcmVfc2VuZF0sZT10O2Zvcih2YXIgciBvZiBpKXtpZihlPXIoZSksTyhlKSl7dmFyIHM9XCJFdmVudCAnXCIrdC5ldmVudCtcIicgd2FzIHJlamVjdGVkIGluIGJlZm9yZVNlbmQgZnVuY3Rpb25cIjtyZXR1cm4gTCh0LmV2ZW50KT9qLndhcm4ocytcIi4gVGhpcyBjYW4gY2F1c2UgdW5leHBlY3RlZCBiZWhhdmlvci5cIik6ai5pbmZvKHMpLG51bGx9ZS5wcm9wZXJ0aWVzJiYhUChlLnByb3BlcnRpZXMpfHxqLndhcm4oXCJFdmVudCAnXCIrdC5ldmVudCtcIicgaGFzIG5vIHByb3BlcnRpZXMgYWZ0ZXIgYmVmb3JlU2VuZCBmdW5jdGlvbiwgdGhpcyBpcyBsaWtlbHkgYW4gZXJyb3IuXCIpfXJldHVybiBlfWdldFBhZ2VWaWV3SWQoKXt2YXIgdDtyZXR1cm4gbnVsbD09KHQ9dGhpcy5wYWdlVmlld01hbmFnZXIubmUpP3ZvaWQgMDp0LnBhZ2VWaWV3SWR9Y2FwdHVyZVRyYWNlRmVlZGJhY2sodCxpKXt0aGlzLmNhcHR1cmUoXCIkYWlfZmVlZGJhY2tcIix7JGFpX3RyYWNlX2lkOlN0cmluZyh0KSwkYWlfZmVlZGJhY2tfdGV4dDppfSl9Y2FwdHVyZVRyYWNlTWV0cmljKHQsaSxlKXt0aGlzLmNhcHR1cmUoXCIkYWlfbWV0cmljXCIseyRhaV90cmFjZV9pZDpTdHJpbmcodCksJGFpX21ldHJpY19uYW1lOmksJGFpX21ldHJpY192YWx1ZTpTdHJpbmcoZSl9KX19IWZ1bmN0aW9uKHQsaSl7Zm9yKHZhciBlPTA7ZTxpLmxlbmd0aDtlKyspdC5wcm90b3R5cGVbaVtlXV09USh0LnByb3RvdHlwZVtpW2VdXSl9KFlvLFtcImlkZW50aWZ5XCJdKTt2YXIgWG8sUW89ZnVuY3Rpb24odCl7cmV0dXJuIHQuQnV0dG9uPVwiYnV0dG9uXCIsdC5UYWI9XCJ0YWJcIix0LlNlbGVjdG9yPVwic2VsZWN0b3JcIix0fSh7fSksWm89ZnVuY3Rpb24odCl7cmV0dXJuIHQuVG9wTGVmdD1cInRvcF9sZWZ0XCIsdC5Ub3BSaWdodD1cInRvcF9yaWdodFwiLHQuVG9wQ2VudGVyPVwidG9wX2NlbnRlclwiLHQuTWlkZGxlTGVmdD1cIm1pZGRsZV9sZWZ0XCIsdC5NaWRkbGVSaWdodD1cIm1pZGRsZV9yaWdodFwiLHQuTWlkZGxlQ2VudGVyPVwibWlkZGxlX2NlbnRlclwiLHQuTGVmdD1cImxlZnRcIix0LkNlbnRlcj1cImNlbnRlclwiLHQuUmlnaHQ9XCJyaWdodFwiLHQuTmV4dFRvVHJpZ2dlcj1cIm5leHRfdG9fdHJpZ2dlclwiLHR9KHt9KSx0YT1mdW5jdGlvbih0KXtyZXR1cm4gdC5Qb3BvdmVyPVwicG9wb3ZlclwiLHQuQVBJPVwiYXBpXCIsdC5XaWRnZXQ9XCJ3aWRnZXRcIix0fSh7fSksaWE9ZnVuY3Rpb24odCl7cmV0dXJuIHQuT3Blbj1cIm9wZW5cIix0Lk11bHRpcGxlQ2hvaWNlPVwibXVsdGlwbGVfY2hvaWNlXCIsdC5TaW5nbGVDaG9pY2U9XCJzaW5nbGVfY2hvaWNlXCIsdC5SYXRpbmc9XCJyYXRpbmdcIix0Lkxpbms9XCJsaW5rXCIsdH0oe30pLGVhPWZ1bmN0aW9uKHQpe3JldHVybiB0Lk5leHRRdWVzdGlvbj1cIm5leHRfcXVlc3Rpb25cIix0LkVuZD1cImVuZFwiLHQuUmVzcG9uc2VCYXNlZD1cInJlc3BvbnNlX2Jhc2VkXCIsdC5TcGVjaWZpY1F1ZXN0aW9uPVwic3BlY2lmaWNfcXVlc3Rpb25cIix0fSh7fSkscmE9ZnVuY3Rpb24odCl7cmV0dXJuIHQuT25jZT1cIm9uY2VcIix0LlJlY3VycmluZz1cInJlY3VycmluZ1wiLHQuQWx3YXlzPVwiYWx3YXlzXCIsdH0oe30pLHNhPShYbz1Cb1tXb109bmV3IFlvLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gaSgpe2kuZG9uZXx8KGkuZG9uZT0hMCxHbz0hMSxKKEJvLChmdW5jdGlvbih0KXt0Ll9kb21fbG9hZGVkKCl9KSkpfW51bGwhPW8mJm8uYWRkRXZlbnRMaXN0ZW5lcj9cImNvbXBsZXRlXCI9PT1vLnJlYWR5U3RhdGU/aSgpOnN0KG8sXCJET01Db250ZW50TG9hZGVkXCIsaSx7Y2FwdHVyZTohMX0pOnQmJmouZXJyb3IoXCJCcm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcmAgc28gUG9zdEhvZyBjb3VsZG4ndCBiZSBpbml0aWFsaXplZFwiKX0oKSxYbyk7ZXhwb3J0e2YgYXMgQ09QWV9BVVRPQ0FQVFVSRV9FVkVOVCxnIGFzIENvbXByZXNzaW9uLFlvIGFzIFBvc3RIb2csWm8gYXMgU3VydmV5UG9zaXRpb24sZWEgYXMgU3VydmV5UXVlc3Rpb25CcmFuY2hpbmdUeXBlLGlhIGFzIFN1cnZleVF1ZXN0aW9uVHlwZSxyYSBhcyBTdXJ2ZXlTY2hlZHVsZSx0YSBhcyBTdXJ2ZXlUeXBlLFFvIGFzIFN1cnZleVdpZGdldFR5cGUsc2EgYXMgZGVmYXVsdCxwIGFzIGtub3duVW5zYWZlRWRpdGFibGVFdmVudCxzYSBhcyBwb3N0aG9nLF8gYXMgc2V2ZXJpdHlMZXZlbHN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLmpzLm1hcFxuIl0sIm5hbWVzIjpbInQiLCJ3aW5kb3ciLCJpIiwiZ2xvYmFsVGhpcyIsImUiLCJBcnJheSIsInByb3RvdHlwZSIsInIiLCJmb3JFYWNoIiwicyIsImluZGV4T2YiLCJuIiwibmF2aWdhdG9yIiwibyIsImRvY3VtZW50IiwiYSIsImxvY2F0aW9uIiwibCIsImZldGNoIiwidSIsIlhNTEh0dHBSZXF1ZXN0IiwiaCIsIkFib3J0Q29udHJvbGxlciIsImQiLCJ1c2VyQWdlbnQiLCJ2IiwiYyIsIkRFQlVHIiwiTElCX1ZFUlNJT04iLCJmIiwicCIsImciLCJHWmlwSlMiLCJCYXNlNjQiLCJfIiwibSIsImIiLCJ0cmltIiwidyIsInJlcGxhY2UiLCJ5IiwiaXNBcnJheSIsIlMiLCJPYmplY3QiLCIkIiwiaGFzT3duUHJvcGVydHkiLCJrIiwidG9TdHJpbmciLCJ4IiwiY2FsbCIsIkUiLCJJIiwiUCIsIlIiLCJUIiwiTSIsImxlbmd0aCIsIkMiLCJPIiwiRiIsIkEiLCJEIiwiRm9ybURhdGEiLCJMIiwiTiIsIlBPU1RIT0dfREVCVUciLCJjb25zb2xlIiwiX19ycndlYl9vcmlnaW5hbF9fIiwiYXJndW1lbnRzIiwiaW5mbyIsIndhcm4iLCJlcnJvciIsImNyaXRpY2FsIiwidW5pbml0aWFsaXplZFdhcm5pbmciLCJjcmVhdGVMb2dnZXIiLCJqIiwieiIsIlUiLCJxIiwiY29uZmlnIiwiZGlzYWJsZV9leHRlcm5hbF9kZXBlbmRlbmN5X2xvYWRpbmciLCJxdWVyeVNlbGVjdG9yQWxsIiwic3JjIiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJjcm9zc09yaWdpbiIsIm9ubG9hZCIsIm9uZXJyb3IiLCJwcmVwYXJlX2V4dGVybmFsX2RlcGVuZGVuY3lfc2NyaXB0IiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJCIiwiYXNzaWduIiwiYmluZCIsImFwcGx5IiwiSCIsIl9fUG9zdGhvZ0V4dGVuc2lvbnNfXyIsImxvYWRFeHRlcm5hbERlcGVuZGVuY3kiLCJ2ZXJzaW9uIiwidG9rZW4iLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwicmVxdWVzdFJvdXRlciIsImVuZHBvaW50Rm9yIiwibG9hZFNpdGVBcHAiLCJXIiwiRyIsIkoiLCJlbnRyaWVzIiwiViIsIksiLCJwdXNoIiwiWSIsImtleXMiLCJYIiwiUSIsIloiLCJ0dCIsInNsaWNlIiwiU2V0IiwiaGFzIiwiYWRkIiwiaXQiLCJldCIsImhvc3RuYW1lIiwic3BsaXQiLCJqb2luIiwicnQiLCJzdCIsImNhcHR1cmUiLCJwYXNzaXZlIiwibnQiLCJvdCIsImF0IiwibHQiLCJ1dCIsImh0IiwiZHQiLCJ2dCIsImN0IiwiZnQiLCJwdCIsImd0IiwiX3QiLCJtdCIsImJ0Iiwid3QiLCJ5dCIsIlN0IiwiJHQiLCJrdCIsInh0IiwiRXQiLCJJdCIsIlB0IiwiUnQiLCJUdCIsIk10IiwiQ3QiLCJPdCIsIkZ0IiwiQXQiLCJEdCIsIkx0IiwiTnQiLCJqdCIsInp0IiwiVXQiLCJxdCIsIkJ0IiwiSHQiLCJXdCIsIkVsZW1lbnQiLCJpZCIsImNsb3Nlc3QiLCJHdCIsIm5vZGVUeXBlIiwiSnQiLCJ0YWdOYW1lIiwidG9Mb3dlckNhc2UiLCJWdCIsIkt0IiwiWXQiLCJYdCIsImhyZWYiLCJzb21lIiwibWF0Y2giLCJRdCIsImNsYXNzTmFtZSIsImJhc2VWYWwiLCJnZXRBdHRyaWJ1dGUiLCJadCIsImZpbHRlciIsImNpIiwic3Vic3RyaW5nIiwidGkiLCJuaSIsIm9pIiwiY2hpbGROb2RlcyIsInRleHRDb250ZW50IiwiaWkiLCJ0YXJnZXQiLCJzcmNFbGVtZW50Iiwic2hhZG93Um9vdCIsImNvbXBvc2VkUGF0aCIsImVpIiwicmkiLCJzaSIsInVybF9hbGxvd2xpc3QiLCJ1cmxfaWdub3JlbGlzdCIsImRvbV9ldmVudF9hbGxvd2xpc3QiLCJob3N0IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJlbGVtZW50X2FsbG93bGlzdCIsImNzc19zZWxlY3Rvcl9hbGxvd2xpc3QiLCJtYXRjaGVzIiwibmFtZSIsInRlc3QiLCJpbmNsdWRlcyIsImFpIiwibGkiLCJSZWdFeHAiLCJ1aSIsImhpIiwiZGkiLCJ2aSIsImZpIiwicGkiLCJnaSIsIm1hcCIsInRhZ19uYW1lIiwiYXR0cl9jbGFzcyIsInNvcnQiLCJ0ZXh0IiwibnRoX2NoaWxkIiwibnRoX29mX3R5cGUiLCJhdHRyX2lkIiwiYXR0cmlidXRlcyIsImxvY2FsZUNvbXBhcmUiLCJfaSIsIiRlbF90ZXh0IiwiYXR0cl9faHJlZiIsIm1pIiwiYXR0cl9faWQiLCJhdHRyX19jbGFzcyIsImJpIiwiY29uc3RydWN0b3IiLCJjbGlja3MiLCJpc1JhZ2VDbGljayIsImFicyIsInRpbWVzdGFtcCIsIndpIiwieWkiLCJTaSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkZpbGUiLCIkaSIsImRlY29kZVVSSUNvbXBvbmVudCIsImtpIiwieGkiLCJFaSIsIklpIiwiUGkiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwicHJldmlvdXNTaWJsaW5nIiwiUmkiLCJjbGFzc2VzIiwidmFsdWUiLCJUaSIsIm1hc2tBbGxFbGVtZW50QXR0cmlidXRlcyIsIm1hc2tBbGxUZXh0IiwiZWxlbWVudEF0dHJpYnV0ZUlnbm9yZUxpc3QiLCJlbGVtZW50c0NoYWluQXNTdHJpbmciLCJwcm9wcyIsImV4cGxpY2l0Tm9DYXB0dXJlIiwiJGV2ZW50X3R5cGUiLCIkY2VfdmVyc2lvbiIsIiRlbGVtZW50cyIsIiRlbGVtZW50c19jaGFpbiIsIiRleHRlcm5hbF9jbGlja191cmwiLCJNaSIsInJhZ2VjbGlja3MiLCJpbnN0YW5jZSIsImF1dG9jYXB0dXJlIiwiaXNCcm93c2VyU3VwcG9ydGVkIiwiZXZlbnQiLCJjYXB0dXJlX2NvcGllZF90ZXh0Iiwic3RhcnRJZkVuYWJsZWQiLCJpc0VuYWJsZWQiLCJvblJlbW90ZUNvbmZpZyIsInBlcnNpc3RlbmNlIiwicmVnaXN0ZXIiLCJhdXRvY2FwdHVyZV9vcHRfb3V0Iiwic2V0RWxlbWVudFNlbGVjdG9ycyIsImdldEVsZW1lbnRTZWxlY3RvcnMiLCJhZHZhbmNlZF9kaXNhYmxlX2RlY2lkZSIsIk1vdXNlRXZlbnQiLCJyYWdlY2xpY2siLCJjbGllbnRYIiwiY2xpZW50WSIsImdldFRpbWUiLCJtYXNrX2FsbF9lbGVtZW50X2F0dHJpYnV0ZXMiLCJtYXNrX2FsbF90ZXh0IiwiZWxlbWVudF9hdHRyaWJ1dGVfaWdub3JlbGlzdCIsIiRlbGVtZW50X3NlbGVjdG9ycyIsImdldFNlbGVjdGlvbiIsIiRzZWxlY3RlZF9jb250ZW50IiwiJGNvcHlfdHlwZSIsInRydW5jIiwiY2VpbCIsIk51bWJlciIsImlzSW50ZWdlciIsImlzRmluaXRlIiwiQ2kiLCJPaSIsImJ5dGVzIiwiVHlwZUVycm9yIiwiZnJvbUZpZWxkc1Y3IiwiUmFuZ2VFcnJvciIsIlVpbnQ4QXJyYXkiLCJwb3ciLCJjaGFyQXQiLCJFcnJvciIsImNsb25lIiwiZXF1YWxzIiwiY29tcGFyZVRvIiwic2lnbiIsIkZpIiwiTGkiLCJnZW5lcmF0ZSIsImdlbmVyYXRlT3JBYm9ydCIsIm5leHRVaW50MzIiLCJBaSIsIkRpIiwiVVVJRFY3X0RFTllfV0VBS19STkciLCJyYW5kb20iLCJjcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJVaW50MzJBcnJheSIsIk5pIiwiamkiLCJ6aSIsIlVpIiwicWkiLCJtaW4iLCJjb29raWUiLCJCaSIsIkpTT04iLCJwYXJzZSIsInNldFRpbWUiLCJ0b1VUQ1N0cmluZyIsInN0cmluZ2lmeSIsIkhpIiwiV2kiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJHaSIsIkppIiwiVmkiLCJLaSIsIllpIiwiWGkiLCJzZXNzaW9uU3RvcmFnZSIsIlFpIiwiUEVORElORyIsIkRFTklFRCIsIkdSQU5URUQiLCJaaSIsIl9pbnN0YW5jZSIsImNvbnNlbnQiLCJpc09wdGVkT3V0Iiwib3B0X291dF9jYXB0dXJpbmdfYnlfZGVmYXVsdCIsImlzT3B0ZWRJbiIsIm9wdEluT3V0IiwiY29va2llX2V4cGlyYXRpb24iLCJjcm9zc19zdWJkb21haW5fY29va2llIiwic2VjdXJlX2Nvb2tpZSIsInJlc2V0Iiwib3B0X291dF9jYXB0dXJpbmdfY29va2llX3ByZWZpeCIsIm9wdF9vdXRfY2FwdHVyaW5nX3BlcnNpc3RlbmNlX3R5cGUiLCJyZXNwZWN0X2RudCIsImRvTm90VHJhY2siLCJtc0RvTm90VHJhY2siLCJ0ZSIsImllIiwiZWUiLCJnZXRfcHJvcGVydHkiLCJjYXB0dXJlX2RlYWRfY2xpY2tzIiwicmUiLCJsYXp5TG9hZGVkRGVhZENsaWNrc0F1dG9jYXB0dXJlIiwib25DYXB0dXJlIiwiY2FwdHVyZURlYWRDbGlja3MiLCJpbml0RGVhZENsaWNrc0F1dG9jYXB0dXJlIiwiX19vbkNhcHR1cmUiLCJzdGFydCIsInN0b3AiLCJzZSIsIm5lIiwiZXJyb3JXcmFwcGluZ0Z1bmN0aW9ucyIsIndyYXBPbkVycm9yIiwid3JhcFVuaGFuZGxlZFJlamVjdGlvbiIsIndyYXBDb25zb2xlRXJyb3IiLCJjYXB0dXJlX3VuaGFuZGxlZF9lcnJvcnMiLCJjYXB0dXJlRXhjZXB0aW9uIiwiY2FwdHVyZV91bmhhbmRsZWRfcmVqZWN0aW9ucyIsImNhcHR1cmVfY29uc29sZV9lcnJvcnMiLCJjYXB0dXJlX2V4Y2VwdGlvbnMiLCJhdXRvY2FwdHVyZUV4Y2VwdGlvbnMiLCIkZXhjZXB0aW9uX3BlcnNvblVSTCIsImdldF9kaXN0aW5jdF9pZCIsImV4Y2VwdGlvbnMiLCJzZW5kRXhjZXB0aW9uRXZlbnQiLCJvZSIsIkV2ZW50IiwiYWUiLCJsZSIsInVlIiwiaGUiLCJkZSIsInZlIiwiY2UiLCJmZSIsInBsYXRmb3JtIiwiZmlsZW5hbWUiLCJmdW5jdGlvbiIsImluX2FwcCIsImxpbmVubyIsImNvbG5vIiwicGUiLCJnZSIsIl9lIiwibWUiLCJiZSIsIndlIiwiZnJvbSIsInJldmVyc2UiLCJ5ZSIsImV4ZWMiLCJ4ZSIsIlNlIiwiJGUiLCJrZSIsIkVlIiwiSWUiLCJzdGFja3RyYWNlIiwic3RhY2siLCJQZSIsIm1lc3NhZ2UiLCJfcG9zdGhvZ0NodW5rSWRzIiwicmVkdWNlIiwiY2h1bmtfaWQiLCJSZSIsImhhbmRsZWQiLCJzeW50aGV0aWMiLCJvdmVycmlkZUV4Y2VwdGlvblR5cGUiLCJTdHJpbmciLCJmcmFtZXMiLCJtZWNoYW5pc20iLCJUZSIsImNhdXNlIiwiTWUiLCIkZXhjZXB0aW9uX2xpc3QiLCIkZXhjZXB0aW9uX2xldmVsIiwiQ2UiLCJkZWZhdWx0RXhjZXB0aW9uVHlwZSIsImRlZmF1bHRFeGNlcHRpb25NZXNzYWdlIiwic3ludGhldGljRXhjZXB0aW9uIiwiT2UiLCJGZSIsImxldmVsIiwiQWUiLCIkZXhjZXB0aW9uX0RPTUV4Y2VwdGlvbl9jb2RlIiwiY29kZSIsIkRlIiwiZGVmaW5lUHJvcGVydGllcyIsIl9fcG9zdGhvZ193cmFwcGVkX18iLCJlbnVtZXJhYmxlIiwiTGUiLCJwYXRobmFtZSIsImNhcHR1cmVfcGFnZXZpZXciLCJtb25pdG9ySGlzdG9yeUNoYW5nZXMiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwicmVwbGFjZVN0YXRlIiwibmF2aWdhdGlvbl90eXBlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIk5lIiwicG9wIiwiamUiLCJzaXplIiwiZGF0YSIsInNlc3Npb25JZCIsIndpbmRvd0lkIiwiZmxhdE1hcCIsInplIiwiRG9tQ29udGVudExvYWRlZCIsIkxvYWQiLCJGdWxsU25hcHNob3QiLCJJbmNyZW1lbnRhbFNuYXBzaG90IiwiTWV0YSIsIkN1c3RvbSIsIlBsdWdpbiIsIlVlIiwiTXV0YXRpb24iLCJNb3VzZU1vdmUiLCJNb3VzZUludGVyYWN0aW9uIiwiU2Nyb2xsIiwiVmlld3BvcnRSZXNpemUiLCJJbnB1dCIsIlRvdWNoTW92ZSIsIk1lZGlhSW50ZXJhY3Rpb24iLCJTdHlsZVNoZWV0UnVsZSIsIkNhbnZhc011dGF0aW9uIiwiRm9udCIsIkxvZyIsIkRyYWciLCJTdHlsZURlY2xhcmF0aW9uIiwiU2VsZWN0aW9uIiwiQWRvcHRlZFN0eWxlU2hlZXQiLCJDdXN0b21FbGVtZW50IiwicWUiLCJCZSIsIkhlIiwiaW5pdGlhdG9yVHlwZXMiLCJtYXNrUmVxdWVzdEZuIiwicmVjb3JkSGVhZGVycyIsInJlY29yZEJvZHkiLCJyZWNvcmRJbml0aWFsUmVxdWVzdHMiLCJyZWNvcmRQZXJmb3JtYW5jZSIsInBlcmZvcm1hbmNlRW50cnlUeXBlVG9PYnNlcnZlIiwicGF5bG9hZFNpemVMaW1pdEJ5dGVzIiwicGF5bG9hZEhvc3REZW55TGlzdCIsIldlIiwiR2UiLCJKZSIsIlZlIiwiQmxvYiIsInBhcnNlSW50IiwiS2UiLCJZZSIsInNlc3Npb25fcmVjb3JkaW5nIiwiY2FwdHVyZV9wZXJmb3JtYW5jZSIsInJlcXVlc3RCb2R5IiwicmVxdWVzdEhlYWRlcnMiLCJyZXNwb25zZUJvZHkiLCJyZXNwb25zZUhlYWRlcnMiLCJhcGlfaG9zdCIsIm1hc2tOZXR3b3JrUmVxdWVzdEZuIiwibWFza0NhcHR1cmVkTmV0d29ya1JlcXVlc3RGbiIsInVybCIsIlhlIiwiUWUiLCJfcnJ3ZWIiLCJtaXJyb3IiLCJnZXROb2RlIiwibm9kZU5hbWUiLCJnZXRJZCIsInJlbW92ZXMiLCJ0ZXh0cyIsImFkZHMiLCJ0aHJvdHRsZU11dGF0aW9ucyIsInNvdXJjZSIsIm1heCIsIm9uQmxvY2tlZE5vZGUiLCJyZWZpbGxSYXRlIiwiYnVja2V0U2l6ZSIsInNldEludGVydmFsIiwiWmUiLCJ0ciIsIlVpbnQxNkFycmF5IiwiaXIiLCJlciIsInJyIiwic3IiLCJuciIsIm9yIiwiYXIiLCJsciIsInVyIiwiaHIiLCJkciIsInZyIiwiY3IiLCJmciIsInByIiwiZ3IiLCJfciIsIm1yIiwiYnIiLCJzZXQiLCJzdWJhcnJheSIsIndyIiwieXIiLCJTciIsIiRyIiwia3IiLCJ4ciIsIkVyIiwiSXIiLCJQciIsIlJyIiwiVHIiLCJNciIsIm1lbSIsImxvZyIsIkNyIiwiT3IiLCJtdGltZSIsImNoYXJDb2RlQXQiLCJGciIsIkFyIiwiRHIiLCJUZXh0RW5jb2RlciIsImVuY29kZSIsIkxyIiwiTnIiLCJqciIsInpyIiwiVXIiLCJxciIsIkJyIiwiSHIiLCJXciIsIkdyIiwiSnIiLCJtYXRjaGluZyIsIlZyIiwidHJpZ2dlclN0YXR1cyIsIktyIiwiZGVsZXRlIiwiWXIiLCJYciIsInVybEJsb2NrZWQiLCJzZXNzaW9uUmVjb3JkaW5nIiwidXJsVHJpZ2dlcnMiLCJ1cmxCbG9ja2xpc3QiLCJyZWdpc3Rlcl9mb3Jfc2Vzc2lvbiIsIiRzZGtfZGVidWdfcmVwbGF5X3VybF90cmlnZ2VyX3N0YXR1cyIsImNoZWNrVXJsVHJpZ2dlckNvbmRpdGlvbnMiLCJRciIsImxpbmtlZEZsYWciLCJsaW5rZWRGbGFnU2VlbiIsIiRzZGtfZGVidWdfcmVwbGF5X2xpbmtlZF9mbGFnX3RyaWdnZXJfc3RhdHVzIiwiZmxhZyIsInZhcmlhbnQiLCJvbkZlYXR1cmVGbGFncyIsIlpyIiwiZXZlbnRUcmlnZ2VycyIsIiRzZGtfZGVidWdfcmVwbGF5X2V2ZW50X3RyaWdnZXJfc3RhdHVzIiwidHMiLCJpc1JlY29yZGluZ0VuYWJsZWQiLCJpcyIsInJlY2VpdmVkRGVjaWRlIiwidXJsVHJpZ2dlck1hdGNoaW5nIiwiaXNTYW1wbGVkIiwiZXZlbnRUcmlnZ2VyTWF0Y2hpbmciLCJsaW5rZWRGbGFnTWF0Y2hpbmciLCJlcyIsInJzIiwic3MiLCJucyIsInJyd2ViIiwicmVjb3JkIiwib3MiLCJhcyIsImxzIiwicnJ3ZWJNZXRob2QiLCJlbnF1ZXVlZEF0IiwiYXR0ZW1wdCIsInVzIiwiZnJvbUNoYXJDb2RlIiwiaHMiLCJ0YWciLCJkcyIsInNlc3Npb25faWRsZV90aHJlc2hvbGRfbXMiLCJzdGFydGVkIiwic2Vzc2lvbk1hbmFnZXIiLCJmdWxsX3NuYXBzaG90X2ludGVydmFsX21pbGxpcyIsInNlc3Npb25TdGFydFRpbWVzdGFtcCIsImNoZWNrQW5kR2V0U2Vzc2lvbkFuZFdpbmRvd0lkIiwiZGlzYWJsZV9zZXNzaW9uX3JlY29yZGluZyIsImVuYWJsZV9yZWNvcmRpbmdfY29uc29sZV9sb2ciLCJjYXB0dXJlQ2FudmFzIiwicmVjb3JkQ2FudmFzIiwiZW5hYmxlZCIsImNhbnZhc0ZwcyIsImZwcyIsImNhbnZhc1F1YWxpdHkiLCJxdWFsaXR5IiwicGFyc2VGbG9hdCIsImlzTmFOIiwibmV0d29ya190aW1pbmciLCJjYXB0dXJlUGVyZm9ybWFuY2UiLCJtYXNrQWxsSW5wdXRzIiwibWFza1RleHRTZWxlY3RvciIsImJsb2NrU2VsZWN0b3IiLCJzdGF0dXMiLCJfZm9yY2VBbGxvd0xvY2FsaG9zdE5ldHdvcmtDYXB0dXJlIiwidmlzaWJpbGl0eVN0YXRlIiwiX19wcmV2aWV3X2V4cGVyaW1lbnRhbF9jb29raWVsZXNzX21vZGUiLCJzZXNzaW9uVGltZW91dE1zIiwic3RhcnRJZkVuYWJsZWRPclN0b3AiLCJvbiIsInByb3BlcnRpZXMiLCIkY3VycmVudF91cmwiLCJvblNlc3Npb25JZCIsImNoYW5nZVJlYXNvbiIsInVucmVnaXN0ZXIiLCJzdG9wUmVjb3JkaW5nIiwiY2xlYXJJbnRlcnZhbCIsInNhbXBsZVJhdGUiLCJlbmRwb2ludCIsInRyaWdnZXJNYXRjaFR5cGUiLCIkc2RrX2RlYnVnX3JlcGxheV9yZW1vdGVfdHJpZ2dlcl9tYXRjaGluZ19jb25maWciLCJtaW5pbXVtRHVyYXRpb25NaWxsaXNlY29uZHMiLCJjb25zb2xlTG9nUmVjb3JkaW5nRW5hYmxlZCIsIm5ldHdvcmtQYXlsb2FkQ2FwdHVyZSIsIm1hc2tpbmciLCJzY3JpcHRDb25maWciLCJvblJSd2ViRW1pdCIsInBsdWdpbiIsInBheWxvYWQiLCJ0cmFjZSIsInNjcmlwdCIsImV2ZW50VGltZXN0YW1wIiwibGFzdEFjdGl2aXR5VGltZXN0YW1wIiwidGhyZXNob2xkIiwiYnVmZmVyTGVuZ3RoIiwiYnVmZmVyU2l6ZSIsInJlYXNvbiIsImFkZEN1c3RvbUV2ZW50IiwidGFrZUZ1bGxTbmFwc2hvdCIsImJsb2NrQ2xhc3MiLCJpZ25vcmVDbGFzcyIsIm1hc2tUZXh0Q2xhc3MiLCJtYXNrVGV4dEZuIiwibWFza0lucHV0T3B0aW9ucyIsInBhc3N3b3JkIiwibWFza0lucHV0Rm4iLCJzbGltRE9NT3B0aW9ucyIsImNvbGxlY3RGb250cyIsImlubGluZVN0eWxlc2hlZXQiLCJyZWNvcmRDcm9zc09yaWdpbklmcmFtZXMiLCJzYW1wbGluZyIsImNhbnZhcyIsImRhdGFVUkxPcHRpb25zIiwiX19tdXRhdGlvblJhdGVMaW1pdGVyUmVmaWxsUmF0ZSIsIl9fbXV0YXRpb25SYXRlTGltaXRlckJ1Y2tldFNpemUiLCJub2RlIiwiZW1pdCIsInBsdWdpbnMiLCJzZXNzaW9uUmVjb3JkaW5nT3B0aW9ucyIsImFjdGl2ZVBsdWdpbnMiLCJycndlYlBsdWdpbnMiLCJnZXRSZWNvcmRDb25zb2xlUGx1Z2luIiwiZ2V0UmVjb3JkTmV0d29ya1BsdWdpbiIsImNvbXByZXNzX2V2ZW50cyIsImN2IiwiJHNuYXBzaG90X2J5dGVzIiwiJHNuYXBzaG90X2RhdGEiLCIkc2Vzc2lvbl9pZCIsIiR3aW5kb3dfaWQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiJGxpYiIsIiRsaWJfdmVyc2lvbiIsIl91cmwiLCJfbm9UcnVuY2F0ZSIsIl9iYXRjaEtleSIsInNraXBfY2xpZW50X3JhdGVfbGltaXRpbmciLCJvdmVycmlkZUxpbmtlZEZsYWciLCJvdmVycmlkZVNhbXBsaW5nIiwib3ZlcnJpZGVUcmlnZ2VyIiwiJHNlc3Npb25fcmVjb3JkaW5nX3N0YXJ0X3JlYXNvbiIsInNka0RlYnVnUHJvcGVydGllcyIsIiRyZWNvcmRpbmdfc3RhdHVzIiwiJHNka19kZWJ1Z19yZXBsYXlfaW50ZXJuYWxfYnVmZmVyX2xlbmd0aCIsIiRzZGtfZGVidWdfcmVwbGF5X2ludGVybmFsX2J1ZmZlcl9zaXplIiwiJHNka19kZWJ1Z19jdXJyZW50X3Nlc3Npb25fZHVyYXRpb24iLCIkc2RrX2RlYnVnX3Nlc3Npb25fc3RhcnQiLCJ2cyIsImNzIiwic2VnbWVudCIsImFub255bW91c0lkIiwiZ2V0X2RldmljZV9pZCIsImRpc3RpbmN0X2lkIiwiJGRldmljZV9pZCIsInNldF9wcm9wZXJ0eSIsInVzZXIiLCJ0aGVuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ1c2VySWQiLCJpZGVudGlmeSIsImNhbGN1bGF0ZUV2ZW50UHJvcGVydGllcyIsImlzTG9hZGVkIiwibG9hZCIsInRyYWNrIiwicGFnZSIsInNjcmVlbiIsImZzIiwicHMiLCJvcmdhbml6YXRpb24iLCJwcm9qZWN0SWQiLCJwcmVmaXgiLCJzZXZlcml0eUFsbG93TGlzdCIsIl9fbG9hZGVkIiwidGFncyIsInNlc3Npb25SZWNvcmRpbmdTdGFydGVkIiwiZ2V0X3Nlc3Npb25fcmVwbGF5X3VybCIsIndpdGhUaW1lc3RhbXAiLCJleGNlcHRpb24iLCJ2YWx1ZXMiLCIkZXhjZXB0aW9uX21lc3NhZ2UiLCIkZXhjZXB0aW9uX3R5cGUiLCIkc2VudHJ5X2V2ZW50X2lkIiwiZXZlbnRfaWQiLCIkc2VudHJ5X2V4Y2VwdGlvbiIsIiRzZW50cnlfZXhjZXB0aW9uX21lc3NhZ2UiLCIkc2VudHJ5X2V4Y2VwdGlvbl90eXBlIiwiJHNlbnRyeV90YWdzIiwiJHNlbnRyeV91cmwiLCJncyIsInNldHVwT25jZSIsIl9zIiwiaGFzaCIsIm1zIiwiYnMiLCJ3cyIsIlVOSU5JVElBTElaRUQiLCJMT0FESU5HIiwiTE9BREVEIiwieXMiLCJwaF90b29sYmFyX3N0YXRlIiwibWF5YmVMb2FkVG9vbGJhciIsImF0b2IiLCJhY3Rpb24iLCJkZXNpcmVkSGFzaCIsInN0YXRlIiwic2VhcmNoIiwidXNlckludGVudCIsImxvYWRUb29sYmFyIiwicGhfbG9hZF90b29sYmFyIiwicGhfbG9hZF9lZGl0b3IiLCJnZXRFbGVtZW50QnlJZCIsInJlZ2lvbiIsImFkdmFuY2VkX2Rpc2FibGVfdG9vbGJhcl9tZXRyaWNzIiwiYXBpVVJMIiwiaW5zdHJ1bWVudCIsIm1heWJlTG9hZEVkaXRvciIsIlNzIiwiJHMiLCJ0cmFjaW5nSGVhZGVyc1BhdGNoRm5zIiwiX3BhdGNoWEhSIiwiX3BhdGNoRmV0Y2giLCJfX2FkZF90cmFjaW5nX2hlYWRlcnMiLCJrcyIsInhzIiwiRXMiLCJtZXRyaWNzIiwiZmlyc3RNZXRyaWNUaW1lc3RhbXAiLCJmbHVzaFRvQ2FwdHVyZVRpbWVvdXRNcyIsImF0dHJpYnV0aW9uIiwiaW50ZXJhY3Rpb25UYXJnZXRFbGVtZW50IiwiYWxsb3dlZE1ldHJpY3MiLCJwb3N0SG9nV2ViVml0YWxzQ2FsbGJhY2tzIiwib25MQ1AiLCJvbkNMUyIsIm9uRkNQIiwib25JTlAiLCJ3ZWJfdml0YWxzX2FsbG93ZWRfbWV0cmljcyIsIndlYl92aXRhbHNfZGVsYXllZF9mbHVzaF9tcyIsIl9fd2ViX3ZpdGFsc19tYXhfdmFsdWUiLCJwcm90b2NvbCIsIndlYl92aXRhbHMiLCJJcyIsIlBzIiwiUnMiLCJmbHVzaEludGVydmFsTWlsbGlzZWNvbmRzIiwiY2FwdHVyZV9oZWF0bWFwcyIsImZsdXNoX2ludGVydmFsX21pbGxpc2Vjb25kcyIsImVuYWJsZV9oZWF0bWFwcyIsImdldEFuZENsZWFyQnVmZmVyIiwiaGVhdG1hcHMiLCJvcmlnaW5hbEV2ZW50Iiwic2Nyb2xsTWFuYWdlciIsInNjcm9sbFkiLCJzY3JvbGxYIiwic2Nyb2xsRWxlbWVudCIsInBvc2l0aW9uIiwidGFyZ2V0X2ZpeGVkIiwiJGhlYXRtYXBfZGF0YSIsIlRzIiwiZG9QYWdlVmlldyIsInBhZ2VWaWV3SWQiLCJyZXNldENvbnRleHQiLCJkb1BhZ2VMZWF2ZSIsImRvRXZlbnQiLCIkcGFnZXZpZXdfaWQiLCIkcHJldl9wYWdldmlld19pZCIsImdldENvbnRleHQiLCJkaXNhYmxlX3Njcm9sbF9wcm9wZXJ0aWVzIiwibWF4U2Nyb2xsSGVpZ2h0IiwibGFzdFNjcm9sbFkiLCJtYXhTY3JvbGxZIiwibWF4Q29udGVudEhlaWdodCIsImxhc3RDb250ZW50WSIsIm1heENvbnRlbnRZIiwiJHByZXZfcGFnZXZpZXdfbGFzdF9zY3JvbGwiLCIkcHJldl9wYWdldmlld19sYXN0X3Njcm9sbF9wZXJjZW50YWdlIiwiJHByZXZfcGFnZXZpZXdfbWF4X3Njcm9sbCIsIiRwcmV2X3BhZ2V2aWV3X21heF9zY3JvbGxfcGVyY2VudGFnZSIsIiRwcmV2X3BhZ2V2aWV3X2xhc3RfY29udGVudCIsIiRwcmV2X3BhZ2V2aWV3X2xhc3RfY29udGVudF9wZXJjZW50YWdlIiwiJHByZXZfcGFnZXZpZXdfbWF4X2NvbnRlbnQiLCIkcHJldl9wYWdldmlld19tYXhfY29udGVudF9wZXJjZW50YWdlIiwiJHByZXZfcGFnZXZpZXdfcGF0aG5hbWUiLCIkcHJldl9wYWdldmlld19kdXJhdGlvbiIsIk1zIiwiQ3MiLCJPcyIsIkZzIiwiQXMiLCJEcyIsImNvbXByZXNzaW9uIiwiY29udGVudFR5cGUiLCJlc3RpbWF0ZWRTaXplIiwiTHMiLCJ0cmFuc3BvcnQiLCJtZXRob2QiLCJIZWFkZXJzIiwiaGVhZGVycyIsImFwcGVuZCIsInNpZ25hbCIsInRpbWVvdXQiLCJhYm9ydCIsImtlZXBhbGl2ZSIsImZldGNoT3B0aW9ucyIsInN0YXR1c0NvZGUiLCJqc29uIiwiY2FsbGJhY2siLCJjYXRjaCIsImZpbmFsbHkiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsIndpdGhDcmVkZW50aWFscyIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVRleHQiLCJzZW5kIiwic2VuZEJlYWNvbiIsImJlYWNvbiIsIk5zIiwianMiLCJ1c2VyUHJvcGVydGllc1RvU2V0IiwidXNlclByb3BlcnRpZXNUb1NldE9uY2UiLCJ6cyIsImV4YWN0IiwiaXNfbm90IiwiZXZlcnkiLCJyZWdleCIsIm5vdF9yZWdleCIsImljb250YWlucyIsIlVzIiwibm90X2ljb250YWlucyIsInFzIiwiQnMiLCJlcnJvclRyYWNraW5nIiwic3VwcHJlc3Npb25SdWxlcyIsIiRleGNlcHRpb25fdHlwZXMiLCIkZXhjZXB0aW9uX21lc3NhZ2VzIiwib3BlcmF0b3IiLCJrZXkiLCJCb29sZWFuIiwiSHMiLCJXcyIsIkdzIiwiSnMiLCJWcyIsIktzIiwiWXMiLCJYcyIsIlFzIiwiWnMiLCJ0biIsImVuIiwicm4iLCJzbiIsIm5uIiwiYW4iLCJsbiIsInVuIiwiaG4iLCJkbiIsInZuIiwiY24iLCJmbiIsInBuIiwiZ24iLCJfbiIsIm1uIiwiYm4iLCJ3biIsInluIiwiU24iLCIkbiIsImtuIiwieG4iLCJFbiIsIkluIiwiUG4iLCJSbiIsIlRuIiwiTW4iLCJDbiIsIk9uIiwiRm4iLCJBbiIsIkRuIiwiTG4iLCJNb3ppbGxhIiwiTm4iLCJqbiIsInpuIiwiVW4iLCJxbiIsIkJuIiwiSG4iLCJXbiIsIkduIiwiVVJMIiwiY29uY2F0IiwiSm4iLCIkc2VhcmNoX2VuZ2luZSIsInJlZmVycmVyIiwicGhfa2V5d29yZCIsIlZuIiwibGFuZ3VhZ2UiLCJ1c2VyTGFuZ3VhZ2UiLCJLbiIsIlluIiwiWG4iLCIkcmVmZXJyZXIiLCIkcmVmZXJyaW5nX2RvbWFpbiIsIiRob3N0IiwiJHBhdGhuYW1lIiwiUW4iLCJJbnRsIiwiRGF0ZVRpbWVGb3JtYXQiLCJyZXNvbHZlZE9wdGlvbnMiLCJ0aW1lWm9uZSIsIlpuIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJ0byIsIiRvcyIsIiRvc192ZXJzaW9uIiwiJGJyb3dzZXIiLCJ2ZW5kb3IiLCIkZGV2aWNlIiwiJGRldmljZV90eXBlIiwiJHRpbWV6b25lIiwiJHRpbWV6b25lX29mZnNldCIsIiRyYXdfdXNlcl9hZ2VudCIsIiRicm93c2VyX3ZlcnNpb24iLCIkYnJvd3Nlcl9sYW5ndWFnZSIsIiRicm93c2VyX2xhbmd1YWdlX3ByZWZpeCIsIiRzY3JlZW5faGVpZ2h0IiwiaGVpZ2h0IiwiJHNjcmVlbl93aWR0aCIsIndpZHRoIiwiJHZpZXdwb3J0X2hlaWdodCIsImlubmVySGVpZ2h0IiwiJHZpZXdwb3J0X3dpZHRoIiwiaW5uZXJXaWR0aCIsIiRpbnNlcnRfaWQiLCIkdGltZSIsImlvIiwiZW8iLCJybyIsInNvIiwibm8iLCJvbyIsImFvIiwibG8iLCJmbGFncyIsImZlYXR1cmVGbGFncyIsImZyb21FbnRyaWVzIiwiZmVhdHVyZUZsYWdQYXlsb2FkcyIsIm1ldGFkYXRhIiwidW8iLCJGZWF0dXJlRmxhZ3MiLCJSZWNvcmRpbmdzIiwiaG8iLCJmZWF0dXJlRmxhZ0V2ZW50SGFuZGxlcnMiLCJkZWNpZGUiLCJfX3ByZXZpZXdfcmVtb3RlX2NvbmZpZyIsImFkdmFuY2VkX2Rpc2FibGVfZmVhdHVyZV9mbGFncyIsImFkdmFuY2VkX2Rpc2FibGVfZmVhdHVyZV9mbGFnc19vbl9maXJzdF9sb2FkIiwiZGlzYWJsZUZsYWdzIiwiaGFzTG9hZGVkRmxhZ3MiLCJnZXRGbGFncyIsImdldEZsYWdWYXJpYW50cyIsImdldEZsYWdzV2l0aERldGFpbHMiLCJvcmlnaW5hbF9lbmFibGVkIiwib3JpZ2luYWxfdmFyaWFudCIsIm9yaWdpbmFsX3BheWxvYWQiLCJmbGFnRGV0YWlscyIsIm92ZXJyaWRkZW5QYXlsb2FkcyIsImZpbmFsRGV0YWlscyIsImVuYWJsZWRGbGFncyIsIm92ZXJyaWRkZW5GbGFncyIsImZpbmFsRmxhZ3MiLCJnZXRGbGFnUGF5bG9hZHMiLCJmbGFnUGF5bG9hZHMiLCJmaW5hbFBheWxvYWRzIiwicmVsb2FkRmVhdHVyZUZsYWdzIiwiZW5zdXJlRmxhZ3NMb2FkZWQiLCJzZXRBbm9ueW1vdXNEaXN0aW5jdElkIiwiJGFub25fZGlzdGluY3RfaWQiLCJzZXRSZWxvYWRpbmdQYXVzZWQiLCJncm91cHMiLCJnZXRHcm91cHMiLCJwZXJzb25fcHJvcGVydGllcyIsImdldF9pbml0aWFsX3Byb3BzIiwiZ3JvdXBfcHJvcGVydGllcyIsImRpc2FibGVfZmxhZ3MiLCJfX3ByZXZpZXdfZmxhZ3NfdjIiLCJ0aW1lem9uZSIsImRpc2FibGVfY29tcHJlc3Npb24iLCJmZWF0dXJlX2ZsYWdfcmVxdWVzdF90aW1lb3V0X21zIiwicXVvdGFMaW1pdGVkIiwicmVjZWl2ZWRGZWF0dXJlRmxhZ3MiLCJnZXRGZWF0dXJlRmxhZyIsInNlbmRfZXZlbnQiLCJnZXRGZWF0dXJlRmxhZ0RldGFpbHMiLCIkZmVhdHVyZV9mbGFnIiwiJGZlYXR1cmVfZmxhZ19yZXNwb25zZSIsIiRmZWF0dXJlX2ZsYWdfcGF5bG9hZCIsImdldEZlYXR1cmVGbGFnUGF5bG9hZCIsIiRmZWF0dXJlX2ZsYWdfcmVxdWVzdF9pZCIsIiRmZWF0dXJlX2ZsYWdfYm9vdHN0cmFwcGVkX3Jlc3BvbnNlIiwiYm9vdHN0cmFwIiwiJGZlYXR1cmVfZmxhZ19ib290c3RyYXBwZWRfcGF5bG9hZCIsIiR1c2VkX2Jvb3RzdHJhcF92YWx1ZSIsIiRmZWF0dXJlX2ZsYWdfdmVyc2lvbiIsImRlc2NyaXB0aW9uIiwiJGZlYXR1cmVfZmxhZ19yZWFzb24iLCIkZmVhdHVyZV9mbGFnX2lkIiwiJGZlYXR1cmVfZmxhZ19vcmlnaW5hbF9yZXNwb25zZSIsIiRmZWF0dXJlX2ZsYWdfb3JpZ2luYWxfcGF5bG9hZCIsImdldFJlbW90ZUNvbmZpZ1BheWxvYWQiLCJpc0ZlYXR1cmVFbmFibGVkIiwiYWRkRmVhdHVyZUZsYWdzSGFuZGxlciIsInJlbW92ZUZlYXR1cmVGbGFnc0hhbmRsZXIiLCJyZXF1ZXN0SWQiLCJlcnJvcnNXaGlsZUNvbXB1dGluZ0ZsYWdzIiwib3ZlcnJpZGUiLCJvdmVycmlkZUZlYXR1cmVGbGFncyIsInN1cHByZXNzV2FybmluZyIsInBheWxvYWRzIiwiZmxhZ1ZhcmlhbnRzIiwidXBkYXRlRWFybHlBY2Nlc3NGZWF0dXJlRW5yb2xsbWVudCIsImZpbmQiLCJmbGFnS2V5IiwiJGZlYXR1cmVfZW5yb2xsbWVudCIsIiRzZXQiLCIkZWFybHlfYWNjZXNzX2ZlYXR1cmVfbmFtZSIsInNldFBlcnNvblByb3BlcnRpZXNGb3JGbGFncyIsImdldEVhcmx5QWNjZXNzRmVhdHVyZXMiLCJlYXJseUFjY2Vzc0ZlYXR1cmVzIiwiZXJyb3JzTG9hZGluZyIsInJlc2V0UGVyc29uUHJvcGVydGllc0ZvckZsYWdzIiwic2V0R3JvdXBQcm9wZXJ0aWVzRm9yRmxhZ3MiLCJyZXNldEdyb3VwUHJvcGVydGllc0ZvckZsYWdzIiwidm8iLCJjbyIsInBlcnNpc3RlbmNlX25hbWUiLCJkZWJ1ZyIsInVwZGF0ZV9jb25maWciLCJzYXZlIiwicmVtb3ZlIiwiY2xlYXIiLCJyZWdpc3Rlcl9vbmNlIiwidXBkYXRlX2NhbXBhaWduX3BhcmFtcyIsImN1c3RvbV9jYW1wYWlnbl9wYXJhbXMiLCJtYXNrX3BlcnNvbmFsX2RhdGFfcHJvcGVydGllcyIsImN1c3RvbV9wZXJzb25hbF9kYXRhX3Byb3BlcnRpZXMiLCJ1cGRhdGVfc2VhcmNoX2tleXdvcmQiLCJ1cGRhdGVfcmVmZXJyZXJfaW5mbyIsInNldF9pbml0aWFsX3BlcnNvbl9pbmZvIiwic2FmZV9tZXJnZSIsInNldF9kaXNhYmxlZCIsImRpc2FibGVfcGVyc2lzdGVuY2UiLCJzZXRfY3Jvc3Nfc3ViZG9tYWluIiwic2V0X3NlY3VyZSIsInNldF9ldmVudF90aW1lciIsInJlbW92ZV9ldmVudF90aW1lciIsImZvIiwicG8iLCJpbml0Iiwic3RlcHMiLCJzZWxlY3RvciIsIm9uQWN0aW9uIiwidXJsX21hdGNoaW5nIiwiaHJlZl9tYXRjaGluZyIsInRleHRfbWF0Y2hpbmciLCJnbyIsIl9vIiwiTWFwIiwiY29uZGl0aW9ucyIsImFjdGlvbnMiLCJnZXQiLCJldmVudHMiLCJvbkV2ZW50IiwiZXZlbnRQYXlsb2FkIiwiZXhpc3RpbmdBY3RpdmF0ZWRTdXJ2ZXlzIiwiJHN1cnZleV9pZCIsInNwbGljZSIsInN1cnZleXMiLCJnZXRTdXJ2ZXlzIiwiZ2V0RXZlbnRUb1N1cnZleXMiLCJtbyIsIl9zdXJ2ZXlFdmVudFJlY2VpdmVyIiwibG9hZElmRW5hYmxlZCIsInN0YXJ0c1dpdGgiLCJkaXNhYmxlX3N1cnZleXMiLCJnZW5lcmF0ZVN1cnZleXMiLCJvblN1cnZleXNMb2FkZWQiLCJzdXJ2ZXlzX3JlcXVlc3RfdGltZW91dF9tcyIsInN0YXJ0X2RhdGUiLCJlbmRfZGF0ZSIsImdldEFjdGl2ZU1hdGNoaW5nU3VydmV5cyIsImVsaWdpYmxlIiwiY2hlY2tTdXJ2ZXlFbGlnaWJpbGl0eSIsImNhblJlbmRlclN1cnZleSIsInZpc2libGUiLCJkaXNhYmxlZFJlYXNvbiIsImNhblJlbmRlclN1cnZleUFzeW5jIiwicmVuZGVyU3VydmV5IiwicXVlcnlTZWxlY3RvciIsImJvIiwid28iLCJzZXJ2ZXJMaW1pdHMiLCJsYXN0RXZlbnRSYXRlTGltaXRlZCIsImNoZWNrRm9yTGltaXRpbmciLCJxdW90YV9saW1pdGVkIiwiY2FwdHVyZUV2ZW50c1BlclNlY29uZCIsInJhdGVfbGltaXRpbmciLCJldmVudHNfcGVyX3NlY29uZCIsImNhcHR1cmVFdmVudHNCdXJzdExpbWl0IiwiZXZlbnRzX2J1cnN0X2xpbWl0IiwiY2xpZW50UmF0ZUxpbWl0Q29udGV4dCIsImlzUmF0ZUxpbWl0ZWQiLCJ0b2tlbnMiLCJsYXN0IiwiJCRjbGllbnRfaW5nZXN0aW9uX3dhcm5pbmdfbWVzc2FnZSIsInJlbWFpbmluZ1Rva2VucyIsImlzU2VydmVyUmF0ZUxpbWl0ZWQiLCJ5byIsIlNvIiwicmVtb3RlQ29uZmlnIiwiX1BPU1RIT0dfUkVNT1RFX0NPTkZJRyIsImhhc0ZlYXR1cmVGbGFncyIsIiRvIiwia28iLCJmbHVzaF9pbnRlcnZhbF9tcyIsImVucXVldWUiLCJ1bmxvYWQiLCJlbmFibGUiLCJvZmZzZXQiLCJiYXRjaEtleSIsInhvIiwiRW8iLCJvbkxpbmUiLCJyZXRyaWFibGVSZXF1ZXN0IiwicmV0cmllc1BlcmZvcm1lZFNvRmFyIiwicmV0cnlfY291bnQiLCJyZXRyeUF0IiwicmVxdWVzdE9wdGlvbnMiLCJJbyIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsInN0YXJ0TWVhc3VyaW5nU2Nyb2xsUG9zaXRpb24iLCJzY3JvbGxfcm9vdF9zZWxlY3RvciIsImRvY3VtZW50RWxlbWVudCIsInNjcm9sbFRvcCIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsTGVmdCIsInBhZ2VYT2Zmc2V0IiwiUG8iLCJSbyIsImdldFNldE9uY2VQcm9wcyIsInJlZmVycmluZ0RvbWFpbiIsImluaXRpYWxQYXRoTmFtZSIsInV0bV9zb3VyY2UiLCJ1dG1fY2FtcGFpZ24iLCJ1dG1fbWVkaXVtIiwidXRtX2NvbnRlbnQiLCJ1dG1fdGVybSIsImdldFNlc3Npb25Qcm9wcyIsIlRvIiwiTW8iLCJfc2Vzc2lvblN0YXJ0VGltZXN0YW1wIiwiX3Nlc3Npb25BY3Rpdml0eVRpbWVzdGFtcCIsInNlc3Npb25faWRsZV90aW1lb3V0X3NlY29uZHMiLCJfc2Vzc2lvblRpbWVvdXRNcyIsIiRjb25maWd1cmVkX3Nlc3Npb25fdGltZW91dF9tcyIsInNlc3Npb25JRCIsInJlc2V0U2Vzc2lvbklkIiwibm9TZXNzaW9uSWQiLCJhY3Rpdml0eVRpbWVvdXQiLCJzZXNzaW9uUGFzdE1heGltdW1MZW5ndGgiLCJDbyIsIk9vIiwiRm8iLCJhcHBzIiwib3B0X2luX3NpdGVfYXBwcyIsImdsb2JhbHNGb3JFdmVudCIsInNpdGVBcHBMb2FkZXJzIiwic2l0ZUFwcHMiLCIkc2V0X29uY2UiLCJlbGVtZW50c19jaGFpbiIsInBlcnNvbiIsInNldHVwU2l0ZUFwcCIsImVycm9yZWQiLCJwcm9jZXNzRXZlbnQiLCJwcm9jZXNzZWRCdWZmZXIiLCJsb2FkZWQiLCJwb3N0aG9nIiwiQW8iLCJEbyIsIkxvIiwidXNlckFnZW50RGF0YSIsImJyYW5kcyIsImJyYW5kIiwid2ViZHJpdmVyIiwiTm8iLCJVUyIsIkVVIiwiQ1VTVE9NIiwiam8iLCJ6byIsImFwaUhvc3QiLCJ1aUhvc3QiLCJ1aV9ob3N0IiwiVW8iLCJxbyIsImdldFdlYkV4cGVyaW1lbnRzQW5kRXZhbHVhdGVEaXNwbGF5TG9naWMiLCJnZXRXZWJFeHBlcmltZW50cyIsImZlYXR1cmVfZmxhZ19rZXkiLCJ2YXJpYW50cyIsInRyYW5zZm9ybXMiLCJfaXNfYm90IiwiZGlzYWJsZV93ZWJfZXhwZXJpbWVudHMiLCJwcmV2aWV3V2ViRXhwZXJpbWVudCIsImdldFdpbmRvd0xvY2F0aW9uIiwiZXhwZXJpbWVudHMiLCJ1cmxNYXRjaFR5cGUiLCJ1dG0iLCJodG1sIiwiaW5uZXJIVE1MIiwiY3NzIiwic2V0QXR0cmlidXRlIiwiY3VzdG9tX2Jsb2NrZWRfdXNlcmFnZW50cyIsIkJvIiwiSG8iLCJXbyIsIkdvIiwiSm8iLCJzYXZlX2NhbXBhaWduX3BhcmFtcyIsInNhdmVfcmVmZXJyZXIiLCJjYXB0dXJlX3BhZ2VsZWF2ZSIsInVwZ3JhZGUiLCJpcCIsIm9wdF9vdXRfcGVyc2lzdGVuY2VfYnlfZGVmYXVsdCIsIm9wdF9vdXRfdXNlcmFnZW50X2ZpbHRlciIsInByb3BlcnR5X2RlbnlsaXN0Iiwic2FuaXRpemVfcHJvcGVydGllcyIsInJlcXVlc3RfaGVhZGVycyIsInJlcXVlc3RfYmF0Y2hpbmciLCJwcm9wZXJ0aWVzX3N0cmluZ19tYXhfbGVuZ3RoIiwib25fcmVxdWVzdF9lcnJvciIsInBlcnNvbl9wcm9maWxlcyIsImJlZm9yZV9zZW5kIiwicmVxdWVzdF9xdWV1ZV9jb25maWciLCJfb25DYXB0dXJlIiwiVm8iLCJwcm9jZXNzX3BlcnNvbiIsInhocl9oZWFkZXJzIiwiY29va2llX25hbWUiLCJkaXNhYmxlX2Nvb2tpZSIsInN0b3JlX2dvb2dsZSIsInZlcmJvc2UiLCJwcm9wZXJ0eV9ibGFja2xpc3QiLCJLbyIsIl9fZm9yY2VBbGxvd0xvY2FsaG9zdCIsIllvIiwiZGVjaWRlRW5kcG9pbnRXYXNIaXQiLCJ3ZWJQZXJmb3JtYW5jZSIsIl9jYWxjdWxhdGVfZXZlbnRfcHJvcGVydGllcyIsIlNlbnRyeUludGVncmF0aW9uIiwic2VudHJ5SW50ZWdyYXRpb24iLCJfX3JlcXVlc3RfcXVldWUiLCJhbmFseXRpY3NEZWZhdWx0RW5kcG9pbnQiLCJ0b29sYmFyIiwicGFnZVZpZXdNYW5hZ2VyIiwicmF0ZUxpbWl0ZXIiLCJwZW9wbGUiLCJzZXRQZXJzb25Qcm9wZXJ0aWVzIiwic2V0X29uY2UiLCJfaW5pdCIsInNldF9jb25maWciLCJvbl94aHJfZXJyb3IiLCJzZXNzaW9uUGVyc2lzdGVuY2UiLCJzZXNzaW9uUHJvcHNNYW5hZ2VyIiwid2ViVml0YWxzQXV0b2NhcHR1cmUiLCJleGNlcHRpb25PYnNlcnZlciIsImRlYWRDbGlja3NBdXRvY2FwdHVyZSIsImhpc3RvcnlBdXRvY2FwdHVyZSIsInRoaXMiLCJ0aGlzQyIsImRpc3RpbmN0SUQiLCJpc0lkZW50aWZpZWRJRCIsInNlbGYiLCJfaGFuZGxlX3VubG9hZCIsInN1cHBvcnRlZENvbXByZXNzaW9uIiwiYW5hbHl0aWNzIiwiaGFzX29wdGVkX291dF9jYXB0dXJpbmciLCJfZG9tX2xvYWRlZCIsImFwaV90cmFuc3BvcnQiLCJmZXRjaF9vcHRpb25zIiwidmVyIiwiX2V4ZWN1dGVfYXJyYXkiLCJ1dWlkIiwiJGxpYl9yYXRlX2xpbWl0X3JlbWFpbmluZ190b2tlbnMiLCIkZXZlbnRfdGltZV9vdmVycmlkZV9wcm92aWRlZCIsIiRldmVudF90aW1lX292ZXJyaWRlX3N5c3RlbV90aW1lIiwic2VuZF9pbnN0YW50bHkiLCIkY29va2llbGVzc19tb2RlIiwiJHNka19kZWJ1Z19yZXRyeV9xdWV1ZV9zaXplIiwiJHNka19kZWJ1Z19lcnJvcl9jYXB0dXJpbmdfcHJvcGVydGllcyIsIiRsaWJfY3VzdG9tX2FwaV9ob3N0IiwidGl0bGUiLCIkZHVyYXRpb24iLCJ0b0ZpeGVkIiwiJGJyb3dzZXJfdHlwZSIsIiRpc19pZGVudGlmaWVkIiwiX2lzSWRlbnRpZmllZCIsIiRwcm9jZXNzX3BlcnNvbl9wcm9maWxlIiwidW5yZWdpc3Rlcl9mb3Jfc2Vzc2lvbiIsIiR1c2VyX2lkIiwiJGhhZF9wZXJzaXN0ZWRfZGlzdGluY3RfaWQiLCJncm91cCIsIiRncm91cHMiLCIkZ3JvdXBfdHlwZSIsIiRncm91cF9rZXkiLCIkZ3JvdXBfc2V0IiwicmVzZXRHcm91cHMiLCIkbGFzdF9wb3N0aG9nX3Jlc2V0IiwidG9JU09TdHJpbmciLCJnZXRfc2Vzc2lvbl9pZCIsInRpbWVzdGFtcExvb2tCYWNrIiwiYWxpYXMiLCJvbGRDb25maWciLCJuZXdDb25maWciLCJzdGFydFNlc3Npb25SZWNvcmRpbmciLCJsaW5rZWRfZmxhZyIsInVybF90cmlnZ2VyIiwiZXZlbnRfdHJpZ2dlciIsInN0b3BTZXNzaW9uUmVjb3JkaW5nIiwiZ2V0U2Vzc2lvblByb3BlcnR5IiwiY3JlYXRlUGVyc29uUHJvZmlsZSIsIm9wdF9pbl9jYXB0dXJpbmciLCJjYXB0dXJlRXZlbnROYW1lIiwiY2FwdHVyZVByb3BlcnRpZXMiLCJvcHRfb3V0X2NhcHR1cmluZyIsImhhc19vcHRlZF9pbl9jYXB0dXJpbmciLCJjbGVhcl9vcHRfaW5fb3V0X2NhcHR1cmluZyIsImdldFBhZ2VWaWV3SWQiLCJjYXB0dXJlVHJhY2VGZWVkYmFjayIsIiRhaV90cmFjZV9pZCIsIiRhaV9mZWVkYmFja190ZXh0IiwiY2FwdHVyZVRyYWNlTWV0cmljIiwiJGFpX21ldHJpY19uYW1lIiwiJGFpX21ldHJpY192YWx1ZSIsIlhvIiwiUW8iLCJCdXR0b24iLCJUYWIiLCJTZWxlY3RvciIsIlpvIiwiVG9wTGVmdCIsIlRvcFJpZ2h0IiwiVG9wQ2VudGVyIiwiTWlkZGxlTGVmdCIsIk1pZGRsZVJpZ2h0IiwiTWlkZGxlQ2VudGVyIiwiTGVmdCIsIkNlbnRlciIsIlJpZ2h0IiwiTmV4dFRvVHJpZ2dlciIsInRhIiwiUG9wb3ZlciIsIkFQSSIsIldpZGdldCIsImlhIiwiT3BlbiIsIk11bHRpcGxlQ2hvaWNlIiwiU2luZ2xlQ2hvaWNlIiwiUmF0aW5nIiwiTGluayIsImVhIiwiTmV4dFF1ZXN0aW9uIiwiRW5kIiwiUmVzcG9uc2VCYXNlZCIsIlNwZWNpZmljUXVlc3Rpb24iLCJyYSIsIk9uY2UiLCJSZWN1cnJpbmciLCJBbHdheXMiLCJzYSIsImRvbmUiLCJDT1BZX0FVVE9DQVBUVVJFX0VWRU5UIiwiQ29tcHJlc3Npb24iLCJQb3N0SG9nIiwiU3VydmV5UG9zaXRpb24iLCJTdXJ2ZXlRdWVzdGlvbkJyYW5jaGluZ1R5cGUiLCJTdXJ2ZXlRdWVzdGlvblR5cGUiLCJTdXJ2ZXlTY2hlZHVsZSIsIlN1cnZleVR5cGUiLCJTdXJ2ZXlXaWRnZXRUeXBlIiwiZGVmYXVsdCIsImtub3duVW5zYWZlRWRpdGFibGVFdmVudCIsInNldmVyaXR5TGV2ZWxzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/posthog-js/dist/module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/posthog-js/react/dist/esm/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/posthog-js/react/dist/esm/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PostHogContext: () => (/* binding */ PostHogContext),\n/* harmony export */   PostHogErrorBoundary: () => (/* binding */ PostHogErrorBoundary),\n/* harmony export */   PostHogFeature: () => (/* binding */ PostHogFeature),\n/* harmony export */   PostHogProvider: () => (/* binding */ PostHogProvider),\n/* harmony export */   useActiveFeatureFlags: () => (/* binding */ useActiveFeatureFlags),\n/* harmony export */   useFeatureFlagEnabled: () => (/* binding */ useFeatureFlagEnabled),\n/* harmony export */   useFeatureFlagPayload: () => (/* binding */ useFeatureFlagPayload),\n/* harmony export */   useFeatureFlagVariantKey: () => (/* binding */ useFeatureFlagVariantKey),\n/* harmony export */   usePostHog: () => (/* binding */ usePostHog)\n/* harmony export */ });\n/* harmony import */ var posthog_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! posthog-js */ \"(ssr)/./node_modules/posthog-js/dist/module.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\nvar PostHogContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    client: posthog_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n});\nfunction isDeepEqual(obj1, obj2, visited) {\n    if (visited === void 0) {\n        visited = new WeakMap();\n    }\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (typeof obj1 !== \"object\" || obj1 === null || typeof obj2 !== \"object\" || obj2 === null) {\n        return false;\n    }\n    if (visited.has(obj1) && visited.get(obj1) === obj2) {\n        return true;\n    }\n    visited.set(obj1, obj2);\n    var keys1 = Object.keys(obj1);\n    var keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for(var _i = 0, keys1_1 = keys1; _i < keys1_1.length; _i++){\n        var key = keys1_1[_i];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (!isDeepEqual(obj1[key], obj2[key], visited)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction PostHogProvider(_a) {\n    var children = _a.children, client = _a.client, apiKey = _a.apiKey, options = _a.options;\n    var previousInitializationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    var posthog = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(function() {\n        if (client) {\n            if (apiKey) {\n                console.warn(\"[PostHog.js] You have provided both `client` and `apiKey` to `PostHogProvider`. `apiKey` will be ignored in favour of `client`.\");\n            }\n            if (options) {\n                console.warn(\"[PostHog.js] You have provided both `client` and `options` to `PostHogProvider`. `options` will be ignored in favour of `client`.\");\n            }\n            return client;\n        }\n        if (apiKey) {\n            return posthog_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n        }\n        console.warn(\"[PostHog.js] No `apiKey` or `client` were provided to `PostHogProvider`. Using default global `window.posthog` instance. You must initialize it manually. This is not recommended behavior.\");\n        return posthog_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    }, [\n        client,\n        apiKey,\n        JSON.stringify(options)\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        if (client) {\n            return;\n        }\n        var previousInitialization = previousInitializationRef.current;\n        if (!previousInitialization) {\n            if (posthog_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].__loaded) {\n                console.warn(\"[PostHog.js] `posthog` was already loaded elsewhere. This may cause issues.\");\n            }\n            posthog_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].init(apiKey, options);\n            previousInitializationRef.current = {\n                apiKey: apiKey,\n                options: options !== null && options !== void 0 ? options : {}\n            };\n        } else {\n            if (apiKey !== previousInitialization.apiKey) {\n                console.warn(\"[PostHog.js] You have provided a different `apiKey` to `PostHogProvider` than the one that was already initialized. This is not supported by our provider and we'll keep using the previous key. If you need to toggle between API Keys you need to control the `client` yourself and pass it in as a prop rather than an `apiKey` prop.\");\n            }\n            if (options && !isDeepEqual(options, previousInitialization.options)) {\n                posthog_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].set_config(options);\n            }\n            previousInitializationRef.current = {\n                apiKey: apiKey,\n                options: options !== null && options !== void 0 ? options : {}\n            };\n        }\n    }, [\n        client,\n        apiKey,\n        JSON.stringify(options)\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(PostHogContext.Provider, {\n        value: {\n            client: posthog\n        }\n    }, children);\n}\nvar usePostHog = function() {\n    var client = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(PostHogContext).client;\n    return client;\n};\nfunction useFeatureFlagEnabled(flag) {\n    var client = usePostHog();\n    var _a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(function() {\n        return client.isFeatureEnabled(flag);\n    }), featureEnabled = _a[0], setFeatureEnabled = _a[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        return client.onFeatureFlags(function() {\n            setFeatureEnabled(client.isFeatureEnabled(flag));\n        });\n    }, [\n        client,\n        flag\n    ]);\n    return featureEnabled;\n}\nfunction useFeatureFlagPayload(flag) {\n    var client = usePostHog();\n    var _a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(function() {\n        return client.getFeatureFlagPayload(flag);\n    }), featureFlagPayload = _a[0], setFeatureFlagPayload = _a[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        return client.onFeatureFlags(function() {\n            setFeatureFlagPayload(client.getFeatureFlagPayload(flag));\n        });\n    }, [\n        client,\n        flag\n    ]);\n    return featureFlagPayload;\n}\nfunction useActiveFeatureFlags() {\n    var client = usePostHog();\n    var _a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(function() {\n        return client.featureFlags.getFlags();\n    }), featureFlags = _a[0], setFeatureFlags = _a[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        return client.onFeatureFlags(function(flags) {\n            setFeatureFlags(flags);\n        });\n    }, [\n        client\n    ]);\n    return featureFlags;\n}\nfunction useFeatureFlagVariantKey(flag) {\n    var client = usePostHog();\n    var _a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(function() {\n        return client.getFeatureFlag(flag);\n    }), featureFlagVariantKey = _a[0], setFeatureFlagVariantKey = _a[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        return client.onFeatureFlags(function() {\n            setFeatureFlagVariantKey(client.getFeatureFlag(flag));\n        });\n    }, [\n        client,\n        flag\n    ]);\n    return featureFlagVariantKey;\n}\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nvar isFunction = function(f) {\n    return typeof f === \"function\";\n};\nvar isUndefined = function(x) {\n    return x === void 0;\n};\nvar isNull = function(x) {\n    return x === null;\n};\nfunction PostHogFeature(_a) {\n    var flag = _a.flag, match = _a.match, children = _a.children, fallback = _a.fallback, visibilityObserverOptions = _a.visibilityObserverOptions, trackInteraction = _a.trackInteraction, trackView = _a.trackView, props = __rest(_a, [\n        \"flag\",\n        \"match\",\n        \"children\",\n        \"fallback\",\n        \"visibilityObserverOptions\",\n        \"trackInteraction\",\n        \"trackView\"\n    ]);\n    var payload = useFeatureFlagPayload(flag);\n    var variant = useFeatureFlagVariantKey(flag);\n    var shouldTrackInteraction = trackInteraction !== null && trackInteraction !== void 0 ? trackInteraction : true;\n    var shouldTrackView = trackView !== null && trackView !== void 0 ? trackView : true;\n    if (isUndefined(match) || variant === match) {\n        var childNode = isFunction(children) ? children(payload) : children;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(VisibilityAndClickTrackers, __assign({\n            flag: flag,\n            options: visibilityObserverOptions,\n            trackInteraction: shouldTrackInteraction,\n            trackView: shouldTrackView\n        }, props), childNode);\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, fallback);\n}\nfunction captureFeatureInteraction(_a) {\n    var _b;\n    var flag = _a.flag, posthog = _a.posthog, flagVariant = _a.flagVariant;\n    var properties = {\n        feature_flag: flag,\n        $set: (_b = {}, _b[\"$feature_interaction/\".concat(flag)] = flagVariant !== null && flagVariant !== void 0 ? flagVariant : true, _b)\n    };\n    if (typeof flagVariant === \"string\") {\n        properties.feature_flag_variant = flagVariant;\n    }\n    posthog.capture(\"$feature_interaction\", properties);\n}\nfunction captureFeatureView(_a) {\n    var _b;\n    var flag = _a.flag, posthog = _a.posthog, flagVariant = _a.flagVariant;\n    var properties = {\n        feature_flag: flag,\n        $set: (_b = {}, _b[\"$feature_view/\".concat(flag)] = flagVariant !== null && flagVariant !== void 0 ? flagVariant : true, _b)\n    };\n    if (typeof flagVariant === \"string\") {\n        properties.feature_flag_variant = flagVariant;\n    }\n    posthog.capture(\"$feature_view\", properties);\n}\nfunction VisibilityAndClickTracker(_a) {\n    var flag = _a.flag, children = _a.children, onIntersect = _a.onIntersect, onClick = _a.onClick, trackView = _a.trackView, options = _a.options, props = __rest(_a, [\n        \"flag\",\n        \"children\",\n        \"onIntersect\",\n        \"onClick\",\n        \"trackView\",\n        \"options\"\n    ]);\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    var posthog = usePostHog();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        if (isNull(ref.current) || !trackView) return;\n        var observer = new IntersectionObserver(function(_a) {\n            var entry = _a[0];\n            return onIntersect(entry);\n        }, __assign({\n            threshold: 0.1\n        }, options));\n        observer.observe(ref.current);\n        return function() {\n            return observer.disconnect();\n        };\n    }, [\n        flag,\n        options,\n        posthog,\n        ref,\n        trackView,\n        onIntersect\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", __assign({\n        ref: ref\n    }, props, {\n        onClick: onClick\n    }), children);\n}\nfunction VisibilityAndClickTrackers(_a) {\n    var flag = _a.flag, children = _a.children, trackInteraction = _a.trackInteraction, trackView = _a.trackView, options = _a.options, props = __rest(_a, [\n        \"flag\",\n        \"children\",\n        \"trackInteraction\",\n        \"trackView\",\n        \"options\"\n    ]);\n    var clickTrackedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    var visibilityTrackedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    var posthog = usePostHog();\n    var variant = useFeatureFlagVariantKey(flag);\n    var cachedOnClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function() {\n        if (!clickTrackedRef.current && trackInteraction) {\n            captureFeatureInteraction({\n                flag: flag,\n                posthog: posthog,\n                flagVariant: variant\n            });\n            clickTrackedRef.current = true;\n        }\n    }, [\n        flag,\n        posthog,\n        trackInteraction,\n        variant\n    ]);\n    var onIntersect = function(entry) {\n        if (!visibilityTrackedRef.current && entry.isIntersecting) {\n            captureFeatureView({\n                flag: flag,\n                posthog: posthog,\n                flagVariant: variant\n            });\n            visibilityTrackedRef.current = true;\n        }\n    };\n    var trackedChildren = react__WEBPACK_IMPORTED_MODULE_1__.Children.map(children, function(child) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(VisibilityAndClickTracker, __assign({\n            flag: flag,\n            onClick: cachedOnClick,\n            onIntersect: onIntersect,\n            trackView: trackView,\n            options: options\n        }, props), child);\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, trackedChildren);\n}\nvar INITIAL_STATE = {\n    componentStack: null,\n    error: null\n};\nvar __POSTHOG_ERROR_MESSAGES = {\n    INVALID_FALLBACK: \"[PostHog.js][PostHogErrorBoundary] Invalid fallback prop, provide a valid React element or a function that returns a valid React element.\"\n};\nvar PostHogErrorBoundary = function(_super) {\n    __extends(PostHogErrorBoundary, _super);\n    function PostHogErrorBoundary(props) {\n        var _this = _super.call(this, props) || this;\n        _this.state = INITIAL_STATE;\n        return _this;\n    }\n    PostHogErrorBoundary.prototype.componentDidCatch = function(error, errorInfo) {\n        var componentStack = errorInfo.componentStack;\n        var additionalProperties = this.props.additionalProperties;\n        this.setState({\n            error: error,\n            componentStack: componentStack\n        });\n        var currentProperties;\n        if (isFunction(additionalProperties)) {\n            currentProperties = additionalProperties(error);\n        } else if (typeof additionalProperties === \"object\") {\n            currentProperties = additionalProperties;\n        }\n        var client = this.context.client;\n        client.captureException(error, currentProperties);\n    };\n    PostHogErrorBoundary.prototype.render = function() {\n        var _a = this.props, children = _a.children, fallback = _a.fallback;\n        var state = this.state;\n        if (state.componentStack == null) {\n            return isFunction(children) ? children() : children;\n        }\n        var element = isFunction(fallback) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(fallback, {\n            error: state.error,\n            componentStack: state.componentStack\n        }) : fallback;\n        if (/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().isValidElement(element)) {\n            return element;\n        }\n        console.warn(__POSTHOG_ERROR_MESSAGES.INVALID_FALLBACK);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null);\n    };\n    PostHogErrorBoundary.contextType = PostHogContext;\n    return PostHogErrorBoundary;\n}((react__WEBPACK_IMPORTED_MODULE_1___default().Component));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGhvZy1qcy9yZWFjdC9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBbUM7QUFDbUY7QUFFdEgsSUFBSVUsK0JBQWlCUixvREFBYUEsQ0FBQztJQUFFUyxRQUFRWCxrREFBU0E7QUFBQztBQUV2RCxTQUFTWSxZQUFZQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsT0FBTztJQUNwQyxJQUFJQSxZQUFZLEtBQUssR0FBRztRQUFFQSxVQUFVLElBQUlDO0lBQVc7SUFDbkQsSUFBSUgsU0FBU0MsTUFBTTtRQUNmLE9BQU87SUFDWDtJQUNBLElBQUksT0FBT0QsU0FBUyxZQUFZQSxTQUFTLFFBQVEsT0FBT0MsU0FBUyxZQUFZQSxTQUFTLE1BQU07UUFDeEYsT0FBTztJQUNYO0lBQ0EsSUFBSUMsUUFBUUUsR0FBRyxDQUFDSixTQUFTRSxRQUFRRyxHQUFHLENBQUNMLFVBQVVDLE1BQU07UUFDakQsT0FBTztJQUNYO0lBQ0FDLFFBQVFJLEdBQUcsQ0FBQ04sTUFBTUM7SUFDbEIsSUFBSU0sUUFBUUMsT0FBT0MsSUFBSSxDQUFDVDtJQUN4QixJQUFJVSxRQUFRRixPQUFPQyxJQUFJLENBQUNSO0lBQ3hCLElBQUlNLE1BQU1JLE1BQU0sS0FBS0QsTUFBTUMsTUFBTSxFQUFFO1FBQy9CLE9BQU87SUFDWDtJQUNBLElBQUssSUFBSUMsS0FBSyxHQUFHQyxVQUFVTixPQUFPSyxLQUFLQyxRQUFRRixNQUFNLEVBQUVDLEtBQU07UUFDekQsSUFBSUUsTUFBTUQsT0FBTyxDQUFDRCxHQUFHO1FBQ3JCLElBQUksQ0FBQ0YsTUFBTUssUUFBUSxDQUFDRCxNQUFNO1lBQ3RCLE9BQU87UUFDWDtRQUNBLElBQUksQ0FBQ2YsWUFBWUMsSUFBSSxDQUFDYyxJQUFJLEVBQUViLElBQUksQ0FBQ2EsSUFBSSxFQUFFWixVQUFVO1lBQzdDLE9BQU87UUFDWDtJQUNKO0lBQ0EsT0FBTztBQUNYO0FBRUEsU0FBU2MsZ0JB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LFFBQVEsRUFBRXlFLFdBQVcxRSxHQUFHMEUsUUFBUTtRQUNuRSxJQUFJK0MsUUFBUSxJQUFJLENBQUNBLEtBQUs7UUFDdEIsSUFBSUEsTUFBTVAsY0FBYyxJQUFJLE1BQU07WUFDOUIsT0FBTy9DLFdBQVdsRSxZQUFZQSxhQUFhQTtRQUMvQztRQUNBLElBQUlpSSxVQUFVL0QsV0FBV08sMEJBQ25CdkcsMERBQW1CLENBQUN1RyxVQUFVO1lBQzVCeUMsT0FBT00sTUFBTU4sS0FBSztZQUNsQkQsZ0JBQWdCTyxNQUFNUCxjQUFjO1FBQ3hDLEtBQ0V4QztRQUNOLGtCQUFJdkcsMkRBQW9CLENBQUMrSixVQUFVO1lBQy9CLE9BQU9BO1FBQ1g7UUFDQTVILFFBQVFDLElBQUksQ0FBQzZHLHlCQUF5QkMsZ0JBQWdCO1FBQ3RELHFCQUFPbEosMERBQW1CLENBQUNBLHVEQUFjLEVBQUU7SUFDL0M7SUFDQW1KLHFCQUFxQmMsV0FBVyxHQUFHeEo7SUFDbkMsT0FBTzBJO0FBQ1gsRUFBRW5KLHdEQUFlO0FBRTJLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9ydGdhZ2UtY2FsY3VsYXRvci8uL25vZGVfbW9kdWxlcy9wb3N0aG9nLWpzL3JlYWN0L2Rpc3QvZXNtL2luZGV4LmpzPzFlMjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBvc3Rob2dKcyBmcm9tICdwb3N0aG9nLWpzJztcbmltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0LCB1c2VSZWYsIHVzZU1lbW8sIHVzZUVmZmVjdCwgdXNlQ29udGV4dCwgdXNlU3RhdGUsIHVzZUNhbGxiYWNrLCBDaGlsZHJlbiB9IGZyb20gJ3JlYWN0JztcblxudmFyIFBvc3RIb2dDb250ZXh0ID0gY3JlYXRlQ29udGV4dCh7IGNsaWVudDogcG9zdGhvZ0pzIH0pO1xuXG5mdW5jdGlvbiBpc0RlZXBFcXVhbChvYmoxLCBvYmoyLCB2aXNpdGVkKSB7XHJcbiAgICBpZiAodmlzaXRlZCA9PT0gdm9pZCAwKSB7IHZpc2l0ZWQgPSBuZXcgV2Vha01hcCgpOyB9XHJcbiAgICBpZiAob2JqMSA9PT0gb2JqMikge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBvYmoxICE9PSAnb2JqZWN0JyB8fCBvYmoxID09PSBudWxsIHx8IHR5cGVvZiBvYmoyICE9PSAnb2JqZWN0JyB8fCBvYmoyID09PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKHZpc2l0ZWQuaGFzKG9iajEpICYmIHZpc2l0ZWQuZ2V0KG9iajEpID09PSBvYmoyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICB2aXNpdGVkLnNldChvYmoxLCBvYmoyKTtcclxuICAgIHZhciBrZXlzMSA9IE9iamVjdC5rZXlzKG9iajEpO1xyXG4gICAgdmFyIGtleXMyID0gT2JqZWN0LmtleXMob2JqMik7XHJcbiAgICBpZiAoa2V5czEubGVuZ3RoICE9PSBrZXlzMi5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIGtleXMxXzEgPSBrZXlzMTsgX2kgPCBrZXlzMV8xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBrZXkgPSBrZXlzMV8xW19pXTtcclxuICAgICAgICBpZiAoIWtleXMyLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWlzRGVlcEVxdWFsKG9iajFba2V5XSwgb2JqMltrZXldLCB2aXNpdGVkKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cblxuZnVuY3Rpb24gUG9zdEhvZ1Byb3ZpZGVyKF9hKSB7XHJcbiAgICB2YXIgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbiwgY2xpZW50ID0gX2EuY2xpZW50LCBhcGlLZXkgPSBfYS5hcGlLZXksIG9wdGlvbnMgPSBfYS5vcHRpb25zO1xyXG4gICAgdmFyIHByZXZpb3VzSW5pdGlhbGl6YXRpb25SZWYgPSB1c2VSZWYobnVsbCk7XHJcbiAgICB2YXIgcG9zdGhvZyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChjbGllbnQpIHtcclxuICAgICAgICAgICAgaWYgKGFwaUtleSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbUG9zdEhvZy5qc10gWW91IGhhdmUgcHJvdmlkZWQgYm90aCBgY2xpZW50YCBhbmQgYGFwaUtleWAgdG8gYFBvc3RIb2dQcm92aWRlcmAuIGBhcGlLZXlgIHdpbGwgYmUgaWdub3JlZCBpbiBmYXZvdXIgb2YgYGNsaWVudGAuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignW1Bvc3RIb2cuanNdIFlvdSBoYXZlIHByb3ZpZGVkIGJvdGggYGNsaWVudGAgYW5kIGBvcHRpb25zYCB0byBgUG9zdEhvZ1Byb3ZpZGVyYC4gYG9wdGlvbnNgIHdpbGwgYmUgaWdub3JlZCBpbiBmYXZvdXIgb2YgYGNsaWVudGAuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNsaWVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFwaUtleSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcG9zdGhvZ0pzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLndhcm4oJ1tQb3N0SG9nLmpzXSBObyBgYXBpS2V5YCBvciBgY2xpZW50YCB3ZXJlIHByb3ZpZGVkIHRvIGBQb3N0SG9nUHJvdmlkZXJgLiBVc2luZyBkZWZhdWx0IGdsb2JhbCBgd2luZG93LnBvc3Rob2dgIGluc3RhbmNlLiBZb3UgbXVzdCBpbml0aWFsaXplIGl0IG1hbnVhbGx5LiBUaGlzIGlzIG5vdCByZWNvbW1lbmRlZCBiZWhhdmlvci4nKTtcclxuICAgICAgICByZXR1cm4gcG9zdGhvZ0pzO1xyXG4gICAgfSwgW2NsaWVudCwgYXBpS2V5LCBKU09OLnN0cmluZ2lmeShvcHRpb25zKV0pO1xyXG4gICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoY2xpZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHByZXZpb3VzSW5pdGlhbGl6YXRpb24gPSBwcmV2aW91c0luaXRpYWxpemF0aW9uUmVmLmN1cnJlbnQ7XHJcbiAgICAgICAgaWYgKCFwcmV2aW91c0luaXRpYWxpemF0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmIChwb3N0aG9nSnMuX19sb2FkZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignW1Bvc3RIb2cuanNdIGBwb3N0aG9nYCB3YXMgYWxyZWFkeSBsb2FkZWQgZWxzZXdoZXJlLiBUaGlzIG1heSBjYXVzZSBpc3N1ZXMuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcG9zdGhvZ0pzLmluaXQoYXBpS2V5LCBvcHRpb25zKTtcclxuICAgICAgICAgICAgcHJldmlvdXNJbml0aWFsaXphdGlvblJlZi5jdXJyZW50ID0ge1xyXG4gICAgICAgICAgICAgICAgYXBpS2V5OiBhcGlLZXksXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCA/IG9wdGlvbnMgOiB7fSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChhcGlLZXkgIT09IHByZXZpb3VzSW5pdGlhbGl6YXRpb24uYXBpS2V5KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJbUG9zdEhvZy5qc10gWW91IGhhdmUgcHJvdmlkZWQgYSBkaWZmZXJlbnQgYGFwaUtleWAgdG8gYFBvc3RIb2dQcm92aWRlcmAgdGhhbiB0aGUgb25lIHRoYXQgd2FzIGFscmVhZHkgaW5pdGlhbGl6ZWQuIFRoaXMgaXMgbm90IHN1cHBvcnRlZCBieSBvdXIgcHJvdmlkZXIgYW5kIHdlJ2xsIGtlZXAgdXNpbmcgdGhlIHByZXZpb3VzIGtleS4gSWYgeW91IG5lZWQgdG8gdG9nZ2xlIGJldHdlZW4gQVBJIEtleXMgeW91IG5lZWQgdG8gY29udHJvbCB0aGUgYGNsaWVudGAgeW91cnNlbGYgYW5kIHBhc3MgaXQgaW4gYXMgYSBwcm9wIHJhdGhlciB0aGFuIGFuIGBhcGlLZXlgIHByb3AuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zICYmICFpc0RlZXBFcXVhbChvcHRpb25zLCBwcmV2aW91c0luaXRpYWxpemF0aW9uLm9wdGlvbnMpKSB7XHJcbiAgICAgICAgICAgICAgICBwb3N0aG9nSnMuc2V0X2NvbmZpZyhvcHRpb25zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwcmV2aW91c0luaXRpYWxpemF0aW9uUmVmLmN1cnJlbnQgPSB7XHJcbiAgICAgICAgICAgICAgICBhcGlLZXk6IGFwaUtleSxcclxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwID8gb3B0aW9ucyA6IHt9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH0sIFtjbGllbnQsIGFwaUtleSwgSlNPTi5zdHJpbmdpZnkob3B0aW9ucyldKTtcclxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFBvc3RIb2dDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiB7IGNsaWVudDogcG9zdGhvZyB9IH0sIGNoaWxkcmVuKTtcclxufVxuXG52YXIgdXNlUG9zdEhvZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBjbGllbnQgPSB1c2VDb250ZXh0KFBvc3RIb2dDb250ZXh0KS5jbGllbnQ7XHJcbiAgICByZXR1cm4gY2xpZW50O1xyXG59O1xuXG5mdW5jdGlvbiB1c2VGZWF0dXJlRmxhZ0VuYWJsZWQoZmxhZykge1xyXG4gICAgdmFyIGNsaWVudCA9IHVzZVBvc3RIb2coKTtcclxuICAgIHZhciBfYSA9IHVzZVN0YXRlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNsaWVudC5pc0ZlYXR1cmVFbmFibGVkKGZsYWcpOyB9KSwgZmVhdHVyZUVuYWJsZWQgPSBfYVswXSwgc2V0RmVhdHVyZUVuYWJsZWQgPSBfYVsxXTtcclxuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGNsaWVudC5vbkZlYXR1cmVGbGFncyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNldEZlYXR1cmVFbmFibGVkKGNsaWVudC5pc0ZlYXR1cmVFbmFibGVkKGZsYWcpKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sIFtjbGllbnQsIGZsYWddKTtcclxuICAgIHJldHVybiBmZWF0dXJlRW5hYmxlZDtcclxufVxuXG5mdW5jdGlvbiB1c2VGZWF0dXJlRmxhZ1BheWxvYWQoZmxhZykge1xyXG4gICAgdmFyIGNsaWVudCA9IHVzZVBvc3RIb2coKTtcclxuICAgIHZhciBfYSA9IHVzZVN0YXRlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNsaWVudC5nZXRGZWF0dXJlRmxhZ1BheWxvYWQoZmxhZyk7IH0pLCBmZWF0dXJlRmxhZ1BheWxvYWQgPSBfYVswXSwgc2V0RmVhdHVyZUZsYWdQYXlsb2FkID0gX2FbMV07XHJcbiAgICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBjbGllbnQub25GZWF0dXJlRmxhZ3MoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzZXRGZWF0dXJlRmxhZ1BheWxvYWQoY2xpZW50LmdldEZlYXR1cmVGbGFnUGF5bG9hZChmbGFnKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LCBbY2xpZW50LCBmbGFnXSk7XHJcbiAgICByZXR1cm4gZmVhdHVyZUZsYWdQYXlsb2FkO1xyXG59XG5cbmZ1bmN0aW9uIHVzZUFjdGl2ZUZlYXR1cmVGbGFncygpIHtcclxuICAgIHZhciBjbGllbnQgPSB1c2VQb3N0SG9nKCk7XHJcbiAgICB2YXIgX2EgPSB1c2VTdGF0ZShmdW5jdGlvbiAoKSB7IHJldHVybiBjbGllbnQuZmVhdHVyZUZsYWdzLmdldEZsYWdzKCk7IH0pLCBmZWF0dXJlRmxhZ3MgPSBfYVswXSwgc2V0RmVhdHVyZUZsYWdzID0gX2FbMV07XHJcbiAgICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBjbGllbnQub25GZWF0dXJlRmxhZ3MoZnVuY3Rpb24gKGZsYWdzKSB7XHJcbiAgICAgICAgICAgIHNldEZlYXR1cmVGbGFncyhmbGFncyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LCBbY2xpZW50XSk7XHJcbiAgICByZXR1cm4gZmVhdHVyZUZsYWdzO1xyXG59XG5cbmZ1bmN0aW9uIHVzZUZlYXR1cmVGbGFnVmFyaWFudEtleShmbGFnKSB7XHJcbiAgICB2YXIgY2xpZW50ID0gdXNlUG9zdEhvZygpO1xyXG4gICAgdmFyIF9hID0gdXNlU3RhdGUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBjbGllbnQuZ2V0RmVhdHVyZUZsYWcoZmxhZyk7XHJcbiAgICB9KSwgZmVhdHVyZUZsYWdWYXJpYW50S2V5ID0gX2FbMF0sIHNldEZlYXR1cmVGbGFnVmFyaWFudEtleSA9IF9hWzFdO1xyXG4gICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gY2xpZW50Lm9uRmVhdHVyZUZsYWdzKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2V0RmVhdHVyZUZsYWdWYXJpYW50S2V5KGNsaWVudC5nZXRGZWF0dXJlRmxhZyhmbGFnKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LCBbY2xpZW50LCBmbGFnXSk7XHJcbiAgICByZXR1cm4gZmVhdHVyZUZsYWdWYXJpYW50S2V5O1xyXG59XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxudmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIChmKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIGYgPT09ICdmdW5jdGlvbic7XHJcbn07XHJcbnZhciBpc1VuZGVmaW5lZCA9IGZ1bmN0aW9uICh4KSB7XHJcbiAgICByZXR1cm4geCA9PT0gdm9pZCAwO1xyXG59O1xyXG52YXIgaXNOdWxsID0gZnVuY3Rpb24gKHgpIHtcclxuICAgIHJldHVybiB4ID09PSBudWxsO1xyXG59O1xuXG5mdW5jdGlvbiBQb3N0SG9nRmVhdHVyZShfYSkge1xyXG4gICAgdmFyIGZsYWcgPSBfYS5mbGFnLCBtYXRjaCA9IF9hLm1hdGNoLCBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCBmYWxsYmFjayA9IF9hLmZhbGxiYWNrLCB2aXNpYmlsaXR5T2JzZXJ2ZXJPcHRpb25zID0gX2EudmlzaWJpbGl0eU9ic2VydmVyT3B0aW9ucywgdHJhY2tJbnRlcmFjdGlvbiA9IF9hLnRyYWNrSW50ZXJhY3Rpb24sIHRyYWNrVmlldyA9IF9hLnRyYWNrVmlldywgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcImZsYWdcIiwgXCJtYXRjaFwiLCBcImNoaWxkcmVuXCIsIFwiZmFsbGJhY2tcIiwgXCJ2aXNpYmlsaXR5T2JzZXJ2ZXJPcHRpb25zXCIsIFwidHJhY2tJbnRlcmFjdGlvblwiLCBcInRyYWNrVmlld1wiXSk7XHJcbiAgICB2YXIgcGF5bG9hZCA9IHVzZUZlYXR1cmVGbGFnUGF5bG9hZChmbGFnKTtcclxuICAgIHZhciB2YXJpYW50ID0gdXNlRmVhdHVyZUZsYWdWYXJpYW50S2V5KGZsYWcpO1xyXG4gICAgdmFyIHNob3VsZFRyYWNrSW50ZXJhY3Rpb24gPSB0cmFja0ludGVyYWN0aW9uICE9PSBudWxsICYmIHRyYWNrSW50ZXJhY3Rpb24gIT09IHZvaWQgMCA/IHRyYWNrSW50ZXJhY3Rpb24gOiB0cnVlO1xyXG4gICAgdmFyIHNob3VsZFRyYWNrVmlldyA9IHRyYWNrVmlldyAhPT0gbnVsbCAmJiB0cmFja1ZpZXcgIT09IHZvaWQgMCA/IHRyYWNrVmlldyA6IHRydWU7XHJcbiAgICBpZiAoaXNVbmRlZmluZWQobWF0Y2gpIHx8IHZhcmlhbnQgPT09IG1hdGNoKSB7XHJcbiAgICAgICAgdmFyIGNoaWxkTm9kZSA9IGlzRnVuY3Rpb24oY2hpbGRyZW4pID8gY2hpbGRyZW4ocGF5bG9hZCkgOiBjaGlsZHJlbjtcclxuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoVmlzaWJpbGl0eUFuZENsaWNrVHJhY2tlcnMsIF9fYXNzaWduKHsgZmxhZzogZmxhZywgb3B0aW9uczogdmlzaWJpbGl0eU9ic2VydmVyT3B0aW9ucywgdHJhY2tJbnRlcmFjdGlvbjogc2hvdWxkVHJhY2tJbnRlcmFjdGlvbiwgdHJhY2tWaWV3OiBzaG91bGRUcmFja1ZpZXcgfSwgcHJvcHMpLCBjaGlsZE5vZGUpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBmYWxsYmFjayk7XHJcbn1cclxuZnVuY3Rpb24gY2FwdHVyZUZlYXR1cmVJbnRlcmFjdGlvbihfYSkge1xyXG4gICAgdmFyIF9iO1xyXG4gICAgdmFyIGZsYWcgPSBfYS5mbGFnLCBwb3N0aG9nID0gX2EucG9zdGhvZywgZmxhZ1ZhcmlhbnQgPSBfYS5mbGFnVmFyaWFudDtcclxuICAgIHZhciBwcm9wZXJ0aWVzID0ge1xyXG4gICAgICAgIGZlYXR1cmVfZmxhZzogZmxhZyxcclxuICAgICAgICAkc2V0OiAoX2IgPSB7fSwgX2JbXCIkZmVhdHVyZV9pbnRlcmFjdGlvbi9cIi5jb25jYXQoZmxhZyldID0gZmxhZ1ZhcmlhbnQgIT09IG51bGwgJiYgZmxhZ1ZhcmlhbnQgIT09IHZvaWQgMCA/IGZsYWdWYXJpYW50IDogdHJ1ZSwgX2IpLFxyXG4gICAgfTtcclxuICAgIGlmICh0eXBlb2YgZmxhZ1ZhcmlhbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcHJvcGVydGllcy5mZWF0dXJlX2ZsYWdfdmFyaWFudCA9IGZsYWdWYXJpYW50O1xyXG4gICAgfVxyXG4gICAgcG9zdGhvZy5jYXB0dXJlKCckZmVhdHVyZV9pbnRlcmFjdGlvbicsIHByb3BlcnRpZXMpO1xyXG59XHJcbmZ1bmN0aW9uIGNhcHR1cmVGZWF0dXJlVmlldyhfYSkge1xyXG4gICAgdmFyIF9iO1xyXG4gICAgdmFyIGZsYWcgPSBfYS5mbGFnLCBwb3N0aG9nID0gX2EucG9zdGhvZywgZmxhZ1ZhcmlhbnQgPSBfYS5mbGFnVmFyaWFudDtcclxuICAgIHZhciBwcm9wZXJ0aWVzID0ge1xyXG4gICAgICAgIGZlYXR1cmVfZmxhZzogZmxhZyxcclxuICAgICAgICAkc2V0OiAoX2IgPSB7fSwgX2JbXCIkZmVhdHVyZV92aWV3L1wiLmNvbmNhdChmbGFnKV0gPSBmbGFnVmFyaWFudCAhPT0gbnVsbCAmJiBmbGFnVmFyaWFudCAhPT0gdm9pZCAwID8gZmxhZ1ZhcmlhbnQgOiB0cnVlLCBfYiksXHJcbiAgICB9O1xyXG4gICAgaWYgKHR5cGVvZiBmbGFnVmFyaWFudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICBwcm9wZXJ0aWVzLmZlYXR1cmVfZmxhZ192YXJpYW50ID0gZmxhZ1ZhcmlhbnQ7XHJcbiAgICB9XHJcbiAgICBwb3N0aG9nLmNhcHR1cmUoJyRmZWF0dXJlX3ZpZXcnLCBwcm9wZXJ0aWVzKTtcclxufVxyXG5mdW5jdGlvbiBWaXNpYmlsaXR5QW5kQ2xpY2tUcmFja2VyKF9hKSB7XHJcbiAgICB2YXIgZmxhZyA9IF9hLmZsYWcsIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sIG9uSW50ZXJzZWN0ID0gX2Eub25JbnRlcnNlY3QsIG9uQ2xpY2sgPSBfYS5vbkNsaWNrLCB0cmFja1ZpZXcgPSBfYS50cmFja1ZpZXcsIG9wdGlvbnMgPSBfYS5vcHRpb25zLCBwcm9wcyA9IF9fcmVzdChfYSwgW1wiZmxhZ1wiLCBcImNoaWxkcmVuXCIsIFwib25JbnRlcnNlY3RcIiwgXCJvbkNsaWNrXCIsIFwidHJhY2tWaWV3XCIsIFwib3B0aW9uc1wiXSk7XHJcbiAgICB2YXIgcmVmID0gdXNlUmVmKG51bGwpO1xyXG4gICAgdmFyIHBvc3Rob2cgPSB1c2VQb3N0SG9nKCk7XHJcbiAgICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChpc051bGwocmVmLmN1cnJlbnQpIHx8ICF0cmFja1ZpZXcpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHZhciBlbnRyeSA9IF9hWzBdO1xyXG4gICAgICAgICAgICByZXR1cm4gb25JbnRlcnNlY3QoZW50cnkpO1xyXG4gICAgICAgIH0sIF9fYXNzaWduKHsgdGhyZXNob2xkOiAwLjEgfSwgb3B0aW9ucykpO1xyXG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUocmVmLmN1cnJlbnQpO1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBvYnNlcnZlci5kaXNjb25uZWN0KCk7IH07XHJcbiAgICB9LCBbZmxhZywgb3B0aW9ucywgcG9zdGhvZywgcmVmLCB0cmFja1ZpZXcsIG9uSW50ZXJzZWN0XSk7XHJcbiAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX19hc3NpZ24oeyByZWY6IHJlZiB9LCBwcm9wcywgeyBvbkNsaWNrOiBvbkNsaWNrIH0pLCBjaGlsZHJlbikpO1xyXG59XHJcbmZ1bmN0aW9uIFZpc2liaWxpdHlBbmRDbGlja1RyYWNrZXJzKF9hKSB7XHJcbiAgICB2YXIgZmxhZyA9IF9hLmZsYWcsIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sIHRyYWNrSW50ZXJhY3Rpb24gPSBfYS50cmFja0ludGVyYWN0aW9uLCB0cmFja1ZpZXcgPSBfYS50cmFja1ZpZXcsIG9wdGlvbnMgPSBfYS5vcHRpb25zLCBwcm9wcyA9IF9fcmVzdChfYSwgW1wiZmxhZ1wiLCBcImNoaWxkcmVuXCIsIFwidHJhY2tJbnRlcmFjdGlvblwiLCBcInRyYWNrVmlld1wiLCBcIm9wdGlvbnNcIl0pO1xyXG4gICAgdmFyIGNsaWNrVHJhY2tlZFJlZiA9IHVzZVJlZihmYWxzZSk7XHJcbiAgICB2YXIgdmlzaWJpbGl0eVRyYWNrZWRSZWYgPSB1c2VSZWYoZmFsc2UpO1xyXG4gICAgdmFyIHBvc3Rob2cgPSB1c2VQb3N0SG9nKCk7XHJcbiAgICB2YXIgdmFyaWFudCA9IHVzZUZlYXR1cmVGbGFnVmFyaWFudEtleShmbGFnKTtcclxuICAgIHZhciBjYWNoZWRPbkNsaWNrID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghY2xpY2tUcmFja2VkUmVmLmN1cnJlbnQgJiYgdHJhY2tJbnRlcmFjdGlvbikge1xyXG4gICAgICAgICAgICBjYXB0dXJlRmVhdHVyZUludGVyYWN0aW9uKHsgZmxhZzogZmxhZywgcG9zdGhvZzogcG9zdGhvZywgZmxhZ1ZhcmlhbnQ6IHZhcmlhbnQgfSk7XHJcbiAgICAgICAgICAgIGNsaWNrVHJhY2tlZFJlZi5jdXJyZW50ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbZmxhZywgcG9zdGhvZywgdHJhY2tJbnRlcmFjdGlvbiwgdmFyaWFudF0pO1xyXG4gICAgdmFyIG9uSW50ZXJzZWN0ID0gZnVuY3Rpb24gKGVudHJ5KSB7XHJcbiAgICAgICAgaWYgKCF2aXNpYmlsaXR5VHJhY2tlZFJlZi5jdXJyZW50ICYmIGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XHJcbiAgICAgICAgICAgIGNhcHR1cmVGZWF0dXJlVmlldyh7IGZsYWc6IGZsYWcsIHBvc3Rob2c6IHBvc3Rob2csIGZsYWdWYXJpYW50OiB2YXJpYW50IH0pO1xyXG4gICAgICAgICAgICB2aXNpYmlsaXR5VHJhY2tlZFJlZi5jdXJyZW50ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdmFyIHRyYWNrZWRDaGlsZHJlbiA9IENoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XHJcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFZpc2liaWxpdHlBbmRDbGlja1RyYWNrZXIsIF9fYXNzaWduKHsgZmxhZzogZmxhZywgb25DbGljazogY2FjaGVkT25DbGljaywgb25JbnRlcnNlY3Q6IG9uSW50ZXJzZWN0LCB0cmFja1ZpZXc6IHRyYWNrVmlldywgb3B0aW9uczogb3B0aW9ucyB9LCBwcm9wcyksIGNoaWxkKSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCB0cmFja2VkQ2hpbGRyZW4pO1xyXG59XG5cbnZhciBJTklUSUFMX1NUQVRFID0ge1xyXG4gICAgY29tcG9uZW50U3RhY2s6IG51bGwsXHJcbiAgICBlcnJvcjogbnVsbCxcclxufTtcclxudmFyIF9fUE9TVEhPR19FUlJPUl9NRVNTQUdFUyA9IHtcclxuICAgIElOVkFMSURfRkFMTEJBQ0s6ICdbUG9zdEhvZy5qc11bUG9zdEhvZ0Vycm9yQm91bmRhcnldIEludmFsaWQgZmFsbGJhY2sgcHJvcCwgcHJvdmlkZSBhIHZhbGlkIFJlYWN0IGVsZW1lbnQgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSB2YWxpZCBSZWFjdCBlbGVtZW50LicsXHJcbn07XHJcbnZhciBQb3N0SG9nRXJyb3JCb3VuZGFyeSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoUG9zdEhvZ0Vycm9yQm91bmRhcnksIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBQb3N0SG9nRXJyb3JCb3VuZGFyeShwcm9wcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLnN0YXRlID0gSU5JVElBTF9TVEFURTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBQb3N0SG9nRXJyb3JCb3VuZGFyeS5wcm90b3R5cGUuY29tcG9uZW50RGlkQ2F0Y2ggPSBmdW5jdGlvbiAoZXJyb3IsIGVycm9ySW5mbykge1xyXG4gICAgICAgIHZhciBjb21wb25lbnRTdGFjayA9IGVycm9ySW5mby5jb21wb25lbnRTdGFjaztcclxuICAgICAgICB2YXIgYWRkaXRpb25hbFByb3BlcnRpZXMgPSB0aGlzLnByb3BzLmFkZGl0aW9uYWxQcm9wZXJ0aWVzO1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IsXHJcbiAgICAgICAgICAgIGNvbXBvbmVudFN0YWNrOiBjb21wb25lbnRTdGFjayxcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgY3VycmVudFByb3BlcnRpZXM7XHJcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oYWRkaXRpb25hbFByb3BlcnRpZXMpKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRQcm9wZXJ0aWVzID0gYWRkaXRpb25hbFByb3BlcnRpZXMoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgYWRkaXRpb25hbFByb3BlcnRpZXMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRQcm9wZXJ0aWVzID0gYWRkaXRpb25hbFByb3BlcnRpZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjbGllbnQgPSB0aGlzLmNvbnRleHQuY2xpZW50O1xyXG4gICAgICAgIGNsaWVudC5jYXB0dXJlRXhjZXB0aW9uKGVycm9yLCBjdXJyZW50UHJvcGVydGllcyk7XHJcbiAgICB9O1xyXG4gICAgUG9zdEhvZ0Vycm9yQm91bmRhcnkucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCBmYWxsYmFjayA9IF9hLmZhbGxiYWNrO1xyXG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGU7XHJcbiAgICAgICAgaWYgKHN0YXRlLmNvbXBvbmVudFN0YWNrID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24oY2hpbGRyZW4pID8gY2hpbGRyZW4oKSA6IGNoaWxkcmVuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZWxlbWVudCA9IGlzRnVuY3Rpb24oZmFsbGJhY2spXHJcbiAgICAgICAgICAgID8gUmVhY3QuY3JlYXRlRWxlbWVudChmYWxsYmFjaywge1xyXG4gICAgICAgICAgICAgICAgZXJyb3I6IHN0YXRlLmVycm9yLFxyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50U3RhY2s6IHN0YXRlLmNvbXBvbmVudFN0YWNrLFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICA6IGZhbGxiYWNrO1xyXG4gICAgICAgIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS53YXJuKF9fUE9TVEhPR19FUlJPUl9NRVNTQUdFUy5JTlZBTElEX0ZBTExCQUNLKTtcclxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCk7XHJcbiAgICB9O1xyXG4gICAgUG9zdEhvZ0Vycm9yQm91bmRhcnkuY29udGV4dFR5cGUgPSBQb3N0SG9nQ29udGV4dDtcclxuICAgIHJldHVybiBQb3N0SG9nRXJyb3JCb3VuZGFyeTtcclxufShSZWFjdC5Db21wb25lbnQpKTtcblxuZXhwb3J0IHsgUG9zdEhvZ0NvbnRleHQsIFBvc3RIb2dFcnJvckJvdW5kYXJ5LCBQb3N0SG9nRmVhdHVyZSwgUG9zdEhvZ1Byb3ZpZGVyLCB1c2VBY3RpdmVGZWF0dXJlRmxhZ3MsIHVzZUZlYXR1cmVGbGFnRW5hYmxlZCwgdXNlRmVhdHVyZUZsYWdQYXlsb2FkLCB1c2VGZWF0dXJlRmxhZ1ZhcmlhbnRLZXksIHVzZVBvc3RIb2cgfTtcbiJdLCJuYW1lcyI6WyJwb3N0aG9nSnMiLCJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJ1c2VSZWYiLCJ1c2VNZW1vIiwidXNlRWZmZWN0IiwidXNlQ29udGV4dCIsInVzZVN0YXRlIiwidXNlQ2FsbGJhY2siLCJDaGlsZHJlbiIsIlBvc3RIb2dDb250ZXh0IiwiY2xpZW50IiwiaXNEZWVwRXF1YWwiLCJvYmoxIiwib2JqMiIsInZpc2l0ZWQiLCJXZWFrTWFwIiwiaGFzIiwiZ2V0Iiwic2V0Iiwia2V5czEiLCJPYmplY3QiLCJrZXlzIiwia2V5czIiLCJsZW5ndGgiLCJfaSIsImtleXMxXzEiLCJrZXkiLCJpbmNsdWRlcyIsIlBvc3RIb2dQcm92aWRlciIsIl9hIiwiY2hpbGRyZW4iLCJhcGlLZXkiLCJvcHRpb25zIiwicHJldmlvdXNJbml0aWFsaXphdGlvblJlZiIsInBvc3Rob2ciLCJjb25zb2xlIiwid2FybiIsIkpTT04iLCJzdHJpbmdpZnkiLCJwcmV2aW91c0luaXRpYWxpemF0aW9uIiwiY3VycmVudCIsIl9fbG9hZGVkIiwiaW5pdCIsInNldF9jb25maWciLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsInVzZVBvc3RIb2ciLCJ1c2VGZWF0dXJlRmxhZ0VuYWJsZWQiLCJmbGFnIiwiaXNGZWF0dXJlRW5hYmxlZCIsImZlYXR1cmVFbmFibGVkIiwic2V0RmVhdHVyZUVuYWJsZWQiLCJvbkZlYXR1cmVGbGFncyIsInVzZUZlYXR1cmVGbGFnUGF5bG9hZCIsImdldEZlYXR1cmVGbGFnUGF5bG9hZCIsImZlYXR1cmVGbGFnUGF5bG9hZCIsInNldEZlYXR1cmVGbGFnUGF5bG9hZCIsInVzZUFjdGl2ZUZlYXR1cmVGbGFncyIsImZlYXR1cmVGbGFncyIsImdldEZsYWdzIiwic2V0RmVhdHVyZUZsYWdzIiwiZmxhZ3MiLCJ1c2VGZWF0dXJlRmxhZ1ZhcmlhbnRLZXkiLCJnZXRGZWF0dXJlRmxhZyIsImZlYXR1cmVGbGFnVmFyaWFudEtleSIsInNldEZlYXR1cmVGbGFnVmFyaWFudEtleSIsImV4dGVuZFN0YXRpY3MiLCJkIiwiYiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX19leHRlbmRzIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiX18iLCJjb25zdHJ1Y3RvciIsImNyZWF0ZSIsIl9fYXNzaWduIiwiYXNzaWduIiwidCIsInMiLCJpIiwibiIsImFyZ3VtZW50cyIsImFwcGx5IiwiX19yZXN0IiwiZSIsImluZGV4T2YiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImlzRnVuY3Rpb24iLCJmIiwiaXNVbmRlZmluZWQiLCJ4IiwiaXNOdWxsIiwiUG9zdEhvZ0ZlYXR1cmUiLCJtYXRjaCIsImZhbGxiYWNrIiwidmlzaWJpbGl0eU9ic2VydmVyT3B0aW9ucyIsInRyYWNrSW50ZXJhY3Rpb24iLCJ0cmFja1ZpZXciLCJwcm9wcyIsInBheWxvYWQiLCJ2YXJpYW50Iiwic2hvdWxkVHJhY2tJbnRlcmFjdGlvbiIsInNob3VsZFRyYWNrVmlldyIsImNoaWxkTm9kZSIsIlZpc2liaWxpdHlBbmRDbGlja1RyYWNrZXJzIiwiRnJhZ21lbnQiLCJjYXB0dXJlRmVhdHVyZUludGVyYWN0aW9uIiwiX2IiLCJmbGFnVmFyaWFudCIsInByb3BlcnRpZXMiLCJmZWF0dXJlX2ZsYWciLCIkc2V0IiwiY29uY2F0IiwiZmVhdHVyZV9mbGFnX3ZhcmlhbnQiLCJjYXB0dXJlIiwiY2FwdHVyZUZlYXR1cmVWaWV3IiwiVmlzaWJpbGl0eUFuZENsaWNrVHJhY2tlciIsIm9uSW50ZXJzZWN0Iiwib25DbGljayIsInJlZiIsIm9ic2VydmVyIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJlbnRyeSIsInRocmVzaG9sZCIsIm9ic2VydmUiLCJkaXNjb25uZWN0IiwiY2xpY2tUcmFja2VkUmVmIiwidmlzaWJpbGl0eVRyYWNrZWRSZWYiLCJjYWNoZWRPbkNsaWNrIiwiaXNJbnRlcnNlY3RpbmciLCJ0cmFja2VkQ2hpbGRyZW4iLCJtYXAiLCJjaGlsZCIsIklOSVRJQUxfU1RBVEUiLCJjb21wb25lbnRTdGFjayIsImVycm9yIiwiX19QT1NUSE9HX0VSUk9SX01FU1NBR0VTIiwiSU5WQUxJRF9GQUxMQkFDSyIsIlBvc3RIb2dFcnJvckJvdW5kYXJ5IiwiX3N1cGVyIiwiX3RoaXMiLCJzdGF0ZSIsImNvbXBvbmVudERpZENhdGNoIiwiZXJyb3JJbmZvIiwiYWRkaXRpb25hbFByb3BlcnRpZXMiLCJzZXRTdGF0ZSIsImN1cnJlbnRQcm9wZXJ0aWVzIiwiY29udGV4dCIsImNhcHR1cmVFeGNlcHRpb24iLCJyZW5kZXIiLCJlbGVtZW50IiwiaXNWYWxpZEVsZW1lbnQiLCJjb250ZXh0VHlwZSIsIkNvbXBvbmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/posthog-js/react/dist/esm/index.js\n");

/***/ })

};
;